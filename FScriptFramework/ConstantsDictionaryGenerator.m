/*   ConstantsDictionaryGenerator.m Copyright (c) 2003-2006 Philippe Mougin.  */
/*   This software is open source. See the license.     */   
 
#import "ConstantsDictionaryGenerator.h"
#import <AddressBook/AddressBook.h>
#import <AddressBook/ABGlobalsC.h>
#import <AddressBook/ABPeoplePickerView.h>
#import <AddressBook/ABPeoplePickerC.h>
#import <AppKit/AppKit.h> 
#import <AppKit/NSAccessibility.h>
#import <AppKit/NSTypesetter.h>
#import <AppKit/NSMovieView.h> 
#import <Automator/Automator.h>
#import <CalendarStore/CalendarStore.h>
#import <CoreAudioKit/CoreAudioKit.h>
#import <DiscRecording/DiscRecording.h>
#import <DirectoryService/DirectoryService.h>
#import <DiscRecording/DiscRecording.h>
#import <DiscRecordingUI/DiscRecordingUI.h>
#import <DVDPlayback/DVDPlayback.h>
#import <ExceptionHandling/NSExceptionHandler.h>
#import <Foundation/Foundation.h>
#import <Foundation/NSDebug.h>
#import <ICADevices/ICADevices.h>
#import <InputMethodKit/InputMethodKit.h>
#import <InstallerPlugins/InstallerPlugins.h>
#import <InstantMessage/IMService.h>
#import <InstantMessage/IMAVManager.h>
#import <IOBluetooth/IOBluetooth.h>
#import <IOBluetooth/objc/IOBluetoothHandsFreeGateway.h>
#import <IOBluetooth/objc/IOBluetoothRFCOMMAudioController.h>
#import <IOBluetoothUI/IOBluetoothUI.h>
#import <JavaScriptCore/JavaScriptCore.h>
//#import <JavaVM/JavaVM.h>
#import <LatentSemanticMapping/LatentSemanticMapping.h>
#import <Message/NSMailDelivery.h>
#import <OpenGL/OpenGL.h>
#import <OpenGL/glu.h>
#import <OpenGL/CGLProfilerFunctionEnum.h>
#import <OpenGL/CGLProfiler.h>
#import <OpenGL/CGLRenderers.h>
#import <OSAKit/OSAKit.h>
#import <PreferencePanes/PreferencePanes.h>
#import <PubSub/PubSub.h>
#import <Quartz/Quartz.h>
#import <QuartzCore/QuartzCore.h>
#import <QTKit/QTKit.h>
#import <QTKit/QTMovie.h>
#import <SyncServices/SyncServices.h>
#import <SecurityFoundation/SFAuthorization.h>
#import <SecurityInterface/SFAuthorizationView.h>
#import <SecurityInterface/SFAuthorizationPluginView.h>
#import <SystemConfiguration/SystemConfiguration.h>
#import <WebKit/WebKit.h>
//#import <WebKit/WebJavaPlugIn.h>
#import <XgridFoundation/XgridFoundation.h>

#import "Number.h"

@implementation ConstantsDictionaryGenerator

// ConstantsDictionaryGenerator generateConstantsDictionaryFileLeopard

+ (BOOL)generateConstantsDictionaryFileLeopard 
{ 
  NSMutableDictionary *d = [NSMutableDictionary dictionary];  
/*
if ([ABPeoplePickerDisplayedPropertyDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerDisplayedPropertyDidChangeNotification forKey:@"ABPeoplePickerDisplayedPropertyDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerDisplayedPropertyDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerDisplayedPropertyDidChangeNotification description]]);
if ([ABPeoplePickerGroupSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerGroupSelectionDidChangeNotification forKey:@"ABPeoplePickerGroupSelectionDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerGroupSelectionDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerGroupSelectionDidChangeNotification description]]);
if ([ABPeoplePickerNameSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerNameSelectionDidChangeNotification forKey:@"ABPeoplePickerNameSelectionDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerNameSelectionDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerNameSelectionDidChangeNotification description]]);
if ([ABPeoplePickerValueSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerValueSelectionDidChangeNotification forKey:@"ABPeoplePickerValueSelectionDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerValueSelectionDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerValueSelectionDidChangeNotification description]]);
if ([kABAIMHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABAIMHomeLabel forKey:@"kABAIMHomeLabel"]; else NSLog([@"Can't initialize kABAIMHomeLabel with object " stringByAppendingString:[kABAIMHomeLabel description]]);
if ([kABAIMInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABAIMInstantProperty forKey:@"kABAIMInstantProperty"]; else NSLog([@"Can't initialize kABAIMInstantProperty with object " stringByAppendingString:[kABAIMInstantProperty description]]);
if ([kABAIMWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABAIMWorkLabel forKey:@"kABAIMWorkLabel"]; else NSLog([@"Can't initialize kABAIMWorkLabel with object " stringByAppendingString:[kABAIMWorkLabel description]]);
if ([kABAddressCityKey isKindOfClass:[NSString class]]) [d setObject:kABAddressCityKey forKey:@"kABAddressCityKey"]; else NSLog([@"Can't initialize kABAddressCityKey with object " stringByAppendingString:[kABAddressCityKey description]]);
if ([kABAddressCountryCodeKey isKindOfClass:[NSString class]]) [d setObject:kABAddressCountryCodeKey forKey:@"kABAddressCountryCodeKey"]; else NSLog([@"Can't initialize kABAddressCountryCodeKey with object " stringByAppendingString:[kABAddressCountryCodeKey description]]);
if ([kABAddressCountryKey isKindOfClass:[NSString class]]) [d setObject:kABAddressCountryKey forKey:@"kABAddressCountryKey"]; else NSLog([@"Can't initialize kABAddressCountryKey with object " stringByAppendingString:[kABAddressCountryKey description]]);
if ([kABAddressHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABAddressHomeLabel forKey:@"kABAddressHomeLabel"]; else NSLog([@"Can't initialize kABAddressHomeLabel with object " stringByAppendingString:[kABAddressHomeLabel description]]);
if ([kABAddressProperty isKindOfClass:[NSString class]]) [d setObject:kABAddressProperty forKey:@"kABAddressProperty"]; else NSLog([@"Can't initialize kABAddressProperty with object " stringByAppendingString:[kABAddressProperty description]]);
if ([kABAddressStateKey isKindOfClass:[NSString class]]) [d setObject:kABAddressStateKey forKey:@"kABAddressStateKey"]; else NSLog([@"Can't initialize kABAddressStateKey with object " stringByAppendingString:[kABAddressStateKey description]]);
if ([kABAddressStreetKey isKindOfClass:[NSString class]]) [d setObject:kABAddressStreetKey forKey:@"kABAddressStreetKey"]; else NSLog([@"Can't initialize kABAddressStreetKey with object " stringByAppendingString:[kABAddressStreetKey description]]);
if ([kABAddressWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABAddressWorkLabel forKey:@"kABAddressWorkLabel"]; else NSLog([@"Can't initialize kABAddressWorkLabel with object " stringByAppendingString:[kABAddressWorkLabel description]]);
if ([kABAddressZIPKey isKindOfClass:[NSString class]]) [d setObject:kABAddressZIPKey forKey:@"kABAddressZIPKey"]; else NSLog([@"Can't initialize kABAddressZIPKey with object " stringByAppendingString:[kABAddressZIPKey description]]);
if ([kABAnniversaryLabel isKindOfClass:[NSString class]]) [d setObject:kABAnniversaryLabel forKey:@"kABAnniversaryLabel"]; else NSLog([@"Can't initialize kABAnniversaryLabel with object " stringByAppendingString:[kABAnniversaryLabel description]]);
if ([kABAssistantLabel isKindOfClass:[NSString class]]) [d setObject:kABAssistantLabel forKey:@"kABAssistantLabel"]; else NSLog([@"Can't initialize kABAssistantLabel with object " stringByAppendingString:[kABAssistantLabel description]]);
if ([kABBirthdayProperty isKindOfClass:[NSString class]]) [d setObject:kABBirthdayProperty forKey:@"kABBirthdayProperty"]; else NSLog([@"Can't initialize kABBirthdayProperty with object " stringByAppendingString:[kABBirthdayProperty description]]);
if ([kABBrotherLabel isKindOfClass:[NSString class]]) [d setObject:kABBrotherLabel forKey:@"kABBrotherLabel"]; else NSLog([@"Can't initialize kABBrotherLabel with object " stringByAppendingString:[kABBrotherLabel description]]);
if ([kABCalendarURIsProperty isKindOfClass:[NSString class]]) [d setObject:kABCalendarURIsProperty forKey:@"kABCalendarURIsProperty"]; else NSLog([@"Can't initialize kABCalendarURIsProperty with object " stringByAppendingString:[kABCalendarURIsProperty description]]);
if ([kABChildLabel isKindOfClass:[NSString class]]) [d setObject:kABChildLabel forKey:@"kABChildLabel"]; else NSLog([@"Can't initialize kABChildLabel with object " stringByAppendingString:[kABChildLabel description]]);
if ([kABCreationDateProperty isKindOfClass:[NSString class]]) [d setObject:kABCreationDateProperty forKey:@"kABCreationDateProperty"]; else NSLog([@"Can't initialize kABCreationDateProperty with object " stringByAppendingString:[kABCreationDateProperty description]]);
if ([kABDatabaseChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:kABDatabaseChangedExternallyNotification forKey:@"kABDatabaseChangedExternallyNotification"]; else NSLog([@"Can't initialize kABDatabaseChangedExternallyNotification with object " stringByAppendingString:[kABDatabaseChangedExternallyNotification description]]);
if ([kABDatabaseChangedNotification isKindOfClass:[NSString class]]) [d setObject:kABDatabaseChangedNotification forKey:@"kABDatabaseChangedNotification"]; else NSLog([@"Can't initialize kABDatabaseChangedNotification with object " stringByAppendingString:[kABDatabaseChangedNotification description]]);
if ([kABDeletedRecords isKindOfClass:[NSString class]]) [d setObject:kABDeletedRecords forKey:@"kABDeletedRecords"]; else NSLog([@"Can't initialize kABDeletedRecords with object " stringByAppendingString:[kABDeletedRecords description]]);
if ([kABDepartmentProperty isKindOfClass:[NSString class]]) [d setObject:kABDepartmentProperty forKey:@"kABDepartmentProperty"]; else NSLog([@"Can't initialize kABDepartmentProperty with object " stringByAppendingString:[kABDepartmentProperty description]]);
if ([kABEmailHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABEmailHomeLabel forKey:@"kABEmailHomeLabel"]; else NSLog([@"Can't initialize kABEmailHomeLabel with object " stringByAppendingString:[kABEmailHomeLabel description]]);
if ([kABEmailProperty isKindOfClass:[NSString class]]) [d setObject:kABEmailProperty forKey:@"kABEmailProperty"]; else NSLog([@"Can't initialize kABEmailProperty with object " stringByAppendingString:[kABEmailProperty description]]);
if ([kABEmailWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABEmailWorkLabel forKey:@"kABEmailWorkLabel"]; else NSLog([@"Can't initialize kABEmailWorkLabel with object " stringByAppendingString:[kABEmailWorkLabel description]]);
if ([kABFatherLabel isKindOfClass:[NSString class]]) [d setObject:kABFatherLabel forKey:@"kABFatherLabel"]; else NSLog([@"Can't initialize kABFatherLabel with object " stringByAppendingString:[kABFatherLabel description]]);
if ([kABFirstNamePhoneticProperty isKindOfClass:[NSString class]]) [d setObject:kABFirstNamePhoneticProperty forKey:@"kABFirstNamePhoneticProperty"]; else NSLog([@"Can't initialize kABFirstNamePhoneticProperty with object " stringByAppendingString:[kABFirstNamePhoneticProperty description]]);
if ([kABFirstNameProperty isKindOfClass:[NSString class]]) [d setObject:kABFirstNameProperty forKey:@"kABFirstNameProperty"]; else NSLog([@"Can't initialize kABFirstNameProperty with object " stringByAppendingString:[kABFirstNameProperty description]]);
if ([kABFriendLabel isKindOfClass:[NSString class]]) [d setObject:kABFriendLabel forKey:@"kABFriendLabel"]; else NSLog([@"Can't initialize kABFriendLabel with object " stringByAppendingString:[kABFriendLabel description]]);
if ([kABGroupNameProperty isKindOfClass:[NSString class]]) [d setObject:kABGroupNameProperty forKey:@"kABGroupNameProperty"]; else NSLog([@"Can't initialize kABGroupNameProperty with object " stringByAppendingString:[kABGroupNameProperty description]]);
if ([kABHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABHomeLabel forKey:@"kABHomeLabel"]; else NSLog([@"Can't initialize kABHomeLabel with object " stringByAppendingString:[kABHomeLabel description]]);
if ([kABHomePageLabel isKindOfClass:[NSString class]]) [d setObject:kABHomePageLabel forKey:@"kABHomePageLabel"]; else NSLog([@"Can't initialize kABHomePageLabel with object " stringByAppendingString:[kABHomePageLabel description]]);
if ([kABHomePageProperty isKindOfClass:[NSString class]]) [d setObject:kABHomePageProperty forKey:@"kABHomePageProperty"]; else NSLog([@"Can't initialize kABHomePageProperty with object " stringByAppendingString:[kABHomePageProperty description]]);
if ([kABICQHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABICQHomeLabel forKey:@"kABICQHomeLabel"]; else NSLog([@"Can't initialize kABICQHomeLabel with object " stringByAppendingString:[kABICQHomeLabel description]]);
if ([kABICQInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABICQInstantProperty forKey:@"kABICQInstantProperty"]; else NSLog([@"Can't initialize kABICQInstantProperty with object " stringByAppendingString:[kABICQInstantProperty description]]);
if ([kABICQWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABICQWorkLabel forKey:@"kABICQWorkLabel"]; else NSLog([@"Can't initialize kABICQWorkLabel with object " stringByAppendingString:[kABICQWorkLabel description]]);
if ([kABInsertedRecords isKindOfClass:[NSString class]]) [d setObject:kABInsertedRecords forKey:@"kABInsertedRecords"]; else NSLog([@"Can't initialize kABInsertedRecords with object " stringByAppendingString:[kABInsertedRecords description]]);
if ([kABJabberHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABJabberHomeLabel forKey:@"kABJabberHomeLabel"]; else NSLog([@"Can't initialize kABJabberHomeLabel with object " stringByAppendingString:[kABJabberHomeLabel description]]);
if ([kABJabberInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABJabberInstantProperty forKey:@"kABJabberInstantProperty"]; else NSLog([@"Can't initialize kABJabberInstantProperty with object " stringByAppendingString:[kABJabberInstantProperty description]]);
if ([kABJabberWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABJabberWorkLabel forKey:@"kABJabberWorkLabel"]; else NSLog([@"Can't initialize kABJabberWorkLabel with object " stringByAppendingString:[kABJabberWorkLabel description]]);
if ([kABJobTitleProperty isKindOfClass:[NSString class]]) [d setObject:kABJobTitleProperty forKey:@"kABJobTitleProperty"]; else NSLog([@"Can't initialize kABJobTitleProperty with object " stringByAppendingString:[kABJobTitleProperty description]]);
if ([kABLastNamePhoneticProperty isKindOfClass:[NSString class]]) [d setObject:kABLastNamePhoneticProperty forKey:@"kABLastNamePhoneticProperty"]; else NSLog([@"Can't initialize kABLastNamePhoneticProperty with object " stringByAppendingString:[kABLastNamePhoneticProperty description]]);
if ([kABLastNameProperty isKindOfClass:[NSString class]]) [d setObject:kABLastNameProperty forKey:@"kABLastNameProperty"]; else NSLog([@"Can't initialize kABLastNameProperty with object " stringByAppendingString:[kABLastNameProperty description]]);
if ([kABMSNHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABMSNHomeLabel forKey:@"kABMSNHomeLabel"]; else NSLog([@"Can't initialize kABMSNHomeLabel with object " stringByAppendingString:[kABMSNHomeLabel description]]);
if ([kABMSNInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABMSNInstantProperty forKey:@"kABMSNInstantProperty"]; else NSLog([@"Can't initialize kABMSNInstantProperty with object " stringByAppendingString:[kABMSNInstantProperty description]]);
if ([kABMSNWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABMSNWorkLabel forKey:@"kABMSNWorkLabel"]; else NSLog([@"Can't initialize kABMSNWorkLabel with object " stringByAppendingString:[kABMSNWorkLabel description]]);
if ([kABMaidenNameProperty isKindOfClass:[NSString class]]) [d setObject:kABMaidenNameProperty forKey:@"kABMaidenNameProperty"]; else NSLog([@"Can't initialize kABMaidenNameProperty with object " stringByAppendingString:[kABMaidenNameProperty description]]);
if ([kABManagerLabel isKindOfClass:[NSString class]]) [d setObject:kABManagerLabel forKey:@"kABManagerLabel"]; else NSLog([@"Can't initialize kABManagerLabel with object " stringByAppendingString:[kABManagerLabel description]]);
if ([kABMiddleNamePhoneticProperty isKindOfClass:[NSString class]]) [d setObject:kABMiddleNamePhoneticProperty forKey:@"kABMiddleNamePhoneticProperty"]; else NSLog([@"Can't initialize kABMiddleNamePhoneticProperty with object " stringByAppendingString:[kABMiddleNamePhoneticProperty description]]);
if ([kABMiddleNameProperty isKindOfClass:[NSString class]]) [d setObject:kABMiddleNameProperty forKey:@"kABMiddleNameProperty"]; else NSLog([@"Can't initialize kABMiddleNameProperty with object " stringByAppendingString:[kABMiddleNameProperty description]]);
if ([kABModificationDateProperty isKindOfClass:[NSString class]]) [d setObject:kABModificationDateProperty forKey:@"kABModificationDateProperty"]; else NSLog([@"Can't initialize kABModificationDateProperty with object " stringByAppendingString:[kABModificationDateProperty description]]);
if ([kABMotherLabel isKindOfClass:[NSString class]]) [d setObject:kABMotherLabel forKey:@"kABMotherLabel"]; else NSLog([@"Can't initialize kABMotherLabel with object " stringByAppendingString:[kABMotherLabel description]]);
if ([kABNicknameProperty isKindOfClass:[NSString class]]) [d setObject:kABNicknameProperty forKey:@"kABNicknameProperty"]; else NSLog([@"Can't initialize kABNicknameProperty with object " stringByAppendingString:[kABNicknameProperty description]]);
if ([kABNoteProperty isKindOfClass:[NSString class]]) [d setObject:kABNoteProperty forKey:@"kABNoteProperty"]; else NSLog([@"Can't initialize kABNoteProperty with object " stringByAppendingString:[kABNoteProperty description]]);
if ([kABOrganizationProperty isKindOfClass:[NSString class]]) [d setObject:kABOrganizationProperty forKey:@"kABOrganizationProperty"]; else NSLog([@"Can't initialize kABOrganizationProperty with object " stringByAppendingString:[kABOrganizationProperty description]]);
if ([kABOtherDatesProperty isKindOfClass:[NSString class]]) [d setObject:kABOtherDatesProperty forKey:@"kABOtherDatesProperty"]; else NSLog([@"Can't initialize kABOtherDatesProperty with object " stringByAppendingString:[kABOtherDatesProperty description]]);
if ([kABOtherLabel isKindOfClass:[NSString class]]) [d setObject:kABOtherLabel forKey:@"kABOtherLabel"]; else NSLog([@"Can't initialize kABOtherLabel with object " stringByAppendingString:[kABOtherLabel description]]);
if ([kABParentLabel isKindOfClass:[NSString class]]) [d setObject:kABParentLabel forKey:@"kABParentLabel"]; else NSLog([@"Can't initialize kABParentLabel with object " stringByAppendingString:[kABParentLabel description]]);
if ([kABPartnerLabel isKindOfClass:[NSString class]]) [d setObject:kABPartnerLabel forKey:@"kABPartnerLabel"]; else NSLog([@"Can't initialize kABPartnerLabel with object " stringByAppendingString:[kABPartnerLabel description]]);
if ([kABPersonFlags isKindOfClass:[NSString class]]) [d setObject:kABPersonFlags forKey:@"kABPersonFlags"]; else NSLog([@"Can't initialize kABPersonFlags with object " stringByAppendingString:[kABPersonFlags description]]);
if ([kABPhoneHomeFAXLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneHomeFAXLabel forKey:@"kABPhoneHomeFAXLabel"]; else NSLog([@"Can't initialize kABPhoneHomeFAXLabel with object " stringByAppendingString:[kABPhoneHomeFAXLabel description]]);
if ([kABPhoneHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneHomeLabel forKey:@"kABPhoneHomeLabel"]; else NSLog([@"Can't initialize kABPhoneHomeLabel with object " stringByAppendingString:[kABPhoneHomeLabel description]]);
if ([kABPhoneMainLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneMainLabel forKey:@"kABPhoneMainLabel"]; else NSLog([@"Can't initialize kABPhoneMainLabel with object " stringByAppendingString:[kABPhoneMainLabel description]]);
if ([kABPhoneMobileLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneMobileLabel forKey:@"kABPhoneMobileLabel"]; else NSLog([@"Can't initialize kABPhoneMobileLabel with object " stringByAppendingString:[kABPhoneMobileLabel description]]);
if ([kABPhonePagerLabel isKindOfClass:[NSString class]]) [d setObject:kABPhonePagerLabel forKey:@"kABPhonePagerLabel"]; else NSLog([@"Can't initialize kABPhonePagerLabel with object " stringByAppendingString:[kABPhonePagerLabel description]]);
if ([kABPhoneProperty isKindOfClass:[NSString class]]) [d setObject:kABPhoneProperty forKey:@"kABPhoneProperty"]; else NSLog([@"Can't initialize kABPhoneProperty with object " stringByAppendingString:[kABPhoneProperty description]]);
if ([kABPhoneWorkFAXLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneWorkFAXLabel forKey:@"kABPhoneWorkFAXLabel"]; else NSLog([@"Can't initialize kABPhoneWorkFAXLabel with object " stringByAppendingString:[kABPhoneWorkFAXLabel description]]);
if ([kABPhoneWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneWorkLabel forKey:@"kABPhoneWorkLabel"]; else NSLog([@"Can't initialize kABPhoneWorkLabel with object " stringByAppendingString:[kABPhoneWorkLabel description]]);
if ([kABRelatedNamesProperty isKindOfClass:[NSString class]]) [d setObject:kABRelatedNamesProperty forKey:@"kABRelatedNamesProperty"]; else NSLog([@"Can't initialize kABRelatedNamesProperty with object " stringByAppendingString:[kABRelatedNamesProperty description]]);
if ([kABSisterLabel isKindOfClass:[NSString class]]) [d setObject:kABSisterLabel forKey:@"kABSisterLabel"]; else NSLog([@"Can't initialize kABSisterLabel with object " stringByAppendingString:[kABSisterLabel description]]);
if ([kABSpouseLabel isKindOfClass:[NSString class]]) [d setObject:kABSpouseLabel forKey:@"kABSpouseLabel"]; else NSLog([@"Can't initialize kABSpouseLabel with object " stringByAppendingString:[kABSpouseLabel description]]);
if ([kABSuffixProperty isKindOfClass:[NSString class]]) [d setObject:kABSuffixProperty forKey:@"kABSuffixProperty"]; else NSLog([@"Can't initialize kABSuffixProperty with object " stringByAppendingString:[kABSuffixProperty description]]);
if ([kABTitleProperty isKindOfClass:[NSString class]]) [d setObject:kABTitleProperty forKey:@"kABTitleProperty"]; else NSLog([@"Can't initialize kABTitleProperty with object " stringByAppendingString:[kABTitleProperty description]]);
if ([kABUIDProperty isKindOfClass:[NSString class]]) [d setObject:kABUIDProperty forKey:@"kABUIDProperty"]; else NSLog([@"Can't initialize kABUIDProperty with object " stringByAppendingString:[kABUIDProperty description]]);
if ([kABURLsProperty isKindOfClass:[NSString class]]) [d setObject:kABURLsProperty forKey:@"kABURLsProperty"]; else NSLog([@"Can't initialize kABURLsProperty with object " stringByAppendingString:[kABURLsProperty description]]);
if ([kABUpdatedRecords isKindOfClass:[NSString class]]) [d setObject:kABUpdatedRecords forKey:@"kABUpdatedRecords"]; else NSLog([@"Can't initialize kABUpdatedRecords with object " stringByAppendingString:[kABUpdatedRecords description]]);
if ([kABWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABWorkLabel forKey:@"kABWorkLabel"]; else NSLog([@"Can't initialize kABWorkLabel with object " stringByAppendingString:[kABWorkLabel description]]);
if ([kABYahooHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABYahooHomeLabel forKey:@"kABYahooHomeLabel"]; else NSLog([@"Can't initialize kABYahooHomeLabel with object " stringByAppendingString:[kABYahooHomeLabel description]]);
if ([kABYahooInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABYahooInstantProperty forKey:@"kABYahooInstantProperty"]; else NSLog([@"Can't initialize kABYahooInstantProperty with object " stringByAppendingString:[kABYahooInstantProperty description]]);
if ([kABYahooWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABYahooWorkLabel forKey:@"kABYahooWorkLabel"]; else NSLog([@"Can't initialize kABYahooWorkLabel with object " stringByAppendingString:[kABYahooWorkLabel description]]);
[d setObject:[Number numberWithDouble:ABMultipleValueSelection] forKey:@"ABMultipleValueSelection"];
[d setObject:[Number numberWithDouble:ABNoValueSelection] forKey:@"ABNoValueSelection"];
[d setObject:[Number numberWithDouble:ABSingleValueSelection] forKey:@"ABSingleValueSelection"];
[d setObject:[Number numberWithDouble:kABArrayProperty] forKey:@"kABArrayProperty"];
[d setObject:[Number numberWithDouble:kABBitsInBitFieldMatch] forKey:@"kABBitsInBitFieldMatch"];
[d setObject:[Number numberWithDouble:kABContainsSubString] forKey:@"kABContainsSubString"];
[d setObject:[Number numberWithDouble:kABContainsSubStringCaseInsensitive] forKey:@"kABContainsSubStringCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABDataProperty] forKey:@"kABDataProperty"];
[d setObject:[Number numberWithDouble:kABDateProperty] forKey:@"kABDateProperty"];
[d setObject:[Number numberWithDouble:kABDefaultNameOrdering] forKey:@"kABDefaultNameOrdering"];
[d setObject:[Number numberWithDouble:kABDictionaryProperty] forKey:@"kABDictionaryProperty"];
[d setObject:[Number numberWithDouble:kABDoesNotContainSubString] forKey:@"kABDoesNotContainSubString"];
[d setObject:[Number numberWithDouble:kABDoesNotContainSubStringCaseInsensitive] forKey:@"kABDoesNotContainSubStringCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABEqual] forKey:@"kABEqual"];
[d setObject:[Number numberWithDouble:kABEqualCaseInsensitive] forKey:@"kABEqualCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABErrorInProperty] forKey:@"kABErrorInProperty"];
[d setObject:[Number numberWithDouble:kABFirstNameFirst] forKey:@"kABFirstNameFirst"];
[d setObject:[Number numberWithDouble:kABGreaterThan] forKey:@"kABGreaterThan"];
[d setObject:[Number numberWithDouble:kABGreaterThanOrEqual] forKey:@"kABGreaterThanOrEqual"];
[d setObject:[Number numberWithDouble:kABIntegerProperty] forKey:@"kABIntegerProperty"];
[d setObject:[Number numberWithDouble:kABLastNameFirst] forKey:@"kABLastNameFirst"];
[d setObject:[Number numberWithDouble:kABLessThan] forKey:@"kABLessThan"];
[d setObject:[Number numberWithDouble:kABLessThanOrEqual] forKey:@"kABLessThanOrEqual"];
[d setObject:[Number numberWithDouble:kABMultiArrayProperty] forKey:@"kABMultiArrayProperty"];
[d setObject:[Number numberWithDouble:kABMultiDataProperty] forKey:@"kABMultiDataProperty"];
[d setObject:[Number numberWithDouble:kABMultiDateProperty] forKey:@"kABMultiDateProperty"];
[d setObject:[Number numberWithDouble:kABMultiDictionaryProperty] forKey:@"kABMultiDictionaryProperty"];
[d setObject:[Number numberWithDouble:kABMultiIntegerProperty] forKey:@"kABMultiIntegerProperty"];
[d setObject:[Number numberWithDouble:kABMultiRealProperty] forKey:@"kABMultiRealProperty"];
[d setObject:[Number numberWithDouble:kABMultiStringProperty] forKey:@"kABMultiStringProperty"];
[d setObject:[Number numberWithDouble:kABMultiValueMask] forKey:@"kABMultiValueMask"];
[d setObject:[Number numberWithDouble:kABNameOrderingMask] forKey:@"kABNameOrderingMask"];
[d setObject:[Number numberWithDouble:kABNotEqual] forKey:@"kABNotEqual"];
[d setObject:[Number numberWithDouble:kABNotEqualCaseInsensitive] forKey:@"kABNotEqualCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalAroundToday] forKey:@"kABNotWithinIntervalAroundToday"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalAroundTodayYearless] forKey:@"kABNotWithinIntervalAroundTodayYearless"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalFromToday] forKey:@"kABNotWithinIntervalFromToday"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalFromTodayYearless] forKey:@"kABNotWithinIntervalFromTodayYearless"];
[d setObject:[Number numberWithDouble:kABPickerAllowGroupSelection] forKey:@"kABPickerAllowGroupSelection"];
[d setObject:[Number numberWithDouble:kABPickerAllowMultipleSelection] forKey:@"kABPickerAllowMultipleSelection"];
[d setObject:[Number numberWithDouble:kABPickerMultipleValueSelection] forKey:@"kABPickerMultipleValueSelection"];
[d setObject:[Number numberWithDouble:kABPickerSingleValueSelection] forKey:@"kABPickerSingleValueSelection"];
[d setObject:[Number numberWithDouble:kABPrefixMatch] forKey:@"kABPrefixMatch"];
[d setObject:[Number numberWithDouble:kABPrefixMatchCaseInsensitive] forKey:@"kABPrefixMatchCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABRealProperty] forKey:@"kABRealProperty"];
[d setObject:[Number numberWithDouble:kABSearchAnd] forKey:@"kABSearchAnd"];
[d setObject:[Number numberWithDouble:kABSearchOr] forKey:@"kABSearchOr"];
[d setObject:[Number numberWithDouble:kABShowAsCompany] forKey:@"kABShowAsCompany"];
[d setObject:[Number numberWithDouble:kABShowAsMask] forKey:@"kABShowAsMask"];
[d setObject:[Number numberWithDouble:kABShowAsPerson] forKey:@"kABShowAsPerson"];
[d setObject:[Number numberWithDouble:kABStringProperty] forKey:@"kABStringProperty"];
[d setObject:[Number numberWithDouble:kABSuffixMatch] forKey:@"kABSuffixMatch"];
[d setObject:[Number numberWithDouble:kABSuffixMatchCaseInsensitive] forKey:@"kABSuffixMatchCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABWithinIntervalAroundToday] forKey:@"kABWithinIntervalAroundToday"];
[d setObject:[Number numberWithDouble:kABWithinIntervalAroundTodayYearless] forKey:@"kABWithinIntervalAroundTodayYearless"];
[d setObject:[Number numberWithDouble:kABWithinIntervalFromToday] forKey:@"kABWithinIntervalFromToday"];
[d setObject:[Number numberWithDouble:kABWithinIntervalFromTodayYearless] forKey:@"kABWithinIntervalFromTodayYearless"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerDisplayedPropertyChanged] forKey:@"kEventABPeoplePickerDisplayedPropertyChanged"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerGroupDoubleClicked] forKey:@"kEventABPeoplePickerGroupDoubleClicked"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerGroupSelectionChanged] forKey:@"kEventABPeoplePickerGroupSelectionChanged"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerNameDoubleClicked] forKey:@"kEventABPeoplePickerNameDoubleClicked"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerNameSelectionChanged] forKey:@"kEventABPeoplePickerNameSelectionChanged"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerValueSelectionChanged] forKey:@"kEventABPeoplePickerValueSelectionChanged"];
[d setObject:[Number numberWithDouble:kEventClassABPeoplePicker] forKey:@"kEventClassABPeoplePicker"];
[d setObject:[Number numberWithDouble:kEventParamABPickerRef] forKey:@"kEventParamABPickerRef"];
if ([ABPeoplePickerDisplayedPropertyDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerDisplayedPropertyDidChangeNotification forKey:@"ABPeoplePickerDisplayedPropertyDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerDisplayedPropertyDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerDisplayedPropertyDidChangeNotification description]]);
if ([ABPeoplePickerGroupSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerGroupSelectionDidChangeNotification forKey:@"ABPeoplePickerGroupSelectionDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerGroupSelectionDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerGroupSelectionDidChangeNotification description]]);
if ([ABPeoplePickerNameSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerNameSelectionDidChangeNotification forKey:@"ABPeoplePickerNameSelectionDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerNameSelectionDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerNameSelectionDidChangeNotification description]]);
if ([ABPeoplePickerValueSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:ABPeoplePickerValueSelectionDidChangeNotification forKey:@"ABPeoplePickerValueSelectionDidChangeNotification"]; else NSLog([@"Can't initialize ABPeoplePickerValueSelectionDidChangeNotification with object " stringByAppendingString:[ABPeoplePickerValueSelectionDidChangeNotification description]]);
if ([kABAIMHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABAIMHomeLabel forKey:@"kABAIMHomeLabel"]; else NSLog([@"Can't initialize kABAIMHomeLabel with object " stringByAppendingString:[kABAIMHomeLabel description]]);
if ([kABAIMInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABAIMInstantProperty forKey:@"kABAIMInstantProperty"]; else NSLog([@"Can't initialize kABAIMInstantProperty with object " stringByAppendingString:[kABAIMInstantProperty description]]);
if ([kABAIMWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABAIMWorkLabel forKey:@"kABAIMWorkLabel"]; else NSLog([@"Can't initialize kABAIMWorkLabel with object " stringByAppendingString:[kABAIMWorkLabel description]]);
if ([kABAddressCityKey isKindOfClass:[NSString class]]) [d setObject:kABAddressCityKey forKey:@"kABAddressCityKey"]; else NSLog([@"Can't initialize kABAddressCityKey with object " stringByAppendingString:[kABAddressCityKey description]]);
if ([kABAddressCountryCodeKey isKindOfClass:[NSString class]]) [d setObject:kABAddressCountryCodeKey forKey:@"kABAddressCountryCodeKey"]; else NSLog([@"Can't initialize kABAddressCountryCodeKey with object " stringByAppendingString:[kABAddressCountryCodeKey description]]);
if ([kABAddressCountryKey isKindOfClass:[NSString class]]) [d setObject:kABAddressCountryKey forKey:@"kABAddressCountryKey"]; else NSLog([@"Can't initialize kABAddressCountryKey with object " stringByAppendingString:[kABAddressCountryKey description]]);
if ([kABAddressHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABAddressHomeLabel forKey:@"kABAddressHomeLabel"]; else NSLog([@"Can't initialize kABAddressHomeLabel with object " stringByAppendingString:[kABAddressHomeLabel description]]);
if ([kABAddressProperty isKindOfClass:[NSString class]]) [d setObject:kABAddressProperty forKey:@"kABAddressProperty"]; else NSLog([@"Can't initialize kABAddressProperty with object " stringByAppendingString:[kABAddressProperty description]]);
if ([kABAddressStateKey isKindOfClass:[NSString class]]) [d setObject:kABAddressStateKey forKey:@"kABAddressStateKey"]; else NSLog([@"Can't initialize kABAddressStateKey with object " stringByAppendingString:[kABAddressStateKey description]]);
if ([kABAddressStreetKey isKindOfClass:[NSString class]]) [d setObject:kABAddressStreetKey forKey:@"kABAddressStreetKey"]; else NSLog([@"Can't initialize kABAddressStreetKey with object " stringByAppendingString:[kABAddressStreetKey description]]);
if ([kABAddressWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABAddressWorkLabel forKey:@"kABAddressWorkLabel"]; else NSLog([@"Can't initialize kABAddressWorkLabel with object " stringByAppendingString:[kABAddressWorkLabel description]]);
if ([kABAddressZIPKey isKindOfClass:[NSString class]]) [d setObject:kABAddressZIPKey forKey:@"kABAddressZIPKey"]; else NSLog([@"Can't initialize kABAddressZIPKey with object " stringByAppendingString:[kABAddressZIPKey description]]);
if ([kABAnniversaryLabel isKindOfClass:[NSString class]]) [d setObject:kABAnniversaryLabel forKey:@"kABAnniversaryLabel"]; else NSLog([@"Can't initialize kABAnniversaryLabel with object " stringByAppendingString:[kABAnniversaryLabel description]]);
if ([kABAssistantLabel isKindOfClass:[NSString class]]) [d setObject:kABAssistantLabel forKey:@"kABAssistantLabel"]; else NSLog([@"Can't initialize kABAssistantLabel with object " stringByAppendingString:[kABAssistantLabel description]]);
if ([kABBirthdayProperty isKindOfClass:[NSString class]]) [d setObject:kABBirthdayProperty forKey:@"kABBirthdayProperty"]; else NSLog([@"Can't initialize kABBirthdayProperty with object " stringByAppendingString:[kABBirthdayProperty description]]);
if ([kABBrotherLabel isKindOfClass:[NSString class]]) [d setObject:kABBrotherLabel forKey:@"kABBrotherLabel"]; else NSLog([@"Can't initialize kABBrotherLabel with object " stringByAppendingString:[kABBrotherLabel description]]);
if ([kABCalendarURIsProperty isKindOfClass:[NSString class]]) [d setObject:kABCalendarURIsProperty forKey:@"kABCalendarURIsProperty"]; else NSLog([@"Can't initialize kABCalendarURIsProperty with object " stringByAppendingString:[kABCalendarURIsProperty description]]);
if ([kABChildLabel isKindOfClass:[NSString class]]) [d setObject:kABChildLabel forKey:@"kABChildLabel"]; else NSLog([@"Can't initialize kABChildLabel with object " stringByAppendingString:[kABChildLabel description]]);
if ([kABCreationDateProperty isKindOfClass:[NSString class]]) [d setObject:kABCreationDateProperty forKey:@"kABCreationDateProperty"]; else NSLog([@"Can't initialize kABCreationDateProperty with object " stringByAppendingString:[kABCreationDateProperty description]]);
if ([kABDatabaseChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:kABDatabaseChangedExternallyNotification forKey:@"kABDatabaseChangedExternallyNotification"]; else NSLog([@"Can't initialize kABDatabaseChangedExternallyNotification with object " stringByAppendingString:[kABDatabaseChangedExternallyNotification description]]);
if ([kABDatabaseChangedNotification isKindOfClass:[NSString class]]) [d setObject:kABDatabaseChangedNotification forKey:@"kABDatabaseChangedNotification"]; else NSLog([@"Can't initialize kABDatabaseChangedNotification with object " stringByAppendingString:[kABDatabaseChangedNotification description]]);
if ([kABDeletedRecords isKindOfClass:[NSString class]]) [d setObject:kABDeletedRecords forKey:@"kABDeletedRecords"]; else NSLog([@"Can't initialize kABDeletedRecords with object " stringByAppendingString:[kABDeletedRecords description]]);
if ([kABDepartmentProperty isKindOfClass:[NSString class]]) [d setObject:kABDepartmentProperty forKey:@"kABDepartmentProperty"]; else NSLog([@"Can't initialize kABDepartmentProperty with object " stringByAppendingString:[kABDepartmentProperty description]]);
if ([kABEmailHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABEmailHomeLabel forKey:@"kABEmailHomeLabel"]; else NSLog([@"Can't initialize kABEmailHomeLabel with object " stringByAppendingString:[kABEmailHomeLabel description]]);
if ([kABEmailProperty isKindOfClass:[NSString class]]) [d setObject:kABEmailProperty forKey:@"kABEmailProperty"]; else NSLog([@"Can't initialize kABEmailProperty with object " stringByAppendingString:[kABEmailProperty description]]);
if ([kABEmailWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABEmailWorkLabel forKey:@"kABEmailWorkLabel"]; else NSLog([@"Can't initialize kABEmailWorkLabel with object " stringByAppendingString:[kABEmailWorkLabel description]]);
if ([kABFatherLabel isKindOfClass:[NSString class]]) [d setObject:kABFatherLabel forKey:@"kABFatherLabel"]; else NSLog([@"Can't initialize kABFatherLabel with object " stringByAppendingString:[kABFatherLabel description]]);
if ([kABFirstNamePhoneticProperty isKindOfClass:[NSString class]]) [d setObject:kABFirstNamePhoneticProperty forKey:@"kABFirstNamePhoneticProperty"]; else NSLog([@"Can't initialize kABFirstNamePhoneticProperty with object " stringByAppendingString:[kABFirstNamePhoneticProperty description]]);
if ([kABFirstNameProperty isKindOfClass:[NSString class]]) [d setObject:kABFirstNameProperty forKey:@"kABFirstNameProperty"]; else NSLog([@"Can't initialize kABFirstNameProperty with object " stringByAppendingString:[kABFirstNameProperty description]]);
if ([kABFriendLabel isKindOfClass:[NSString class]]) [d setObject:kABFriendLabel forKey:@"kABFriendLabel"]; else NSLog([@"Can't initialize kABFriendLabel with object " stringByAppendingString:[kABFriendLabel description]]);
if ([kABGroupNameProperty isKindOfClass:[NSString class]]) [d setObject:kABGroupNameProperty forKey:@"kABGroupNameProperty"]; else NSLog([@"Can't initialize kABGroupNameProperty with object " stringByAppendingString:[kABGroupNameProperty description]]);
if ([kABHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABHomeLabel forKey:@"kABHomeLabel"]; else NSLog([@"Can't initialize kABHomeLabel with object " stringByAppendingString:[kABHomeLabel description]]);
if ([kABHomePageLabel isKindOfClass:[NSString class]]) [d setObject:kABHomePageLabel forKey:@"kABHomePageLabel"]; else NSLog([@"Can't initialize kABHomePageLabel with object " stringByAppendingString:[kABHomePageLabel description]]);
if ([kABHomePageProperty isKindOfClass:[NSString class]]) [d setObject:kABHomePageProperty forKey:@"kABHomePageProperty"]; else NSLog([@"Can't initialize kABHomePageProperty with object " stringByAppendingString:[kABHomePageProperty description]]);
if ([kABICQHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABICQHomeLabel forKey:@"kABICQHomeLabel"]; else NSLog([@"Can't initialize kABICQHomeLabel with object " stringByAppendingString:[kABICQHomeLabel description]]);
if ([kABICQInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABICQInstantProperty forKey:@"kABICQInstantProperty"]; else NSLog([@"Can't initialize kABICQInstantProperty with object " stringByAppendingString:[kABICQInstantProperty description]]);
if ([kABICQWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABICQWorkLabel forKey:@"kABICQWorkLabel"]; else NSLog([@"Can't initialize kABICQWorkLabel with object " stringByAppendingString:[kABICQWorkLabel description]]);
if ([kABInsertedRecords isKindOfClass:[NSString class]]) [d setObject:kABInsertedRecords forKey:@"kABInsertedRecords"]; else NSLog([@"Can't initialize kABInsertedRecords with object " stringByAppendingString:[kABInsertedRecords description]]);
if ([kABJabberHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABJabberHomeLabel forKey:@"kABJabberHomeLabel"]; else NSLog([@"Can't initialize kABJabberHomeLabel with object " stringByAppendingString:[kABJabberHomeLabel description]]);
if ([kABJabberInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABJabberInstantProperty forKey:@"kABJabberInstantProperty"]; else NSLog([@"Can't initialize kABJabberInstantProperty with object " stringByAppendingString:[kABJabberInstantProperty description]]);
if ([kABJabberWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABJabberWorkLabel forKey:@"kABJabberWorkLabel"]; else NSLog([@"Can't initialize kABJabberWorkLabel with object " stringByAppendingString:[kABJabberWorkLabel description]]);
if ([kABJobTitleProperty isKindOfClass:[NSString class]]) [d setObject:kABJobTitleProperty forKey:@"kABJobTitleProperty"]; else NSLog([@"Can't initialize kABJobTitleProperty with object " stringByAppendingString:[kABJobTitleProperty description]]);
if ([kABLastNamePhoneticProperty isKindOfClass:[NSString class]]) [d setObject:kABLastNamePhoneticProperty forKey:@"kABLastNamePhoneticProperty"]; else NSLog([@"Can't initialize kABLastNamePhoneticProperty with object " stringByAppendingString:[kABLastNamePhoneticProperty description]]);
if ([kABLastNameProperty isKindOfClass:[NSString class]]) [d setObject:kABLastNameProperty forKey:@"kABLastNameProperty"]; else NSLog([@"Can't initialize kABLastNameProperty with object " stringByAppendingString:[kABLastNameProperty description]]);
if ([kABMSNHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABMSNHomeLabel forKey:@"kABMSNHomeLabel"]; else NSLog([@"Can't initialize kABMSNHomeLabel with object " stringByAppendingString:[kABMSNHomeLabel description]]);
if ([kABMSNInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABMSNInstantProperty forKey:@"kABMSNInstantProperty"]; else NSLog([@"Can't initialize kABMSNInstantProperty with object " stringByAppendingString:[kABMSNInstantProperty description]]);
if ([kABMSNWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABMSNWorkLabel forKey:@"kABMSNWorkLabel"]; else NSLog([@"Can't initialize kABMSNWorkLabel with object " stringByAppendingString:[kABMSNWorkLabel description]]);
if ([kABMaidenNameProperty isKindOfClass:[NSString class]]) [d setObject:kABMaidenNameProperty forKey:@"kABMaidenNameProperty"]; else NSLog([@"Can't initialize kABMaidenNameProperty with object " stringByAppendingString:[kABMaidenNameProperty description]]);
if ([kABManagerLabel isKindOfClass:[NSString class]]) [d setObject:kABManagerLabel forKey:@"kABManagerLabel"]; else NSLog([@"Can't initialize kABManagerLabel with object " stringByAppendingString:[kABManagerLabel description]]);
if ([kABMiddleNamePhoneticProperty isKindOfClass:[NSString class]]) [d setObject:kABMiddleNamePhoneticProperty forKey:@"kABMiddleNamePhoneticProperty"]; else NSLog([@"Can't initialize kABMiddleNamePhoneticProperty with object " stringByAppendingString:[kABMiddleNamePhoneticProperty description]]);
if ([kABMiddleNameProperty isKindOfClass:[NSString class]]) [d setObject:kABMiddleNameProperty forKey:@"kABMiddleNameProperty"]; else NSLog([@"Can't initialize kABMiddleNameProperty with object " stringByAppendingString:[kABMiddleNameProperty description]]);
if ([kABModificationDateProperty isKindOfClass:[NSString class]]) [d setObject:kABModificationDateProperty forKey:@"kABModificationDateProperty"]; else NSLog([@"Can't initialize kABModificationDateProperty with object " stringByAppendingString:[kABModificationDateProperty description]]);
if ([kABMotherLabel isKindOfClass:[NSString class]]) [d setObject:kABMotherLabel forKey:@"kABMotherLabel"]; else NSLog([@"Can't initialize kABMotherLabel with object " stringByAppendingString:[kABMotherLabel description]]);
if ([kABNicknameProperty isKindOfClass:[NSString class]]) [d setObject:kABNicknameProperty forKey:@"kABNicknameProperty"]; else NSLog([@"Can't initialize kABNicknameProperty with object " stringByAppendingString:[kABNicknameProperty description]]);
if ([kABNoteProperty isKindOfClass:[NSString class]]) [d setObject:kABNoteProperty forKey:@"kABNoteProperty"]; else NSLog([@"Can't initialize kABNoteProperty with object " stringByAppendingString:[kABNoteProperty description]]);
if ([kABOrganizationProperty isKindOfClass:[NSString class]]) [d setObject:kABOrganizationProperty forKey:@"kABOrganizationProperty"]; else NSLog([@"Can't initialize kABOrganizationProperty with object " stringByAppendingString:[kABOrganizationProperty description]]);
if ([kABOtherDatesProperty isKindOfClass:[NSString class]]) [d setObject:kABOtherDatesProperty forKey:@"kABOtherDatesProperty"]; else NSLog([@"Can't initialize kABOtherDatesProperty with object " stringByAppendingString:[kABOtherDatesProperty description]]);
if ([kABOtherLabel isKindOfClass:[NSString class]]) [d setObject:kABOtherLabel forKey:@"kABOtherLabel"]; else NSLog([@"Can't initialize kABOtherLabel with object " stringByAppendingString:[kABOtherLabel description]]);
if ([kABParentLabel isKindOfClass:[NSString class]]) [d setObject:kABParentLabel forKey:@"kABParentLabel"]; else NSLog([@"Can't initialize kABParentLabel with object " stringByAppendingString:[kABParentLabel description]]);
if ([kABPartnerLabel isKindOfClass:[NSString class]]) [d setObject:kABPartnerLabel forKey:@"kABPartnerLabel"]; else NSLog([@"Can't initialize kABPartnerLabel with object " stringByAppendingString:[kABPartnerLabel description]]);
if ([kABPersonFlags isKindOfClass:[NSString class]]) [d setObject:kABPersonFlags forKey:@"kABPersonFlags"]; else NSLog([@"Can't initialize kABPersonFlags with object " stringByAppendingString:[kABPersonFlags description]]);
if ([kABPhoneHomeFAXLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneHomeFAXLabel forKey:@"kABPhoneHomeFAXLabel"]; else NSLog([@"Can't initialize kABPhoneHomeFAXLabel with object " stringByAppendingString:[kABPhoneHomeFAXLabel description]]);
if ([kABPhoneHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneHomeLabel forKey:@"kABPhoneHomeLabel"]; else NSLog([@"Can't initialize kABPhoneHomeLabel with object " stringByAppendingString:[kABPhoneHomeLabel description]]);
if ([kABPhoneMainLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneMainLabel forKey:@"kABPhoneMainLabel"]; else NSLog([@"Can't initialize kABPhoneMainLabel with object " stringByAppendingString:[kABPhoneMainLabel description]]);
if ([kABPhoneMobileLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneMobileLabel forKey:@"kABPhoneMobileLabel"]; else NSLog([@"Can't initialize kABPhoneMobileLabel with object " stringByAppendingString:[kABPhoneMobileLabel description]]);
if ([kABPhonePagerLabel isKindOfClass:[NSString class]]) [d setObject:kABPhonePagerLabel forKey:@"kABPhonePagerLabel"]; else NSLog([@"Can't initialize kABPhonePagerLabel with object " stringByAppendingString:[kABPhonePagerLabel description]]);
if ([kABPhoneProperty isKindOfClass:[NSString class]]) [d setObject:kABPhoneProperty forKey:@"kABPhoneProperty"]; else NSLog([@"Can't initialize kABPhoneProperty with object " stringByAppendingString:[kABPhoneProperty description]]);
if ([kABPhoneWorkFAXLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneWorkFAXLabel forKey:@"kABPhoneWorkFAXLabel"]; else NSLog([@"Can't initialize kABPhoneWorkFAXLabel with object " stringByAppendingString:[kABPhoneWorkFAXLabel description]]);
if ([kABPhoneWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABPhoneWorkLabel forKey:@"kABPhoneWorkLabel"]; else NSLog([@"Can't initialize kABPhoneWorkLabel with object " stringByAppendingString:[kABPhoneWorkLabel description]]);
if ([kABRelatedNamesProperty isKindOfClass:[NSString class]]) [d setObject:kABRelatedNamesProperty forKey:@"kABRelatedNamesProperty"]; else NSLog([@"Can't initialize kABRelatedNamesProperty with object " stringByAppendingString:[kABRelatedNamesProperty description]]);
if ([kABSisterLabel isKindOfClass:[NSString class]]) [d setObject:kABSisterLabel forKey:@"kABSisterLabel"]; else NSLog([@"Can't initialize kABSisterLabel with object " stringByAppendingString:[kABSisterLabel description]]);
if ([kABSpouseLabel isKindOfClass:[NSString class]]) [d setObject:kABSpouseLabel forKey:@"kABSpouseLabel"]; else NSLog([@"Can't initialize kABSpouseLabel with object " stringByAppendingString:[kABSpouseLabel description]]);
if ([kABSuffixProperty isKindOfClass:[NSString class]]) [d setObject:kABSuffixProperty forKey:@"kABSuffixProperty"]; else NSLog([@"Can't initialize kABSuffixProperty with object " stringByAppendingString:[kABSuffixProperty description]]);
if ([kABTitleProperty isKindOfClass:[NSString class]]) [d setObject:kABTitleProperty forKey:@"kABTitleProperty"]; else NSLog([@"Can't initialize kABTitleProperty with object " stringByAppendingString:[kABTitleProperty description]]);
if ([kABUIDProperty isKindOfClass:[NSString class]]) [d setObject:kABUIDProperty forKey:@"kABUIDProperty"]; else NSLog([@"Can't initialize kABUIDProperty with object " stringByAppendingString:[kABUIDProperty description]]);
if ([kABURLsProperty isKindOfClass:[NSString class]]) [d setObject:kABURLsProperty forKey:@"kABURLsProperty"]; else NSLog([@"Can't initialize kABURLsProperty with object " stringByAppendingString:[kABURLsProperty description]]);
if ([kABUpdatedRecords isKindOfClass:[NSString class]]) [d setObject:kABUpdatedRecords forKey:@"kABUpdatedRecords"]; else NSLog([@"Can't initialize kABUpdatedRecords with object " stringByAppendingString:[kABUpdatedRecords description]]);
if ([kABWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABWorkLabel forKey:@"kABWorkLabel"]; else NSLog([@"Can't initialize kABWorkLabel with object " stringByAppendingString:[kABWorkLabel description]]);
if ([kABYahooHomeLabel isKindOfClass:[NSString class]]) [d setObject:kABYahooHomeLabel forKey:@"kABYahooHomeLabel"]; else NSLog([@"Can't initialize kABYahooHomeLabel with object " stringByAppendingString:[kABYahooHomeLabel description]]);
if ([kABYahooInstantProperty isKindOfClass:[NSString class]]) [d setObject:kABYahooInstantProperty forKey:@"kABYahooInstantProperty"]; else NSLog([@"Can't initialize kABYahooInstantProperty with object " stringByAppendingString:[kABYahooInstantProperty description]]);
if ([kABYahooWorkLabel isKindOfClass:[NSString class]]) [d setObject:kABYahooWorkLabel forKey:@"kABYahooWorkLabel"]; else NSLog([@"Can't initialize kABYahooWorkLabel with object " stringByAppendingString:[kABYahooWorkLabel description]]);
[d setObject:[Number numberWithDouble:ABMultipleValueSelection] forKey:@"ABMultipleValueSelection"];
[d setObject:[Number numberWithDouble:ABNoValueSelection] forKey:@"ABNoValueSelection"];
[d setObject:[Number numberWithDouble:ABSingleValueSelection] forKey:@"ABSingleValueSelection"];
[d setObject:[Number numberWithDouble:kABArrayProperty] forKey:@"kABArrayProperty"];
[d setObject:[Number numberWithDouble:kABBitsInBitFieldMatch] forKey:@"kABBitsInBitFieldMatch"];
[d setObject:[Number numberWithDouble:kABContainsSubString] forKey:@"kABContainsSubString"];
[d setObject:[Number numberWithDouble:kABContainsSubStringCaseInsensitive] forKey:@"kABContainsSubStringCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABDataProperty] forKey:@"kABDataProperty"];
[d setObject:[Number numberWithDouble:kABDateProperty] forKey:@"kABDateProperty"];
[d setObject:[Number numberWithDouble:kABDefaultNameOrdering] forKey:@"kABDefaultNameOrdering"];
[d setObject:[Number numberWithDouble:kABDictionaryProperty] forKey:@"kABDictionaryProperty"];
[d setObject:[Number numberWithDouble:kABDoesNotContainSubString] forKey:@"kABDoesNotContainSubString"];
[d setObject:[Number numberWithDouble:kABDoesNotContainSubStringCaseInsensitive] forKey:@"kABDoesNotContainSubStringCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABEqual] forKey:@"kABEqual"];
[d setObject:[Number numberWithDouble:kABEqualCaseInsensitive] forKey:@"kABEqualCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABErrorInProperty] forKey:@"kABErrorInProperty"];
[d setObject:[Number numberWithDouble:kABFirstNameFirst] forKey:@"kABFirstNameFirst"];
[d setObject:[Number numberWithDouble:kABGreaterThan] forKey:@"kABGreaterThan"];
[d setObject:[Number numberWithDouble:kABGreaterThanOrEqual] forKey:@"kABGreaterThanOrEqual"];
[d setObject:[Number numberWithDouble:kABIntegerProperty] forKey:@"kABIntegerProperty"];
[d setObject:[Number numberWithDouble:kABLastNameFirst] forKey:@"kABLastNameFirst"];
[d setObject:[Number numberWithDouble:kABLessThan] forKey:@"kABLessThan"];
[d setObject:[Number numberWithDouble:kABLessThanOrEqual] forKey:@"kABLessThanOrEqual"];
[d setObject:[Number numberWithDouble:kABMultiArrayProperty] forKey:@"kABMultiArrayProperty"];
[d setObject:[Number numberWithDouble:kABMultiDataProperty] forKey:@"kABMultiDataProperty"];
[d setObject:[Number numberWithDouble:kABMultiDateProperty] forKey:@"kABMultiDateProperty"];
[d setObject:[Number numberWithDouble:kABMultiDictionaryProperty] forKey:@"kABMultiDictionaryProperty"];
[d setObject:[Number numberWithDouble:kABMultiIntegerProperty] forKey:@"kABMultiIntegerProperty"];
[d setObject:[Number numberWithDouble:kABMultiRealProperty] forKey:@"kABMultiRealProperty"];
[d setObject:[Number numberWithDouble:kABMultiStringProperty] forKey:@"kABMultiStringProperty"];
[d setObject:[Number numberWithDouble:kABMultiValueMask] forKey:@"kABMultiValueMask"];
[d setObject:[Number numberWithDouble:kABNameOrderingMask] forKey:@"kABNameOrderingMask"];
[d setObject:[Number numberWithDouble:kABNotEqual] forKey:@"kABNotEqual"];
[d setObject:[Number numberWithDouble:kABNotEqualCaseInsensitive] forKey:@"kABNotEqualCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalAroundToday] forKey:@"kABNotWithinIntervalAroundToday"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalAroundTodayYearless] forKey:@"kABNotWithinIntervalAroundTodayYearless"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalFromToday] forKey:@"kABNotWithinIntervalFromToday"];
[d setObject:[Number numberWithDouble:kABNotWithinIntervalFromTodayYearless] forKey:@"kABNotWithinIntervalFromTodayYearless"];
[d setObject:[Number numberWithDouble:kABPickerAllowGroupSelection] forKey:@"kABPickerAllowGroupSelection"];
[d setObject:[Number numberWithDouble:kABPickerAllowMultipleSelection] forKey:@"kABPickerAllowMultipleSelection"];
[d setObject:[Number numberWithDouble:kABPickerMultipleValueSelection] forKey:@"kABPickerMultipleValueSelection"];
[d setObject:[Number numberWithDouble:kABPickerSingleValueSelection] forKey:@"kABPickerSingleValueSelection"];
[d setObject:[Number numberWithDouble:kABPrefixMatch] forKey:@"kABPrefixMatch"];
[d setObject:[Number numberWithDouble:kABPrefixMatchCaseInsensitive] forKey:@"kABPrefixMatchCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABRealProperty] forKey:@"kABRealProperty"];
[d setObject:[Number numberWithDouble:kABSearchAnd] forKey:@"kABSearchAnd"];
[d setObject:[Number numberWithDouble:kABSearchOr] forKey:@"kABSearchOr"];
[d setObject:[Number numberWithDouble:kABShowAsCompany] forKey:@"kABShowAsCompany"];
[d setObject:[Number numberWithDouble:kABShowAsMask] forKey:@"kABShowAsMask"];
[d setObject:[Number numberWithDouble:kABShowAsPerson] forKey:@"kABShowAsPerson"];
[d setObject:[Number numberWithDouble:kABStringProperty] forKey:@"kABStringProperty"];
[d setObject:[Number numberWithDouble:kABSuffixMatch] forKey:@"kABSuffixMatch"];
[d setObject:[Number numberWithDouble:kABSuffixMatchCaseInsensitive] forKey:@"kABSuffixMatchCaseInsensitive"];
[d setObject:[Number numberWithDouble:kABWithinIntervalAroundToday] forKey:@"kABWithinIntervalAroundToday"];
[d setObject:[Number numberWithDouble:kABWithinIntervalAroundTodayYearless] forKey:@"kABWithinIntervalAroundTodayYearless"];
[d setObject:[Number numberWithDouble:kABWithinIntervalFromToday] forKey:@"kABWithinIntervalFromToday"];
[d setObject:[Number numberWithDouble:kABWithinIntervalFromTodayYearless] forKey:@"kABWithinIntervalFromTodayYearless"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerDisplayedPropertyChanged] forKey:@"kEventABPeoplePickerDisplayedPropertyChanged"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerGroupDoubleClicked] forKey:@"kEventABPeoplePickerGroupDoubleClicked"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerGroupSelectionChanged] forKey:@"kEventABPeoplePickerGroupSelectionChanged"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerNameDoubleClicked] forKey:@"kEventABPeoplePickerNameDoubleClicked"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerNameSelectionChanged] forKey:@"kEventABPeoplePickerNameSelectionChanged"];
[d setObject:[Number numberWithDouble:kEventABPeoplePickerValueSelectionChanged] forKey:@"kEventABPeoplePickerValueSelectionChanged"];
[d setObject:[Number numberWithDouble:kEventClassABPeoplePicker] forKey:@"kEventClassABPeoplePicker"];
[d setObject:[Number numberWithDouble:kEventParamABPickerRef] forKey:@"kEventParamABPickerRef"];
if ([NSAbortModalException isKindOfClass:[NSString class]]) [d setObject:NSAbortModalException forKey:@"NSAbortModalException"]; else NSLog([@"Can't initialize NSAbortModalException with object " stringByAppendingString:[NSAbortModalException description]]);
if ([NSAbortPrintingException isKindOfClass:[NSString class]]) [d setObject:NSAbortPrintingException forKey:@"NSAbortPrintingException"]; else NSLog([@"Can't initialize NSAbortPrintingException with object " stringByAppendingString:[NSAbortPrintingException description]]);
if ([NSAccessibilityAllowedValuesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAllowedValuesAttribute forKey:@"NSAccessibilityAllowedValuesAttribute"]; else NSLog([@"Can't initialize NSAccessibilityAllowedValuesAttribute with object " stringByAppendingString:[NSAccessibilityAllowedValuesAttribute description]]);
if ([NSAccessibilityApplicationActivatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationActivatedNotification forKey:@"NSAccessibilityApplicationActivatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationActivatedNotification with object " stringByAppendingString:[NSAccessibilityApplicationActivatedNotification description]]);
if ([NSAccessibilityApplicationDeactivatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationDeactivatedNotification forKey:@"NSAccessibilityApplicationDeactivatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationDeactivatedNotification with object " stringByAppendingString:[NSAccessibilityApplicationDeactivatedNotification description]]);
if ([NSAccessibilityApplicationHiddenNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationHiddenNotification forKey:@"NSAccessibilityApplicationHiddenNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationHiddenNotification with object " stringByAppendingString:[NSAccessibilityApplicationHiddenNotification description]]);
if ([NSAccessibilityApplicationRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationRole forKey:@"NSAccessibilityApplicationRole"]; else NSLog([@"Can't initialize NSAccessibilityApplicationRole with object " stringByAppendingString:[NSAccessibilityApplicationRole description]]);
if ([NSAccessibilityApplicationShownNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationShownNotification forKey:@"NSAccessibilityApplicationShownNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationShownNotification with object " stringByAppendingString:[NSAccessibilityApplicationShownNotification description]]);
if ([NSAccessibilityAscendingSortDirectionValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAscendingSortDirectionValue forKey:@"NSAccessibilityAscendingSortDirectionValue"]; else NSLog([@"Can't initialize NSAccessibilityAscendingSortDirectionValue with object " stringByAppendingString:[NSAccessibilityAscendingSortDirectionValue description]]);
if ([NSAccessibilityAttachmentTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAttachmentTextAttribute forKey:@"NSAccessibilityAttachmentTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityAttachmentTextAttribute with object " stringByAppendingString:[NSAccessibilityAttachmentTextAttribute description]]);
if ([NSAccessibilityAttributedStringForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAttributedStringForRangeParameterizedAttribute forKey:@"NSAccessibilityAttributedStringForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityAttributedStringForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityAttributedStringForRangeParameterizedAttribute description]]);
if ([NSAccessibilityBackgroundColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBackgroundColorTextAttribute forKey:@"NSAccessibilityBackgroundColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityBackgroundColorTextAttribute with object " stringByAppendingString:[NSAccessibilityBackgroundColorTextAttribute description]]);
if ([NSAccessibilityBoundsForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBoundsForRangeParameterizedAttribute forKey:@"NSAccessibilityBoundsForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityBoundsForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityBoundsForRangeParameterizedAttribute description]]);
if ([NSAccessibilityBrowserRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBrowserRole forKey:@"NSAccessibilityBrowserRole"]; else NSLog([@"Can't initialize NSAccessibilityBrowserRole with object " stringByAppendingString:[NSAccessibilityBrowserRole description]]);
if ([NSAccessibilityBusyIndicatorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBusyIndicatorRole forKey:@"NSAccessibilityBusyIndicatorRole"]; else NSLog([@"Can't initialize NSAccessibilityBusyIndicatorRole with object " stringByAppendingString:[NSAccessibilityBusyIndicatorRole description]]);
if ([NSAccessibilityButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityButtonRole forKey:@"NSAccessibilityButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityButtonRole with object " stringByAppendingString:[NSAccessibilityButtonRole description]]);
if ([NSAccessibilityCancelAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCancelAction forKey:@"NSAccessibilityCancelAction"]; else NSLog([@"Can't initialize NSAccessibilityCancelAction with object " stringByAppendingString:[NSAccessibilityCancelAction description]]);
if ([NSAccessibilityCancelButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCancelButtonAttribute forKey:@"NSAccessibilityCancelButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityCancelButtonAttribute with object " stringByAppendingString:[NSAccessibilityCancelButtonAttribute description]]);
if ([NSAccessibilityCenterTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCenterTabStopMarkerTypeValue forKey:@"NSAccessibilityCenterTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityCenterTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityCenterTabStopMarkerTypeValue description]]);
if ([NSAccessibilityCentimetersUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCentimetersUnitValue forKey:@"NSAccessibilityCentimetersUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityCentimetersUnitValue with object " stringByAppendingString:[NSAccessibilityCentimetersUnitValue description]]);
if ([NSAccessibilityCheckBoxRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCheckBoxRole forKey:@"NSAccessibilityCheckBoxRole"]; else NSLog([@"Can't initialize NSAccessibilityCheckBoxRole with object " stringByAppendingString:[NSAccessibilityCheckBoxRole description]]);
if ([NSAccessibilityChildrenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityChildrenAttribute forKey:@"NSAccessibilityChildrenAttribute"]; else NSLog([@"Can't initialize NSAccessibilityChildrenAttribute with object " stringByAppendingString:[NSAccessibilityChildrenAttribute description]]);
if ([NSAccessibilityClearButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityClearButtonAttribute forKey:@"NSAccessibilityClearButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityClearButtonAttribute with object " stringByAppendingString:[NSAccessibilityClearButtonAttribute description]]);
if ([NSAccessibilityCloseButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCloseButtonAttribute forKey:@"NSAccessibilityCloseButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityCloseButtonAttribute with object " stringByAppendingString:[NSAccessibilityCloseButtonAttribute description]]);
if ([NSAccessibilityCloseButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCloseButtonSubrole forKey:@"NSAccessibilityCloseButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityCloseButtonSubrole with object " stringByAppendingString:[NSAccessibilityCloseButtonSubrole description]]);
if ([NSAccessibilityColorWellRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColorWellRole forKey:@"NSAccessibilityColorWellRole"]; else NSLog([@"Can't initialize NSAccessibilityColorWellRole with object " stringByAppendingString:[NSAccessibilityColorWellRole description]]);
if ([NSAccessibilityColumnCountAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnCountAttribute forKey:@"NSAccessibilityColumnCountAttribute"]; else NSLog([@"Can't initialize NSAccessibilityColumnCountAttribute with object " stringByAppendingString:[NSAccessibilityColumnCountAttribute description]]);
if ([NSAccessibilityColumnRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnRole forKey:@"NSAccessibilityColumnRole"]; else NSLog([@"Can't initialize NSAccessibilityColumnRole with object " stringByAppendingString:[NSAccessibilityColumnRole description]]);
if ([NSAccessibilityColumnTitlesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnTitlesAttribute forKey:@"NSAccessibilityColumnTitlesAttribute"]; else NSLog([@"Can't initialize NSAccessibilityColumnTitlesAttribute with object " stringByAppendingString:[NSAccessibilityColumnTitlesAttribute description]]);
if ([NSAccessibilityColumnsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnsAttribute forKey:@"NSAccessibilityColumnsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityColumnsAttribute with object " stringByAppendingString:[NSAccessibilityColumnsAttribute description]]);
if ([NSAccessibilityComboBoxRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityComboBoxRole forKey:@"NSAccessibilityComboBoxRole"]; else NSLog([@"Can't initialize NSAccessibilityComboBoxRole with object " stringByAppendingString:[NSAccessibilityComboBoxRole description]]);
if ([NSAccessibilityConfirmAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityConfirmAction forKey:@"NSAccessibilityConfirmAction"]; else NSLog([@"Can't initialize NSAccessibilityConfirmAction with object " stringByAppendingString:[NSAccessibilityConfirmAction description]]);
if ([NSAccessibilityContentsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityContentsAttribute forKey:@"NSAccessibilityContentsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityContentsAttribute with object " stringByAppendingString:[NSAccessibilityContentsAttribute description]]);
if ([NSAccessibilityCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCreatedNotification forKey:@"NSAccessibilityCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityCreatedNotification with object " stringByAppendingString:[NSAccessibilityCreatedNotification description]]);
if ([NSAccessibilityDecimalTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecimalTabStopMarkerTypeValue forKey:@"NSAccessibilityDecimalTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityDecimalTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityDecimalTabStopMarkerTypeValue description]]);
if ([NSAccessibilityDecrementAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementAction forKey:@"NSAccessibilityDecrementAction"]; else NSLog([@"Can't initialize NSAccessibilityDecrementAction with object " stringByAppendingString:[NSAccessibilityDecrementAction description]]);
if ([NSAccessibilityDecrementArrowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementArrowSubrole forKey:@"NSAccessibilityDecrementArrowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityDecrementArrowSubrole with object " stringByAppendingString:[NSAccessibilityDecrementArrowSubrole description]]);
if ([NSAccessibilityDecrementButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementButtonAttribute forKey:@"NSAccessibilityDecrementButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDecrementButtonAttribute with object " stringByAppendingString:[NSAccessibilityDecrementButtonAttribute description]]);
if ([NSAccessibilityDecrementPageSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementPageSubrole forKey:@"NSAccessibilityDecrementPageSubrole"]; else NSLog([@"Can't initialize NSAccessibilityDecrementPageSubrole with object " stringByAppendingString:[NSAccessibilityDecrementPageSubrole description]]);
if ([NSAccessibilityDefaultButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDefaultButtonAttribute forKey:@"NSAccessibilityDefaultButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDefaultButtonAttribute with object " stringByAppendingString:[NSAccessibilityDefaultButtonAttribute description]]);
if ([NSAccessibilityDeleteAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDeleteAction forKey:@"NSAccessibilityDeleteAction"]; else NSLog([@"Can't initialize NSAccessibilityDeleteAction with object " stringByAppendingString:[NSAccessibilityDeleteAction description]]);
if ([NSAccessibilityDescendingSortDirectionValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDescendingSortDirectionValue forKey:@"NSAccessibilityDescendingSortDirectionValue"]; else NSLog([@"Can't initialize NSAccessibilityDescendingSortDirectionValue with object " stringByAppendingString:[NSAccessibilityDescendingSortDirectionValue description]]);
if ([NSAccessibilityDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDescriptionAttribute forKey:@"NSAccessibilityDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityDescriptionAttribute description]]);
if ([NSAccessibilityDialogSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDialogSubrole forKey:@"NSAccessibilityDialogSubrole"]; else NSLog([@"Can't initialize NSAccessibilityDialogSubrole with object " stringByAppendingString:[NSAccessibilityDialogSubrole description]]);
if ([NSAccessibilityDisclosedByRowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosedByRowAttribute forKey:@"NSAccessibilityDisclosedByRowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosedByRowAttribute with object " stringByAppendingString:[NSAccessibilityDisclosedByRowAttribute description]]);
if ([NSAccessibilityDisclosedRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosedRowsAttribute forKey:@"NSAccessibilityDisclosedRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosedRowsAttribute with object " stringByAppendingString:[NSAccessibilityDisclosedRowsAttribute description]]);
if ([NSAccessibilityDisclosingAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosingAttribute forKey:@"NSAccessibilityDisclosingAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosingAttribute with object " stringByAppendingString:[NSAccessibilityDisclosingAttribute description]]);
if ([NSAccessibilityDisclosureLevelAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosureLevelAttribute forKey:@"NSAccessibilityDisclosureLevelAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosureLevelAttribute with object " stringByAppendingString:[NSAccessibilityDisclosureLevelAttribute description]]);
if ([NSAccessibilityDisclosureTriangleRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosureTriangleRole forKey:@"NSAccessibilityDisclosureTriangleRole"]; else NSLog([@"Can't initialize NSAccessibilityDisclosureTriangleRole with object " stringByAppendingString:[NSAccessibilityDisclosureTriangleRole description]]);
if ([NSAccessibilityDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDocumentAttribute forKey:@"NSAccessibilityDocumentAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDocumentAttribute with object " stringByAppendingString:[NSAccessibilityDocumentAttribute description]]);
if ([NSAccessibilityDrawerCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDrawerCreatedNotification forKey:@"NSAccessibilityDrawerCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityDrawerCreatedNotification with object " stringByAppendingString:[NSAccessibilityDrawerCreatedNotification description]]);
if ([NSAccessibilityDrawerRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDrawerRole forKey:@"NSAccessibilityDrawerRole"]; else NSLog([@"Can't initialize NSAccessibilityDrawerRole with object " stringByAppendingString:[NSAccessibilityDrawerRole description]]);
if ([NSAccessibilityEditedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityEditedAttribute forKey:@"NSAccessibilityEditedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityEditedAttribute with object " stringByAppendingString:[NSAccessibilityEditedAttribute description]]);
if ([NSAccessibilityEnabledAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityEnabledAttribute forKey:@"NSAccessibilityEnabledAttribute"]; else NSLog([@"Can't initialize NSAccessibilityEnabledAttribute with object " stringByAppendingString:[NSAccessibilityEnabledAttribute description]]);
if ([NSAccessibilityErrorCodeExceptionInfo isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityErrorCodeExceptionInfo forKey:@"NSAccessibilityErrorCodeExceptionInfo"]; else NSLog([@"Can't initialize NSAccessibilityErrorCodeExceptionInfo with object " stringByAppendingString:[NSAccessibilityErrorCodeExceptionInfo description]]);
if ([NSAccessibilityException isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityException forKey:@"NSAccessibilityException"]; else NSLog([@"Can't initialize NSAccessibilityException with object " stringByAppendingString:[NSAccessibilityException description]]);
if ([NSAccessibilityExpandedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityExpandedAttribute forKey:@"NSAccessibilityExpandedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityExpandedAttribute with object " stringByAppendingString:[NSAccessibilityExpandedAttribute description]]);
if ([NSAccessibilityFilenameAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFilenameAttribute forKey:@"NSAccessibilityFilenameAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFilenameAttribute with object " stringByAppendingString:[NSAccessibilityFilenameAttribute description]]);
if ([NSAccessibilityFirstLineIndentMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFirstLineIndentMarkerTypeValue forKey:@"NSAccessibilityFirstLineIndentMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityFirstLineIndentMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityFirstLineIndentMarkerTypeValue description]]);
if ([NSAccessibilityFloatingWindowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFloatingWindowSubrole forKey:@"NSAccessibilityFloatingWindowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityFloatingWindowSubrole with object " stringByAppendingString:[NSAccessibilityFloatingWindowSubrole description]]);
if ([NSAccessibilityFocusedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedAttribute forKey:@"NSAccessibilityFocusedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFocusedAttribute with object " stringByAppendingString:[NSAccessibilityFocusedAttribute description]]);
if ([NSAccessibilityFocusedUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedUIElementAttribute forKey:@"NSAccessibilityFocusedUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFocusedUIElementAttribute with object " stringByAppendingString:[NSAccessibilityFocusedUIElementAttribute description]]);
if ([NSAccessibilityFocusedUIElementChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedUIElementChangedNotification forKey:@"NSAccessibilityFocusedUIElementChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityFocusedUIElementChangedNotification with object " stringByAppendingString:[NSAccessibilityFocusedUIElementChangedNotification description]]);
if ([NSAccessibilityFocusedWindowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedWindowAttribute forKey:@"NSAccessibilityFocusedWindowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFocusedWindowAttribute with object " stringByAppendingString:[NSAccessibilityFocusedWindowAttribute description]]);
if ([NSAccessibilityFocusedWindowChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedWindowChangedNotification forKey:@"NSAccessibilityFocusedWindowChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityFocusedWindowChangedNotification with object " stringByAppendingString:[NSAccessibilityFocusedWindowChangedNotification description]]);
if ([NSAccessibilityFontFamilyKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontFamilyKey forKey:@"NSAccessibilityFontFamilyKey"]; else NSLog([@"Can't initialize NSAccessibilityFontFamilyKey with object " stringByAppendingString:[NSAccessibilityFontFamilyKey description]]);
if ([NSAccessibilityFontNameKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontNameKey forKey:@"NSAccessibilityFontNameKey"]; else NSLog([@"Can't initialize NSAccessibilityFontNameKey with object " stringByAppendingString:[NSAccessibilityFontNameKey description]]);
if ([NSAccessibilityFontSizeKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontSizeKey forKey:@"NSAccessibilityFontSizeKey"]; else NSLog([@"Can't initialize NSAccessibilityFontSizeKey with object " stringByAppendingString:[NSAccessibilityFontSizeKey description]]);
if ([NSAccessibilityFontTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontTextAttribute forKey:@"NSAccessibilityFontTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFontTextAttribute with object " stringByAppendingString:[NSAccessibilityFontTextAttribute description]]);
if ([NSAccessibilityForegroundColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityForegroundColorTextAttribute forKey:@"NSAccessibilityForegroundColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityForegroundColorTextAttribute with object " stringByAppendingString:[NSAccessibilityForegroundColorTextAttribute description]]);
if ([NSAccessibilityFrontmostAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFrontmostAttribute forKey:@"NSAccessibilityFrontmostAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFrontmostAttribute with object " stringByAppendingString:[NSAccessibilityFrontmostAttribute description]]);
if ([NSAccessibilityGridRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGridRole forKey:@"NSAccessibilityGridRole"]; else NSLog([@"Can't initialize NSAccessibilityGridRole with object " stringByAppendingString:[NSAccessibilityGridRole description]]);
if ([NSAccessibilityGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGroupRole forKey:@"NSAccessibilityGroupRole"]; else NSLog([@"Can't initialize NSAccessibilityGroupRole with object " stringByAppendingString:[NSAccessibilityGroupRole description]]);
if ([NSAccessibilityGrowAreaAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGrowAreaAttribute forKey:@"NSAccessibilityGrowAreaAttribute"]; else NSLog([@"Can't initialize NSAccessibilityGrowAreaAttribute with object " stringByAppendingString:[NSAccessibilityGrowAreaAttribute description]]);
if ([NSAccessibilityGrowAreaRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGrowAreaRole forKey:@"NSAccessibilityGrowAreaRole"]; else NSLog([@"Can't initialize NSAccessibilityGrowAreaRole with object " stringByAppendingString:[NSAccessibilityGrowAreaRole description]]);
if ([NSAccessibilityHeadIndentMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHeadIndentMarkerTypeValue forKey:@"NSAccessibilityHeadIndentMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityHeadIndentMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityHeadIndentMarkerTypeValue description]]);
if ([NSAccessibilityHeaderAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHeaderAttribute forKey:@"NSAccessibilityHeaderAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHeaderAttribute with object " stringByAppendingString:[NSAccessibilityHeaderAttribute description]]);
if ([NSAccessibilityHelpAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHelpAttribute forKey:@"NSAccessibilityHelpAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHelpAttribute with object " stringByAppendingString:[NSAccessibilityHelpAttribute description]]);
if ([NSAccessibilityHelpTagCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHelpTagCreatedNotification forKey:@"NSAccessibilityHelpTagCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityHelpTagCreatedNotification with object " stringByAppendingString:[NSAccessibilityHelpTagCreatedNotification description]]);
if ([NSAccessibilityHelpTagRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHelpTagRole forKey:@"NSAccessibilityHelpTagRole"]; else NSLog([@"Can't initialize NSAccessibilityHelpTagRole with object " stringByAppendingString:[NSAccessibilityHelpTagRole description]]);
if ([NSAccessibilityHiddenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHiddenAttribute forKey:@"NSAccessibilityHiddenAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHiddenAttribute with object " stringByAppendingString:[NSAccessibilityHiddenAttribute description]]);
if ([NSAccessibilityHorizontalOrientationValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHorizontalOrientationValue forKey:@"NSAccessibilityHorizontalOrientationValue"]; else NSLog([@"Can't initialize NSAccessibilityHorizontalOrientationValue with object " stringByAppendingString:[NSAccessibilityHorizontalOrientationValue description]]);
if ([NSAccessibilityHorizontalScrollBarAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHorizontalScrollBarAttribute forKey:@"NSAccessibilityHorizontalScrollBarAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHorizontalScrollBarAttribute with object " stringByAppendingString:[NSAccessibilityHorizontalScrollBarAttribute description]]);
if ([NSAccessibilityImageRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityImageRole forKey:@"NSAccessibilityImageRole"]; else NSLog([@"Can't initialize NSAccessibilityImageRole with object " stringByAppendingString:[NSAccessibilityImageRole description]]);
if ([NSAccessibilityInchesUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityInchesUnitValue forKey:@"NSAccessibilityInchesUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityInchesUnitValue with object " stringByAppendingString:[NSAccessibilityInchesUnitValue description]]);
if ([NSAccessibilityIncrementAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementAction forKey:@"NSAccessibilityIncrementAction"]; else NSLog([@"Can't initialize NSAccessibilityIncrementAction with object " stringByAppendingString:[NSAccessibilityIncrementAction description]]);
if ([NSAccessibilityIncrementArrowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementArrowSubrole forKey:@"NSAccessibilityIncrementArrowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityIncrementArrowSubrole with object " stringByAppendingString:[NSAccessibilityIncrementArrowSubrole description]]);
if ([NSAccessibilityIncrementButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementButtonAttribute forKey:@"NSAccessibilityIncrementButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityIncrementButtonAttribute with object " stringByAppendingString:[NSAccessibilityIncrementButtonAttribute description]]);
if ([NSAccessibilityIncrementPageSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementPageSubrole forKey:@"NSAccessibilityIncrementPageSubrole"]; else NSLog([@"Can't initialize NSAccessibilityIncrementPageSubrole with object " stringByAppendingString:[NSAccessibilityIncrementPageSubrole description]]);
if ([NSAccessibilityIncrementorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementorRole forKey:@"NSAccessibilityIncrementorRole"]; else NSLog([@"Can't initialize NSAccessibilityIncrementorRole with object " stringByAppendingString:[NSAccessibilityIncrementorRole description]]);
if ([NSAccessibilityIndexAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIndexAttribute forKey:@"NSAccessibilityIndexAttribute"]; else NSLog([@"Can't initialize NSAccessibilityIndexAttribute with object " stringByAppendingString:[NSAccessibilityIndexAttribute description]]);
if ([NSAccessibilityInsertionPointLineNumberAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityInsertionPointLineNumberAttribute forKey:@"NSAccessibilityInsertionPointLineNumberAttribute"]; else NSLog([@"Can't initialize NSAccessibilityInsertionPointLineNumberAttribute with object " stringByAppendingString:[NSAccessibilityInsertionPointLineNumberAttribute description]]);
if ([NSAccessibilityLabelUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLabelUIElementsAttribute forKey:@"NSAccessibilityLabelUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLabelUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityLabelUIElementsAttribute description]]);
if ([NSAccessibilityLabelValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLabelValueAttribute forKey:@"NSAccessibilityLabelValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLabelValueAttribute with object " stringByAppendingString:[NSAccessibilityLabelValueAttribute description]]);
if ([NSAccessibilityLeftTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLeftTabStopMarkerTypeValue forKey:@"NSAccessibilityLeftTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityLeftTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityLeftTabStopMarkerTypeValue description]]);
if ([NSAccessibilityLineForIndexParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLineForIndexParameterizedAttribute forKey:@"NSAccessibilityLineForIndexParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLineForIndexParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityLineForIndexParameterizedAttribute description]]);
if ([NSAccessibilityLinkRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLinkRole forKey:@"NSAccessibilityLinkRole"]; else NSLog([@"Can't initialize NSAccessibilityLinkRole with object " stringByAppendingString:[NSAccessibilityLinkRole description]]);
if ([NSAccessibilityLinkTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLinkTextAttribute forKey:@"NSAccessibilityLinkTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLinkTextAttribute with object " stringByAppendingString:[NSAccessibilityLinkTextAttribute description]]);
if ([NSAccessibilityLinkedUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLinkedUIElementsAttribute forKey:@"NSAccessibilityLinkedUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLinkedUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityLinkedUIElementsAttribute description]]);
if ([NSAccessibilityListRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityListRole forKey:@"NSAccessibilityListRole"]; else NSLog([@"Can't initialize NSAccessibilityListRole with object " stringByAppendingString:[NSAccessibilityListRole description]]);
if ([NSAccessibilityMainAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMainAttribute forKey:@"NSAccessibilityMainAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMainAttribute with object " stringByAppendingString:[NSAccessibilityMainAttribute description]]);
if ([NSAccessibilityMainWindowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMainWindowAttribute forKey:@"NSAccessibilityMainWindowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMainWindowAttribute with object " stringByAppendingString:[NSAccessibilityMainWindowAttribute description]]);
if ([NSAccessibilityMainWindowChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMainWindowChangedNotification forKey:@"NSAccessibilityMainWindowChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityMainWindowChangedNotification with object " stringByAppendingString:[NSAccessibilityMainWindowChangedNotification description]]);
if ([NSAccessibilityMarkerGroupUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerGroupUIElementAttribute forKey:@"NSAccessibilityMarkerGroupUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerGroupUIElementAttribute with object " stringByAppendingString:[NSAccessibilityMarkerGroupUIElementAttribute description]]);
if ([NSAccessibilityMarkerTypeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerTypeAttribute forKey:@"NSAccessibilityMarkerTypeAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerTypeAttribute with object " stringByAppendingString:[NSAccessibilityMarkerTypeAttribute description]]);
if ([NSAccessibilityMarkerTypeDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerTypeDescriptionAttribute forKey:@"NSAccessibilityMarkerTypeDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerTypeDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityMarkerTypeDescriptionAttribute description]]);
if ([NSAccessibilityMarkerUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerUIElementsAttribute forKey:@"NSAccessibilityMarkerUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityMarkerUIElementsAttribute description]]);
if ([NSAccessibilityMarkerValuesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerValuesAttribute forKey:@"NSAccessibilityMarkerValuesAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerValuesAttribute with object " stringByAppendingString:[NSAccessibilityMarkerValuesAttribute description]]);
if ([NSAccessibilityMatteContentUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMatteContentUIElementAttribute forKey:@"NSAccessibilityMatteContentUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMatteContentUIElementAttribute with object " stringByAppendingString:[NSAccessibilityMatteContentUIElementAttribute description]]);
if ([NSAccessibilityMatteHoleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMatteHoleAttribute forKey:@"NSAccessibilityMatteHoleAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMatteHoleAttribute with object " stringByAppendingString:[NSAccessibilityMatteHoleAttribute description]]);
if ([NSAccessibilityMatteRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMatteRole forKey:@"NSAccessibilityMatteRole"]; else NSLog([@"Can't initialize NSAccessibilityMatteRole with object " stringByAppendingString:[NSAccessibilityMatteRole description]]);
if ([NSAccessibilityMaxValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMaxValueAttribute forKey:@"NSAccessibilityMaxValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMaxValueAttribute with object " stringByAppendingString:[NSAccessibilityMaxValueAttribute description]]);
if ([NSAccessibilityMenuBarAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuBarAttribute forKey:@"NSAccessibilityMenuBarAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMenuBarAttribute with object " stringByAppendingString:[NSAccessibilityMenuBarAttribute description]]);
if ([NSAccessibilityMenuBarRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuBarRole forKey:@"NSAccessibilityMenuBarRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuBarRole with object " stringByAppendingString:[NSAccessibilityMenuBarRole description]]);
if ([NSAccessibilityMenuButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuButtonRole forKey:@"NSAccessibilityMenuButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuButtonRole with object " stringByAppendingString:[NSAccessibilityMenuButtonRole description]]);
if ([NSAccessibilityMenuItemRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuItemRole forKey:@"NSAccessibilityMenuItemRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuItemRole with object " stringByAppendingString:[NSAccessibilityMenuItemRole description]]);
if ([NSAccessibilityMenuRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuRole forKey:@"NSAccessibilityMenuRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuRole with object " stringByAppendingString:[NSAccessibilityMenuRole description]]);
if ([NSAccessibilityMinValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinValueAttribute forKey:@"NSAccessibilityMinValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMinValueAttribute with object " stringByAppendingString:[NSAccessibilityMinValueAttribute description]]);
if ([NSAccessibilityMinimizeButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinimizeButtonAttribute forKey:@"NSAccessibilityMinimizeButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMinimizeButtonAttribute with object " stringByAppendingString:[NSAccessibilityMinimizeButtonAttribute description]]);
if ([NSAccessibilityMinimizeButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinimizeButtonSubrole forKey:@"NSAccessibilityMinimizeButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityMinimizeButtonSubrole with object " stringByAppendingString:[NSAccessibilityMinimizeButtonSubrole description]]);
if ([NSAccessibilityMinimizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinimizedAttribute forKey:@"NSAccessibilityMinimizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMinimizedAttribute with object " stringByAppendingString:[NSAccessibilityMinimizedAttribute description]]);
if ([NSAccessibilityMisspelledTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMisspelledTextAttribute forKey:@"NSAccessibilityMisspelledTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMisspelledTextAttribute with object " stringByAppendingString:[NSAccessibilityMisspelledTextAttribute description]]);
if ([NSAccessibilityModalAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityModalAttribute forKey:@"NSAccessibilityModalAttribute"]; else NSLog([@"Can't initialize NSAccessibilityModalAttribute with object " stringByAppendingString:[NSAccessibilityModalAttribute description]]);
if ([NSAccessibilityMovedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMovedNotification forKey:@"NSAccessibilityMovedNotification"]; else NSLog([@"Can't initialize NSAccessibilityMovedNotification with object " stringByAppendingString:[NSAccessibilityMovedNotification description]]);
if ([NSAccessibilityNextContentsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityNextContentsAttribute forKey:@"NSAccessibilityNextContentsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityNextContentsAttribute with object " stringByAppendingString:[NSAccessibilityNextContentsAttribute description]]);
if ([NSAccessibilityNumberOfCharactersAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityNumberOfCharactersAttribute forKey:@"NSAccessibilityNumberOfCharactersAttribute"]; else NSLog([@"Can't initialize NSAccessibilityNumberOfCharactersAttribute with object " stringByAppendingString:[NSAccessibilityNumberOfCharactersAttribute description]]);
if ([NSAccessibilityOrderedByRowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOrderedByRowAttribute forKey:@"NSAccessibilityOrderedByRowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityOrderedByRowAttribute with object " stringByAppendingString:[NSAccessibilityOrderedByRowAttribute description]]);
if ([NSAccessibilityOrientationAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOrientationAttribute forKey:@"NSAccessibilityOrientationAttribute"]; else NSLog([@"Can't initialize NSAccessibilityOrientationAttribute with object " stringByAppendingString:[NSAccessibilityOrientationAttribute description]]);
if ([NSAccessibilityOutlineRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOutlineRole forKey:@"NSAccessibilityOutlineRole"]; else NSLog([@"Can't initialize NSAccessibilityOutlineRole with object " stringByAppendingString:[NSAccessibilityOutlineRole description]]);
if ([NSAccessibilityOutlineRowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOutlineRowSubrole forKey:@"NSAccessibilityOutlineRowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityOutlineRowSubrole with object " stringByAppendingString:[NSAccessibilityOutlineRowSubrole description]]);
if ([NSAccessibilityOverflowButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOverflowButtonAttribute forKey:@"NSAccessibilityOverflowButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityOverflowButtonAttribute with object " stringByAppendingString:[NSAccessibilityOverflowButtonAttribute description]]);
if ([NSAccessibilityParentAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityParentAttribute forKey:@"NSAccessibilityParentAttribute"]; else NSLog([@"Can't initialize NSAccessibilityParentAttribute with object " stringByAppendingString:[NSAccessibilityParentAttribute description]]);
if ([NSAccessibilityPicasUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPicasUnitValue forKey:@"NSAccessibilityPicasUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityPicasUnitValue with object " stringByAppendingString:[NSAccessibilityPicasUnitValue description]]);
if ([NSAccessibilityPickAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPickAction forKey:@"NSAccessibilityPickAction"]; else NSLog([@"Can't initialize NSAccessibilityPickAction with object " stringByAppendingString:[NSAccessibilityPickAction description]]);
if ([NSAccessibilityPointsUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPointsUnitValue forKey:@"NSAccessibilityPointsUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityPointsUnitValue with object " stringByAppendingString:[NSAccessibilityPointsUnitValue description]]);
if ([NSAccessibilityPopUpButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPopUpButtonRole forKey:@"NSAccessibilityPopUpButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityPopUpButtonRole with object " stringByAppendingString:[NSAccessibilityPopUpButtonRole description]]);
if ([NSAccessibilityPositionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPositionAttribute forKey:@"NSAccessibilityPositionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityPositionAttribute with object " stringByAppendingString:[NSAccessibilityPositionAttribute description]]);
if ([NSAccessibilityPressAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPressAction forKey:@"NSAccessibilityPressAction"]; else NSLog([@"Can't initialize NSAccessibilityPressAction with object " stringByAppendingString:[NSAccessibilityPressAction description]]);
if ([NSAccessibilityPreviousContentsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPreviousContentsAttribute forKey:@"NSAccessibilityPreviousContentsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityPreviousContentsAttribute with object " stringByAppendingString:[NSAccessibilityPreviousContentsAttribute description]]);
if ([NSAccessibilityProgressIndicatorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityProgressIndicatorRole forKey:@"NSAccessibilityProgressIndicatorRole"]; else NSLog([@"Can't initialize NSAccessibilityProgressIndicatorRole with object " stringByAppendingString:[NSAccessibilityProgressIndicatorRole description]]);
if ([NSAccessibilityProxyAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityProxyAttribute forKey:@"NSAccessibilityProxyAttribute"]; else NSLog([@"Can't initialize NSAccessibilityProxyAttribute with object " stringByAppendingString:[NSAccessibilityProxyAttribute description]]);
if ([NSAccessibilityRTFForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRTFForRangeParameterizedAttribute forKey:@"NSAccessibilityRTFForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRTFForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRTFForRangeParameterizedAttribute description]]);
if ([NSAccessibilityRadioButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRadioButtonRole forKey:@"NSAccessibilityRadioButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityRadioButtonRole with object " stringByAppendingString:[NSAccessibilityRadioButtonRole description]]);
if ([NSAccessibilityRadioGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRadioGroupRole forKey:@"NSAccessibilityRadioGroupRole"]; else NSLog([@"Can't initialize NSAccessibilityRadioGroupRole with object " stringByAppendingString:[NSAccessibilityRadioGroupRole description]]);
if ([NSAccessibilityRaiseAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRaiseAction forKey:@"NSAccessibilityRaiseAction"]; else NSLog([@"Can't initialize NSAccessibilityRaiseAction with object " stringByAppendingString:[NSAccessibilityRaiseAction description]]);
if ([NSAccessibilityRangeForIndexParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRangeForIndexParameterizedAttribute forKey:@"NSAccessibilityRangeForIndexParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRangeForIndexParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRangeForIndexParameterizedAttribute description]]);
if ([NSAccessibilityRangeForLineParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRangeForLineParameterizedAttribute forKey:@"NSAccessibilityRangeForLineParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRangeForLineParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRangeForLineParameterizedAttribute description]]);
if ([NSAccessibilityRangeForPositionParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRangeForPositionParameterizedAttribute forKey:@"NSAccessibilityRangeForPositionParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRangeForPositionParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRangeForPositionParameterizedAttribute description]]);
if ([NSAccessibilityResizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityResizedNotification forKey:@"NSAccessibilityResizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityResizedNotification with object " stringByAppendingString:[NSAccessibilityResizedNotification description]]);
if ([NSAccessibilityRightTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRightTabStopMarkerTypeValue forKey:@"NSAccessibilityRightTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityRightTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityRightTabStopMarkerTypeValue description]]);
if ([NSAccessibilityRoleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRoleAttribute forKey:@"NSAccessibilityRoleAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRoleAttribute with object " stringByAppendingString:[NSAccessibilityRoleAttribute description]]);
if ([NSAccessibilityRoleDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRoleDescriptionAttribute forKey:@"NSAccessibilityRoleDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRoleDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityRoleDescriptionAttribute description]]);
if ([NSAccessibilityRowCountAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowCountAttribute forKey:@"NSAccessibilityRowCountAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRowCountAttribute with object " stringByAppendingString:[NSAccessibilityRowCountAttribute description]]);
if ([NSAccessibilityRowCountChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowCountChangedNotification forKey:@"NSAccessibilityRowCountChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityRowCountChangedNotification with object " stringByAppendingString:[NSAccessibilityRowCountChangedNotification description]]);
if ([NSAccessibilityRowRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowRole forKey:@"NSAccessibilityRowRole"]; else NSLog([@"Can't initialize NSAccessibilityRowRole with object " stringByAppendingString:[NSAccessibilityRowRole description]]);
if ([NSAccessibilityRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowsAttribute forKey:@"NSAccessibilityRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRowsAttribute with object " stringByAppendingString:[NSAccessibilityRowsAttribute description]]);
if ([NSAccessibilityRulerMarkerRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRulerMarkerRole forKey:@"NSAccessibilityRulerMarkerRole"]; else NSLog([@"Can't initialize NSAccessibilityRulerMarkerRole with object " stringByAppendingString:[NSAccessibilityRulerMarkerRole description]]);
if ([NSAccessibilityRulerRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRulerRole forKey:@"NSAccessibilityRulerRole"]; else NSLog([@"Can't initialize NSAccessibilityRulerRole with object " stringByAppendingString:[NSAccessibilityRulerRole description]]);
if ([NSAccessibilityScrollAreaRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityScrollAreaRole forKey:@"NSAccessibilityScrollAreaRole"]; else NSLog([@"Can't initialize NSAccessibilityScrollAreaRole with object " stringByAppendingString:[NSAccessibilityScrollAreaRole description]]);
if ([NSAccessibilityScrollBarRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityScrollBarRole forKey:@"NSAccessibilityScrollBarRole"]; else NSLog([@"Can't initialize NSAccessibilityScrollBarRole with object " stringByAppendingString:[NSAccessibilityScrollBarRole description]]);
if ([NSAccessibilitySearchButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySearchButtonAttribute forKey:@"NSAccessibilitySearchButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySearchButtonAttribute with object " stringByAppendingString:[NSAccessibilitySearchButtonAttribute description]]);
if ([NSAccessibilitySearchFieldSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySearchFieldSubrole forKey:@"NSAccessibilitySearchFieldSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySearchFieldSubrole with object " stringByAppendingString:[NSAccessibilitySearchFieldSubrole description]]);
if ([NSAccessibilitySearchMenuAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySearchMenuAttribute forKey:@"NSAccessibilitySearchMenuAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySearchMenuAttribute with object " stringByAppendingString:[NSAccessibilitySearchMenuAttribute description]]);
if ([NSAccessibilitySecureTextFieldSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySecureTextFieldSubrole forKey:@"NSAccessibilitySecureTextFieldSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySecureTextFieldSubrole with object " stringByAppendingString:[NSAccessibilitySecureTextFieldSubrole description]]);
if ([NSAccessibilitySelectedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedAttribute forKey:@"NSAccessibilitySelectedAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedAttribute with object " stringByAppendingString:[NSAccessibilitySelectedAttribute description]]);
if ([NSAccessibilitySelectedChildrenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedChildrenAttribute forKey:@"NSAccessibilitySelectedChildrenAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedChildrenAttribute with object " stringByAppendingString:[NSAccessibilitySelectedChildrenAttribute description]]);
if ([NSAccessibilitySelectedChildrenChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedChildrenChangedNotification forKey:@"NSAccessibilitySelectedChildrenChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedChildrenChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedChildrenChangedNotification description]]);
if ([NSAccessibilitySelectedColumnsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedColumnsAttribute forKey:@"NSAccessibilitySelectedColumnsAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedColumnsAttribute with object " stringByAppendingString:[NSAccessibilitySelectedColumnsAttribute description]]);
if ([NSAccessibilitySelectedColumnsChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedColumnsChangedNotification forKey:@"NSAccessibilitySelectedColumnsChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedColumnsChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedColumnsChangedNotification description]]);
if ([NSAccessibilitySelectedRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedRowsAttribute forKey:@"NSAccessibilitySelectedRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedRowsAttribute with object " stringByAppendingString:[NSAccessibilitySelectedRowsAttribute description]]);
if ([NSAccessibilitySelectedRowsChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedRowsChangedNotification forKey:@"NSAccessibilitySelectedRowsChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedRowsChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedRowsChangedNotification description]]);
if ([NSAccessibilitySelectedTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextAttribute forKey:@"NSAccessibilitySelectedTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextAttribute with object " stringByAppendingString:[NSAccessibilitySelectedTextAttribute description]]);
if ([NSAccessibilitySelectedTextChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextChangedNotification forKey:@"NSAccessibilitySelectedTextChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedTextChangedNotification description]]);
if ([NSAccessibilitySelectedTextRangeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextRangeAttribute forKey:@"NSAccessibilitySelectedTextRangeAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextRangeAttribute with object " stringByAppendingString:[NSAccessibilitySelectedTextRangeAttribute description]]);
if ([NSAccessibilitySelectedTextRangesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextRangesAttribute forKey:@"NSAccessibilitySelectedTextRangesAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextRangesAttribute with object " stringByAppendingString:[NSAccessibilitySelectedTextRangesAttribute description]]);
if ([NSAccessibilityServesAsTitleForUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityServesAsTitleForUIElementsAttribute forKey:@"NSAccessibilityServesAsTitleForUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityServesAsTitleForUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityServesAsTitleForUIElementsAttribute description]]);
if ([NSAccessibilityShadowTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityShadowTextAttribute forKey:@"NSAccessibilityShadowTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityShadowTextAttribute with object " stringByAppendingString:[NSAccessibilityShadowTextAttribute description]]);
if ([NSAccessibilitySharedCharacterRangeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySharedCharacterRangeAttribute forKey:@"NSAccessibilitySharedCharacterRangeAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySharedCharacterRangeAttribute with object " stringByAppendingString:[NSAccessibilitySharedCharacterRangeAttribute description]]);
if ([NSAccessibilitySharedTextUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySharedTextUIElementsAttribute forKey:@"NSAccessibilitySharedTextUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySharedTextUIElementsAttribute with object " stringByAppendingString:[NSAccessibilitySharedTextUIElementsAttribute description]]);
if ([NSAccessibilitySheetCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySheetCreatedNotification forKey:@"NSAccessibilitySheetCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySheetCreatedNotification with object " stringByAppendingString:[NSAccessibilitySheetCreatedNotification description]]);
if ([NSAccessibilitySheetRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySheetRole forKey:@"NSAccessibilitySheetRole"]; else NSLog([@"Can't initialize NSAccessibilitySheetRole with object " stringByAppendingString:[NSAccessibilitySheetRole description]]);
if ([NSAccessibilityShowMenuAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityShowMenuAction forKey:@"NSAccessibilityShowMenuAction"]; else NSLog([@"Can't initialize NSAccessibilityShowMenuAction with object " stringByAppendingString:[NSAccessibilityShowMenuAction description]]);
if ([NSAccessibilityShownMenuAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityShownMenuAttribute forKey:@"NSAccessibilityShownMenuAttribute"]; else NSLog([@"Can't initialize NSAccessibilityShownMenuAttribute with object " stringByAppendingString:[NSAccessibilityShownMenuAttribute description]]);
if ([NSAccessibilitySizeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySizeAttribute forKey:@"NSAccessibilitySizeAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySizeAttribute with object " stringByAppendingString:[NSAccessibilitySizeAttribute description]]);
if ([NSAccessibilitySliderRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySliderRole forKey:@"NSAccessibilitySliderRole"]; else NSLog([@"Can't initialize NSAccessibilitySliderRole with object " stringByAppendingString:[NSAccessibilitySliderRole description]]);
if ([NSAccessibilitySortButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySortButtonRole forKey:@"NSAccessibilitySortButtonRole"]; else NSLog([@"Can't initialize NSAccessibilitySortButtonRole with object " stringByAppendingString:[NSAccessibilitySortButtonRole description]]);
if ([NSAccessibilitySortDirectionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySortDirectionAttribute forKey:@"NSAccessibilitySortDirectionAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySortDirectionAttribute with object " stringByAppendingString:[NSAccessibilitySortDirectionAttribute description]]);
if ([NSAccessibilitySplitGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySplitGroupRole forKey:@"NSAccessibilitySplitGroupRole"]; else NSLog([@"Can't initialize NSAccessibilitySplitGroupRole with object " stringByAppendingString:[NSAccessibilitySplitGroupRole description]]);
if ([NSAccessibilitySplitterRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySplitterRole forKey:@"NSAccessibilitySplitterRole"]; else NSLog([@"Can't initialize NSAccessibilitySplitterRole with object " stringByAppendingString:[NSAccessibilitySplitterRole description]]);
if ([NSAccessibilitySplittersAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySplittersAttribute forKey:@"NSAccessibilitySplittersAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySplittersAttribute with object " stringByAppendingString:[NSAccessibilitySplittersAttribute description]]);
if ([NSAccessibilityStandardWindowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStandardWindowSubrole forKey:@"NSAccessibilityStandardWindowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityStandardWindowSubrole with object " stringByAppendingString:[NSAccessibilityStandardWindowSubrole description]]);
if ([NSAccessibilityStaticTextRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStaticTextRole forKey:@"NSAccessibilityStaticTextRole"]; else NSLog([@"Can't initialize NSAccessibilityStaticTextRole with object " stringByAppendingString:[NSAccessibilityStaticTextRole description]]);
if ([NSAccessibilityStrikethroughColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStrikethroughColorTextAttribute forKey:@"NSAccessibilityStrikethroughColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStrikethroughColorTextAttribute with object " stringByAppendingString:[NSAccessibilityStrikethroughColorTextAttribute description]]);
if ([NSAccessibilityStrikethroughTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStrikethroughTextAttribute forKey:@"NSAccessibilityStrikethroughTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStrikethroughTextAttribute with object " stringByAppendingString:[NSAccessibilityStrikethroughTextAttribute description]]);
if ([NSAccessibilityStringForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStringForRangeParameterizedAttribute forKey:@"NSAccessibilityStringForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStringForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityStringForRangeParameterizedAttribute description]]);
if ([NSAccessibilityStyleRangeForIndexParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStyleRangeForIndexParameterizedAttribute forKey:@"NSAccessibilityStyleRangeForIndexParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStyleRangeForIndexParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityStyleRangeForIndexParameterizedAttribute description]]);
if ([NSAccessibilitySubroleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySubroleAttribute forKey:@"NSAccessibilitySubroleAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySubroleAttribute with object " stringByAppendingString:[NSAccessibilitySubroleAttribute description]]);
if ([NSAccessibilitySuperscriptTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySuperscriptTextAttribute forKey:@"NSAccessibilitySuperscriptTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySuperscriptTextAttribute with object " stringByAppendingString:[NSAccessibilitySuperscriptTextAttribute description]]);
if ([NSAccessibilitySystemDialogSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySystemDialogSubrole forKey:@"NSAccessibilitySystemDialogSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySystemDialogSubrole with object " stringByAppendingString:[NSAccessibilitySystemDialogSubrole description]]);
if ([NSAccessibilitySystemFloatingWindowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySystemFloatingWindowSubrole forKey:@"NSAccessibilitySystemFloatingWindowSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySystemFloatingWindowSubrole with object " stringByAppendingString:[NSAccessibilitySystemFloatingWindowSubrole description]]);
if ([NSAccessibilitySystemWideRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySystemWideRole forKey:@"NSAccessibilitySystemWideRole"]; else NSLog([@"Can't initialize NSAccessibilitySystemWideRole with object " stringByAppendingString:[NSAccessibilitySystemWideRole description]]);
if ([NSAccessibilityTabGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTabGroupRole forKey:@"NSAccessibilityTabGroupRole"]; else NSLog([@"Can't initialize NSAccessibilityTabGroupRole with object " stringByAppendingString:[NSAccessibilityTabGroupRole description]]);
if ([NSAccessibilityTableRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTableRole forKey:@"NSAccessibilityTableRole"]; else NSLog([@"Can't initialize NSAccessibilityTableRole with object " stringByAppendingString:[NSAccessibilityTableRole description]]);
if ([NSAccessibilityTableRowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTableRowSubrole forKey:@"NSAccessibilityTableRowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTableRowSubrole with object " stringByAppendingString:[NSAccessibilityTableRowSubrole description]]);
if ([NSAccessibilityTabsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTabsAttribute forKey:@"NSAccessibilityTabsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTabsAttribute with object " stringByAppendingString:[NSAccessibilityTabsAttribute description]]);
if ([NSAccessibilityTailIndentMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTailIndentMarkerTypeValue forKey:@"NSAccessibilityTailIndentMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityTailIndentMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityTailIndentMarkerTypeValue description]]);
if ([NSAccessibilityTextAreaRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextAreaRole forKey:@"NSAccessibilityTextAreaRole"]; else NSLog([@"Can't initialize NSAccessibilityTextAreaRole with object " stringByAppendingString:[NSAccessibilityTextAreaRole description]]);
if ([NSAccessibilityTextAttachmentSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextAttachmentSubrole forKey:@"NSAccessibilityTextAttachmentSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTextAttachmentSubrole with object " stringByAppendingString:[NSAccessibilityTextAttachmentSubrole description]]);
if ([NSAccessibilityTextFieldRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextFieldRole forKey:@"NSAccessibilityTextFieldRole"]; else NSLog([@"Can't initialize NSAccessibilityTextFieldRole with object " stringByAppendingString:[NSAccessibilityTextFieldRole description]]);
if ([NSAccessibilityTextLinkSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextLinkSubrole forKey:@"NSAccessibilityTextLinkSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTextLinkSubrole with object " stringByAppendingString:[NSAccessibilityTextLinkSubrole description]]);
if ([NSAccessibilityTimelineSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTimelineSubrole forKey:@"NSAccessibilityTimelineSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTimelineSubrole with object " stringByAppendingString:[NSAccessibilityTimelineSubrole description]]);
if ([NSAccessibilityTitleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTitleAttribute forKey:@"NSAccessibilityTitleAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTitleAttribute with object " stringByAppendingString:[NSAccessibilityTitleAttribute description]]);
if ([NSAccessibilityTitleChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTitleChangedNotification forKey:@"NSAccessibilityTitleChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityTitleChangedNotification with object " stringByAppendingString:[NSAccessibilityTitleChangedNotification description]]);
if ([NSAccessibilityTitleUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTitleUIElementAttribute forKey:@"NSAccessibilityTitleUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTitleUIElementAttribute with object " stringByAppendingString:[NSAccessibilityTitleUIElementAttribute description]]);
if ([NSAccessibilityToolbarButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityToolbarButtonAttribute forKey:@"NSAccessibilityToolbarButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityToolbarButtonAttribute with object " stringByAppendingString:[NSAccessibilityToolbarButtonAttribute description]]);
if ([NSAccessibilityToolbarButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityToolbarButtonSubrole forKey:@"NSAccessibilityToolbarButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityToolbarButtonSubrole with object " stringByAppendingString:[NSAccessibilityToolbarButtonSubrole description]]);
if ([NSAccessibilityToolbarRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityToolbarRole forKey:@"NSAccessibilityToolbarRole"]; else NSLog([@"Can't initialize NSAccessibilityToolbarRole with object " stringByAppendingString:[NSAccessibilityToolbarRole description]]);
if ([NSAccessibilityTopLevelUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTopLevelUIElementAttribute forKey:@"NSAccessibilityTopLevelUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTopLevelUIElementAttribute with object " stringByAppendingString:[NSAccessibilityTopLevelUIElementAttribute description]]);
if ([NSAccessibilityUIElementDestroyedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUIElementDestroyedNotification forKey:@"NSAccessibilityUIElementDestroyedNotification"]; else NSLog([@"Can't initialize NSAccessibilityUIElementDestroyedNotification with object " stringByAppendingString:[NSAccessibilityUIElementDestroyedNotification description]]);
if ([NSAccessibilityURLAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityURLAttribute forKey:@"NSAccessibilityURLAttribute"]; else NSLog([@"Can't initialize NSAccessibilityURLAttribute with object " stringByAppendingString:[NSAccessibilityURLAttribute description]]);
if ([NSAccessibilityUnderlineColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnderlineColorTextAttribute forKey:@"NSAccessibilityUnderlineColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnderlineColorTextAttribute with object " stringByAppendingString:[NSAccessibilityUnderlineColorTextAttribute description]]);
if ([NSAccessibilityUnderlineTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnderlineTextAttribute forKey:@"NSAccessibilityUnderlineTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnderlineTextAttribute with object " stringByAppendingString:[NSAccessibilityUnderlineTextAttribute description]]);
if ([NSAccessibilityUnitDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnitDescriptionAttribute forKey:@"NSAccessibilityUnitDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnitDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityUnitDescriptionAttribute description]]);
if ([NSAccessibilityUnitsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnitsAttribute forKey:@"NSAccessibilityUnitsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnitsAttribute with object " stringByAppendingString:[NSAccessibilityUnitsAttribute description]]);
if ([NSAccessibilityUnknownMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownMarkerTypeValue forKey:@"NSAccessibilityUnknownMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityUnknownMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityUnknownMarkerTypeValue description]]);
if ([NSAccessibilityUnknownRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownRole forKey:@"NSAccessibilityUnknownRole"]; else NSLog([@"Can't initialize NSAccessibilityUnknownRole with object " stringByAppendingString:[NSAccessibilityUnknownRole description]]);
if ([NSAccessibilityUnknownSortDirectionValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownSortDirectionValue forKey:@"NSAccessibilityUnknownSortDirectionValue"]; else NSLog([@"Can't initialize NSAccessibilityUnknownSortDirectionValue with object " stringByAppendingString:[NSAccessibilityUnknownSortDirectionValue description]]);
if ([NSAccessibilityUnknownSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownSubrole forKey:@"NSAccessibilityUnknownSubrole"]; else NSLog([@"Can't initialize NSAccessibilityUnknownSubrole with object " stringByAppendingString:[NSAccessibilityUnknownSubrole description]]);
if ([NSAccessibilityUnknownUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownUnitValue forKey:@"NSAccessibilityUnknownUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityUnknownUnitValue with object " stringByAppendingString:[NSAccessibilityUnknownUnitValue description]]);
if ([NSAccessibilityValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueAttribute forKey:@"NSAccessibilityValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityValueAttribute with object " stringByAppendingString:[NSAccessibilityValueAttribute description]]);
if ([NSAccessibilityValueChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueChangedNotification forKey:@"NSAccessibilityValueChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityValueChangedNotification with object " stringByAppendingString:[NSAccessibilityValueChangedNotification description]]);
if ([NSAccessibilityValueDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueDescriptionAttribute forKey:@"NSAccessibilityValueDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityValueDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityValueDescriptionAttribute description]]);
if ([NSAccessibilityValueIndicatorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueIndicatorRole forKey:@"NSAccessibilityValueIndicatorRole"]; else NSLog([@"Can't initialize NSAccessibilityValueIndicatorRole with object " stringByAppendingString:[NSAccessibilityValueIndicatorRole description]]);
if ([NSAccessibilityVerticalOrientationValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVerticalOrientationValue forKey:@"NSAccessibilityVerticalOrientationValue"]; else NSLog([@"Can't initialize NSAccessibilityVerticalOrientationValue with object " stringByAppendingString:[NSAccessibilityVerticalOrientationValue description]]);
if ([NSAccessibilityVerticalScrollBarAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVerticalScrollBarAttribute forKey:@"NSAccessibilityVerticalScrollBarAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVerticalScrollBarAttribute with object " stringByAppendingString:[NSAccessibilityVerticalScrollBarAttribute description]]);
if ([NSAccessibilityVisibleCharacterRangeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleCharacterRangeAttribute forKey:@"NSAccessibilityVisibleCharacterRangeAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleCharacterRangeAttribute with object " stringByAppendingString:[NSAccessibilityVisibleCharacterRangeAttribute description]]);
if ([NSAccessibilityVisibleChildrenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleChildrenAttribute forKey:@"NSAccessibilityVisibleChildrenAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleChildrenAttribute with object " stringByAppendingString:[NSAccessibilityVisibleChildrenAttribute description]]);
if ([NSAccessibilityVisibleColumnsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleColumnsAttribute forKey:@"NSAccessibilityVisibleColumnsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleColumnsAttribute with object " stringByAppendingString:[NSAccessibilityVisibleColumnsAttribute description]]);
if ([NSAccessibilityVisibleNameKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleNameKey forKey:@"NSAccessibilityVisibleNameKey"]; else NSLog([@"Can't initialize NSAccessibilityVisibleNameKey with object " stringByAppendingString:[NSAccessibilityVisibleNameKey description]]);
if ([NSAccessibilityVisibleRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleRowsAttribute forKey:@"NSAccessibilityVisibleRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleRowsAttribute with object " stringByAppendingString:[NSAccessibilityVisibleRowsAttribute description]]);
if ([NSAccessibilityWindowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowAttribute forKey:@"NSAccessibilityWindowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityWindowAttribute with object " stringByAppendingString:[NSAccessibilityWindowAttribute description]]);
if ([NSAccessibilityWindowCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowCreatedNotification forKey:@"NSAccessibilityWindowCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowCreatedNotification with object " stringByAppendingString:[NSAccessibilityWindowCreatedNotification description]]);
if ([NSAccessibilityWindowDeminiaturizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowDeminiaturizedNotification forKey:@"NSAccessibilityWindowDeminiaturizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowDeminiaturizedNotification with object " stringByAppendingString:[NSAccessibilityWindowDeminiaturizedNotification description]]);
if ([NSAccessibilityWindowMiniaturizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowMiniaturizedNotification forKey:@"NSAccessibilityWindowMiniaturizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowMiniaturizedNotification with object " stringByAppendingString:[NSAccessibilityWindowMiniaturizedNotification description]]);
if ([NSAccessibilityWindowMovedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowMovedNotification forKey:@"NSAccessibilityWindowMovedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowMovedNotification with object " stringByAppendingString:[NSAccessibilityWindowMovedNotification description]]);
if ([NSAccessibilityWindowResizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowResizedNotification forKey:@"NSAccessibilityWindowResizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowResizedNotification with object " stringByAppendingString:[NSAccessibilityWindowResizedNotification description]]);
if ([NSAccessibilityWindowRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowRole forKey:@"NSAccessibilityWindowRole"]; else NSLog([@"Can't initialize NSAccessibilityWindowRole with object " stringByAppendingString:[NSAccessibilityWindowRole description]]);
if ([NSAccessibilityWindowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowsAttribute forKey:@"NSAccessibilityWindowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityWindowsAttribute with object " stringByAppendingString:[NSAccessibilityWindowsAttribute description]]);
if ([NSAccessibilityZoomButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityZoomButtonAttribute forKey:@"NSAccessibilityZoomButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityZoomButtonAttribute with object " stringByAppendingString:[NSAccessibilityZoomButtonAttribute description]]);
if ([NSAccessibilityZoomButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityZoomButtonSubrole forKey:@"NSAccessibilityZoomButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityZoomButtonSubrole with object " stringByAppendingString:[NSAccessibilityZoomButtonSubrole description]]);
if ([NSAlignmentBinding isKindOfClass:[NSString class]]) [d setObject:NSAlignmentBinding forKey:@"NSAlignmentBinding"]; else NSLog([@"Can't initialize NSAlignmentBinding with object " stringByAppendingString:[NSAlignmentBinding description]]);
if ([NSAllRomanInputSourcesLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSAllRomanInputSourcesLocaleIdentifier forKey:@"NSAllRomanInputSourcesLocaleIdentifier"]; else NSLog([@"Can't initialize NSAllRomanInputSourcesLocaleIdentifier with object " stringByAppendingString:[NSAllRomanInputSourcesLocaleIdentifier description]]);
if ([NSAllowsEditingMultipleValuesSelectionBindingOption isKindOfClass:[NSString class]]) [d setObject:NSAllowsEditingMultipleValuesSelectionBindingOption forKey:@"NSAllowsEditingMultipleValuesSelectionBindingOption"]; else NSLog([@"Can't initialize NSAllowsEditingMultipleValuesSelectionBindingOption with object " stringByAppendingString:[NSAllowsEditingMultipleValuesSelectionBindingOption description]]);
if ([NSAllowsNullArgumentBindingOption isKindOfClass:[NSString class]]) [d setObject:NSAllowsNullArgumentBindingOption forKey:@"NSAllowsNullArgumentBindingOption"]; else NSLog([@"Can't initialize NSAllowsNullArgumentBindingOption with object " stringByAppendingString:[NSAllowsNullArgumentBindingOption description]]);
if ([NSAlternateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSAlternateImageBinding forKey:@"NSAlternateImageBinding"]; else NSLog([@"Can't initialize NSAlternateImageBinding with object " stringByAppendingString:[NSAlternateImageBinding description]]);
if ([NSAlternateTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSAlternateTitleBinding forKey:@"NSAlternateTitleBinding"]; else NSLog([@"Can't initialize NSAlternateTitleBinding with object " stringByAppendingString:[NSAlternateTitleBinding description]]);
if ([NSAlwaysPresentsApplicationModalAlertsBindingOption isKindOfClass:[NSString class]]) [d setObject:NSAlwaysPresentsApplicationModalAlertsBindingOption forKey:@"NSAlwaysPresentsApplicationModalAlertsBindingOption"]; else NSLog([@"Can't initialize NSAlwaysPresentsApplicationModalAlertsBindingOption with object " stringByAppendingString:[NSAlwaysPresentsApplicationModalAlertsBindingOption description]]);
if ([NSAnimateBinding isKindOfClass:[NSString class]]) [d setObject:NSAnimateBinding forKey:@"NSAnimateBinding"]; else NSLog([@"Can't initialize NSAnimateBinding with object " stringByAppendingString:[NSAnimateBinding description]]);
if ([NSAnimationDelayBinding isKindOfClass:[NSString class]]) [d setObject:NSAnimationDelayBinding forKey:@"NSAnimationDelayBinding"]; else NSLog([@"Can't initialize NSAnimationDelayBinding with object " stringByAppendingString:[NSAnimationDelayBinding description]]);
if ([NSAnimationProgressMark isKindOfClass:[NSString class]]) [d setObject:NSAnimationProgressMark forKey:@"NSAnimationProgressMark"]; else NSLog([@"Can't initialize NSAnimationProgressMark with object " stringByAppendingString:[NSAnimationProgressMark description]]);
if ([NSAnimationProgressMarkNotification isKindOfClass:[NSString class]]) [d setObject:NSAnimationProgressMarkNotification forKey:@"NSAnimationProgressMarkNotification"]; else NSLog([@"Can't initialize NSAnimationProgressMarkNotification with object " stringByAppendingString:[NSAnimationProgressMarkNotification description]]);
if ([NSAnimationTriggerOrderIn isKindOfClass:[NSString class]]) [d setObject:NSAnimationTriggerOrderIn forKey:@"NSAnimationTriggerOrderIn"]; else NSLog([@"Can't initialize NSAnimationTriggerOrderIn with object " stringByAppendingString:[NSAnimationTriggerOrderIn description]]);
if ([NSAnimationTriggerOrderOut isKindOfClass:[NSString class]]) [d setObject:NSAnimationTriggerOrderOut forKey:@"NSAnimationTriggerOrderOut"]; else NSLog([@"Can't initialize NSAnimationTriggerOrderOut with object " stringByAppendingString:[NSAnimationTriggerOrderOut description]]);
if ([NSAntialiasThresholdChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAntialiasThresholdChangedNotification forKey:@"NSAntialiasThresholdChangedNotification"]; else NSLog([@"Can't initialize NSAntialiasThresholdChangedNotification with object " stringByAppendingString:[NSAntialiasThresholdChangedNotification description]]);
if ([NSApp isKindOfClass:[NSString class]]) [d setObject:NSApp forKey:@"NSApp"]; else NSLog([@"Can't initialize NSApp with object " stringByAppendingString:[NSApp description]]);
if ([NSAppKitIgnoredException isKindOfClass:[NSString class]]) [d setObject:NSAppKitIgnoredException forKey:@"NSAppKitIgnoredException"]; else NSLog([@"Can't initialize NSAppKitIgnoredException with object " stringByAppendingString:[NSAppKitIgnoredException description]]);
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber] forKey:@"NSAppKitVersionNumber"];
if ([NSAppKitVirtualMemoryException isKindOfClass:[NSString class]]) [d setObject:NSAppKitVirtualMemoryException forKey:@"NSAppKitVirtualMemoryException"]; else NSLog([@"Can't initialize NSAppKitVirtualMemoryException with object " stringByAppendingString:[NSAppKitVirtualMemoryException description]]);
if ([NSApplicationDidBecomeActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidBecomeActiveNotification forKey:@"NSApplicationDidBecomeActiveNotification"]; else NSLog([@"Can't initialize NSApplicationDidBecomeActiveNotification with object " stringByAppendingString:[NSApplicationDidBecomeActiveNotification description]]);
if ([NSApplicationDidChangeScreenParametersNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidChangeScreenParametersNotification forKey:@"NSApplicationDidChangeScreenParametersNotification"]; else NSLog([@"Can't initialize NSApplicationDidChangeScreenParametersNotification with object " stringByAppendingString:[NSApplicationDidChangeScreenParametersNotification description]]);
if ([NSApplicationDidFinishLaunchingNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidFinishLaunchingNotification forKey:@"NSApplicationDidFinishLaunchingNotification"]; else NSLog([@"Can't initialize NSApplicationDidFinishLaunchingNotification with object " stringByAppendingString:[NSApplicationDidFinishLaunchingNotification description]]);
if ([NSApplicationDidHideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidHideNotification forKey:@"NSApplicationDidHideNotification"]; else NSLog([@"Can't initialize NSApplicationDidHideNotification with object " stringByAppendingString:[NSApplicationDidHideNotification description]]);
if ([NSApplicationDidResignActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidResignActiveNotification forKey:@"NSApplicationDidResignActiveNotification"]; else NSLog([@"Can't initialize NSApplicationDidResignActiveNotification with object " stringByAppendingString:[NSApplicationDidResignActiveNotification description]]);
if ([NSApplicationDidUnhideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidUnhideNotification forKey:@"NSApplicationDidUnhideNotification"]; else NSLog([@"Can't initialize NSApplicationDidUnhideNotification with object " stringByAppendingString:[NSApplicationDidUnhideNotification description]]);
if ([NSApplicationDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidUpdateNotification forKey:@"NSApplicationDidUpdateNotification"]; else NSLog([@"Can't initialize NSApplicationDidUpdateNotification with object " stringByAppendingString:[NSApplicationDidUpdateNotification description]]);
if ([NSApplicationFileType isKindOfClass:[NSString class]]) [d setObject:NSApplicationFileType forKey:@"NSApplicationFileType"]; else NSLog([@"Can't initialize NSApplicationFileType with object " stringByAppendingString:[NSApplicationFileType description]]);
if ([NSApplicationWillBecomeActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillBecomeActiveNotification forKey:@"NSApplicationWillBecomeActiveNotification"]; else NSLog([@"Can't initialize NSApplicationWillBecomeActiveNotification with object " stringByAppendingString:[NSApplicationWillBecomeActiveNotification description]]);
if ([NSApplicationWillFinishLaunchingNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillFinishLaunchingNotification forKey:@"NSApplicationWillFinishLaunchingNotification"]; else NSLog([@"Can't initialize NSApplicationWillFinishLaunchingNotification with object " stringByAppendingString:[NSApplicationWillFinishLaunchingNotification description]]);
if ([NSApplicationWillHideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillHideNotification forKey:@"NSApplicationWillHideNotification"]; else NSLog([@"Can't initialize NSApplicationWillHideNotification with object " stringByAppendingString:[NSApplicationWillHideNotification description]]);
if ([NSApplicationWillResignActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillResignActiveNotification forKey:@"NSApplicationWillResignActiveNotification"]; else NSLog([@"Can't initialize NSApplicationWillResignActiveNotification with object " stringByAppendingString:[NSApplicationWillResignActiveNotification description]]);
if ([NSApplicationWillTerminateNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillTerminateNotification forKey:@"NSApplicationWillTerminateNotification"]; else NSLog([@"Can't initialize NSApplicationWillTerminateNotification with object " stringByAppendingString:[NSApplicationWillTerminateNotification description]]);
if ([NSApplicationWillUnhideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillUnhideNotification forKey:@"NSApplicationWillUnhideNotification"]; else NSLog([@"Can't initialize NSApplicationWillUnhideNotification with object " stringByAppendingString:[NSApplicationWillUnhideNotification description]]);
if ([NSApplicationWillUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillUpdateNotification forKey:@"NSApplicationWillUpdateNotification"]; else NSLog([@"Can't initialize NSApplicationWillUpdateNotification with object " stringByAppendingString:[NSApplicationWillUpdateNotification description]]);
if ([NSArgumentBinding isKindOfClass:[NSString class]]) [d setObject:NSArgumentBinding forKey:@"NSArgumentBinding"]; else NSLog([@"Can't initialize NSArgumentBinding with object " stringByAppendingString:[NSArgumentBinding description]]);
if ([NSAttachmentAttributeName isKindOfClass:[NSString class]]) [d setObject:NSAttachmentAttributeName forKey:@"NSAttachmentAttributeName"]; else NSLog([@"Can't initialize NSAttachmentAttributeName with object " stringByAppendingString:[NSAttachmentAttributeName description]]);
if ([NSAttributedStringBinding isKindOfClass:[NSString class]]) [d setObject:NSAttributedStringBinding forKey:@"NSAttributedStringBinding"]; else NSLog([@"Can't initialize NSAttributedStringBinding with object " stringByAppendingString:[NSAttributedStringBinding description]]);
if ([NSAuthorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSAuthorDocumentAttribute forKey:@"NSAuthorDocumentAttribute"]; else NSLog([@"Can't initialize NSAuthorDocumentAttribute with object " stringByAppendingString:[NSAuthorDocumentAttribute description]]);
if ([NSBackgroundColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSBackgroundColorAttributeName forKey:@"NSBackgroundColorAttributeName"]; else NSLog([@"Can't initialize NSBackgroundColorAttributeName with object " stringByAppendingString:[NSBackgroundColorAttributeName description]]);
if ([NSBackgroundColorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSBackgroundColorDocumentAttribute forKey:@"NSBackgroundColorDocumentAttribute"]; else NSLog([@"Can't initialize NSBackgroundColorDocumentAttribute with object " stringByAppendingString:[NSBackgroundColorDocumentAttribute description]]);
if ([NSBadBitmapParametersException isKindOfClass:[NSString class]]) [d setObject:NSBadBitmapParametersException forKey:@"NSBadBitmapParametersException"]; else NSLog([@"Can't initialize NSBadBitmapParametersException with object " stringByAppendingString:[NSBadBitmapParametersException description]]);
if ([NSBadComparisonException isKindOfClass:[NSString class]]) [d setObject:NSBadComparisonException forKey:@"NSBadComparisonException"]; else NSLog([@"Can't initialize NSBadComparisonException with object " stringByAppendingString:[NSBadComparisonException description]]);
if ([NSBadRTFColorTableException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFColorTableException forKey:@"NSBadRTFColorTableException"]; else NSLog([@"Can't initialize NSBadRTFColorTableException with object " stringByAppendingString:[NSBadRTFColorTableException description]]);
if ([NSBadRTFDirectiveException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFDirectiveException forKey:@"NSBadRTFDirectiveException"]; else NSLog([@"Can't initialize NSBadRTFDirectiveException with object " stringByAppendingString:[NSBadRTFDirectiveException description]]);
if ([NSBadRTFFontTableException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFFontTableException forKey:@"NSBadRTFFontTableException"]; else NSLog([@"Can't initialize NSBadRTFFontTableException with object " stringByAppendingString:[NSBadRTFFontTableException description]]);
if ([NSBadRTFStyleSheetException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFStyleSheetException forKey:@"NSBadRTFStyleSheetException"]; else NSLog([@"Can't initialize NSBadRTFStyleSheetException with object " stringByAppendingString:[NSBadRTFStyleSheetException description]]);
if ([NSBaseURLDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSBaseURLDocumentOption forKey:@"NSBaseURLDocumentOption"]; else NSLog([@"Can't initialize NSBaseURLDocumentOption with object " stringByAppendingString:[NSBaseURLDocumentOption description]]);
if ([NSBaselineOffsetAttributeName isKindOfClass:[NSString class]]) [d setObject:NSBaselineOffsetAttributeName forKey:@"NSBaselineOffsetAttributeName"]; else NSLog([@"Can't initialize NSBaselineOffsetAttributeName with object " stringByAppendingString:[NSBaselineOffsetAttributeName description]]);
if ([NSBottomMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSBottomMarginDocumentAttribute forKey:@"NSBottomMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSBottomMarginDocumentAttribute with object " stringByAppendingString:[NSBottomMarginDocumentAttribute description]]);
if ([NSBrowserColumnConfigurationDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSBrowserColumnConfigurationDidChangeNotification forKey:@"NSBrowserColumnConfigurationDidChangeNotification"]; else NSLog([@"Can't initialize NSBrowserColumnConfigurationDidChangeNotification with object " stringByAppendingString:[NSBrowserColumnConfigurationDidChangeNotification description]]);
if ([NSBrowserIllegalDelegateException isKindOfClass:[NSString class]]) [d setObject:NSBrowserIllegalDelegateException forKey:@"NSBrowserIllegalDelegateException"]; else NSLog([@"Can't initialize NSBrowserIllegalDelegateException with object " stringByAppendingString:[NSBrowserIllegalDelegateException description]]);
if ([NSCalibratedBlackColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCalibratedBlackColorSpace forKey:@"NSCalibratedBlackColorSpace"]; else NSLog([@"Can't initialize NSCalibratedBlackColorSpace with object " stringByAppendingString:[NSCalibratedBlackColorSpace description]]);
if ([NSCalibratedRGBColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCalibratedRGBColorSpace forKey:@"NSCalibratedRGBColorSpace"]; else NSLog([@"Can't initialize NSCalibratedRGBColorSpace with object " stringByAppendingString:[NSCalibratedRGBColorSpace description]]);
if ([NSCalibratedWhiteColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCalibratedWhiteColorSpace forKey:@"NSCalibratedWhiteColorSpace"]; else NSLog([@"Can't initialize NSCalibratedWhiteColorSpace with object " stringByAppendingString:[NSCalibratedWhiteColorSpace description]]);
if ([NSCharacterEncodingDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCharacterEncodingDocumentAttribute forKey:@"NSCharacterEncodingDocumentAttribute"]; else NSLog([@"Can't initialize NSCharacterEncodingDocumentAttribute with object " stringByAppendingString:[NSCharacterEncodingDocumentAttribute description]]);
if ([NSCharacterEncodingDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSCharacterEncodingDocumentOption forKey:@"NSCharacterEncodingDocumentOption"]; else NSLog([@"Can't initialize NSCharacterEncodingDocumentOption with object " stringByAppendingString:[NSCharacterEncodingDocumentOption description]]);
if ([NSCharacterShapeAttributeName isKindOfClass:[NSString class]]) [d setObject:NSCharacterShapeAttributeName forKey:@"NSCharacterShapeAttributeName"]; else NSLog([@"Can't initialize NSCharacterShapeAttributeName with object " stringByAppendingString:[NSCharacterShapeAttributeName description]]);
if ([NSCocoaVersionDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCocoaVersionDocumentAttribute forKey:@"NSCocoaVersionDocumentAttribute"]; else NSLog([@"Can't initialize NSCocoaVersionDocumentAttribute with object " stringByAppendingString:[NSCocoaVersionDocumentAttribute description]]);
if ([NSColorListDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSColorListDidChangeNotification forKey:@"NSColorListDidChangeNotification"]; else NSLog([@"Can't initialize NSColorListDidChangeNotification with object " stringByAppendingString:[NSColorListDidChangeNotification description]]);
if ([NSColorListIOException isKindOfClass:[NSString class]]) [d setObject:NSColorListIOException forKey:@"NSColorListIOException"]; else NSLog([@"Can't initialize NSColorListIOException with object " stringByAppendingString:[NSColorListIOException description]]);
if ([NSColorListNotEditableException isKindOfClass:[NSString class]]) [d setObject:NSColorListNotEditableException forKey:@"NSColorListNotEditableException"]; else NSLog([@"Can't initialize NSColorListNotEditableException with object " stringByAppendingString:[NSColorListNotEditableException description]]);
if ([NSColorPanelColorDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSColorPanelColorDidChangeNotification forKey:@"NSColorPanelColorDidChangeNotification"]; else NSLog([@"Can't initialize NSColorPanelColorDidChangeNotification with object " stringByAppendingString:[NSColorPanelColorDidChangeNotification description]]);
if ([NSColorPboardType isKindOfClass:[NSString class]]) [d setObject:NSColorPboardType forKey:@"NSColorPboardType"]; else NSLog([@"Can't initialize NSColorPboardType with object " stringByAppendingString:[NSColorPboardType description]]);
if ([NSComboBoxSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxSelectionDidChangeNotification forKey:@"NSComboBoxSelectionDidChangeNotification"]; else NSLog([@"Can't initialize NSComboBoxSelectionDidChangeNotification with object " stringByAppendingString:[NSComboBoxSelectionDidChangeNotification description]]);
if ([NSComboBoxSelectionIsChangingNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxSelectionIsChangingNotification forKey:@"NSComboBoxSelectionIsChangingNotification"]; else NSLog([@"Can't initialize NSComboBoxSelectionIsChangingNotification with object " stringByAppendingString:[NSComboBoxSelectionIsChangingNotification description]]);
if ([NSComboBoxWillDismissNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxWillDismissNotification forKey:@"NSComboBoxWillDismissNotification"]; else NSLog([@"Can't initialize NSComboBoxWillDismissNotification with object " stringByAppendingString:[NSComboBoxWillDismissNotification description]]);
if ([NSComboBoxWillPopUpNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxWillPopUpNotification forKey:@"NSComboBoxWillPopUpNotification"]; else NSLog([@"Can't initialize NSComboBoxWillPopUpNotification with object " stringByAppendingString:[NSComboBoxWillPopUpNotification description]]);
if ([NSCommentDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCommentDocumentAttribute forKey:@"NSCommentDocumentAttribute"]; else NSLog([@"Can't initialize NSCommentDocumentAttribute with object " stringByAppendingString:[NSCommentDocumentAttribute description]]);
if ([NSCompanyDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCompanyDocumentAttribute forKey:@"NSCompanyDocumentAttribute"]; else NSLog([@"Can't initialize NSCompanyDocumentAttribute with object " stringByAppendingString:[NSCompanyDocumentAttribute description]]);
if ([NSConditionallySetsEditableBindingOption isKindOfClass:[NSString class]]) [d setObject:NSConditionallySetsEditableBindingOption forKey:@"NSConditionallySetsEditableBindingOption"]; else NSLog([@"Can't initialize NSConditionallySetsEditableBindingOption with object " stringByAppendingString:[NSConditionallySetsEditableBindingOption description]]);
if ([NSConditionallySetsEnabledBindingOption isKindOfClass:[NSString class]]) [d setObject:NSConditionallySetsEnabledBindingOption forKey:@"NSConditionallySetsEnabledBindingOption"]; else NSLog([@"Can't initialize NSConditionallySetsEnabledBindingOption with object " stringByAppendingString:[NSConditionallySetsEnabledBindingOption description]]);
if ([NSConditionallySetsHiddenBindingOption isKindOfClass:[NSString class]]) [d setObject:NSConditionallySetsHiddenBindingOption forKey:@"NSConditionallySetsHiddenBindingOption"]; else NSLog([@"Can't initialize NSConditionallySetsHiddenBindingOption with object " stringByAppendingString:[NSConditionallySetsHiddenBindingOption description]]);
if ([NSContentArrayBinding isKindOfClass:[NSString class]]) [d setObject:NSContentArrayBinding forKey:@"NSContentArrayBinding"]; else NSLog([@"Can't initialize NSContentArrayBinding with object " stringByAppendingString:[NSContentArrayBinding description]]);
if ([NSContentArrayForMultipleSelectionBinding isKindOfClass:[NSString class]]) [d setObject:NSContentArrayForMultipleSelectionBinding forKey:@"NSContentArrayForMultipleSelectionBinding"]; else NSLog([@"Can't initialize NSContentArrayForMultipleSelectionBinding with object " stringByAppendingString:[NSContentArrayForMultipleSelectionBinding description]]);
if ([NSContentBinding isKindOfClass:[NSString class]]) [d setObject:NSContentBinding forKey:@"NSContentBinding"]; else NSLog([@"Can't initialize NSContentBinding with object " stringByAppendingString:[NSContentBinding description]]);
if ([NSContentDictionaryBinding isKindOfClass:[NSString class]]) [d setObject:NSContentDictionaryBinding forKey:@"NSContentDictionaryBinding"]; else NSLog([@"Can't initialize NSContentDictionaryBinding with object " stringByAppendingString:[NSContentDictionaryBinding description]]);
if ([NSContentHeightBinding isKindOfClass:[NSString class]]) [d setObject:NSContentHeightBinding forKey:@"NSContentHeightBinding"]; else NSLog([@"Can't initialize NSContentHeightBinding with object " stringByAppendingString:[NSContentHeightBinding description]]);
if ([NSContentObjectBinding isKindOfClass:[NSString class]]) [d setObject:NSContentObjectBinding forKey:@"NSContentObjectBinding"]; else NSLog([@"Can't initialize NSContentObjectBinding with object " stringByAppendingString:[NSContentObjectBinding description]]);
if ([NSContentObjectsBinding isKindOfClass:[NSString class]]) [d setObject:NSContentObjectsBinding forKey:@"NSContentObjectsBinding"]; else NSLog([@"Can't initialize NSContentObjectsBinding with object " stringByAppendingString:[NSContentObjectsBinding description]]);
if ([NSContentPlacementTagBindingOption isKindOfClass:[NSString class]]) [d setObject:NSContentPlacementTagBindingOption forKey:@"NSContentPlacementTagBindingOption"]; else NSLog([@"Can't initialize NSContentPlacementTagBindingOption with object " stringByAppendingString:[NSContentPlacementTagBindingOption description]]);
if ([NSContentSetBinding isKindOfClass:[NSString class]]) [d setObject:NSContentSetBinding forKey:@"NSContentSetBinding"]; else NSLog([@"Can't initialize NSContentSetBinding with object " stringByAppendingString:[NSContentSetBinding description]]);
if ([NSContentValuesBinding isKindOfClass:[NSString class]]) [d setObject:NSContentValuesBinding forKey:@"NSContentValuesBinding"]; else NSLog([@"Can't initialize NSContentValuesBinding with object " stringByAppendingString:[NSContentValuesBinding description]]);
if ([NSContentWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSContentWidthBinding forKey:@"NSContentWidthBinding"]; else NSLog([@"Can't initialize NSContentWidthBinding with object " stringByAppendingString:[NSContentWidthBinding description]]);
if ([NSContextHelpModeDidActivateNotification isKindOfClass:[NSString class]]) [d setObject:NSContextHelpModeDidActivateNotification forKey:@"NSContextHelpModeDidActivateNotification"]; else NSLog([@"Can't initialize NSContextHelpModeDidActivateNotification with object " stringByAppendingString:[NSContextHelpModeDidActivateNotification description]]);
if ([NSContextHelpModeDidDeactivateNotification isKindOfClass:[NSString class]]) [d setObject:NSContextHelpModeDidDeactivateNotification forKey:@"NSContextHelpModeDidDeactivateNotification"]; else NSLog([@"Can't initialize NSContextHelpModeDidDeactivateNotification with object " stringByAppendingString:[NSContextHelpModeDidDeactivateNotification description]]);
if ([NSContinuouslyUpdatesValueBindingOption isKindOfClass:[NSString class]]) [d setObject:NSContinuouslyUpdatesValueBindingOption forKey:@"NSContinuouslyUpdatesValueBindingOption"]; else NSLog([@"Can't initialize NSContinuouslyUpdatesValueBindingOption with object " stringByAppendingString:[NSContinuouslyUpdatesValueBindingOption description]]);
if ([NSControlTextDidBeginEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTextDidBeginEditingNotification forKey:@"NSControlTextDidBeginEditingNotification"]; else NSLog([@"Can't initialize NSControlTextDidBeginEditingNotification with object " stringByAppendingString:[NSControlTextDidBeginEditingNotification description]]);
if ([NSControlTextDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTextDidChangeNotification forKey:@"NSControlTextDidChangeNotification"]; else NSLog([@"Can't initialize NSControlTextDidChangeNotification with object " stringByAppendingString:[NSControlTextDidChangeNotification description]]);
if ([NSControlTextDidEndEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTextDidEndEditingNotification forKey:@"NSControlTextDidEndEditingNotification"]; else NSLog([@"Can't initialize NSControlTextDidEndEditingNotification with object " stringByAppendingString:[NSControlTextDidEndEditingNotification description]]);
if ([NSControlTintDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTintDidChangeNotification forKey:@"NSControlTintDidChangeNotification"]; else NSLog([@"Can't initialize NSControlTintDidChangeNotification with object " stringByAppendingString:[NSControlTintDidChangeNotification description]]);
if ([NSConvertedDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSConvertedDocumentAttribute forKey:@"NSConvertedDocumentAttribute"]; else NSLog([@"Can't initialize NSConvertedDocumentAttribute with object " stringByAppendingString:[NSConvertedDocumentAttribute description]]);
if ([NSCopyrightDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCopyrightDocumentAttribute forKey:@"NSCopyrightDocumentAttribute"]; else NSLog([@"Can't initialize NSCopyrightDocumentAttribute with object " stringByAppendingString:[NSCopyrightDocumentAttribute description]]);
if ([NSCreatesSortDescriptorBindingOption isKindOfClass:[NSString class]]) [d setObject:NSCreatesSortDescriptorBindingOption forKey:@"NSCreatesSortDescriptorBindingOption"]; else NSLog([@"Can't initialize NSCreatesSortDescriptorBindingOption with object " stringByAppendingString:[NSCreatesSortDescriptorBindingOption description]]);
if ([NSCreationTimeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCreationTimeDocumentAttribute forKey:@"NSCreationTimeDocumentAttribute"]; else NSLog([@"Can't initialize NSCreationTimeDocumentAttribute with object " stringByAppendingString:[NSCreationTimeDocumentAttribute description]]);
if ([NSCriticalValueBinding isKindOfClass:[NSString class]]) [d setObject:NSCriticalValueBinding forKey:@"NSCriticalValueBinding"]; else NSLog([@"Can't initialize NSCriticalValueBinding with object " stringByAppendingString:[NSCriticalValueBinding description]]);
if ([NSCursorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSCursorAttributeName forKey:@"NSCursorAttributeName"]; else NSLog([@"Can't initialize NSCursorAttributeName with object " stringByAppendingString:[NSCursorAttributeName description]]);
if ([NSCustomColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCustomColorSpace forKey:@"NSCustomColorSpace"]; else NSLog([@"Can't initialize NSCustomColorSpace with object " stringByAppendingString:[NSCustomColorSpace description]]);
if ([NSDataBinding isKindOfClass:[NSString class]]) [d setObject:NSDataBinding forKey:@"NSDataBinding"]; else NSLog([@"Can't initialize NSDataBinding with object " stringByAppendingString:[NSDataBinding description]]);
if ([NSDefaultAttributesDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSDefaultAttributesDocumentOption forKey:@"NSDefaultAttributesDocumentOption"]; else NSLog([@"Can't initialize NSDefaultAttributesDocumentOption with object " stringByAppendingString:[NSDefaultAttributesDocumentOption description]]);
if ([NSDefaultTabIntervalDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSDefaultTabIntervalDocumentAttribute forKey:@"NSDefaultTabIntervalDocumentAttribute"]; else NSLog([@"Can't initialize NSDefaultTabIntervalDocumentAttribute with object " stringByAppendingString:[NSDefaultTabIntervalDocumentAttribute description]]);
if ([NSDeletesObjectsOnRemoveBindingsOption isKindOfClass:[NSString class]]) [d setObject:NSDeletesObjectsOnRemoveBindingsOption forKey:@"NSDeletesObjectsOnRemoveBindingsOption"]; else NSLog([@"Can't initialize NSDeletesObjectsOnRemoveBindingsOption with object " stringByAppendingString:[NSDeletesObjectsOnRemoveBindingsOption description]]);
if ([NSDeviceBitsPerSample isKindOfClass:[NSString class]]) [d setObject:NSDeviceBitsPerSample forKey:@"NSDeviceBitsPerSample"]; else NSLog([@"Can't initialize NSDeviceBitsPerSample with object " stringByAppendingString:[NSDeviceBitsPerSample description]]);
if ([NSDeviceBlackColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceBlackColorSpace forKey:@"NSDeviceBlackColorSpace"]; else NSLog([@"Can't initialize NSDeviceBlackColorSpace with object " stringByAppendingString:[NSDeviceBlackColorSpace description]]);
if ([NSDeviceCMYKColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceCMYKColorSpace forKey:@"NSDeviceCMYKColorSpace"]; else NSLog([@"Can't initialize NSDeviceCMYKColorSpace with object " stringByAppendingString:[NSDeviceCMYKColorSpace description]]);
if ([NSDeviceColorSpaceName isKindOfClass:[NSString class]]) [d setObject:NSDeviceColorSpaceName forKey:@"NSDeviceColorSpaceName"]; else NSLog([@"Can't initialize NSDeviceColorSpaceName with object " stringByAppendingString:[NSDeviceColorSpaceName description]]);
if ([NSDeviceIsPrinter isKindOfClass:[NSString class]]) [d setObject:NSDeviceIsPrinter forKey:@"NSDeviceIsPrinter"]; else NSLog([@"Can't initialize NSDeviceIsPrinter with object " stringByAppendingString:[NSDeviceIsPrinter description]]);
if ([NSDeviceIsScreen isKindOfClass:[NSString class]]) [d setObject:NSDeviceIsScreen forKey:@"NSDeviceIsScreen"]; else NSLog([@"Can't initialize NSDeviceIsScreen with object " stringByAppendingString:[NSDeviceIsScreen description]]);
if ([NSDeviceRGBColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceRGBColorSpace forKey:@"NSDeviceRGBColorSpace"]; else NSLog([@"Can't initialize NSDeviceRGBColorSpace with object " stringByAppendingString:[NSDeviceRGBColorSpace description]]);
if ([NSDeviceResolution isKindOfClass:[NSString class]]) [d setObject:NSDeviceResolution forKey:@"NSDeviceResolution"]; else NSLog([@"Can't initialize NSDeviceResolution with object " stringByAppendingString:[NSDeviceResolution description]]);
if ([NSDeviceSize isKindOfClass:[NSString class]]) [d setObject:NSDeviceSize forKey:@"NSDeviceSize"]; else NSLog([@"Can't initialize NSDeviceSize with object " stringByAppendingString:[NSDeviceSize description]]);
if ([NSDeviceWhiteColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceWhiteColorSpace forKey:@"NSDeviceWhiteColorSpace"]; else NSLog([@"Can't initialize NSDeviceWhiteColorSpace with object " stringByAppendingString:[NSDeviceWhiteColorSpace description]]);
if ([NSDirectoryFileType isKindOfClass:[NSString class]]) [d setObject:NSDirectoryFileType forKey:@"NSDirectoryFileType"]; else NSLog([@"Can't initialize NSDirectoryFileType with object " stringByAppendingString:[NSDirectoryFileType description]]);
if ([NSDisplayNameBindingOption isKindOfClass:[NSString class]]) [d setObject:NSDisplayNameBindingOption forKey:@"NSDisplayNameBindingOption"]; else NSLog([@"Can't initialize NSDisplayNameBindingOption with object " stringByAppendingString:[NSDisplayNameBindingOption description]]);
if ([NSDisplayPatternBindingOption isKindOfClass:[NSString class]]) [d setObject:NSDisplayPatternBindingOption forKey:@"NSDisplayPatternBindingOption"]; else NSLog([@"Can't initialize NSDisplayPatternBindingOption with object " stringByAppendingString:[NSDisplayPatternBindingOption description]]);
if ([NSDisplayPatternTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSDisplayPatternTitleBinding forKey:@"NSDisplayPatternTitleBinding"]; else NSLog([@"Can't initialize NSDisplayPatternTitleBinding with object " stringByAppendingString:[NSDisplayPatternTitleBinding description]]);
if ([NSDisplayPatternValueBinding isKindOfClass:[NSString class]]) [d setObject:NSDisplayPatternValueBinding forKey:@"NSDisplayPatternValueBinding"]; else NSLog([@"Can't initialize NSDisplayPatternValueBinding with object " stringByAppendingString:[NSDisplayPatternValueBinding description]]);
if ([NSDocFormatTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSDocFormatTextDocumentType forKey:@"NSDocFormatTextDocumentType"]; else NSLog([@"Can't initialize NSDocFormatTextDocumentType with object " stringByAppendingString:[NSDocFormatTextDocumentType description]]);
if ([NSDocumentEditedBinding isKindOfClass:[NSString class]]) [d setObject:NSDocumentEditedBinding forKey:@"NSDocumentEditedBinding"]; else NSLog([@"Can't initialize NSDocumentEditedBinding with object " stringByAppendingString:[NSDocumentEditedBinding description]]);
if ([NSDocumentTypeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSDocumentTypeDocumentAttribute forKey:@"NSDocumentTypeDocumentAttribute"]; else NSLog([@"Can't initialize NSDocumentTypeDocumentAttribute with object " stringByAppendingString:[NSDocumentTypeDocumentAttribute description]]);
if ([NSDocumentTypeDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSDocumentTypeDocumentOption forKey:@"NSDocumentTypeDocumentOption"]; else NSLog([@"Can't initialize NSDocumentTypeDocumentOption with object " stringByAppendingString:[NSDocumentTypeDocumentOption description]]);
if ([NSDoubleClickArgumentBinding isKindOfClass:[NSString class]]) [d setObject:NSDoubleClickArgumentBinding forKey:@"NSDoubleClickArgumentBinding"]; else NSLog([@"Can't initialize NSDoubleClickArgumentBinding with object " stringByAppendingString:[NSDoubleClickArgumentBinding description]]);
if ([NSDoubleClickTargetBinding isKindOfClass:[NSString class]]) [d setObject:NSDoubleClickTargetBinding forKey:@"NSDoubleClickTargetBinding"]; else NSLog([@"Can't initialize NSDoubleClickTargetBinding with object " stringByAppendingString:[NSDoubleClickTargetBinding description]]);
if ([NSDragPboard isKindOfClass:[NSString class]]) [d setObject:NSDragPboard forKey:@"NSDragPboard"]; else NSLog([@"Can't initialize NSDragPboard with object " stringByAppendingString:[NSDragPboard description]]);
if ([NSDraggingException isKindOfClass:[NSString class]]) [d setObject:NSDraggingException forKey:@"NSDraggingException"]; else NSLog([@"Can't initialize NSDraggingException with object " stringByAppendingString:[NSDraggingException description]]);
if ([NSDrawerDidCloseNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerDidCloseNotification forKey:@"NSDrawerDidCloseNotification"]; else NSLog([@"Can't initialize NSDrawerDidCloseNotification with object " stringByAppendingString:[NSDrawerDidCloseNotification description]]);
if ([NSDrawerDidOpenNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerDidOpenNotification forKey:@"NSDrawerDidOpenNotification"]; else NSLog([@"Can't initialize NSDrawerDidOpenNotification with object " stringByAppendingString:[NSDrawerDidOpenNotification description]]);
if ([NSDrawerWillCloseNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerWillCloseNotification forKey:@"NSDrawerWillCloseNotification"]; else NSLog([@"Can't initialize NSDrawerWillCloseNotification with object " stringByAppendingString:[NSDrawerWillCloseNotification description]]);
if ([NSDrawerWillOpenNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerWillOpenNotification forKey:@"NSDrawerWillOpenNotification"]; else NSLog([@"Can't initialize NSDrawerWillOpenNotification with object " stringByAppendingString:[NSDrawerWillOpenNotification description]]);
if ([NSEditableBinding isKindOfClass:[NSString class]]) [d setObject:NSEditableBinding forKey:@"NSEditableBinding"]; else NSLog([@"Can't initialize NSEditableBinding with object " stringByAppendingString:[NSEditableBinding description]]);
if ([NSEditorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSEditorDocumentAttribute forKey:@"NSEditorDocumentAttribute"]; else NSLog([@"Can't initialize NSEditorDocumentAttribute with object " stringByAppendingString:[NSEditorDocumentAttribute description]]);
if ([NSEnabledBinding isKindOfClass:[NSString class]]) [d setObject:NSEnabledBinding forKey:@"NSEnabledBinding"]; else NSLog([@"Can't initialize NSEnabledBinding with object " stringByAppendingString:[NSEnabledBinding description]]);
if ([NSEventTrackingRunLoopMode isKindOfClass:[NSString class]]) [d setObject:NSEventTrackingRunLoopMode forKey:@"NSEventTrackingRunLoopMode"]; else NSLog([@"Can't initialize NSEventTrackingRunLoopMode with object " stringByAppendingString:[NSEventTrackingRunLoopMode description]]);
if ([NSExcludedElementsDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSExcludedElementsDocumentAttribute forKey:@"NSExcludedElementsDocumentAttribute"]; else NSLog([@"Can't initialize NSExcludedElementsDocumentAttribute with object " stringByAppendingString:[NSExcludedElementsDocumentAttribute description]]);
if ([NSExcludedKeysBinding isKindOfClass:[NSString class]]) [d setObject:NSExcludedKeysBinding forKey:@"NSExcludedKeysBinding"]; else NSLog([@"Can't initialize NSExcludedKeysBinding with object " stringByAppendingString:[NSExcludedKeysBinding description]]);
if ([NSExpansionAttributeName isKindOfClass:[NSString class]]) [d setObject:NSExpansionAttributeName forKey:@"NSExpansionAttributeName"]; else NSLog([@"Can't initialize NSExpansionAttributeName with object " stringByAppendingString:[NSExpansionAttributeName description]]);
if ([NSFileContentsPboardType isKindOfClass:[NSString class]]) [d setObject:NSFileContentsPboardType forKey:@"NSFileContentsPboardType"]; else NSLog([@"Can't initialize NSFileContentsPboardType with object " stringByAppendingString:[NSFileContentsPboardType description]]);
if ([NSFilenamesPboardType isKindOfClass:[NSString class]]) [d setObject:NSFilenamesPboardType forKey:@"NSFilenamesPboardType"]; else NSLog([@"Can't initialize NSFilenamesPboardType with object " stringByAppendingString:[NSFilenamesPboardType description]]);
if ([NSFilesPromisePboardType isKindOfClass:[NSString class]]) [d setObject:NSFilesPromisePboardType forKey:@"NSFilesPromisePboardType"]; else NSLog([@"Can't initialize NSFilesPromisePboardType with object " stringByAppendingString:[NSFilesPromisePboardType description]]);
if ([NSFilesystemFileType isKindOfClass:[NSString class]]) [d setObject:NSFilesystemFileType forKey:@"NSFilesystemFileType"]; else NSLog([@"Can't initialize NSFilesystemFileType with object " stringByAppendingString:[NSFilesystemFileType description]]);
if ([NSFilterPredicateBinding isKindOfClass:[NSString class]]) [d setObject:NSFilterPredicateBinding forKey:@"NSFilterPredicateBinding"]; else NSLog([@"Can't initialize NSFilterPredicateBinding with object " stringByAppendingString:[NSFilterPredicateBinding description]]);
if ([NSFindPanelCaseInsensitiveSearch isKindOfClass:[NSString class]]) [d setObject:NSFindPanelCaseInsensitiveSearch forKey:@"NSFindPanelCaseInsensitiveSearch"]; else NSLog([@"Can't initialize NSFindPanelCaseInsensitiveSearch with object " stringByAppendingString:[NSFindPanelCaseInsensitiveSearch description]]);
if ([NSFindPanelSearchOptionsPboardType isKindOfClass:[NSString class]]) [d setObject:NSFindPanelSearchOptionsPboardType forKey:@"NSFindPanelSearchOptionsPboardType"]; else NSLog([@"Can't initialize NSFindPanelSearchOptionsPboardType with object " stringByAppendingString:[NSFindPanelSearchOptionsPboardType description]]);
if ([NSFindPanelSubstringMatch isKindOfClass:[NSString class]]) [d setObject:NSFindPanelSubstringMatch forKey:@"NSFindPanelSubstringMatch"]; else NSLog([@"Can't initialize NSFindPanelSubstringMatch with object " stringByAppendingString:[NSFindPanelSubstringMatch description]]);
if ([NSFindPboard isKindOfClass:[NSString class]]) [d setObject:NSFindPboard forKey:@"NSFindPboard"]; else NSLog([@"Can't initialize NSFindPboard with object " stringByAppendingString:[NSFindPboard description]]);
if ([NSFontAttributeName isKindOfClass:[NSString class]]) [d setObject:NSFontAttributeName forKey:@"NSFontAttributeName"]; else NSLog([@"Can't initialize NSFontAttributeName with object " stringByAppendingString:[NSFontAttributeName description]]);
if ([NSFontBinding isKindOfClass:[NSString class]]) [d setObject:NSFontBinding forKey:@"NSFontBinding"]; else NSLog([@"Can't initialize NSFontBinding with object " stringByAppendingString:[NSFontBinding description]]);
if ([NSFontBoldBinding isKindOfClass:[NSString class]]) [d setObject:NSFontBoldBinding forKey:@"NSFontBoldBinding"]; else NSLog([@"Can't initialize NSFontBoldBinding with object " stringByAppendingString:[NSFontBoldBinding description]]);
if ([NSFontCascadeListAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontCascadeListAttribute forKey:@"NSFontCascadeListAttribute"]; else NSLog([@"Can't initialize NSFontCascadeListAttribute with object " stringByAppendingString:[NSFontCascadeListAttribute description]]);
if ([NSFontCharacterSetAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontCharacterSetAttribute forKey:@"NSFontCharacterSetAttribute"]; else NSLog([@"Can't initialize NSFontCharacterSetAttribute with object " stringByAppendingString:[NSFontCharacterSetAttribute description]]);
if ([NSFontFaceAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFaceAttribute forKey:@"NSFontFaceAttribute"]; else NSLog([@"Can't initialize NSFontFaceAttribute with object " stringByAppendingString:[NSFontFaceAttribute description]]);
if ([NSFontFamilyAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFamilyAttribute forKey:@"NSFontFamilyAttribute"]; else NSLog([@"Can't initialize NSFontFamilyAttribute with object " stringByAppendingString:[NSFontFamilyAttribute description]]);
if ([NSFontFamilyNameBinding isKindOfClass:[NSString class]]) [d setObject:NSFontFamilyNameBinding forKey:@"NSFontFamilyNameBinding"]; else NSLog([@"Can't initialize NSFontFamilyNameBinding with object " stringByAppendingString:[NSFontFamilyNameBinding description]]);
if ([NSFontFeatureSelectorIdentifierKey isKindOfClass:[NSString class]]) [d setObject:NSFontFeatureSelectorIdentifierKey forKey:@"NSFontFeatureSelectorIdentifierKey"]; else NSLog([@"Can't initialize NSFontFeatureSelectorIdentifierKey with object " stringByAppendingString:[NSFontFeatureSelectorIdentifierKey description]]);
if ([NSFontFeatureSettingsAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFeatureSettingsAttribute forKey:@"NSFontFeatureSettingsAttribute"]; else NSLog([@"Can't initialize NSFontFeatureSettingsAttribute with object " stringByAppendingString:[NSFontFeatureSettingsAttribute description]]);
if ([NSFontFeatureTypeIdentifierKey isKindOfClass:[NSString class]]) [d setObject:NSFontFeatureTypeIdentifierKey forKey:@"NSFontFeatureTypeIdentifierKey"]; else NSLog([@"Can't initialize NSFontFeatureTypeIdentifierKey with object " stringByAppendingString:[NSFontFeatureTypeIdentifierKey description]]);
if ([NSFontFixedAdvanceAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFixedAdvanceAttribute forKey:@"NSFontFixedAdvanceAttribute"]; else NSLog([@"Can't initialize NSFontFixedAdvanceAttribute with object " stringByAppendingString:[NSFontFixedAdvanceAttribute description]]);
if ([NSFontItalicBinding isKindOfClass:[NSString class]]) [d setObject:NSFontItalicBinding forKey:@"NSFontItalicBinding"]; else NSLog([@"Can't initialize NSFontItalicBinding with object " stringByAppendingString:[NSFontItalicBinding description]]);
if ([NSFontMatrixAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontMatrixAttribute forKey:@"NSFontMatrixAttribute"]; else NSLog([@"Can't initialize NSFontMatrixAttribute with object " stringByAppendingString:[NSFontMatrixAttribute description]]);
if ([NSFontNameAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontNameAttribute forKey:@"NSFontNameAttribute"]; else NSLog([@"Can't initialize NSFontNameAttribute with object " stringByAppendingString:[NSFontNameAttribute description]]);
if ([NSFontNameBinding isKindOfClass:[NSString class]]) [d setObject:NSFontNameBinding forKey:@"NSFontNameBinding"]; else NSLog([@"Can't initialize NSFontNameBinding with object " stringByAppendingString:[NSFontNameBinding description]]);
if ([NSFontPboard isKindOfClass:[NSString class]]) [d setObject:NSFontPboard forKey:@"NSFontPboard"]; else NSLog([@"Can't initialize NSFontPboard with object " stringByAppendingString:[NSFontPboard description]]);
if ([NSFontPboardType isKindOfClass:[NSString class]]) [d setObject:NSFontPboardType forKey:@"NSFontPboardType"]; else NSLog([@"Can't initialize NSFontPboardType with object " stringByAppendingString:[NSFontPboardType description]]);
if ([NSFontSetChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSFontSetChangedNotification forKey:@"NSFontSetChangedNotification"]; else NSLog([@"Can't initialize NSFontSetChangedNotification with object " stringByAppendingString:[NSFontSetChangedNotification description]]);
if ([NSFontSizeAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontSizeAttribute forKey:@"NSFontSizeAttribute"]; else NSLog([@"Can't initialize NSFontSizeAttribute with object " stringByAppendingString:[NSFontSizeAttribute description]]);
if ([NSFontSizeBinding isKindOfClass:[NSString class]]) [d setObject:NSFontSizeBinding forKey:@"NSFontSizeBinding"]; else NSLog([@"Can't initialize NSFontSizeBinding with object " stringByAppendingString:[NSFontSizeBinding description]]);
if ([NSFontSlantTrait isKindOfClass:[NSString class]]) [d setObject:NSFontSlantTrait forKey:@"NSFontSlantTrait"]; else NSLog([@"Can't initialize NSFontSlantTrait with object " stringByAppendingString:[NSFontSlantTrait description]]);
if ([NSFontSymbolicTrait isKindOfClass:[NSString class]]) [d setObject:NSFontSymbolicTrait forKey:@"NSFontSymbolicTrait"]; else NSLog([@"Can't initialize NSFontSymbolicTrait with object " stringByAppendingString:[NSFontSymbolicTrait description]]);
if ([NSFontTraitsAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontTraitsAttribute forKey:@"NSFontTraitsAttribute"]; else NSLog([@"Can't initialize NSFontTraitsAttribute with object " stringByAppendingString:[NSFontTraitsAttribute description]]);
if ([NSFontUnavailableException isKindOfClass:[NSString class]]) [d setObject:NSFontUnavailableException forKey:@"NSFontUnavailableException"]; else NSLog([@"Can't initialize NSFontUnavailableException with object " stringByAppendingString:[NSFontUnavailableException description]]);
if ([NSFontVariationAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAttribute forKey:@"NSFontVariationAttribute"]; else NSLog([@"Can't initialize NSFontVariationAttribute with object " stringByAppendingString:[NSFontVariationAttribute description]]);
if ([NSFontVariationAxisDefaultValueKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisDefaultValueKey forKey:@"NSFontVariationAxisDefaultValueKey"]; else NSLog([@"Can't initialize NSFontVariationAxisDefaultValueKey with object " stringByAppendingString:[NSFontVariationAxisDefaultValueKey description]]);
if ([NSFontVariationAxisIdentifierKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisIdentifierKey forKey:@"NSFontVariationAxisIdentifierKey"]; else NSLog([@"Can't initialize NSFontVariationAxisIdentifierKey with object " stringByAppendingString:[NSFontVariationAxisIdentifierKey description]]);
if ([NSFontVariationAxisMaximumValueKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisMaximumValueKey forKey:@"NSFontVariationAxisMaximumValueKey"]; else NSLog([@"Can't initialize NSFontVariationAxisMaximumValueKey with object " stringByAppendingString:[NSFontVariationAxisMaximumValueKey description]]);
if ([NSFontVariationAxisMinimumValueKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisMinimumValueKey forKey:@"NSFontVariationAxisMinimumValueKey"]; else NSLog([@"Can't initialize NSFontVariationAxisMinimumValueKey with object " stringByAppendingString:[NSFontVariationAxisMinimumValueKey description]]);
if ([NSFontVariationAxisNameKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisNameKey forKey:@"NSFontVariationAxisNameKey"]; else NSLog([@"Can't initialize NSFontVariationAxisNameKey with object " stringByAppendingString:[NSFontVariationAxisNameKey description]]);
if ([NSFontVisibleNameAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontVisibleNameAttribute forKey:@"NSFontVisibleNameAttribute"]; else NSLog([@"Can't initialize NSFontVisibleNameAttribute with object " stringByAppendingString:[NSFontVisibleNameAttribute description]]);
if ([NSFontWeightTrait isKindOfClass:[NSString class]]) [d setObject:NSFontWeightTrait forKey:@"NSFontWeightTrait"]; else NSLog([@"Can't initialize NSFontWeightTrait with object " stringByAppendingString:[NSFontWeightTrait description]]);
if ([NSFontWidthTrait isKindOfClass:[NSString class]]) [d setObject:NSFontWidthTrait forKey:@"NSFontWidthTrait"]; else NSLog([@"Can't initialize NSFontWidthTrait with object " stringByAppendingString:[NSFontWidthTrait description]]);
if ([NSForegroundColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSForegroundColorAttributeName forKey:@"NSForegroundColorAttributeName"]; else NSLog([@"Can't initialize NSForegroundColorAttributeName with object " stringByAppendingString:[NSForegroundColorAttributeName description]]);
if ([NSFullScreenModeAllScreens isKindOfClass:[NSString class]]) [d setObject:NSFullScreenModeAllScreens forKey:@"NSFullScreenModeAllScreens"]; else NSLog([@"Can't initialize NSFullScreenModeAllScreens with object " stringByAppendingString:[NSFullScreenModeAllScreens description]]);
if ([NSFullScreenModeSetting isKindOfClass:[NSString class]]) [d setObject:NSFullScreenModeSetting forKey:@"NSFullScreenModeSetting"]; else NSLog([@"Can't initialize NSFullScreenModeSetting with object " stringByAppendingString:[NSFullScreenModeSetting description]]);
if ([NSFullScreenModeWindowLevel isKindOfClass:[NSString class]]) [d setObject:NSFullScreenModeWindowLevel forKey:@"NSFullScreenModeWindowLevel"]; else NSLog([@"Can't initialize NSFullScreenModeWindowLevel with object " stringByAppendingString:[NSFullScreenModeWindowLevel description]]);
if ([NSGeneralPboard isKindOfClass:[NSString class]]) [d setObject:NSGeneralPboard forKey:@"NSGeneralPboard"]; else NSLog([@"Can't initialize NSGeneralPboard with object " stringByAppendingString:[NSGeneralPboard description]]);
if ([NSGlyphInfoAttributeName isKindOfClass:[NSString class]]) [d setObject:NSGlyphInfoAttributeName forKey:@"NSGlyphInfoAttributeName"]; else NSLog([@"Can't initialize NSGlyphInfoAttributeName with object " stringByAppendingString:[NSGlyphInfoAttributeName description]]);
if ([NSGraphicsContextDestinationAttributeName isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextDestinationAttributeName forKey:@"NSGraphicsContextDestinationAttributeName"]; else NSLog([@"Can't initialize NSGraphicsContextDestinationAttributeName with object " stringByAppendingString:[NSGraphicsContextDestinationAttributeName description]]);
if ([NSGraphicsContextPDFFormat isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextPDFFormat forKey:@"NSGraphicsContextPDFFormat"]; else NSLog([@"Can't initialize NSGraphicsContextPDFFormat with object " stringByAppendingString:[NSGraphicsContextPDFFormat description]]);
if ([NSGraphicsContextPSFormat isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextPSFormat forKey:@"NSGraphicsContextPSFormat"]; else NSLog([@"Can't initialize NSGraphicsContextPSFormat with object " stringByAppendingString:[NSGraphicsContextPSFormat description]]);
if ([NSGraphicsContextRepresentationFormatAttributeName isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextRepresentationFormatAttributeName forKey:@"NSGraphicsContextRepresentationFormatAttributeName"]; else NSLog([@"Can't initialize NSGraphicsContextRepresentationFormatAttributeName with object " stringByAppendingString:[NSGraphicsContextRepresentationFormatAttributeName description]]);
if ([NSHTMLPboardType isKindOfClass:[NSString class]]) [d setObject:NSHTMLPboardType forKey:@"NSHTMLPboardType"]; else NSLog([@"Can't initialize NSHTMLPboardType with object " stringByAppendingString:[NSHTMLPboardType description]]);
if ([NSHTMLTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSHTMLTextDocumentType forKey:@"NSHTMLTextDocumentType"]; else NSLog([@"Can't initialize NSHTMLTextDocumentType with object " stringByAppendingString:[NSHTMLTextDocumentType description]]);
if ([NSHandlesContentAsCompoundValueBindingOption isKindOfClass:[NSString class]]) [d setObject:NSHandlesContentAsCompoundValueBindingOption forKey:@"NSHandlesContentAsCompoundValueBindingOption"]; else NSLog([@"Can't initialize NSHandlesContentAsCompoundValueBindingOption with object " stringByAppendingString:[NSHandlesContentAsCompoundValueBindingOption description]]);
if ([NSHeaderTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSHeaderTitleBinding forKey:@"NSHeaderTitleBinding"]; else NSLog([@"Can't initialize NSHeaderTitleBinding with object " stringByAppendingString:[NSHeaderTitleBinding description]]);
if ([NSHiddenBinding isKindOfClass:[NSString class]]) [d setObject:NSHiddenBinding forKey:@"NSHiddenBinding"]; else NSLog([@"Can't initialize NSHiddenBinding with object " stringByAppendingString:[NSHiddenBinding description]]);
if ([NSHyphenationFactorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSHyphenationFactorDocumentAttribute forKey:@"NSHyphenationFactorDocumentAttribute"]; else NSLog([@"Can't initialize NSHyphenationFactorDocumentAttribute with object " stringByAppendingString:[NSHyphenationFactorDocumentAttribute description]]);
if ([NSIllegalSelectorException isKindOfClass:[NSString class]]) [d setObject:NSIllegalSelectorException forKey:@"NSIllegalSelectorException"]; else NSLog([@"Can't initialize NSIllegalSelectorException with object " stringByAppendingString:[NSIllegalSelectorException description]]);
if ([NSImageBinding isKindOfClass:[NSString class]]) [d setObject:NSImageBinding forKey:@"NSImageBinding"]; else NSLog([@"Can't initialize NSImageBinding with object " stringByAppendingString:[NSImageBinding description]]);
if ([NSImageCacheException isKindOfClass:[NSString class]]) [d setObject:NSImageCacheException forKey:@"NSImageCacheException"]; else NSLog([@"Can't initialize NSImageCacheException with object " stringByAppendingString:[NSImageCacheException description]]);
if ([NSImageColorSyncProfileData isKindOfClass:[NSString class]]) [d setObject:NSImageColorSyncProfileData forKey:@"NSImageColorSyncProfileData"]; else NSLog([@"Can't initialize NSImageColorSyncProfileData with object " stringByAppendingString:[NSImageColorSyncProfileData description]]);
if ([NSImageCompressionFactor isKindOfClass:[NSString class]]) [d setObject:NSImageCompressionFactor forKey:@"NSImageCompressionFactor"]; else NSLog([@"Can't initialize NSImageCompressionFactor with object " stringByAppendingString:[NSImageCompressionFactor description]]);
if ([NSImageCompressionMethod isKindOfClass:[NSString class]]) [d setObject:NSImageCompressionMethod forKey:@"NSImageCompressionMethod"]; else NSLog([@"Can't initialize NSImageCompressionMethod with object " stringByAppendingString:[NSImageCompressionMethod description]]);
if ([NSImageCurrentFrame isKindOfClass:[NSString class]]) [d setObject:NSImageCurrentFrame forKey:@"NSImageCurrentFrame"]; else NSLog([@"Can't initialize NSImageCurrentFrame with object " stringByAppendingString:[NSImageCurrentFrame description]]);
if ([NSImageCurrentFrameDuration isKindOfClass:[NSString class]]) [d setObject:NSImageCurrentFrameDuration forKey:@"NSImageCurrentFrameDuration"]; else NSLog([@"Can't initialize NSImageCurrentFrameDuration with object " stringByAppendingString:[NSImageCurrentFrameDuration description]]);
if ([NSImageDitherTransparency isKindOfClass:[NSString class]]) [d setObject:NSImageDitherTransparency forKey:@"NSImageDitherTransparency"]; else NSLog([@"Can't initialize NSImageDitherTransparency with object " stringByAppendingString:[NSImageDitherTransparency description]]);
if ([NSImageEXIFData isKindOfClass:[NSString class]]) [d setObject:NSImageEXIFData forKey:@"NSImageEXIFData"]; else NSLog([@"Can't initialize NSImageEXIFData with object " stringByAppendingString:[NSImageEXIFData description]]);
if ([NSImageFallbackBackgroundColor isKindOfClass:[NSString class]]) [d setObject:NSImageFallbackBackgroundColor forKey:@"NSImageFallbackBackgroundColor"]; else NSLog([@"Can't initialize NSImageFallbackBackgroundColor with object " stringByAppendingString:[NSImageFallbackBackgroundColor description]]);
if ([NSImageFrameCount isKindOfClass:[NSString class]]) [d setObject:NSImageFrameCount forKey:@"NSImageFrameCount"]; else NSLog([@"Can't initialize NSImageFrameCount with object " stringByAppendingString:[NSImageFrameCount description]]);
if ([NSImageGamma isKindOfClass:[NSString class]]) [d setObject:NSImageGamma forKey:@"NSImageGamma"]; else NSLog([@"Can't initialize NSImageGamma with object " stringByAppendingString:[NSImageGamma description]]);
if ([NSImageInterlaced isKindOfClass:[NSString class]]) [d setObject:NSImageInterlaced forKey:@"NSImageInterlaced"]; else NSLog([@"Can't initialize NSImageInterlaced with object " stringByAppendingString:[NSImageInterlaced description]]);
if ([NSImageLoopCount isKindOfClass:[NSString class]]) [d setObject:NSImageLoopCount forKey:@"NSImageLoopCount"]; else NSLog([@"Can't initialize NSImageLoopCount with object " stringByAppendingString:[NSImageLoopCount description]]);
if ([NSImageNameActionTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameActionTemplate forKey:@"NSImageNameActionTemplate"]; else NSLog([@"Can't initialize NSImageNameActionTemplate with object " stringByAppendingString:[NSImageNameActionTemplate description]]);
if ([NSImageNameAddTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameAddTemplate forKey:@"NSImageNameAddTemplate"]; else NSLog([@"Can't initialize NSImageNameAddTemplate with object " stringByAppendingString:[NSImageNameAddTemplate description]]);
if ([NSImageNameAdvanced isKindOfClass:[NSString class]]) [d setObject:NSImageNameAdvanced forKey:@"NSImageNameAdvanced"]; else NSLog([@"Can't initialize NSImageNameAdvanced with object " stringByAppendingString:[NSImageNameAdvanced description]]);
if ([NSImageNameBluetoothTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameBluetoothTemplate forKey:@"NSImageNameBluetoothTemplate"]; else NSLog([@"Can't initialize NSImageNameBluetoothTemplate with object " stringByAppendingString:[NSImageNameBluetoothTemplate description]]);
if ([NSImageNameBonjour isKindOfClass:[NSString class]]) [d setObject:NSImageNameBonjour forKey:@"NSImageNameBonjour"]; else NSLog([@"Can't initialize NSImageNameBonjour with object " stringByAppendingString:[NSImageNameBonjour description]]);
if ([NSImageNameColorPanel isKindOfClass:[NSString class]]) [d setObject:NSImageNameColorPanel forKey:@"NSImageNameColorPanel"]; else NSLog([@"Can't initialize NSImageNameColorPanel with object " stringByAppendingString:[NSImageNameColorPanel description]]);
if ([NSImageNameColumnViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameColumnViewTemplate forKey:@"NSImageNameColumnViewTemplate"]; else NSLog([@"Can't initialize NSImageNameColumnViewTemplate with object " stringByAppendingString:[NSImageNameColumnViewTemplate description]]);
if ([NSImageNameComputer isKindOfClass:[NSString class]]) [d setObject:NSImageNameComputer forKey:@"NSImageNameComputer"]; else NSLog([@"Can't initialize NSImageNameComputer with object " stringByAppendingString:[NSImageNameComputer description]]);
if ([NSImageNameDotMac isKindOfClass:[NSString class]]) [d setObject:NSImageNameDotMac forKey:@"NSImageNameDotMac"]; else NSLog([@"Can't initialize NSImageNameDotMac with object " stringByAppendingString:[NSImageNameDotMac description]]);
if ([NSImageNameEnterFullScreenTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameEnterFullScreenTemplate forKey:@"NSImageNameEnterFullScreenTemplate"]; else NSLog([@"Can't initialize NSImageNameEnterFullScreenTemplate with object " stringByAppendingString:[NSImageNameEnterFullScreenTemplate description]]);
if ([NSImageNameEveryone isKindOfClass:[NSString class]]) [d setObject:NSImageNameEveryone forKey:@"NSImageNameEveryone"]; else NSLog([@"Can't initialize NSImageNameEveryone with object " stringByAppendingString:[NSImageNameEveryone description]]);
if ([NSImageNameExitFullScreenTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameExitFullScreenTemplate forKey:@"NSImageNameExitFullScreenTemplate"]; else NSLog([@"Can't initialize NSImageNameExitFullScreenTemplate with object " stringByAppendingString:[NSImageNameExitFullScreenTemplate description]]);
if ([NSImageNameFlowViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameFlowViewTemplate forKey:@"NSImageNameFlowViewTemplate"]; else NSLog([@"Can't initialize NSImageNameFlowViewTemplate with object " stringByAppendingString:[NSImageNameFlowViewTemplate description]]);
if ([NSImageNameFolderBurnable isKindOfClass:[NSString class]]) [d setObject:NSImageNameFolderBurnable forKey:@"NSImageNameFolderBurnable"]; else NSLog([@"Can't initialize NSImageNameFolderBurnable with object " stringByAppendingString:[NSImageNameFolderBurnable description]]);
if ([NSImageNameFolderSmart isKindOfClass:[NSString class]]) [d setObject:NSImageNameFolderSmart forKey:@"NSImageNameFolderSmart"]; else NSLog([@"Can't initialize NSImageNameFolderSmart with object " stringByAppendingString:[NSImageNameFolderSmart description]]);
if ([NSImageNameFollowLinkFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameFollowLinkFreestandingTemplate forKey:@"NSImageNameFollowLinkFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameFollowLinkFreestandingTemplate with object " stringByAppendingString:[NSImageNameFollowLinkFreestandingTemplate description]]);
if ([NSImageNameFontPanel isKindOfClass:[NSString class]]) [d setObject:NSImageNameFontPanel forKey:@"NSImageNameFontPanel"]; else NSLog([@"Can't initialize NSImageNameFontPanel with object " stringByAppendingString:[NSImageNameFontPanel description]]);
if ([NSImageNameGoLeftTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameGoLeftTemplate forKey:@"NSImageNameGoLeftTemplate"]; else NSLog([@"Can't initialize NSImageNameGoLeftTemplate with object " stringByAppendingString:[NSImageNameGoLeftTemplate description]]);
if ([NSImageNameGoRightTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameGoRightTemplate forKey:@"NSImageNameGoRightTemplate"]; else NSLog([@"Can't initialize NSImageNameGoRightTemplate with object " stringByAppendingString:[NSImageNameGoRightTemplate description]]);
if ([NSImageNameIChatTheaterTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameIChatTheaterTemplate forKey:@"NSImageNameIChatTheaterTemplate"]; else NSLog([@"Can't initialize NSImageNameIChatTheaterTemplate with object " stringByAppendingString:[NSImageNameIChatTheaterTemplate description]]);
if ([NSImageNameIconViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameIconViewTemplate forKey:@"NSImageNameIconViewTemplate"]; else NSLog([@"Can't initialize NSImageNameIconViewTemplate with object " stringByAppendingString:[NSImageNameIconViewTemplate description]]);
if ([NSImageNameInfo isKindOfClass:[NSString class]]) [d setObject:NSImageNameInfo forKey:@"NSImageNameInfo"]; else NSLog([@"Can't initialize NSImageNameInfo with object " stringByAppendingString:[NSImageNameInfo description]]);
if ([NSImageNameInvalidDataFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameInvalidDataFreestandingTemplate forKey:@"NSImageNameInvalidDataFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameInvalidDataFreestandingTemplate with object " stringByAppendingString:[NSImageNameInvalidDataFreestandingTemplate description]]);
if ([NSImageNameLeftFacingTriangleTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameLeftFacingTriangleTemplate forKey:@"NSImageNameLeftFacingTriangleTemplate"]; else NSLog([@"Can't initialize NSImageNameLeftFacingTriangleTemplate with object " stringByAppendingString:[NSImageNameLeftFacingTriangleTemplate description]]);
if ([NSImageNameListViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameListViewTemplate forKey:@"NSImageNameListViewTemplate"]; else NSLog([@"Can't initialize NSImageNameListViewTemplate with object " stringByAppendingString:[NSImageNameListViewTemplate description]]);
if ([NSImageNameLockLockedTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameLockLockedTemplate forKey:@"NSImageNameLockLockedTemplate"]; else NSLog([@"Can't initialize NSImageNameLockLockedTemplate with object " stringByAppendingString:[NSImageNameLockLockedTemplate description]]);
if ([NSImageNameLockUnlockedTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameLockUnlockedTemplate forKey:@"NSImageNameLockUnlockedTemplate"]; else NSLog([@"Can't initialize NSImageNameLockUnlockedTemplate with object " stringByAppendingString:[NSImageNameLockUnlockedTemplate description]]);
if ([NSImageNameMultipleDocuments isKindOfClass:[NSString class]]) [d setObject:NSImageNameMultipleDocuments forKey:@"NSImageNameMultipleDocuments"]; else NSLog([@"Can't initialize NSImageNameMultipleDocuments with object " stringByAppendingString:[NSImageNameMultipleDocuments description]]);
if ([NSImageNameNetwork isKindOfClass:[NSString class]]) [d setObject:NSImageNameNetwork forKey:@"NSImageNameNetwork"]; else NSLog([@"Can't initialize NSImageNameNetwork with object " stringByAppendingString:[NSImageNameNetwork description]]);
if ([NSImageNamePathTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNamePathTemplate forKey:@"NSImageNamePathTemplate"]; else NSLog([@"Can't initialize NSImageNamePathTemplate with object " stringByAppendingString:[NSImageNamePathTemplate description]]);
if ([NSImageNamePreferencesGeneral isKindOfClass:[NSString class]]) [d setObject:NSImageNamePreferencesGeneral forKey:@"NSImageNamePreferencesGeneral"]; else NSLog([@"Can't initialize NSImageNamePreferencesGeneral with object " stringByAppendingString:[NSImageNamePreferencesGeneral description]]);
if ([NSImageNameQuickLookTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameQuickLookTemplate forKey:@"NSImageNameQuickLookTemplate"]; else NSLog([@"Can't initialize NSImageNameQuickLookTemplate with object " stringByAppendingString:[NSImageNameQuickLookTemplate description]]);
if ([NSImageNameRefreshFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRefreshFreestandingTemplate forKey:@"NSImageNameRefreshFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameRefreshFreestandingTemplate with object " stringByAppendingString:[NSImageNameRefreshFreestandingTemplate description]]);
if ([NSImageNameRefreshTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRefreshTemplate forKey:@"NSImageNameRefreshTemplate"]; else NSLog([@"Can't initialize NSImageNameRefreshTemplate with object " stringByAppendingString:[NSImageNameRefreshTemplate description]]);
if ([NSImageNameRemoveTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRemoveTemplate forKey:@"NSImageNameRemoveTemplate"]; else NSLog([@"Can't initialize NSImageNameRemoveTemplate with object " stringByAppendingString:[NSImageNameRemoveTemplate description]]);
if ([NSImageNameRevealFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRevealFreestandingTemplate forKey:@"NSImageNameRevealFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameRevealFreestandingTemplate with object " stringByAppendingString:[NSImageNameRevealFreestandingTemplate description]]);
if ([NSImageNameRightFacingTriangleTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRightFacingTriangleTemplate forKey:@"NSImageNameRightFacingTriangleTemplate"]; else NSLog([@"Can't initialize NSImageNameRightFacingTriangleTemplate with object " stringByAppendingString:[NSImageNameRightFacingTriangleTemplate description]]);
if ([NSImageNameSlideshowTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameSlideshowTemplate forKey:@"NSImageNameSlideshowTemplate"]; else NSLog([@"Can't initialize NSImageNameSlideshowTemplate with object " stringByAppendingString:[NSImageNameSlideshowTemplate description]]);
if ([NSImageNameSmartBadgeTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameSmartBadgeTemplate forKey:@"NSImageNameSmartBadgeTemplate"]; else NSLog([@"Can't initialize NSImageNameSmartBadgeTemplate with object " stringByAppendingString:[NSImageNameSmartBadgeTemplate description]]);
if ([NSImageNameStopProgressFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameStopProgressFreestandingTemplate forKey:@"NSImageNameStopProgressFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameStopProgressFreestandingTemplate with object " stringByAppendingString:[NSImageNameStopProgressFreestandingTemplate description]]);
if ([NSImageNameStopProgressTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameStopProgressTemplate forKey:@"NSImageNameStopProgressTemplate"]; else NSLog([@"Can't initialize NSImageNameStopProgressTemplate with object " stringByAppendingString:[NSImageNameStopProgressTemplate description]]);
if ([NSImageNameUser isKindOfClass:[NSString class]]) [d setObject:NSImageNameUser forKey:@"NSImageNameUser"]; else NSLog([@"Can't initialize NSImageNameUser with object " stringByAppendingString:[NSImageNameUser description]]);
if ([NSImageNameUserAccounts isKindOfClass:[NSString class]]) [d setObject:NSImageNameUserAccounts forKey:@"NSImageNameUserAccounts"]; else NSLog([@"Can't initialize NSImageNameUserAccounts with object " stringByAppendingString:[NSImageNameUserAccounts description]]);
if ([NSImageNameUserGroup isKindOfClass:[NSString class]]) [d setObject:NSImageNameUserGroup forKey:@"NSImageNameUserGroup"]; else NSLog([@"Can't initialize NSImageNameUserGroup with object " stringByAppendingString:[NSImageNameUserGroup description]]);
if ([NSImageProgressive isKindOfClass:[NSString class]]) [d setObject:NSImageProgressive forKey:@"NSImageProgressive"]; else NSLog([@"Can't initialize NSImageProgressive with object " stringByAppendingString:[NSImageProgressive description]]);
if ([NSImageRGBColorTable isKindOfClass:[NSString class]]) [d setObject:NSImageRGBColorTable forKey:@"NSImageRGBColorTable"]; else NSLog([@"Can't initialize NSImageRGBColorTable with object " stringByAppendingString:[NSImageRGBColorTable description]]);
if ([NSImageRepRegistryDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSImageRepRegistryDidChangeNotification forKey:@"NSImageRepRegistryDidChangeNotification"]; else NSLog([@"Can't initialize NSImageRepRegistryDidChangeNotification with object " stringByAppendingString:[NSImageRepRegistryDidChangeNotification description]]);
if ([NSIncludedKeysBinding isKindOfClass:[NSString class]]) [d setObject:NSIncludedKeysBinding forKey:@"NSIncludedKeysBinding"]; else NSLog([@"Can't initialize NSIncludedKeysBinding with object " stringByAppendingString:[NSIncludedKeysBinding description]]);
if ([NSInitialKeyBinding isKindOfClass:[NSString class]]) [d setObject:NSInitialKeyBinding forKey:@"NSInitialKeyBinding"]; else NSLog([@"Can't initialize NSInitialKeyBinding with object " stringByAppendingString:[NSInitialKeyBinding description]]);
if ([NSInitialValueBinding isKindOfClass:[NSString class]]) [d setObject:NSInitialValueBinding forKey:@"NSInitialValueBinding"]; else NSLog([@"Can't initialize NSInitialValueBinding with object " stringByAppendingString:[NSInitialValueBinding description]]);
if ([NSInkTextPboardType isKindOfClass:[NSString class]]) [d setObject:NSInkTextPboardType forKey:@"NSInkTextPboardType"]; else NSLog([@"Can't initialize NSInkTextPboardType with object " stringByAppendingString:[NSInkTextPboardType description]]);
if ([NSInsertsNullPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSInsertsNullPlaceholderBindingOption forKey:@"NSInsertsNullPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSInsertsNullPlaceholderBindingOption with object " stringByAppendingString:[NSInsertsNullPlaceholderBindingOption description]]);
if ([NSInterfaceStyleDefault isKindOfClass:[NSString class]]) [d setObject:NSInterfaceStyleDefault forKey:@"NSInterfaceStyleDefault"]; else NSLog([@"Can't initialize NSInterfaceStyleDefault with object " stringByAppendingString:[NSInterfaceStyleDefault description]]);
if ([NSInvokesSeparatelyWithArrayObjectsBindingOption isKindOfClass:[NSString class]]) [d setObject:NSInvokesSeparatelyWithArrayObjectsBindingOption forKey:@"NSInvokesSeparatelyWithArrayObjectsBindingOption"]; else NSLog([@"Can't initialize NSInvokesSeparatelyWithArrayObjectsBindingOption with object " stringByAppendingString:[NSInvokesSeparatelyWithArrayObjectsBindingOption description]]);
if ([NSIsIndeterminateBinding isKindOfClass:[NSString class]]) [d setObject:NSIsIndeterminateBinding forKey:@"NSIsIndeterminateBinding"]; else NSLog([@"Can't initialize NSIsIndeterminateBinding with object " stringByAppendingString:[NSIsIndeterminateBinding description]]);
if ([NSKernAttributeName isKindOfClass:[NSString class]]) [d setObject:NSKernAttributeName forKey:@"NSKernAttributeName"]; else NSLog([@"Can't initialize NSKernAttributeName with object " stringByAppendingString:[NSKernAttributeName description]]);
if ([NSKeywordsDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSKeywordsDocumentAttribute forKey:@"NSKeywordsDocumentAttribute"]; else NSLog([@"Can't initialize NSKeywordsDocumentAttribute with object " stringByAppendingString:[NSKeywordsDocumentAttribute description]]);
if ([NSLabelBinding isKindOfClass:[NSString class]]) [d setObject:NSLabelBinding forKey:@"NSLabelBinding"]; else NSLog([@"Can't initialize NSLabelBinding with object " stringByAppendingString:[NSLabelBinding description]]);
if ([NSLeftMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSLeftMarginDocumentAttribute forKey:@"NSLeftMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSLeftMarginDocumentAttribute with object " stringByAppendingString:[NSLeftMarginDocumentAttribute description]]);
if ([NSLigatureAttributeName isKindOfClass:[NSString class]]) [d setObject:NSLigatureAttributeName forKey:@"NSLigatureAttributeName"]; else NSLog([@"Can't initialize NSLigatureAttributeName with object " stringByAppendingString:[NSLigatureAttributeName description]]);
if ([NSLinkAttributeName isKindOfClass:[NSString class]]) [d setObject:NSLinkAttributeName forKey:@"NSLinkAttributeName"]; else NSLog([@"Can't initialize NSLinkAttributeName with object " stringByAppendingString:[NSLinkAttributeName description]]);
if ([NSLocalizedKeyDictionaryBinding isKindOfClass:[NSString class]]) [d setObject:NSLocalizedKeyDictionaryBinding forKey:@"NSLocalizedKeyDictionaryBinding"]; else NSLog([@"Can't initialize NSLocalizedKeyDictionaryBinding with object " stringByAppendingString:[NSLocalizedKeyDictionaryBinding description]]);
if ([NSMacSimpleTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSMacSimpleTextDocumentType forKey:@"NSMacSimpleTextDocumentType"]; else NSLog([@"Can't initialize NSMacSimpleTextDocumentType with object " stringByAppendingString:[NSMacSimpleTextDocumentType description]]);
if ([NSManagedObjectContextBinding isKindOfClass:[NSString class]]) [d setObject:NSManagedObjectContextBinding forKey:@"NSManagedObjectContextBinding"]; else NSLog([@"Can't initialize NSManagedObjectContextBinding with object " stringByAppendingString:[NSManagedObjectContextBinding description]]);
if ([NSMarkedClauseSegmentAttributeName isKindOfClass:[NSString class]]) [d setObject:NSMarkedClauseSegmentAttributeName forKey:@"NSMarkedClauseSegmentAttributeName"]; else NSLog([@"Can't initialize NSMarkedClauseSegmentAttributeName with object " stringByAppendingString:[NSMarkedClauseSegmentAttributeName description]]);
if ([NSMaxValueBinding isKindOfClass:[NSString class]]) [d setObject:NSMaxValueBinding forKey:@"NSMaxValueBinding"]; else NSLog([@"Can't initialize NSMaxValueBinding with object " stringByAppendingString:[NSMaxValueBinding description]]);
if ([NSMaxWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSMaxWidthBinding forKey:@"NSMaxWidthBinding"]; else NSLog([@"Can't initialize NSMaxWidthBinding with object " stringByAppendingString:[NSMaxWidthBinding description]]);
if ([NSMaximumRecentsBinding isKindOfClass:[NSString class]]) [d setObject:NSMaximumRecentsBinding forKey:@"NSMaximumRecentsBinding"]; else NSLog([@"Can't initialize NSMaximumRecentsBinding with object " stringByAppendingString:[NSMaximumRecentsBinding description]]);
if ([NSMenuDidAddItemNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidAddItemNotification forKey:@"NSMenuDidAddItemNotification"]; else NSLog([@"Can't initialize NSMenuDidAddItemNotification with object " stringByAppendingString:[NSMenuDidAddItemNotification description]]);
if ([NSMenuDidBeginTrackingNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidBeginTrackingNotification forKey:@"NSMenuDidBeginTrackingNotification"]; else NSLog([@"Can't initialize NSMenuDidBeginTrackingNotification with object " stringByAppendingString:[NSMenuDidBeginTrackingNotification description]]);
if ([NSMenuDidChangeItemNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidChangeItemNotification forKey:@"NSMenuDidChangeItemNotification"]; else NSLog([@"Can't initialize NSMenuDidChangeItemNotification with object " stringByAppendingString:[NSMenuDidChangeItemNotification description]]);
if ([NSMenuDidEndTrackingNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidEndTrackingNotification forKey:@"NSMenuDidEndTrackingNotification"]; else NSLog([@"Can't initialize NSMenuDidEndTrackingNotification with object " stringByAppendingString:[NSMenuDidEndTrackingNotification description]]);
if ([NSMenuDidRemoveItemNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidRemoveItemNotification forKey:@"NSMenuDidRemoveItemNotification"]; else NSLog([@"Can't initialize NSMenuDidRemoveItemNotification with object " stringByAppendingString:[NSMenuDidRemoveItemNotification description]]);
if ([NSMenuDidSendActionNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidSendActionNotification forKey:@"NSMenuDidSendActionNotification"]; else NSLog([@"Can't initialize NSMenuDidSendActionNotification with object " stringByAppendingString:[NSMenuDidSendActionNotification description]]);
if ([NSMenuWillSendActionNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuWillSendActionNotification forKey:@"NSMenuWillSendActionNotification"]; else NSLog([@"Can't initialize NSMenuWillSendActionNotification with object " stringByAppendingString:[NSMenuWillSendActionNotification description]]);
if ([NSMinValueBinding isKindOfClass:[NSString class]]) [d setObject:NSMinValueBinding forKey:@"NSMinValueBinding"]; else NSLog([@"Can't initialize NSMinValueBinding with object " stringByAppendingString:[NSMinValueBinding description]]);
if ([NSMinWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSMinWidthBinding forKey:@"NSMinWidthBinding"]; else NSLog([@"Can't initialize NSMinWidthBinding with object " stringByAppendingString:[NSMinWidthBinding description]]);
if ([NSMixedStateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSMixedStateImageBinding forKey:@"NSMixedStateImageBinding"]; else NSLog([@"Can't initialize NSMixedStateImageBinding with object " stringByAppendingString:[NSMixedStateImageBinding description]]);
if ([NSModalPanelRunLoopMode isKindOfClass:[NSString class]]) [d setObject:NSModalPanelRunLoopMode forKey:@"NSModalPanelRunLoopMode"]; else NSLog([@"Can't initialize NSModalPanelRunLoopMode with object " stringByAppendingString:[NSModalPanelRunLoopMode description]]);
if ([NSModificationTimeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSModificationTimeDocumentAttribute forKey:@"NSModificationTimeDocumentAttribute"]; else NSLog([@"Can't initialize NSModificationTimeDocumentAttribute with object " stringByAppendingString:[NSModificationTimeDocumentAttribute description]]);
if ([NSMultipleTextSelectionPboardType isKindOfClass:[NSString class]]) [d setObject:NSMultipleTextSelectionPboardType forKey:@"NSMultipleTextSelectionPboardType"]; else NSLog([@"Can't initialize NSMultipleTextSelectionPboardType with object " stringByAppendingString:[NSMultipleTextSelectionPboardType description]]);
if ([NSMultipleValuesMarker isKindOfClass:[NSString class]]) [d setObject:NSMultipleValuesMarker forKey:@"NSMultipleValuesMarker"]; else NSLog([@"Can't initialize NSMultipleValuesMarker with object " stringByAppendingString:[NSMultipleValuesMarker description]]);
if ([NSMultipleValuesPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSMultipleValuesPlaceholderBindingOption forKey:@"NSMultipleValuesPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSMultipleValuesPlaceholderBindingOption with object " stringByAppendingString:[NSMultipleValuesPlaceholderBindingOption description]]);
if ([NSNamedColorSpace isKindOfClass:[NSString class]]) [d setObject:NSNamedColorSpace forKey:@"NSNamedColorSpace"]; else NSLog([@"Can't initialize NSNamedColorSpace with object " stringByAppendingString:[NSNamedColorSpace description]]);
if ([NSNibLoadingException isKindOfClass:[NSString class]]) [d setObject:NSNibLoadingException forKey:@"NSNibLoadingException"]; else NSLog([@"Can't initialize NSNibLoadingException with object " stringByAppendingString:[NSNibLoadingException description]]);
if ([NSNibOwner isKindOfClass:[NSString class]]) [d setObject:NSNibOwner forKey:@"NSNibOwner"]; else NSLog([@"Can't initialize NSNibOwner with object " stringByAppendingString:[NSNibOwner description]]);
if ([NSNibTopLevelObjects isKindOfClass:[NSString class]]) [d setObject:NSNibTopLevelObjects forKey:@"NSNibTopLevelObjects"]; else NSLog([@"Can't initialize NSNibTopLevelObjects with object " stringByAppendingString:[NSNibTopLevelObjects description]]);
if ([NSNoSelectionMarker isKindOfClass:[NSString class]]) [d setObject:NSNoSelectionMarker forKey:@"NSNoSelectionMarker"]; else NSLog([@"Can't initialize NSNoSelectionMarker with object " stringByAppendingString:[NSNoSelectionMarker description]]);
if ([NSNoSelectionPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSNoSelectionPlaceholderBindingOption forKey:@"NSNoSelectionPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSNoSelectionPlaceholderBindingOption with object " stringByAppendingString:[NSNoSelectionPlaceholderBindingOption description]]);
if ([NSNotApplicableMarker isKindOfClass:[NSString class]]) [d setObject:NSNotApplicableMarker forKey:@"NSNotApplicableMarker"]; else NSLog([@"Can't initialize NSNotApplicableMarker with object " stringByAppendingString:[NSNotApplicableMarker description]]);
if ([NSNotApplicablePlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSNotApplicablePlaceholderBindingOption forKey:@"NSNotApplicablePlaceholderBindingOption"]; else NSLog([@"Can't initialize NSNotApplicablePlaceholderBindingOption with object " stringByAppendingString:[NSNotApplicablePlaceholderBindingOption description]]);
if ([NSNullPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSNullPlaceholderBindingOption forKey:@"NSNullPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSNullPlaceholderBindingOption with object " stringByAppendingString:[NSNullPlaceholderBindingOption description]]);
if ([NSObliquenessAttributeName isKindOfClass:[NSString class]]) [d setObject:NSObliquenessAttributeName forKey:@"NSObliquenessAttributeName"]; else NSLog([@"Can't initialize NSObliquenessAttributeName with object " stringByAppendingString:[NSObliquenessAttributeName description]]);
if ([NSObservedKeyPathKey isKindOfClass:[NSString class]]) [d setObject:NSObservedKeyPathKey forKey:@"NSObservedKeyPathKey"]; else NSLog([@"Can't initialize NSObservedKeyPathKey with object " stringByAppendingString:[NSObservedKeyPathKey description]]);
if ([NSObservedObjectKey isKindOfClass:[NSString class]]) [d setObject:NSObservedObjectKey forKey:@"NSObservedObjectKey"]; else NSLog([@"Can't initialize NSObservedObjectKey with object " stringByAppendingString:[NSObservedObjectKey description]]);
if ([NSOffStateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSOffStateImageBinding forKey:@"NSOffStateImageBinding"]; else NSLog([@"Can't initialize NSOffStateImageBinding with object " stringByAppendingString:[NSOffStateImageBinding description]]);
if ([NSOfficeOpenXMLTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSOfficeOpenXMLTextDocumentType forKey:@"NSOfficeOpenXMLTextDocumentType"]; else NSLog([@"Can't initialize NSOfficeOpenXMLTextDocumentType with object " stringByAppendingString:[NSOfficeOpenXMLTextDocumentType description]]);
if ([NSOnStateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSOnStateImageBinding forKey:@"NSOnStateImageBinding"]; else NSLog([@"Can't initialize NSOnStateImageBinding with object " stringByAppendingString:[NSOnStateImageBinding description]]);
if ([NSOpenDocumentTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSOpenDocumentTextDocumentType forKey:@"NSOpenDocumentTextDocumentType"]; else NSLog([@"Can't initialize NSOpenDocumentTextDocumentType with object " stringByAppendingString:[NSOpenDocumentTextDocumentType description]]);
if ([NSOptionsKey isKindOfClass:[NSString class]]) [d setObject:NSOptionsKey forKey:@"NSOptionsKey"]; else NSLog([@"Can't initialize NSOptionsKey with object " stringByAppendingString:[NSOptionsKey description]]);
if ([NSOutlineViewColumnDidMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewColumnDidMoveNotification forKey:@"NSOutlineViewColumnDidMoveNotification"]; else NSLog([@"Can't initialize NSOutlineViewColumnDidMoveNotification with object " stringByAppendingString:[NSOutlineViewColumnDidMoveNotification description]]);
if ([NSOutlineViewColumnDidResizeNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewColumnDidResizeNotification forKey:@"NSOutlineViewColumnDidResizeNotification"]; else NSLog([@"Can't initialize NSOutlineViewColumnDidResizeNotification with object " stringByAppendingString:[NSOutlineViewColumnDidResizeNotification description]]);
if ([NSOutlineViewItemDidCollapseNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemDidCollapseNotification forKey:@"NSOutlineViewItemDidCollapseNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemDidCollapseNotification with object " stringByAppendingString:[NSOutlineViewItemDidCollapseNotification description]]);
if ([NSOutlineViewItemDidExpandNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemDidExpandNotification forKey:@"NSOutlineViewItemDidExpandNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemDidExpandNotification with object " stringByAppendingString:[NSOutlineViewItemDidExpandNotification description]]);
if ([NSOutlineViewItemWillCollapseNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemWillCollapseNotification forKey:@"NSOutlineViewItemWillCollapseNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemWillCollapseNotification with object " stringByAppendingString:[NSOutlineViewItemWillCollapseNotification description]]);
if ([NSOutlineViewItemWillExpandNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemWillExpandNotification forKey:@"NSOutlineViewItemWillExpandNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemWillExpandNotification with object " stringByAppendingString:[NSOutlineViewItemWillExpandNotification description]]);
if ([NSOutlineViewSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewSelectionDidChangeNotification forKey:@"NSOutlineViewSelectionDidChangeNotification"]; else NSLog([@"Can't initialize NSOutlineViewSelectionDidChangeNotification with object " stringByAppendingString:[NSOutlineViewSelectionDidChangeNotification description]]);
if ([NSOutlineViewSelectionIsChangingNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewSelectionIsChangingNotification forKey:@"NSOutlineViewSelectionIsChangingNotification"]; else NSLog([@"Can't initialize NSOutlineViewSelectionIsChangingNotification with object " stringByAppendingString:[NSOutlineViewSelectionIsChangingNotification description]]);
if ([NSPDFPboardType isKindOfClass:[NSString class]]) [d setObject:NSPDFPboardType forKey:@"NSPDFPboardType"]; else NSLog([@"Can't initialize NSPDFPboardType with object " stringByAppendingString:[NSPDFPboardType description]]);
if ([NSPICTPboardType isKindOfClass:[NSString class]]) [d setObject:NSPICTPboardType forKey:@"NSPICTPboardType"]; else NSLog([@"Can't initialize NSPICTPboardType with object " stringByAppendingString:[NSPICTPboardType description]]);
if ([NSPPDIncludeNotFoundException isKindOfClass:[NSString class]]) [d setObject:NSPPDIncludeNotFoundException forKey:@"NSPPDIncludeNotFoundException"]; else NSLog([@"Can't initialize NSPPDIncludeNotFoundException with object " stringByAppendingString:[NSPPDIncludeNotFoundException description]]);
if ([NSPPDIncludeStackOverflowException isKindOfClass:[NSString class]]) [d setObject:NSPPDIncludeStackOverflowException forKey:@"NSPPDIncludeStackOverflowException"]; else NSLog([@"Can't initialize NSPPDIncludeStackOverflowException with object " stringByAppendingString:[NSPPDIncludeStackOverflowException description]]);
if ([NSPPDIncludeStackUnderflowException isKindOfClass:[NSString class]]) [d setObject:NSPPDIncludeStackUnderflowException forKey:@"NSPPDIncludeStackUnderflowException"]; else NSLog([@"Can't initialize NSPPDIncludeStackUnderflowException with object " stringByAppendingString:[NSPPDIncludeStackUnderflowException description]]);
if ([NSPPDParseException isKindOfClass:[NSString class]]) [d setObject:NSPPDParseException forKey:@"NSPPDParseException"]; else NSLog([@"Can't initialize NSPPDParseException with object " stringByAppendingString:[NSPPDParseException description]]);
if ([NSPaperSizeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSPaperSizeDocumentAttribute forKey:@"NSPaperSizeDocumentAttribute"]; else NSLog([@"Can't initialize NSPaperSizeDocumentAttribute with object " stringByAppendingString:[NSPaperSizeDocumentAttribute description]]);
if ([NSParagraphStyleAttributeName isKindOfClass:[NSString class]]) [d setObject:NSParagraphStyleAttributeName forKey:@"NSParagraphStyleAttributeName"]; else NSLog([@"Can't initialize NSParagraphStyleAttributeName with object " stringByAppendingString:[NSParagraphStyleAttributeName description]]);
if ([NSPasteboardCommunicationException isKindOfClass:[NSString class]]) [d setObject:NSPasteboardCommunicationException forKey:@"NSPasteboardCommunicationException"]; else NSLog([@"Can't initialize NSPasteboardCommunicationException with object " stringByAppendingString:[NSPasteboardCommunicationException description]]);
if ([NSPatternColorSpace isKindOfClass:[NSString class]]) [d setObject:NSPatternColorSpace forKey:@"NSPatternColorSpace"]; else NSLog([@"Can't initialize NSPatternColorSpace with object " stringByAppendingString:[NSPatternColorSpace description]]);
if ([NSPlainFileType isKindOfClass:[NSString class]]) [d setObject:NSPlainFileType forKey:@"NSPlainFileType"]; else NSLog([@"Can't initialize NSPlainFileType with object " stringByAppendingString:[NSPlainFileType description]]);
if ([NSPlainTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSPlainTextDocumentType forKey:@"NSPlainTextDocumentType"]; else NSLog([@"Can't initialize NSPlainTextDocumentType with object " stringByAppendingString:[NSPlainTextDocumentType description]]);
if ([NSPopUpButtonCellWillPopUpNotification isKindOfClass:[NSString class]]) [d setObject:NSPopUpButtonCellWillPopUpNotification forKey:@"NSPopUpButtonCellWillPopUpNotification"]; else NSLog([@"Can't initialize NSPopUpButtonCellWillPopUpNotification with object " stringByAppendingString:[NSPopUpButtonCellWillPopUpNotification description]]);
if ([NSPopUpButtonWillPopUpNotification isKindOfClass:[NSString class]]) [d setObject:NSPopUpButtonWillPopUpNotification forKey:@"NSPopUpButtonWillPopUpNotification"]; else NSLog([@"Can't initialize NSPopUpButtonWillPopUpNotification with object " stringByAppendingString:[NSPopUpButtonWillPopUpNotification description]]);
if ([NSPostScriptPboardType isKindOfClass:[NSString class]]) [d setObject:NSPostScriptPboardType forKey:@"NSPostScriptPboardType"]; else NSLog([@"Can't initialize NSPostScriptPboardType with object " stringByAppendingString:[NSPostScriptPboardType description]]);
if ([NSPredicateBinding isKindOfClass:[NSString class]]) [d setObject:NSPredicateBinding forKey:@"NSPredicateBinding"]; else NSLog([@"Can't initialize NSPredicateBinding with object " stringByAppendingString:[NSPredicateBinding description]]);
if ([NSPredicateFormatBindingOption isKindOfClass:[NSString class]]) [d setObject:NSPredicateFormatBindingOption forKey:@"NSPredicateFormatBindingOption"]; else NSLog([@"Can't initialize NSPredicateFormatBindingOption with object " stringByAppendingString:[NSPredicateFormatBindingOption description]]);
if ([NSPrefixSpacesDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSPrefixSpacesDocumentAttribute forKey:@"NSPrefixSpacesDocumentAttribute"]; else NSLog([@"Can't initialize NSPrefixSpacesDocumentAttribute with object " stringByAppendingString:[NSPrefixSpacesDocumentAttribute description]]);
if ([NSPrintAllPages isKindOfClass:[NSString class]]) [d setObject:NSPrintAllPages forKey:@"NSPrintAllPages"]; else NSLog([@"Can't initialize NSPrintAllPages with object " stringByAppendingString:[NSPrintAllPages description]]);
if ([NSPrintBottomMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintBottomMargin forKey:@"NSPrintBottomMargin"]; else NSLog([@"Can't initialize NSPrintBottomMargin with object " stringByAppendingString:[NSPrintBottomMargin description]]);
if ([NSPrintCancelJob isKindOfClass:[NSString class]]) [d setObject:NSPrintCancelJob forKey:@"NSPrintCancelJob"]; else NSLog([@"Can't initialize NSPrintCancelJob with object " stringByAppendingString:[NSPrintCancelJob description]]);
if ([NSPrintCopies isKindOfClass:[NSString class]]) [d setObject:NSPrintCopies forKey:@"NSPrintCopies"]; else NSLog([@"Can't initialize NSPrintCopies with object " stringByAppendingString:[NSPrintCopies description]]);
if ([NSPrintDetailedErrorReporting isKindOfClass:[NSString class]]) [d setObject:NSPrintDetailedErrorReporting forKey:@"NSPrintDetailedErrorReporting"]; else NSLog([@"Can't initialize NSPrintDetailedErrorReporting with object " stringByAppendingString:[NSPrintDetailedErrorReporting description]]);
if ([NSPrintFaxCoverSheetName isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxCoverSheetName forKey:@"NSPrintFaxCoverSheetName"]; else NSLog([@"Can't initialize NSPrintFaxCoverSheetName with object " stringByAppendingString:[NSPrintFaxCoverSheetName description]]);
if ([NSPrintFaxHighResolution isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxHighResolution forKey:@"NSPrintFaxHighResolution"]; else NSLog([@"Can't initialize NSPrintFaxHighResolution with object " stringByAppendingString:[NSPrintFaxHighResolution description]]);
if ([NSPrintFaxJob isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxJob forKey:@"NSPrintFaxJob"]; else NSLog([@"Can't initialize NSPrintFaxJob with object " stringByAppendingString:[NSPrintFaxJob description]]);
if ([NSPrintFaxModem isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxModem forKey:@"NSPrintFaxModem"]; else NSLog([@"Can't initialize NSPrintFaxModem with object " stringByAppendingString:[NSPrintFaxModem description]]);
if ([NSPrintFaxNumber isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxNumber forKey:@"NSPrintFaxNumber"]; else NSLog([@"Can't initialize NSPrintFaxNumber with object " stringByAppendingString:[NSPrintFaxNumber description]]);
if ([NSPrintFaxReceiverNames isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxReceiverNames forKey:@"NSPrintFaxReceiverNames"]; else NSLog([@"Can't initialize NSPrintFaxReceiverNames with object " stringByAppendingString:[NSPrintFaxReceiverNames description]]);
if ([NSPrintFaxReceiverNumbers isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxReceiverNumbers forKey:@"NSPrintFaxReceiverNumbers"]; else NSLog([@"Can't initialize NSPrintFaxReceiverNumbers with object " stringByAppendingString:[NSPrintFaxReceiverNumbers description]]);
if ([NSPrintFaxReturnReceipt isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxReturnReceipt forKey:@"NSPrintFaxReturnReceipt"]; else NSLog([@"Can't initialize NSPrintFaxReturnReceipt with object " stringByAppendingString:[NSPrintFaxReturnReceipt description]]);
if ([NSPrintFaxSendTime isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxSendTime forKey:@"NSPrintFaxSendTime"]; else NSLog([@"Can't initialize NSPrintFaxSendTime with object " stringByAppendingString:[NSPrintFaxSendTime description]]);
if ([NSPrintFaxTrimPageEnds isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxTrimPageEnds forKey:@"NSPrintFaxTrimPageEnds"]; else NSLog([@"Can't initialize NSPrintFaxTrimPageEnds with object " stringByAppendingString:[NSPrintFaxTrimPageEnds description]]);
if ([NSPrintFaxUseCoverSheet isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxUseCoverSheet forKey:@"NSPrintFaxUseCoverSheet"]; else NSLog([@"Can't initialize NSPrintFaxUseCoverSheet with object " stringByAppendingString:[NSPrintFaxUseCoverSheet description]]);
if ([NSPrintFirstPage isKindOfClass:[NSString class]]) [d setObject:NSPrintFirstPage forKey:@"NSPrintFirstPage"]; else NSLog([@"Can't initialize NSPrintFirstPage with object " stringByAppendingString:[NSPrintFirstPage description]]);
if ([NSPrintFormName isKindOfClass:[NSString class]]) [d setObject:NSPrintFormName forKey:@"NSPrintFormName"]; else NSLog([@"Can't initialize NSPrintFormName with object " stringByAppendingString:[NSPrintFormName description]]);
if ([NSPrintHeaderAndFooter isKindOfClass:[NSString class]]) [d setObject:NSPrintHeaderAndFooter forKey:@"NSPrintHeaderAndFooter"]; else NSLog([@"Can't initialize NSPrintHeaderAndFooter with object " stringByAppendingString:[NSPrintHeaderAndFooter description]]);
if ([NSPrintHorizontalPagination isKindOfClass:[NSString class]]) [d setObject:NSPrintHorizontalPagination forKey:@"NSPrintHorizontalPagination"]; else NSLog([@"Can't initialize NSPrintHorizontalPagination with object " stringByAppendingString:[NSPrintHorizontalPagination description]]);
if ([NSPrintHorizontallyCentered isKindOfClass:[NSString class]]) [d setObject:NSPrintHorizontallyCentered forKey:@"NSPrintHorizontallyCentered"]; else NSLog([@"Can't initialize NSPrintHorizontallyCentered with object " stringByAppendingString:[NSPrintHorizontallyCentered description]]);
if ([NSPrintJobDisposition isKindOfClass:[NSString class]]) [d setObject:NSPrintJobDisposition forKey:@"NSPrintJobDisposition"]; else NSLog([@"Can't initialize NSPrintJobDisposition with object " stringByAppendingString:[NSPrintJobDisposition description]]);
if ([NSPrintJobFeatures isKindOfClass:[NSString class]]) [d setObject:NSPrintJobFeatures forKey:@"NSPrintJobFeatures"]; else NSLog([@"Can't initialize NSPrintJobFeatures with object " stringByAppendingString:[NSPrintJobFeatures description]]);
if ([NSPrintLastPage isKindOfClass:[NSString class]]) [d setObject:NSPrintLastPage forKey:@"NSPrintLastPage"]; else NSLog([@"Can't initialize NSPrintLastPage with object " stringByAppendingString:[NSPrintLastPage description]]);
if ([NSPrintLeftMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintLeftMargin forKey:@"NSPrintLeftMargin"]; else NSLog([@"Can't initialize NSPrintLeftMargin with object " stringByAppendingString:[NSPrintLeftMargin description]]);
if ([NSPrintManualFeed isKindOfClass:[NSString class]]) [d setObject:NSPrintManualFeed forKey:@"NSPrintManualFeed"]; else NSLog([@"Can't initialize NSPrintManualFeed with object " stringByAppendingString:[NSPrintManualFeed description]]);
if ([NSPrintMustCollate isKindOfClass:[NSString class]]) [d setObject:NSPrintMustCollate forKey:@"NSPrintMustCollate"]; else NSLog([@"Can't initialize NSPrintMustCollate with object " stringByAppendingString:[NSPrintMustCollate description]]);
if ([NSPrintOperationExistsException isKindOfClass:[NSString class]]) [d setObject:NSPrintOperationExistsException forKey:@"NSPrintOperationExistsException"]; else NSLog([@"Can't initialize NSPrintOperationExistsException with object " stringByAppendingString:[NSPrintOperationExistsException description]]);
if ([NSPrintOrientation isKindOfClass:[NSString class]]) [d setObject:NSPrintOrientation forKey:@"NSPrintOrientation"]; else NSLog([@"Can't initialize NSPrintOrientation with object " stringByAppendingString:[NSPrintOrientation description]]);
if ([NSPrintPackageException isKindOfClass:[NSString class]]) [d setObject:NSPrintPackageException forKey:@"NSPrintPackageException"]; else NSLog([@"Can't initialize NSPrintPackageException with object " stringByAppendingString:[NSPrintPackageException description]]);
if ([NSPrintPagesAcross isKindOfClass:[NSString class]]) [d setObject:NSPrintPagesAcross forKey:@"NSPrintPagesAcross"]; else NSLog([@"Can't initialize NSPrintPagesAcross with object " stringByAppendingString:[NSPrintPagesAcross description]]);
if ([NSPrintPagesDown isKindOfClass:[NSString class]]) [d setObject:NSPrintPagesDown forKey:@"NSPrintPagesDown"]; else NSLog([@"Can't initialize NSPrintPagesDown with object " stringByAppendingString:[NSPrintPagesDown description]]);
if ([NSPrintPagesPerSheet isKindOfClass:[NSString class]]) [d setObject:NSPrintPagesPerSheet forKey:@"NSPrintPagesPerSheet"]; else NSLog([@"Can't initialize NSPrintPagesPerSheet with object " stringByAppendingString:[NSPrintPagesPerSheet description]]);
if ([NSPrintPanelAccessorySummaryItemDescriptionKey isKindOfClass:[NSString class]]) [d setObject:NSPrintPanelAccessorySummaryItemDescriptionKey forKey:@"NSPrintPanelAccessorySummaryItemDescriptionKey"]; else NSLog([@"Can't initialize NSPrintPanelAccessorySummaryItemDescriptionKey with object " stringByAppendingString:[NSPrintPanelAccessorySummaryItemDescriptionKey description]]);
if ([NSPrintPanelAccessorySummaryItemNameKey isKindOfClass:[NSString class]]) [d setObject:NSPrintPanelAccessorySummaryItemNameKey forKey:@"NSPrintPanelAccessorySummaryItemNameKey"]; else NSLog([@"Can't initialize NSPrintPanelAccessorySummaryItemNameKey with object " stringByAppendingString:[NSPrintPanelAccessorySummaryItemNameKey description]]);
if ([NSPrintPaperFeed isKindOfClass:[NSString class]]) [d setObject:NSPrintPaperFeed forKey:@"NSPrintPaperFeed"]; else NSLog([@"Can't initialize NSPrintPaperFeed with object " stringByAppendingString:[NSPrintPaperFeed description]]);
if ([NSPrintPaperName isKindOfClass:[NSString class]]) [d setObject:NSPrintPaperName forKey:@"NSPrintPaperName"]; else NSLog([@"Can't initialize NSPrintPaperName with object " stringByAppendingString:[NSPrintPaperName description]]);
if ([NSPrintPaperSize isKindOfClass:[NSString class]]) [d setObject:NSPrintPaperSize forKey:@"NSPrintPaperSize"]; else NSLog([@"Can't initialize NSPrintPaperSize with object " stringByAppendingString:[NSPrintPaperSize description]]);
if ([NSPrintPhotoJobStyleHint isKindOfClass:[NSString class]]) [d setObject:NSPrintPhotoJobStyleHint forKey:@"NSPrintPhotoJobStyleHint"]; else NSLog([@"Can't initialize NSPrintPhotoJobStyleHint with object " stringByAppendingString:[NSPrintPhotoJobStyleHint description]]);
if ([NSPrintPreviewJob isKindOfClass:[NSString class]]) [d setObject:NSPrintPreviewJob forKey:@"NSPrintPreviewJob"]; else NSLog([@"Can't initialize NSPrintPreviewJob with object " stringByAppendingString:[NSPrintPreviewJob description]]);
if ([NSPrintPrinter isKindOfClass:[NSString class]]) [d setObject:NSPrintPrinter forKey:@"NSPrintPrinter"]; else NSLog([@"Can't initialize NSPrintPrinter with object " stringByAppendingString:[NSPrintPrinter description]]);
if ([NSPrintPrinterName isKindOfClass:[NSString class]]) [d setObject:NSPrintPrinterName forKey:@"NSPrintPrinterName"]; else NSLog([@"Can't initialize NSPrintPrinterName with object " stringByAppendingString:[NSPrintPrinterName description]]);
if ([NSPrintReversePageOrder isKindOfClass:[NSString class]]) [d setObject:NSPrintReversePageOrder forKey:@"NSPrintReversePageOrder"]; else NSLog([@"Can't initialize NSPrintReversePageOrder with object " stringByAppendingString:[NSPrintReversePageOrder description]]);
if ([NSPrintRightMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintRightMargin forKey:@"NSPrintRightMargin"]; else NSLog([@"Can't initialize NSPrintRightMargin with object " stringByAppendingString:[NSPrintRightMargin description]]);
if ([NSPrintSaveJob isKindOfClass:[NSString class]]) [d setObject:NSPrintSaveJob forKey:@"NSPrintSaveJob"]; else NSLog([@"Can't initialize NSPrintSaveJob with object " stringByAppendingString:[NSPrintSaveJob description]]);
if ([NSPrintSavePath isKindOfClass:[NSString class]]) [d setObject:NSPrintSavePath forKey:@"NSPrintSavePath"]; else NSLog([@"Can't initialize NSPrintSavePath with object " stringByAppendingString:[NSPrintSavePath description]]);
if ([NSPrintScalingFactor isKindOfClass:[NSString class]]) [d setObject:NSPrintScalingFactor forKey:@"NSPrintScalingFactor"]; else NSLog([@"Can't initialize NSPrintScalingFactor with object " stringByAppendingString:[NSPrintScalingFactor description]]);
if ([NSPrintSpoolJob isKindOfClass:[NSString class]]) [d setObject:NSPrintSpoolJob forKey:@"NSPrintSpoolJob"]; else NSLog([@"Can't initialize NSPrintSpoolJob with object " stringByAppendingString:[NSPrintSpoolJob description]]);
if ([NSPrintTime isKindOfClass:[NSString class]]) [d setObject:NSPrintTime forKey:@"NSPrintTime"]; else NSLog([@"Can't initialize NSPrintTime with object " stringByAppendingString:[NSPrintTime description]]);
if ([NSPrintTopMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintTopMargin forKey:@"NSPrintTopMargin"]; else NSLog([@"Can't initialize NSPrintTopMargin with object " stringByAppendingString:[NSPrintTopMargin description]]);
if ([NSPrintVerticalPagination isKindOfClass:[NSString class]]) [d setObject:NSPrintVerticalPagination forKey:@"NSPrintVerticalPagination"]; else NSLog([@"Can't initialize NSPrintVerticalPagination with object " stringByAppendingString:[NSPrintVerticalPagination description]]);
if ([NSPrintVerticallyCentered isKindOfClass:[NSString class]]) [d setObject:NSPrintVerticallyCentered forKey:@"NSPrintVerticallyCentered"]; else NSLog([@"Can't initialize NSPrintVerticallyCentered with object " stringByAppendingString:[NSPrintVerticallyCentered description]]);
if ([NSPrintingCommunicationException isKindOfClass:[NSString class]]) [d setObject:NSPrintingCommunicationException forKey:@"NSPrintingCommunicationException"]; else NSLog([@"Can't initialize NSPrintingCommunicationException with object " stringByAppendingString:[NSPrintingCommunicationException description]]);
if ([NSRTFDPboardType isKindOfClass:[NSString class]]) [d setObject:NSRTFDPboardType forKey:@"NSRTFDPboardType"]; else NSLog([@"Can't initialize NSRTFDPboardType with object " stringByAppendingString:[NSRTFDPboardType description]]);
if ([NSRTFDTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSRTFDTextDocumentType forKey:@"NSRTFDTextDocumentType"]; else NSLog([@"Can't initialize NSRTFDTextDocumentType with object " stringByAppendingString:[NSRTFDTextDocumentType description]]);
if ([NSRTFPboardType isKindOfClass:[NSString class]]) [d setObject:NSRTFPboardType forKey:@"NSRTFPboardType"]; else NSLog([@"Can't initialize NSRTFPboardType with object " stringByAppendingString:[NSRTFPboardType description]]);
if ([NSRTFPropertyStackOverflowException isKindOfClass:[NSString class]]) [d setObject:NSRTFPropertyStackOverflowException forKey:@"NSRTFPropertyStackOverflowException"]; else NSLog([@"Can't initialize NSRTFPropertyStackOverflowException with object " stringByAppendingString:[NSRTFPropertyStackOverflowException description]]);
if ([NSRTFTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSRTFTextDocumentType forKey:@"NSRTFTextDocumentType"]; else NSLog([@"Can't initialize NSRTFTextDocumentType with object " stringByAppendingString:[NSRTFTextDocumentType description]]);
if ([NSRaisesForNotApplicableKeysBindingOption isKindOfClass:[NSString class]]) [d setObject:NSRaisesForNotApplicableKeysBindingOption forKey:@"NSRaisesForNotApplicableKeysBindingOption"]; else NSLog([@"Can't initialize NSRaisesForNotApplicableKeysBindingOption with object " stringByAppendingString:[NSRaisesForNotApplicableKeysBindingOption description]]);
if ([NSReadOnlyDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSReadOnlyDocumentAttribute forKey:@"NSReadOnlyDocumentAttribute"]; else NSLog([@"Can't initialize NSReadOnlyDocumentAttribute with object " stringByAppendingString:[NSReadOnlyDocumentAttribute description]]);
if ([NSRecentSearchesBinding isKindOfClass:[NSString class]]) [d setObject:NSRecentSearchesBinding forKey:@"NSRecentSearchesBinding"]; else NSLog([@"Can't initialize NSRecentSearchesBinding with object " stringByAppendingString:[NSRecentSearchesBinding description]]);
if ([NSRepresentedFilenameBinding isKindOfClass:[NSString class]]) [d setObject:NSRepresentedFilenameBinding forKey:@"NSRepresentedFilenameBinding"]; else NSLog([@"Can't initialize NSRepresentedFilenameBinding with object " stringByAppendingString:[NSRepresentedFilenameBinding description]]);
if ([NSRightMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSRightMarginDocumentAttribute forKey:@"NSRightMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSRightMarginDocumentAttribute with object " stringByAppendingString:[NSRightMarginDocumentAttribute description]]);
if ([NSRowHeightBinding isKindOfClass:[NSString class]]) [d setObject:NSRowHeightBinding forKey:@"NSRowHeightBinding"]; else NSLog([@"Can't initialize NSRowHeightBinding with object " stringByAppendingString:[NSRowHeightBinding description]]);
if ([NSRuleEditorPredicateComparisonModifier isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateComparisonModifier forKey:@"NSRuleEditorPredicateComparisonModifier"]; else NSLog([@"Can't initialize NSRuleEditorPredicateComparisonModifier with object " stringByAppendingString:[NSRuleEditorPredicateComparisonModifier description]]);
if ([NSRuleEditorPredicateCompoundType isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateCompoundType forKey:@"NSRuleEditorPredicateCompoundType"]; else NSLog([@"Can't initialize NSRuleEditorPredicateCompoundType with object " stringByAppendingString:[NSRuleEditorPredicateCompoundType description]]);
if ([NSRuleEditorPredicateCustomSelector isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateCustomSelector forKey:@"NSRuleEditorPredicateCustomSelector"]; else NSLog([@"Can't initialize NSRuleEditorPredicateCustomSelector with object " stringByAppendingString:[NSRuleEditorPredicateCustomSelector description]]);
if ([NSRuleEditorPredicateLeftExpression isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateLeftExpression forKey:@"NSRuleEditorPredicateLeftExpression"]; else NSLog([@"Can't initialize NSRuleEditorPredicateLeftExpression with object " stringByAppendingString:[NSRuleEditorPredicateLeftExpression description]]);
if ([NSRuleEditorPredicateOperatorType isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateOperatorType forKey:@"NSRuleEditorPredicateOperatorType"]; else NSLog([@"Can't initialize NSRuleEditorPredicateOperatorType with object " stringByAppendingString:[NSRuleEditorPredicateOperatorType description]]);
if ([NSRuleEditorPredicateOptions isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateOptions forKey:@"NSRuleEditorPredicateOptions"]; else NSLog([@"Can't initialize NSRuleEditorPredicateOptions with object " stringByAppendingString:[NSRuleEditorPredicateOptions description]]);
if ([NSRuleEditorPredicateRightExpression isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateRightExpression forKey:@"NSRuleEditorPredicateRightExpression"]; else NSLog([@"Can't initialize NSRuleEditorPredicateRightExpression with object " stringByAppendingString:[NSRuleEditorPredicateRightExpression description]]);
if ([NSRuleEditorRowsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorRowsDidChangeNotification forKey:@"NSRuleEditorRowsDidChangeNotification"]; else NSLog([@"Can't initialize NSRuleEditorRowsDidChangeNotification with object " stringByAppendingString:[NSRuleEditorRowsDidChangeNotification description]]);
if ([NSRulerPboard isKindOfClass:[NSString class]]) [d setObject:NSRulerPboard forKey:@"NSRulerPboard"]; else NSLog([@"Can't initialize NSRulerPboard with object " stringByAppendingString:[NSRulerPboard description]]);
if ([NSRulerPboardType isKindOfClass:[NSString class]]) [d setObject:NSRulerPboardType forKey:@"NSRulerPboardType"]; else NSLog([@"Can't initialize NSRulerPboardType with object " stringByAppendingString:[NSRulerPboardType description]]);
if ([NSSelectedIdentifierBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedIdentifierBinding forKey:@"NSSelectedIdentifierBinding"]; else NSLog([@"Can't initialize NSSelectedIdentifierBinding with object " stringByAppendingString:[NSSelectedIdentifierBinding description]]);
if ([NSSelectedIndexBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedIndexBinding forKey:@"NSSelectedIndexBinding"]; else NSLog([@"Can't initialize NSSelectedIndexBinding with object " stringByAppendingString:[NSSelectedIndexBinding description]]);
if ([NSSelectedLabelBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedLabelBinding forKey:@"NSSelectedLabelBinding"]; else NSLog([@"Can't initialize NSSelectedLabelBinding with object " stringByAppendingString:[NSSelectedLabelBinding description]]);
if ([NSSelectedObjectBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedObjectBinding forKey:@"NSSelectedObjectBinding"]; else NSLog([@"Can't initialize NSSelectedObjectBinding with object " stringByAppendingString:[NSSelectedObjectBinding description]]);
if ([NSSelectedObjectsBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedObjectsBinding forKey:@"NSSelectedObjectsBinding"]; else NSLog([@"Can't initialize NSSelectedObjectsBinding with object " stringByAppendingString:[NSSelectedObjectsBinding description]]);
if ([NSSelectedTagBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedTagBinding forKey:@"NSSelectedTagBinding"]; else NSLog([@"Can't initialize NSSelectedTagBinding with object " stringByAppendingString:[NSSelectedTagBinding description]]);
if ([NSSelectedValueBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedValueBinding forKey:@"NSSelectedValueBinding"]; else NSLog([@"Can't initialize NSSelectedValueBinding with object " stringByAppendingString:[NSSelectedValueBinding description]]);
if ([NSSelectedValuesBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedValuesBinding forKey:@"NSSelectedValuesBinding"]; else NSLog([@"Can't initialize NSSelectedValuesBinding with object " stringByAppendingString:[NSSelectedValuesBinding description]]);
if ([NSSelectionIndexPathsBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectionIndexPathsBinding forKey:@"NSSelectionIndexPathsBinding"]; else NSLog([@"Can't initialize NSSelectionIndexPathsBinding with object " stringByAppendingString:[NSSelectionIndexPathsBinding description]]);
if ([NSSelectionIndexesBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectionIndexesBinding forKey:@"NSSelectionIndexesBinding"]; else NSLog([@"Can't initialize NSSelectionIndexesBinding with object " stringByAppendingString:[NSSelectionIndexesBinding description]]);
if ([NSSelectorNameBindingOption isKindOfClass:[NSString class]]) [d setObject:NSSelectorNameBindingOption forKey:@"NSSelectorNameBindingOption"]; else NSLog([@"Can't initialize NSSelectorNameBindingOption with object " stringByAppendingString:[NSSelectorNameBindingOption description]]);
if ([NSSelectsAllWhenSettingContentBindingOption isKindOfClass:[NSString class]]) [d setObject:NSSelectsAllWhenSettingContentBindingOption forKey:@"NSSelectsAllWhenSettingContentBindingOption"]; else NSLog([@"Can't initialize NSSelectsAllWhenSettingContentBindingOption with object " stringByAppendingString:[NSSelectsAllWhenSettingContentBindingOption description]]);
if ([NSShadowAttributeName isKindOfClass:[NSString class]]) [d setObject:NSShadowAttributeName forKey:@"NSShadowAttributeName"]; else NSLog([@"Can't initialize NSShadowAttributeName with object " stringByAppendingString:[NSShadowAttributeName description]]);
if ([NSShellCommandFileType isKindOfClass:[NSString class]]) [d setObject:NSShellCommandFileType forKey:@"NSShellCommandFileType"]; else NSLog([@"Can't initialize NSShellCommandFileType with object " stringByAppendingString:[NSShellCommandFileType description]]);
if ([NSSortDescriptorsBinding isKindOfClass:[NSString class]]) [d setObject:NSSortDescriptorsBinding forKey:@"NSSortDescriptorsBinding"]; else NSLog([@"Can't initialize NSSortDescriptorsBinding with object " stringByAppendingString:[NSSortDescriptorsBinding description]]);
if ([NSSoundPboardType isKindOfClass:[NSString class]]) [d setObject:NSSoundPboardType forKey:@"NSSoundPboardType"]; else NSLog([@"Can't initialize NSSoundPboardType with object " stringByAppendingString:[NSSoundPboardType description]]);
if ([NSSpeechCharacterModeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechCharacterModeProperty forKey:@"NSSpeechCharacterModeProperty"]; else NSLog([@"Can't initialize NSSpeechCharacterModeProperty with object " stringByAppendingString:[NSSpeechCharacterModeProperty description]]);
if ([NSSpeechCommandDelimiterProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechCommandDelimiterProperty forKey:@"NSSpeechCommandDelimiterProperty"]; else NSLog([@"Can't initialize NSSpeechCommandDelimiterProperty with object " stringByAppendingString:[NSSpeechCommandDelimiterProperty description]]);
if ([NSSpeechCommandPrefix isKindOfClass:[NSString class]]) [d setObject:NSSpeechCommandPrefix forKey:@"NSSpeechCommandPrefix"]; else NSLog([@"Can't initialize NSSpeechCommandPrefix with object " stringByAppendingString:[NSSpeechCommandPrefix description]]);
if ([NSSpeechCommandSuffix isKindOfClass:[NSString class]]) [d setObject:NSSpeechCommandSuffix forKey:@"NSSpeechCommandSuffix"]; else NSLog([@"Can't initialize NSSpeechCommandSuffix with object " stringByAppendingString:[NSSpeechCommandSuffix description]]);
if ([NSSpeechCurrentVoiceProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechCurrentVoiceProperty forKey:@"NSSpeechCurrentVoiceProperty"]; else NSLog([@"Can't initialize NSSpeechCurrentVoiceProperty with object " stringByAppendingString:[NSSpeechCurrentVoiceProperty description]]);
if ([NSSpeechDictionaryAbbreviations isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryAbbreviations forKey:@"NSSpeechDictionaryAbbreviations"]; else NSLog([@"Can't initialize NSSpeechDictionaryAbbreviations with object " stringByAppendingString:[NSSpeechDictionaryAbbreviations description]]);
if ([NSSpeechDictionaryEntryPhonemes isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryEntryPhonemes forKey:@"NSSpeechDictionaryEntryPhonemes"]; else NSLog([@"Can't initialize NSSpeechDictionaryEntryPhonemes with object " stringByAppendingString:[NSSpeechDictionaryEntryPhonemes description]]);
if ([NSSpeechDictionaryEntrySpelling isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryEntrySpelling forKey:@"NSSpeechDictionaryEntrySpelling"]; else NSLog([@"Can't initialize NSSpeechDictionaryEntrySpelling with object " stringByAppendingString:[NSSpeechDictionaryEntrySpelling description]]);
if ([NSSpeechDictionaryLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryLocaleIdentifier forKey:@"NSSpeechDictionaryLocaleIdentifier"]; else NSLog([@"Can't initialize NSSpeechDictionaryLocaleIdentifier with object " stringByAppendingString:[NSSpeechDictionaryLocaleIdentifier description]]);
if ([NSSpeechDictionaryModificationDate isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryModificationDate forKey:@"NSSpeechDictionaryModificationDate"]; else NSLog([@"Can't initialize NSSpeechDictionaryModificationDate with object " stringByAppendingString:[NSSpeechDictionaryModificationDate description]]);
if ([NSSpeechDictionaryPronunciations isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryPronunciations forKey:@"NSSpeechDictionaryPronunciations"]; else NSLog([@"Can't initialize NSSpeechDictionaryPronunciations with object " stringByAppendingString:[NSSpeechDictionaryPronunciations description]]);
if ([NSSpeechErrorCount isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorCount forKey:@"NSSpeechErrorCount"]; else NSLog([@"Can't initialize NSSpeechErrorCount with object " stringByAppendingString:[NSSpeechErrorCount description]]);
if ([NSSpeechErrorNewestCharacterOffset isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorNewestCharacterOffset forKey:@"NSSpeechErrorNewestCharacterOffset"]; else NSLog([@"Can't initialize NSSpeechErrorNewestCharacterOffset with object " stringByAppendingString:[NSSpeechErrorNewestCharacterOffset description]]);
if ([NSSpeechErrorNewestCode isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorNewestCode forKey:@"NSSpeechErrorNewestCode"]; else NSLog([@"Can't initialize NSSpeechErrorNewestCode with object " stringByAppendingString:[NSSpeechErrorNewestCode description]]);
if ([NSSpeechErrorOldestCharacterOffset isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorOldestCharacterOffset forKey:@"NSSpeechErrorOldestCharacterOffset"]; else NSLog([@"Can't initialize NSSpeechErrorOldestCharacterOffset with object " stringByAppendingString:[NSSpeechErrorOldestCharacterOffset description]]);
if ([NSSpeechErrorOldestCode isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorOldestCode forKey:@"NSSpeechErrorOldestCode"]; else NSLog([@"Can't initialize NSSpeechErrorOldestCode with object " stringByAppendingString:[NSSpeechErrorOldestCode description]]);
if ([NSSpeechErrorsProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorsProperty forKey:@"NSSpeechErrorsProperty"]; else NSLog([@"Can't initialize NSSpeechErrorsProperty with object " stringByAppendingString:[NSSpeechErrorsProperty description]]);
if ([NSSpeechInputModeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechInputModeProperty forKey:@"NSSpeechInputModeProperty"]; else NSLog([@"Can't initialize NSSpeechInputModeProperty with object " stringByAppendingString:[NSSpeechInputModeProperty description]]);
if ([NSSpeechModeLiteral isKindOfClass:[NSString class]]) [d setObject:NSSpeechModeLiteral forKey:@"NSSpeechModeLiteral"]; else NSLog([@"Can't initialize NSSpeechModeLiteral with object " stringByAppendingString:[NSSpeechModeLiteral description]]);
if ([NSSpeechModeNormal isKindOfClass:[NSString class]]) [d setObject:NSSpeechModeNormal forKey:@"NSSpeechModeNormal"]; else NSLog([@"Can't initialize NSSpeechModeNormal with object " stringByAppendingString:[NSSpeechModeNormal description]]);
if ([NSSpeechModePhoneme isKindOfClass:[NSString class]]) [d setObject:NSSpeechModePhoneme forKey:@"NSSpeechModePhoneme"]; else NSLog([@"Can't initialize NSSpeechModePhoneme with object " stringByAppendingString:[NSSpeechModePhoneme description]]);
if ([NSSpeechModeText isKindOfClass:[NSString class]]) [d setObject:NSSpeechModeText forKey:@"NSSpeechModeText"]; else NSLog([@"Can't initialize NSSpeechModeText with object " stringByAppendingString:[NSSpeechModeText description]]);
if ([NSSpeechNumberModeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechNumberModeProperty forKey:@"NSSpeechNumberModeProperty"]; else NSLog([@"Can't initialize NSSpeechNumberModeProperty with object " stringByAppendingString:[NSSpeechNumberModeProperty description]]);
if ([NSSpeechOutputToFileURLProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechOutputToFileURLProperty forKey:@"NSSpeechOutputToFileURLProperty"]; else NSLog([@"Can't initialize NSSpeechOutputToFileURLProperty with object " stringByAppendingString:[NSSpeechOutputToFileURLProperty description]]);
if ([NSSpeechPhonemeInfoExample isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoExample forKey:@"NSSpeechPhonemeInfoExample"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoExample with object " stringByAppendingString:[NSSpeechPhonemeInfoExample description]]);
if ([NSSpeechPhonemeInfoHiliteEnd isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoHiliteEnd forKey:@"NSSpeechPhonemeInfoHiliteEnd"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoHiliteEnd with object " stringByAppendingString:[NSSpeechPhonemeInfoHiliteEnd description]]);
if ([NSSpeechPhonemeInfoHiliteStart isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoHiliteStart forKey:@"NSSpeechPhonemeInfoHiliteStart"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoHiliteStart with object " stringByAppendingString:[NSSpeechPhonemeInfoHiliteStart description]]);
if ([NSSpeechPhonemeInfoOpcode isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoOpcode forKey:@"NSSpeechPhonemeInfoOpcode"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoOpcode with object " stringByAppendingString:[NSSpeechPhonemeInfoOpcode description]]);
if ([NSSpeechPhonemeInfoSymbol isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoSymbol forKey:@"NSSpeechPhonemeInfoSymbol"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoSymbol with object " stringByAppendingString:[NSSpeechPhonemeInfoSymbol description]]);
if ([NSSpeechPhonemeSymbolsProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeSymbolsProperty forKey:@"NSSpeechPhonemeSymbolsProperty"]; else NSLog([@"Can't initialize NSSpeechPhonemeSymbolsProperty with object " stringByAppendingString:[NSSpeechPhonemeSymbolsProperty description]]);
if ([NSSpeechPitchBaseProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechPitchBaseProperty forKey:@"NSSpeechPitchBaseProperty"]; else NSLog([@"Can't initialize NSSpeechPitchBaseProperty with object " stringByAppendingString:[NSSpeechPitchBaseProperty description]]);
if ([NSSpeechPitchModProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechPitchModProperty forKey:@"NSSpeechPitchModProperty"]; else NSLog([@"Can't initialize NSSpeechPitchModProperty with object " stringByAppendingString:[NSSpeechPitchModProperty description]]);
if ([NSSpeechRateProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechRateProperty forKey:@"NSSpeechRateProperty"]; else NSLog([@"Can't initialize NSSpeechRateProperty with object " stringByAppendingString:[NSSpeechRateProperty description]]);
if ([NSSpeechRecentSyncProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechRecentSyncProperty forKey:@"NSSpeechRecentSyncProperty"]; else NSLog([@"Can't initialize NSSpeechRecentSyncProperty with object " stringByAppendingString:[NSSpeechRecentSyncProperty description]]);
if ([NSSpeechResetProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechResetProperty forKey:@"NSSpeechResetProperty"]; else NSLog([@"Can't initialize NSSpeechResetProperty with object " stringByAppendingString:[NSSpeechResetProperty description]]);
if ([NSSpeechStatusNumberOfCharactersLeft isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusNumberOfCharactersLeft forKey:@"NSSpeechStatusNumberOfCharactersLeft"]; else NSLog([@"Can't initialize NSSpeechStatusNumberOfCharactersLeft with object " stringByAppendingString:[NSSpeechStatusNumberOfCharactersLeft description]]);
if ([NSSpeechStatusOutputBusy isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusOutputBusy forKey:@"NSSpeechStatusOutputBusy"]; else NSLog([@"Can't initialize NSSpeechStatusOutputBusy with object " stringByAppendingString:[NSSpeechStatusOutputBusy description]]);
if ([NSSpeechStatusOutputPaused isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusOutputPaused forKey:@"NSSpeechStatusOutputPaused"]; else NSLog([@"Can't initialize NSSpeechStatusOutputPaused with object " stringByAppendingString:[NSSpeechStatusOutputPaused description]]);
if ([NSSpeechStatusPhonemeCode isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusPhonemeCode forKey:@"NSSpeechStatusPhonemeCode"]; else NSLog([@"Can't initialize NSSpeechStatusPhonemeCode with object " stringByAppendingString:[NSSpeechStatusPhonemeCode description]]);
if ([NSSpeechStatusProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusProperty forKey:@"NSSpeechStatusProperty"]; else NSLog([@"Can't initialize NSSpeechStatusProperty with object " stringByAppendingString:[NSSpeechStatusProperty description]]);
if ([NSSpeechSynthesizerInfoIdentifier isKindOfClass:[NSString class]]) [d setObject:NSSpeechSynthesizerInfoIdentifier forKey:@"NSSpeechSynthesizerInfoIdentifier"]; else NSLog([@"Can't initialize NSSpeechSynthesizerInfoIdentifier with object " stringByAppendingString:[NSSpeechSynthesizerInfoIdentifier description]]);
if ([NSSpeechSynthesizerInfoProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechSynthesizerInfoProperty forKey:@"NSSpeechSynthesizerInfoProperty"]; else NSLog([@"Can't initialize NSSpeechSynthesizerInfoProperty with object " stringByAppendingString:[NSSpeechSynthesizerInfoProperty description]]);
if ([NSSpeechSynthesizerInfoVersion isKindOfClass:[NSString class]]) [d setObject:NSSpeechSynthesizerInfoVersion forKey:@"NSSpeechSynthesizerInfoVersion"]; else NSLog([@"Can't initialize NSSpeechSynthesizerInfoVersion with object " stringByAppendingString:[NSSpeechSynthesizerInfoVersion description]]);
if ([NSSpeechVolumeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechVolumeProperty forKey:@"NSSpeechVolumeProperty"]; else NSLog([@"Can't initialize NSSpeechVolumeProperty with object " stringByAppendingString:[NSSpeechVolumeProperty description]]);
if ([NSSpellingStateAttributeName isKindOfClass:[NSString class]]) [d setObject:NSSpellingStateAttributeName forKey:@"NSSpellingStateAttributeName"]; else NSLog([@"Can't initialize NSSpellingStateAttributeName with object " stringByAppendingString:[NSSpellingStateAttributeName description]]);
if ([NSSplitViewDidResizeSubviewsNotification isKindOfClass:[NSString class]]) [d setObject:NSSplitViewDidResizeSubviewsNotification forKey:@"NSSplitViewDidResizeSubviewsNotification"]; else NSLog([@"Can't initialize NSSplitViewDidResizeSubviewsNotification with object " stringByAppendingString:[NSSplitViewDidResizeSubviewsNotification description]]);
if ([NSSplitViewWillResizeSubviewsNotification isKindOfClass:[NSString class]]) [d setObject:NSSplitViewWillResizeSubviewsNotification forKey:@"NSSplitViewWillResizeSubviewsNotification"]; else NSLog([@"Can't initialize NSSplitViewWillResizeSubviewsNotification with object " stringByAppendingString:[NSSplitViewWillResizeSubviewsNotification description]]);
if ([NSStrikethroughColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrikethroughColorAttributeName forKey:@"NSStrikethroughColorAttributeName"]; else NSLog([@"Can't initialize NSStrikethroughColorAttributeName with object " stringByAppendingString:[NSStrikethroughColorAttributeName description]]);
if ([NSStrikethroughStyleAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrikethroughStyleAttributeName forKey:@"NSStrikethroughStyleAttributeName"]; else NSLog([@"Can't initialize NSStrikethroughStyleAttributeName with object " stringByAppendingString:[NSStrikethroughStyleAttributeName description]]);
if ([NSStringPboardType isKindOfClass:[NSString class]]) [d setObject:NSStringPboardType forKey:@"NSStringPboardType"]; else NSLog([@"Can't initialize NSStringPboardType with object " stringByAppendingString:[NSStringPboardType description]]);
if ([NSStrokeColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrokeColorAttributeName forKey:@"NSStrokeColorAttributeName"]; else NSLog([@"Can't initialize NSStrokeColorAttributeName with object " stringByAppendingString:[NSStrokeColorAttributeName description]]);
if ([NSStrokeWidthAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrokeWidthAttributeName forKey:@"NSStrokeWidthAttributeName"]; else NSLog([@"Can't initialize NSStrokeWidthAttributeName with object " stringByAppendingString:[NSStrokeWidthAttributeName description]]);
if ([NSSubjectDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSSubjectDocumentAttribute forKey:@"NSSubjectDocumentAttribute"]; else NSLog([@"Can't initialize NSSubjectDocumentAttribute with object " stringByAppendingString:[NSSubjectDocumentAttribute description]]);
if ([NSSuperscriptAttributeName isKindOfClass:[NSString class]]) [d setObject:NSSuperscriptAttributeName forKey:@"NSSuperscriptAttributeName"]; else NSLog([@"Can't initialize NSSuperscriptAttributeName with object " stringByAppendingString:[NSSuperscriptAttributeName description]]);
if ([NSSystemColorsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSSystemColorsDidChangeNotification forKey:@"NSSystemColorsDidChangeNotification"]; else NSLog([@"Can't initialize NSSystemColorsDidChangeNotification with object " stringByAppendingString:[NSSystemColorsDidChangeNotification description]]);
if ([NSTIFFException isKindOfClass:[NSString class]]) [d setObject:NSTIFFException forKey:@"NSTIFFException"]; else NSLog([@"Can't initialize NSTIFFException with object " stringByAppendingString:[NSTIFFException description]]);
if ([NSTIFFPboardType isKindOfClass:[NSString class]]) [d setObject:NSTIFFPboardType forKey:@"NSTIFFPboardType"]; else NSLog([@"Can't initialize NSTIFFPboardType with object " stringByAppendingString:[NSTIFFPboardType description]]);
if ([NSTabColumnTerminatorsAttributeName isKindOfClass:[NSString class]]) [d setObject:NSTabColumnTerminatorsAttributeName forKey:@"NSTabColumnTerminatorsAttributeName"]; else NSLog([@"Can't initialize NSTabColumnTerminatorsAttributeName with object " stringByAppendingString:[NSTabColumnTerminatorsAttributeName description]]);
if ([NSTableViewColumnDidMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewColumnDidMoveNotification forKey:@"NSTableViewColumnDidMoveNotification"]; else NSLog([@"Can't initialize NSTableViewColumnDidMoveNotification with object " stringByAppendingString:[NSTableViewColumnDidMoveNotification description]]);
if ([NSTableViewColumnDidResizeNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewColumnDidResizeNotification forKey:@"NSTableViewColumnDidResizeNotification"]; else NSLog([@"Can't initialize NSTableViewColumnDidResizeNotification with object " stringByAppendingString:[NSTableViewColumnDidResizeNotification description]]);
if ([NSTableViewSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewSelectionDidChangeNotification forKey:@"NSTableViewSelectionDidChangeNotification"]; else NSLog([@"Can't initialize NSTableViewSelectionDidChangeNotification with object " stringByAppendingString:[NSTableViewSelectionDidChangeNotification description]]);
if ([NSTableViewSelectionIsChangingNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewSelectionIsChangingNotification forKey:@"NSTableViewSelectionIsChangingNotification"]; else NSLog([@"Can't initialize NSTableViewSelectionIsChangingNotification with object " stringByAppendingString:[NSTableViewSelectionIsChangingNotification description]]);
if ([NSTabularTextPboardType isKindOfClass:[NSString class]]) [d setObject:NSTabularTextPboardType forKey:@"NSTabularTextPboardType"]; else NSLog([@"Can't initialize NSTabularTextPboardType with object " stringByAppendingString:[NSTabularTextPboardType description]]);
if ([NSTargetBinding isKindOfClass:[NSString class]]) [d setObject:NSTargetBinding forKey:@"NSTargetBinding"]; else NSLog([@"Can't initialize NSTargetBinding with object " stringByAppendingString:[NSTargetBinding description]]);
if ([NSTextColorBinding isKindOfClass:[NSString class]]) [d setObject:NSTextColorBinding forKey:@"NSTextColorBinding"]; else NSLog([@"Can't initialize NSTextColorBinding with object " stringByAppendingString:[NSTextColorBinding description]]);
if ([NSTextDidBeginEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextDidBeginEditingNotification forKey:@"NSTextDidBeginEditingNotification"]; else NSLog([@"Can't initialize NSTextDidBeginEditingNotification with object " stringByAppendingString:[NSTextDidBeginEditingNotification description]]);
if ([NSTextDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSTextDidChangeNotification forKey:@"NSTextDidChangeNotification"]; else NSLog([@"Can't initialize NSTextDidChangeNotification with object " stringByAppendingString:[NSTextDidChangeNotification description]]);
if ([NSTextDidEndEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextDidEndEditingNotification forKey:@"NSTextDidEndEditingNotification"]; else NSLog([@"Can't initialize NSTextDidEndEditingNotification with object " stringByAppendingString:[NSTextDidEndEditingNotification description]]);
if ([NSTextEncodingNameDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSTextEncodingNameDocumentAttribute forKey:@"NSTextEncodingNameDocumentAttribute"]; else NSLog([@"Can't initialize NSTextEncodingNameDocumentAttribute with object " stringByAppendingString:[NSTextEncodingNameDocumentAttribute description]]);
if ([NSTextEncodingNameDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSTextEncodingNameDocumentOption forKey:@"NSTextEncodingNameDocumentOption"]; else NSLog([@"Can't initialize NSTextEncodingNameDocumentOption with object " stringByAppendingString:[NSTextEncodingNameDocumentOption description]]);
if ([NSTextLineTooLongException isKindOfClass:[NSString class]]) [d setObject:NSTextLineTooLongException forKey:@"NSTextLineTooLongException"]; else NSLog([@"Can't initialize NSTextLineTooLongException with object " stringByAppendingString:[NSTextLineTooLongException description]]);
if ([NSTextNoSelectionException isKindOfClass:[NSString class]]) [d setObject:NSTextNoSelectionException forKey:@"NSTextNoSelectionException"]; else NSLog([@"Can't initialize NSTextNoSelectionException with object " stringByAppendingString:[NSTextNoSelectionException description]]);
if ([NSTextReadException isKindOfClass:[NSString class]]) [d setObject:NSTextReadException forKey:@"NSTextReadException"]; else NSLog([@"Can't initialize NSTextReadException with object " stringByAppendingString:[NSTextReadException description]]);
if ([NSTextSizeMultiplierDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSTextSizeMultiplierDocumentOption forKey:@"NSTextSizeMultiplierDocumentOption"]; else NSLog([@"Can't initialize NSTextSizeMultiplierDocumentOption with object " stringByAppendingString:[NSTextSizeMultiplierDocumentOption description]]);
if ([NSTextStorageDidProcessEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextStorageDidProcessEditingNotification forKey:@"NSTextStorageDidProcessEditingNotification"]; else NSLog([@"Can't initialize NSTextStorageDidProcessEditingNotification with object " stringByAppendingString:[NSTextStorageDidProcessEditingNotification description]]);
if ([NSTextStorageWillProcessEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextStorageWillProcessEditingNotification forKey:@"NSTextStorageWillProcessEditingNotification"]; else NSLog([@"Can't initialize NSTextStorageWillProcessEditingNotification with object " stringByAppendingString:[NSTextStorageWillProcessEditingNotification description]]);
if ([NSTextViewDidChangeSelectionNotification isKindOfClass:[NSString class]]) [d setObject:NSTextViewDidChangeSelectionNotification forKey:@"NSTextViewDidChangeSelectionNotification"]; else NSLog([@"Can't initialize NSTextViewDidChangeSelectionNotification with object " stringByAppendingString:[NSTextViewDidChangeSelectionNotification description]]);
if ([NSTextViewDidChangeTypingAttributesNotification isKindOfClass:[NSString class]]) [d setObject:NSTextViewDidChangeTypingAttributesNotification forKey:@"NSTextViewDidChangeTypingAttributesNotification"]; else NSLog([@"Can't initialize NSTextViewDidChangeTypingAttributesNotification with object " stringByAppendingString:[NSTextViewDidChangeTypingAttributesNotification description]]);
if ([NSTextViewWillChangeNotifyingTextViewNotification isKindOfClass:[NSString class]]) [d setObject:NSTextViewWillChangeNotifyingTextViewNotification forKey:@"NSTextViewWillChangeNotifyingTextViewNotification"]; else NSLog([@"Can't initialize NSTextViewWillChangeNotifyingTextViewNotification with object " stringByAppendingString:[NSTextViewWillChangeNotifyingTextViewNotification description]]);
if ([NSTextWriteException isKindOfClass:[NSString class]]) [d setObject:NSTextWriteException forKey:@"NSTextWriteException"]; else NSLog([@"Can't initialize NSTextWriteException with object " stringByAppendingString:[NSTextWriteException description]]);
if ([NSTimeoutDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSTimeoutDocumentOption forKey:@"NSTimeoutDocumentOption"]; else NSLog([@"Can't initialize NSTimeoutDocumentOption with object " stringByAppendingString:[NSTimeoutDocumentOption description]]);
if ([NSTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSTitleBinding forKey:@"NSTitleBinding"]; else NSLog([@"Can't initialize NSTitleBinding with object " stringByAppendingString:[NSTitleBinding description]]);
if ([NSTitleDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSTitleDocumentAttribute forKey:@"NSTitleDocumentAttribute"]; else NSLog([@"Can't initialize NSTitleDocumentAttribute with object " stringByAppendingString:[NSTitleDocumentAttribute description]]);
if ([NSToolTipAttributeName isKindOfClass:[NSString class]]) [d setObject:NSToolTipAttributeName forKey:@"NSToolTipAttributeName"]; else NSLog([@"Can't initialize NSToolTipAttributeName with object " stringByAppendingString:[NSToolTipAttributeName description]]);
if ([NSToolTipBinding isKindOfClass:[NSString class]]) [d setObject:NSToolTipBinding forKey:@"NSToolTipBinding"]; else NSLog([@"Can't initialize NSToolTipBinding with object " stringByAppendingString:[NSToolTipBinding description]]);
if ([NSToolbarCustomizeToolbarItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarCustomizeToolbarItemIdentifier forKey:@"NSToolbarCustomizeToolbarItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarCustomizeToolbarItemIdentifier with object " stringByAppendingString:[NSToolbarCustomizeToolbarItemIdentifier description]]);
if ([NSToolbarDidRemoveItemNotification isKindOfClass:[NSString class]]) [d setObject:NSToolbarDidRemoveItemNotification forKey:@"NSToolbarDidRemoveItemNotification"]; else NSLog([@"Can't initialize NSToolbarDidRemoveItemNotification with object " stringByAppendingString:[NSToolbarDidRemoveItemNotification description]]);
if ([NSToolbarFlexibleSpaceItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarFlexibleSpaceItemIdentifier forKey:@"NSToolbarFlexibleSpaceItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarFlexibleSpaceItemIdentifier with object " stringByAppendingString:[NSToolbarFlexibleSpaceItemIdentifier description]]);
if ([NSToolbarPrintItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarPrintItemIdentifier forKey:@"NSToolbarPrintItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarPrintItemIdentifier with object " stringByAppendingString:[NSToolbarPrintItemIdentifier description]]);
if ([NSToolbarSeparatorItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarSeparatorItemIdentifier forKey:@"NSToolbarSeparatorItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarSeparatorItemIdentifier with object " stringByAppendingString:[NSToolbarSeparatorItemIdentifier description]]);
if ([NSToolbarShowColorsItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarShowColorsItemIdentifier forKey:@"NSToolbarShowColorsItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarShowColorsItemIdentifier with object " stringByAppendingString:[NSToolbarShowColorsItemIdentifier description]]);
if ([NSToolbarShowFontsItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarShowFontsItemIdentifier forKey:@"NSToolbarShowFontsItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarShowFontsItemIdentifier with object " stringByAppendingString:[NSToolbarShowFontsItemIdentifier description]]);
if ([NSToolbarSpaceItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarSpaceItemIdentifier forKey:@"NSToolbarSpaceItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarSpaceItemIdentifier with object " stringByAppendingString:[NSToolbarSpaceItemIdentifier description]]);
if ([NSToolbarWillAddItemNotification isKindOfClass:[NSString class]]) [d setObject:NSToolbarWillAddItemNotification forKey:@"NSToolbarWillAddItemNotification"]; else NSLog([@"Can't initialize NSToolbarWillAddItemNotification with object " stringByAppendingString:[NSToolbarWillAddItemNotification description]]);
if ([NSTopMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSTopMarginDocumentAttribute forKey:@"NSTopMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSTopMarginDocumentAttribute with object " stringByAppendingString:[NSTopMarginDocumentAttribute description]]);
if ([NSTransparentBinding isKindOfClass:[NSString class]]) [d setObject:NSTransparentBinding forKey:@"NSTransparentBinding"]; else NSLog([@"Can't initialize NSTransparentBinding with object " stringByAppendingString:[NSTransparentBinding description]]);
if ([NSTypedStreamVersionException isKindOfClass:[NSString class]]) [d setObject:NSTypedStreamVersionException forKey:@"NSTypedStreamVersionException"]; else NSLog([@"Can't initialize NSTypedStreamVersionException with object " stringByAppendingString:[NSTypedStreamVersionException description]]);
if ([NSURLPboardType isKindOfClass:[NSString class]]) [d setObject:NSURLPboardType forKey:@"NSURLPboardType"]; else NSLog([@"Can't initialize NSURLPboardType with object " stringByAppendingString:[NSURLPboardType description]]);
if ([NSUnderlineColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSUnderlineColorAttributeName forKey:@"NSUnderlineColorAttributeName"]; else NSLog([@"Can't initialize NSUnderlineColorAttributeName with object " stringByAppendingString:[NSUnderlineColorAttributeName description]]);
if ([NSUnderlineStyleAttributeName isKindOfClass:[NSString class]]) [d setObject:NSUnderlineStyleAttributeName forKey:@"NSUnderlineStyleAttributeName"]; else NSLog([@"Can't initialize NSUnderlineStyleAttributeName with object " stringByAppendingString:[NSUnderlineStyleAttributeName description]]);
if ([NSVCardPboardType isKindOfClass:[NSString class]]) [d setObject:NSVCardPboardType forKey:@"NSVCardPboardType"]; else NSLog([@"Can't initialize NSVCardPboardType with object " stringByAppendingString:[NSVCardPboardType description]]);
if ([NSValidatesImmediatelyBindingOption isKindOfClass:[NSString class]]) [d setObject:NSValidatesImmediatelyBindingOption forKey:@"NSValidatesImmediatelyBindingOption"]; else NSLog([@"Can't initialize NSValidatesImmediatelyBindingOption with object " stringByAppendingString:[NSValidatesImmediatelyBindingOption description]]);
if ([NSValueBinding isKindOfClass:[NSString class]]) [d setObject:NSValueBinding forKey:@"NSValueBinding"]; else NSLog([@"Can't initialize NSValueBinding with object " stringByAppendingString:[NSValueBinding description]]);
if ([NSValuePathBinding isKindOfClass:[NSString class]]) [d setObject:NSValuePathBinding forKey:@"NSValuePathBinding"]; else NSLog([@"Can't initialize NSValuePathBinding with object " stringByAppendingString:[NSValuePathBinding description]]);
if ([NSValueTransformerBindingOption isKindOfClass:[NSString class]]) [d setObject:NSValueTransformerBindingOption forKey:@"NSValueTransformerBindingOption"]; else NSLog([@"Can't initialize NSValueTransformerBindingOption with object " stringByAppendingString:[NSValueTransformerBindingOption description]]);
if ([NSValueTransformerNameBindingOption isKindOfClass:[NSString class]]) [d setObject:NSValueTransformerNameBindingOption forKey:@"NSValueTransformerNameBindingOption"]; else NSLog([@"Can't initialize NSValueTransformerNameBindingOption with object " stringByAppendingString:[NSValueTransformerNameBindingOption description]]);
if ([NSValueURLBinding isKindOfClass:[NSString class]]) [d setObject:NSValueURLBinding forKey:@"NSValueURLBinding"]; else NSLog([@"Can't initialize NSValueURLBinding with object " stringByAppendingString:[NSValueURLBinding description]]);
if ([NSViewAnimationEffectKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationEffectKey forKey:@"NSViewAnimationEffectKey"]; else NSLog([@"Can't initialize NSViewAnimationEffectKey with object " stringByAppendingString:[NSViewAnimationEffectKey description]]);
if ([NSViewAnimationEndFrameKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationEndFrameKey forKey:@"NSViewAnimationEndFrameKey"]; else NSLog([@"Can't initialize NSViewAnimationEndFrameKey with object " stringByAppendingString:[NSViewAnimationEndFrameKey description]]);
if ([NSViewAnimationFadeInEffect isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationFadeInEffect forKey:@"NSViewAnimationFadeInEffect"]; else NSLog([@"Can't initialize NSViewAnimationFadeInEffect with object " stringByAppendingString:[NSViewAnimationFadeInEffect description]]);
if ([NSViewAnimationFadeOutEffect isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationFadeOutEffect forKey:@"NSViewAnimationFadeOutEffect"]; else NSLog([@"Can't initialize NSViewAnimationFadeOutEffect with object " stringByAppendingString:[NSViewAnimationFadeOutEffect description]]);
if ([NSViewAnimationStartFrameKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationStartFrameKey forKey:@"NSViewAnimationStartFrameKey"]; else NSLog([@"Can't initialize NSViewAnimationStartFrameKey with object " stringByAppendingString:[NSViewAnimationStartFrameKey description]]);
if ([NSViewAnimationTargetKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationTargetKey forKey:@"NSViewAnimationTargetKey"]; else NSLog([@"Can't initialize NSViewAnimationTargetKey with object " stringByAppendingString:[NSViewAnimationTargetKey description]]);
if ([NSViewBoundsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewBoundsDidChangeNotification forKey:@"NSViewBoundsDidChangeNotification"]; else NSLog([@"Can't initialize NSViewBoundsDidChangeNotification with object " stringByAppendingString:[NSViewBoundsDidChangeNotification description]]);
if ([NSViewDidUpdateTrackingAreasNotification isKindOfClass:[NSString class]]) [d setObject:NSViewDidUpdateTrackingAreasNotification forKey:@"NSViewDidUpdateTrackingAreasNotification"]; else NSLog([@"Can't initialize NSViewDidUpdateTrackingAreasNotification with object " stringByAppendingString:[NSViewDidUpdateTrackingAreasNotification description]]);
if ([NSViewFocusDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewFocusDidChangeNotification forKey:@"NSViewFocusDidChangeNotification"]; else NSLog([@"Can't initialize NSViewFocusDidChangeNotification with object " stringByAppendingString:[NSViewFocusDidChangeNotification description]]);
if ([NSViewFrameDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewFrameDidChangeNotification forKey:@"NSViewFrameDidChangeNotification"]; else NSLog([@"Can't initialize NSViewFrameDidChangeNotification with object " stringByAppendingString:[NSViewFrameDidChangeNotification description]]);
if ([NSViewGlobalFrameDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewGlobalFrameDidChangeNotification forKey:@"NSViewGlobalFrameDidChangeNotification"]; else NSLog([@"Can't initialize NSViewGlobalFrameDidChangeNotification with object " stringByAppendingString:[NSViewGlobalFrameDidChangeNotification description]]);
if ([NSViewModeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSViewModeDocumentAttribute forKey:@"NSViewModeDocumentAttribute"]; else NSLog([@"Can't initialize NSViewModeDocumentAttribute with object " stringByAppendingString:[NSViewModeDocumentAttribute description]]);
if ([NSViewSizeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSViewSizeDocumentAttribute forKey:@"NSViewSizeDocumentAttribute"]; else NSLog([@"Can't initialize NSViewSizeDocumentAttribute with object " stringByAppendingString:[NSViewSizeDocumentAttribute description]]);
if ([NSViewZoomDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSViewZoomDocumentAttribute forKey:@"NSViewZoomDocumentAttribute"]; else NSLog([@"Can't initialize NSViewZoomDocumentAttribute with object " stringByAppendingString:[NSViewZoomDocumentAttribute description]]);
if ([NSVisibleBinding isKindOfClass:[NSString class]]) [d setObject:NSVisibleBinding forKey:@"NSVisibleBinding"]; else NSLog([@"Can't initialize NSVisibleBinding with object " stringByAppendingString:[NSVisibleBinding description]]);
if ([NSVoiceAge isKindOfClass:[NSString class]]) [d setObject:NSVoiceAge forKey:@"NSVoiceAge"]; else NSLog([@"Can't initialize NSVoiceAge with object " stringByAppendingString:[NSVoiceAge description]]);
if ([NSVoiceDemoText isKindOfClass:[NSString class]]) [d setObject:NSVoiceDemoText forKey:@"NSVoiceDemoText"]; else NSLog([@"Can't initialize NSVoiceDemoText with object " stringByAppendingString:[NSVoiceDemoText description]]);
if ([NSVoiceGender isKindOfClass:[NSString class]]) [d setObject:NSVoiceGender forKey:@"NSVoiceGender"]; else NSLog([@"Can't initialize NSVoiceGender with object " stringByAppendingString:[NSVoiceGender description]]);
if ([NSVoiceGenderFemale isKindOfClass:[NSString class]]) [d setObject:NSVoiceGenderFemale forKey:@"NSVoiceGenderFemale"]; else NSLog([@"Can't initialize NSVoiceGenderFemale with object " stringByAppendingString:[NSVoiceGenderFemale description]]);
if ([NSVoiceGenderMale isKindOfClass:[NSString class]]) [d setObject:NSVoiceGenderMale forKey:@"NSVoiceGenderMale"]; else NSLog([@"Can't initialize NSVoiceGenderMale with object " stringByAppendingString:[NSVoiceGenderMale description]]);
if ([NSVoiceGenderNeuter isKindOfClass:[NSString class]]) [d setObject:NSVoiceGenderNeuter forKey:@"NSVoiceGenderNeuter"]; else NSLog([@"Can't initialize NSVoiceGenderNeuter with object " stringByAppendingString:[NSVoiceGenderNeuter description]]);
if ([NSVoiceIdentifier isKindOfClass:[NSString class]]) [d setObject:NSVoiceIdentifier forKey:@"NSVoiceIdentifier"]; else NSLog([@"Can't initialize NSVoiceIdentifier with object " stringByAppendingString:[NSVoiceIdentifier description]]);
if ([NSVoiceIndividuallySpokenCharacters isKindOfClass:[NSString class]]) [d setObject:NSVoiceIndividuallySpokenCharacters forKey:@"NSVoiceIndividuallySpokenCharacters"]; else NSLog([@"Can't initialize NSVoiceIndividuallySpokenCharacters with object " stringByAppendingString:[NSVoiceIndividuallySpokenCharacters description]]);
if ([NSVoiceLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSVoiceLocaleIdentifier forKey:@"NSVoiceLocaleIdentifier"]; else NSLog([@"Can't initialize NSVoiceLocaleIdentifier with object " stringByAppendingString:[NSVoiceLocaleIdentifier description]]);
if ([NSVoiceName isKindOfClass:[NSString class]]) [d setObject:NSVoiceName forKey:@"NSVoiceName"]; else NSLog([@"Can't initialize NSVoiceName with object " stringByAppendingString:[NSVoiceName description]]);
if ([NSVoiceSupportedCharacters isKindOfClass:[NSString class]]) [d setObject:NSVoiceSupportedCharacters forKey:@"NSVoiceSupportedCharacters"]; else NSLog([@"Can't initialize NSVoiceSupportedCharacters with object " stringByAppendingString:[NSVoiceSupportedCharacters description]]);
if ([NSWarningValueBinding isKindOfClass:[NSString class]]) [d setObject:NSWarningValueBinding forKey:@"NSWarningValueBinding"]; else NSLog([@"Can't initialize NSWarningValueBinding with object " stringByAppendingString:[NSWarningValueBinding description]]);
if ([NSWebArchiveTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSWebArchiveTextDocumentType forKey:@"NSWebArchiveTextDocumentType"]; else NSLog([@"Can't initialize NSWebArchiveTextDocumentType with object " stringByAppendingString:[NSWebArchiveTextDocumentType description]]);
if ([NSWebPreferencesDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSWebPreferencesDocumentOption forKey:@"NSWebPreferencesDocumentOption"]; else NSLog([@"Can't initialize NSWebPreferencesDocumentOption with object " stringByAppendingString:[NSWebPreferencesDocumentOption description]]);
if ([NSWebResourceLoadDelegateDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSWebResourceLoadDelegateDocumentOption forKey:@"NSWebResourceLoadDelegateDocumentOption"]; else NSLog([@"Can't initialize NSWebResourceLoadDelegateDocumentOption with object " stringByAppendingString:[NSWebResourceLoadDelegateDocumentOption description]]);
if ([NSWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSWidthBinding forKey:@"NSWidthBinding"]; else NSLog([@"Can't initialize NSWidthBinding with object " stringByAppendingString:[NSWidthBinding description]]);
if ([NSWindowDidBecomeKeyNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidBecomeKeyNotification forKey:@"NSWindowDidBecomeKeyNotification"]; else NSLog([@"Can't initialize NSWindowDidBecomeKeyNotification with object " stringByAppendingString:[NSWindowDidBecomeKeyNotification description]]);
if ([NSWindowDidBecomeMainNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidBecomeMainNotification forKey:@"NSWindowDidBecomeMainNotification"]; else NSLog([@"Can't initialize NSWindowDidBecomeMainNotification with object " stringByAppendingString:[NSWindowDidBecomeMainNotification description]]);
if ([NSWindowDidChangeScreenNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidChangeScreenNotification forKey:@"NSWindowDidChangeScreenNotification"]; else NSLog([@"Can't initialize NSWindowDidChangeScreenNotification with object " stringByAppendingString:[NSWindowDidChangeScreenNotification description]]);
if ([NSWindowDidChangeScreenProfileNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidChangeScreenProfileNotification forKey:@"NSWindowDidChangeScreenProfileNotification"]; else NSLog([@"Can't initialize NSWindowDidChangeScreenProfileNotification with object " stringByAppendingString:[NSWindowDidChangeScreenProfileNotification description]]);
if ([NSWindowDidDeminiaturizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidDeminiaturizeNotification forKey:@"NSWindowDidDeminiaturizeNotification"]; else NSLog([@"Can't initialize NSWindowDidDeminiaturizeNotification with object " stringByAppendingString:[NSWindowDidDeminiaturizeNotification description]]);
if ([NSWindowDidEndSheetNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidEndSheetNotification forKey:@"NSWindowDidEndSheetNotification"]; else NSLog([@"Can't initialize NSWindowDidEndSheetNotification with object " stringByAppendingString:[NSWindowDidEndSheetNotification description]]);
if ([NSWindowDidExposeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidExposeNotification forKey:@"NSWindowDidExposeNotification"]; else NSLog([@"Can't initialize NSWindowDidExposeNotification with object " stringByAppendingString:[NSWindowDidExposeNotification description]]);
if ([NSWindowDidMiniaturizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidMiniaturizeNotification forKey:@"NSWindowDidMiniaturizeNotification"]; else NSLog([@"Can't initialize NSWindowDidMiniaturizeNotification with object " stringByAppendingString:[NSWindowDidMiniaturizeNotification description]]);
if ([NSWindowDidMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidMoveNotification forKey:@"NSWindowDidMoveNotification"]; else NSLog([@"Can't initialize NSWindowDidMoveNotification with object " stringByAppendingString:[NSWindowDidMoveNotification description]]);
if ([NSWindowDidResignKeyNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidResignKeyNotification forKey:@"NSWindowDidResignKeyNotification"]; else NSLog([@"Can't initialize NSWindowDidResignKeyNotification with object " stringByAppendingString:[NSWindowDidResignKeyNotification description]]);
if ([NSWindowDidResignMainNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidResignMainNotification forKey:@"NSWindowDidResignMainNotification"]; else NSLog([@"Can't initialize NSWindowDidResignMainNotification with object " stringByAppendingString:[NSWindowDidResignMainNotification description]]);
if ([NSWindowDidResizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidResizeNotification forKey:@"NSWindowDidResizeNotification"]; else NSLog([@"Can't initialize NSWindowDidResizeNotification with object " stringByAppendingString:[NSWindowDidResizeNotification description]]);
if ([NSWindowDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidUpdateNotification forKey:@"NSWindowDidUpdateNotification"]; else NSLog([@"Can't initialize NSWindowDidUpdateNotification with object " stringByAppendingString:[NSWindowDidUpdateNotification description]]);
if ([NSWindowServerCommunicationException isKindOfClass:[NSString class]]) [d setObject:NSWindowServerCommunicationException forKey:@"NSWindowServerCommunicationException"]; else NSLog([@"Can't initialize NSWindowServerCommunicationException with object " stringByAppendingString:[NSWindowServerCommunicationException description]]);
if ([NSWindowWillBeginSheetNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillBeginSheetNotification forKey:@"NSWindowWillBeginSheetNotification"]; else NSLog([@"Can't initialize NSWindowWillBeginSheetNotification with object " stringByAppendingString:[NSWindowWillBeginSheetNotification description]]);
if ([NSWindowWillCloseNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillCloseNotification forKey:@"NSWindowWillCloseNotification"]; else NSLog([@"Can't initialize NSWindowWillCloseNotification with object " stringByAppendingString:[NSWindowWillCloseNotification description]]);
if ([NSWindowWillMiniaturizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillMiniaturizeNotification forKey:@"NSWindowWillMiniaturizeNotification"]; else NSLog([@"Can't initialize NSWindowWillMiniaturizeNotification with object " stringByAppendingString:[NSWindowWillMiniaturizeNotification description]]);
if ([NSWindowWillMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillMoveNotification forKey:@"NSWindowWillMoveNotification"]; else NSLog([@"Can't initialize NSWindowWillMoveNotification with object " stringByAppendingString:[NSWindowWillMoveNotification description]]);
if ([NSWordMLTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSWordMLTextDocumentType forKey:@"NSWordMLTextDocumentType"]; else NSLog([@"Can't initialize NSWordMLTextDocumentType with object " stringByAppendingString:[NSWordMLTextDocumentType description]]);
if ([NSWordTablesReadException isKindOfClass:[NSString class]]) [d setObject:NSWordTablesReadException forKey:@"NSWordTablesReadException"]; else NSLog([@"Can't initialize NSWordTablesReadException with object " stringByAppendingString:[NSWordTablesReadException description]]);
if ([NSWordTablesWriteException isKindOfClass:[NSString class]]) [d setObject:NSWordTablesWriteException forKey:@"NSWordTablesWriteException"]; else NSLog([@"Can't initialize NSWordTablesWriteException with object " stringByAppendingString:[NSWordTablesWriteException description]]);
if ([NSWorkspaceCompressOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceCompressOperation forKey:@"NSWorkspaceCompressOperation"]; else NSLog([@"Can't initialize NSWorkspaceCompressOperation with object " stringByAppendingString:[NSWorkspaceCompressOperation description]]);
if ([NSWorkspaceCopyOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceCopyOperation forKey:@"NSWorkspaceCopyOperation"]; else NSLog([@"Can't initialize NSWorkspaceCopyOperation with object " stringByAppendingString:[NSWorkspaceCopyOperation description]]);
if ([NSWorkspaceDecompressOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDecompressOperation forKey:@"NSWorkspaceDecompressOperation"]; else NSLog([@"Can't initialize NSWorkspaceDecompressOperation with object " stringByAppendingString:[NSWorkspaceDecompressOperation description]]);
if ([NSWorkspaceDecryptOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDecryptOperation forKey:@"NSWorkspaceDecryptOperation"]; else NSLog([@"Can't initialize NSWorkspaceDecryptOperation with object " stringByAppendingString:[NSWorkspaceDecryptOperation description]]);
if ([NSWorkspaceDestroyOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDestroyOperation forKey:@"NSWorkspaceDestroyOperation"]; else NSLog([@"Can't initialize NSWorkspaceDestroyOperation with object " stringByAppendingString:[NSWorkspaceDestroyOperation description]]);
if ([NSWorkspaceDidLaunchApplicationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidLaunchApplicationNotification forKey:@"NSWorkspaceDidLaunchApplicationNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidLaunchApplicationNotification with object " stringByAppendingString:[NSWorkspaceDidLaunchApplicationNotification description]]);
if ([NSWorkspaceDidMountNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidMountNotification forKey:@"NSWorkspaceDidMountNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidMountNotification with object " stringByAppendingString:[NSWorkspaceDidMountNotification description]]);
if ([NSWorkspaceDidPerformFileOperationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidPerformFileOperationNotification forKey:@"NSWorkspaceDidPerformFileOperationNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidPerformFileOperationNotification with object " stringByAppendingString:[NSWorkspaceDidPerformFileOperationNotification description]]);
if ([NSWorkspaceDidTerminateApplicationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidTerminateApplicationNotification forKey:@"NSWorkspaceDidTerminateApplicationNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidTerminateApplicationNotification with object " stringByAppendingString:[NSWorkspaceDidTerminateApplicationNotification description]]);
if ([NSWorkspaceDidUnmountNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidUnmountNotification forKey:@"NSWorkspaceDidUnmountNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidUnmountNotification with object " stringByAppendingString:[NSWorkspaceDidUnmountNotification description]]);
if ([NSWorkspaceDidWakeNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidWakeNotification forKey:@"NSWorkspaceDidWakeNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidWakeNotification with object " stringByAppendingString:[NSWorkspaceDidWakeNotification description]]);
if ([NSWorkspaceDuplicateOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDuplicateOperation forKey:@"NSWorkspaceDuplicateOperation"]; else NSLog([@"Can't initialize NSWorkspaceDuplicateOperation with object " stringByAppendingString:[NSWorkspaceDuplicateOperation description]]);
if ([NSWorkspaceEncryptOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceEncryptOperation forKey:@"NSWorkspaceEncryptOperation"]; else NSLog([@"Can't initialize NSWorkspaceEncryptOperation with object " stringByAppendingString:[NSWorkspaceEncryptOperation description]]);
if ([NSWorkspaceLinkOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceLinkOperation forKey:@"NSWorkspaceLinkOperation"]; else NSLog([@"Can't initialize NSWorkspaceLinkOperation with object " stringByAppendingString:[NSWorkspaceLinkOperation description]]);
if ([NSWorkspaceMoveOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceMoveOperation forKey:@"NSWorkspaceMoveOperation"]; else NSLog([@"Can't initialize NSWorkspaceMoveOperation with object " stringByAppendingString:[NSWorkspaceMoveOperation description]]);
if ([NSWorkspaceRecycleOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceRecycleOperation forKey:@"NSWorkspaceRecycleOperation"]; else NSLog([@"Can't initialize NSWorkspaceRecycleOperation with object " stringByAppendingString:[NSWorkspaceRecycleOperation description]]);
if ([NSWorkspaceSessionDidBecomeActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceSessionDidBecomeActiveNotification forKey:@"NSWorkspaceSessionDidBecomeActiveNotification"]; else NSLog([@"Can't initialize NSWorkspaceSessionDidBecomeActiveNotification with object " stringByAppendingString:[NSWorkspaceSessionDidBecomeActiveNotification description]]);
if ([NSWorkspaceSessionDidResignActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceSessionDidResignActiveNotification forKey:@"NSWorkspaceSessionDidResignActiveNotification"]; else NSLog([@"Can't initialize NSWorkspaceSessionDidResignActiveNotification with object " stringByAppendingString:[NSWorkspaceSessionDidResignActiveNotification description]]);
if ([NSWorkspaceWillLaunchApplicationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillLaunchApplicationNotification forKey:@"NSWorkspaceWillLaunchApplicationNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillLaunchApplicationNotification with object " stringByAppendingString:[NSWorkspaceWillLaunchApplicationNotification description]]);
if ([NSWorkspaceWillPowerOffNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillPowerOffNotification forKey:@"NSWorkspaceWillPowerOffNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillPowerOffNotification with object " stringByAppendingString:[NSWorkspaceWillPowerOffNotification description]]);
if ([NSWorkspaceWillSleepNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillSleepNotification forKey:@"NSWorkspaceWillSleepNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillSleepNotification with object " stringByAppendingString:[NSWorkspaceWillSleepNotification description]]);
if ([NSWorkspaceWillUnmountNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillUnmountNotification forKey:@"NSWorkspaceWillUnmountNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillUnmountNotification with object " stringByAppendingString:[NSWorkspaceWillUnmountNotification description]]);
[d setObject:[Number numberWithDouble:NSAWTEventType] forKey:@"NSAWTEventType"];
[d setObject:[Number numberWithDouble:NSAboveBottom] forKey:@"NSAboveBottom"];
[d setObject:[Number numberWithDouble:NSAboveTop] forKey:@"NSAboveTop"];
[d setObject:[Number numberWithDouble:NSAddTraitFontAction] forKey:@"NSAddTraitFontAction"];
[d setObject:[Number numberWithDouble:NSAdobeCNS1CharacterCollection] forKey:@"NSAdobeCNS1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeGB1CharacterCollection] forKey:@"NSAdobeGB1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeJapan1CharacterCollection] forKey:@"NSAdobeJapan1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeJapan2CharacterCollection] forKey:@"NSAdobeJapan2CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeKorea1CharacterCollection] forKey:@"NSAdobeKorea1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAlertAlternateReturn] forKey:@"NSAlertAlternateReturn"];
[d setObject:[Number numberWithDouble:NSAlertDefaultReturn] forKey:@"NSAlertDefaultReturn"];
[d setObject:[Number numberWithDouble:NSAlertErrorReturn] forKey:@"NSAlertErrorReturn"];
[d setObject:[Number numberWithDouble:NSAlertFirstButtonReturn] forKey:@"NSAlertFirstButtonReturn"];
[d setObject:[Number numberWithDouble:NSAlertOtherReturn] forKey:@"NSAlertOtherReturn"];
[d setObject:[Number numberWithDouble:NSAlertSecondButtonReturn] forKey:@"NSAlertSecondButtonReturn"];
[d setObject:[Number numberWithDouble:NSAlertThirdButtonReturn] forKey:@"NSAlertThirdButtonReturn"];
[d setObject:[Number numberWithDouble:NSAllScrollerParts] forKey:@"NSAllScrollerParts"];
[d setObject:[Number numberWithDouble:NSAlphaFirstBitmapFormat] forKey:@"NSAlphaFirstBitmapFormat"];
[d setObject:[Number numberWithDouble:NSAlphaNonpremultipliedBitmapFormat] forKey:@"NSAlphaNonpremultipliedBitmapFormat"];
[d setObject:[Number numberWithDouble:NSAlphaShiftKeyMask] forKey:@"NSAlphaShiftKeyMask"];
[d setObject:[Number numberWithDouble:NSAlternateKeyMask] forKey:@"NSAlternateKeyMask"];
[d setObject:[Number numberWithDouble:NSAnimationBlocking] forKey:@"NSAnimationBlocking"];
[d setObject:[Number numberWithDouble:NSAnimationEaseIn] forKey:@"NSAnimationEaseIn"];
[d setObject:[Number numberWithDouble:NSAnimationEaseInOut] forKey:@"NSAnimationEaseInOut"];
[d setObject:[Number numberWithDouble:NSAnimationEaseOut] forKey:@"NSAnimationEaseOut"];
[d setObject:[Number numberWithDouble:NSAnimationEffectDisappearingItemDefault] forKey:@"NSAnimationEffectDisappearingItemDefault"];
[d setObject:[Number numberWithDouble:NSAnimationEffectPoof] forKey:@"NSAnimationEffectPoof"];
[d setObject:[Number numberWithDouble:NSAnimationLinear] forKey:@"NSAnimationLinear"];
[d setObject:[Number numberWithDouble:NSAnimationNonblocking] forKey:@"NSAnimationNonblocking"];
[d setObject:[Number numberWithDouble:NSAnimationNonblockingThreaded] forKey:@"NSAnimationNonblockingThreaded"];
[d setObject:[Number numberWithDouble:NSAnyEventMask] forKey:@"NSAnyEventMask"];
[d setObject:[Number numberWithDouble:NSAnyType] forKey:@"NSAnyType"];
[d setObject:[Number numberWithDouble:NSAppKitDefined] forKey:@"NSAppKitDefined"];
[d setObject:[Number numberWithDouble:NSAppKitDefinedMask] forKey:@"NSAppKitDefinedMask"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_0] forKey:@"NSAppKitVersionNumber10_0"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_1] forKey:@"NSAppKitVersionNumber10_1"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_2] forKey:@"NSAppKitVersionNumber10_2"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_2_3] forKey:@"NSAppKitVersionNumber10_2_3"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3] forKey:@"NSAppKitVersionNumber10_3"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_2] forKey:@"NSAppKitVersionNumber10_3_2"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_3] forKey:@"NSAppKitVersionNumber10_3_3"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_5] forKey:@"NSAppKitVersionNumber10_3_5"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_7] forKey:@"NSAppKitVersionNumber10_3_7"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_9] forKey:@"NSAppKitVersionNumber10_3_9"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_4] forKey:@"NSAppKitVersionNumber10_4"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithColumnResizingBrowser] forKey:@"NSAppKitVersionNumberWithColumnResizingBrowser"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithContinuousScrollingBrowser] forKey:@"NSAppKitVersionNumberWithContinuousScrollingBrowser"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithCursorSizeSupport] forKey:@"NSAppKitVersionNumberWithCursorSizeSupport"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithCustomSheetPosition] forKey:@"NSAppKitVersionNumberWithCustomSheetPosition"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithDirectionalTabs] forKey:@"NSAppKitVersionNumberWithDirectionalTabs"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithPatternColorLeakFix] forKey:@"NSAppKitVersionNumberWithPatternColorLeakFix"];
[d setObject:[Number numberWithDouble:NSApplicationActivatedEventType] forKey:@"NSApplicationActivatedEventType"];
[d setObject:[Number numberWithDouble:NSApplicationDeactivatedEventType] forKey:@"NSApplicationDeactivatedEventType"];
[d setObject:[Number numberWithDouble:NSApplicationDefined] forKey:@"NSApplicationDefined"];
[d setObject:[Number numberWithDouble:NSApplicationDefinedMask] forKey:@"NSApplicationDefinedMask"];
[d setObject:[Number numberWithDouble:NSApplicationDelegateReplyCancel] forKey:@"NSApplicationDelegateReplyCancel"];
[d setObject:[Number numberWithDouble:NSApplicationDelegateReplyFailure] forKey:@"NSApplicationDelegateReplyFailure"];
[d setObject:[Number numberWithDouble:NSApplicationDelegateReplySuccess] forKey:@"NSApplicationDelegateReplySuccess"];
[d setObject:[Number numberWithDouble:NSAscendingPageOrder] forKey:@"NSAscendingPageOrder"];
[d setObject:[Number numberWithDouble:NSAtBottom] forKey:@"NSAtBottom"];
[d setObject:[Number numberWithDouble:NSAtTop] forKey:@"NSAtTop"];
[d setObject:[Number numberWithDouble:NSAttachmentCharacter] forKey:@"NSAttachmentCharacter"];
[d setObject:[Number numberWithDouble:NSAutoPagination] forKey:@"NSAutoPagination"];
[d setObject:[Number numberWithDouble:NSAutosaveOperation] forKey:@"NSAutosaveOperation"];
[d setObject:[Number numberWithDouble:NSBMPFileType] forKey:@"NSBMPFileType"];
[d setObject:[Number numberWithDouble:NSBackTabCharacter] forKey:@"NSBackTabCharacter"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleDark] forKey:@"NSBackgroundStyleDark"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleLight] forKey:@"NSBackgroundStyleLight"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleLowered] forKey:@"NSBackgroundStyleLowered"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleRaised] forKey:@"NSBackgroundStyleRaised"];
[d setObject:[Number numberWithDouble:NSBackgroundTab] forKey:@"NSBackgroundTab"];
[d setObject:[Number numberWithDouble:NSBackingStoreBuffered] forKey:@"NSBackingStoreBuffered"];
[d setObject:[Number numberWithDouble:NSBackingStoreNonretained] forKey:@"NSBackingStoreNonretained"];
[d setObject:[Number numberWithDouble:NSBackingStoreRetained] forKey:@"NSBackingStoreRetained"];
[d setObject:[Number numberWithDouble:NSBackspaceCharacter] forKey:@"NSBackspaceCharacter"];
[d setObject:[Number numberWithDouble:NSBacktabTextMovement] forKey:@"NSBacktabTextMovement"];
[d setObject:[Number numberWithDouble:NSBeginFunctionKey] forKey:@"NSBeginFunctionKey"];
[d setObject:[Number numberWithDouble:NSBelowBottom] forKey:@"NSBelowBottom"];
[d setObject:[Number numberWithDouble:NSBelowTop] forKey:@"NSBelowTop"];
[d setObject:[Number numberWithDouble:NSBevelLineJoinStyle] forKey:@"NSBevelLineJoinStyle"];
[d setObject:[Number numberWithDouble:NSBezelBorder] forKey:@"NSBezelBorder"];
[d setObject:[Number numberWithDouble:NSBlueControlTint] forKey:@"NSBlueControlTint"];
[d setObject:[Number numberWithDouble:NSBoldFontMask] forKey:@"NSBoldFontMask"];
[d setObject:[Number numberWithDouble:NSBorderlessWindowMask] forKey:@"NSBorderlessWindowMask"];
[d setObject:[Number numberWithDouble:NSBottomTabsBezelBorder] forKey:@"NSBottomTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSBoxCustom] forKey:@"NSBoxCustom"];
[d setObject:[Number numberWithDouble:NSBoxOldStyle] forKey:@"NSBoxOldStyle"];
[d setObject:[Number numberWithDouble:NSBoxPrimary] forKey:@"NSBoxPrimary"];
[d setObject:[Number numberWithDouble:NSBoxSecondary] forKey:@"NSBoxSecondary"];
[d setObject:[Number numberWithDouble:NSBoxSeparator] forKey:@"NSBoxSeparator"];
[d setObject:[Number numberWithDouble:NSBreakFunctionKey] forKey:@"NSBreakFunctionKey"];
[d setObject:[Number numberWithDouble:NSBrowserAutoColumnResizing] forKey:@"NSBrowserAutoColumnResizing"];
[d setObject:[Number numberWithDouble:NSBrowserDropAbove] forKey:@"NSBrowserDropAbove"];
[d setObject:[Number numberWithDouble:NSBrowserDropOn] forKey:@"NSBrowserDropOn"];
[d setObject:[Number numberWithDouble:NSBrowserNoColumnResizing] forKey:@"NSBrowserNoColumnResizing"];
[d setObject:[Number numberWithDouble:NSBrowserUserColumnResizing] forKey:@"NSBrowserUserColumnResizing"];
[d setObject:[Number numberWithDouble:NSButtLineCapStyle] forKey:@"NSButtLineCapStyle"];
[d setObject:[Number numberWithDouble:NSCMYKColorSpaceModel] forKey:@"NSCMYKColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSCMYKModeColorPanel] forKey:@"NSCMYKModeColorPanel"];
[d setObject:[Number numberWithDouble:NSCancelButton] forKey:@"NSCancelButton"];
[d setObject:[Number numberWithDouble:NSCancelTextMovement] forKey:@"NSCancelTextMovement"];
[d setObject:[Number numberWithDouble:NSCarriageReturnCharacter] forKey:@"NSCarriageReturnCharacter"];
[d setObject:[Number numberWithDouble:NSCellAllowsMixedState] forKey:@"NSCellAllowsMixedState"];
[d setObject:[Number numberWithDouble:NSCellChangesContents] forKey:@"NSCellChangesContents"];
[d setObject:[Number numberWithDouble:NSCellDisabled] forKey:@"NSCellDisabled"];
[d setObject:[Number numberWithDouble:NSCellEditable] forKey:@"NSCellEditable"];
[d setObject:[Number numberWithDouble:NSCellHasImageHorizontal] forKey:@"NSCellHasImageHorizontal"];
[d setObject:[Number numberWithDouble:NSCellHasImageOnLeftOrBottom] forKey:@"NSCellHasImageOnLeftOrBottom"];
[d setObject:[Number numberWithDouble:NSCellHasOverlappingImage] forKey:@"NSCellHasOverlappingImage"];
[d setObject:[Number numberWithDouble:NSCellHighlighted] forKey:@"NSCellHighlighted"];
[d setObject:[Number numberWithDouble:NSCellHitContentArea] forKey:@"NSCellHitContentArea"];
[d setObject:[Number numberWithDouble:NSCellHitEditableTextArea] forKey:@"NSCellHitEditableTextArea"];
[d setObject:[Number numberWithDouble:NSCellHitNone] forKey:@"NSCellHitNone"];
[d setObject:[Number numberWithDouble:NSCellHitTrackableArea] forKey:@"NSCellHitTrackableArea"];
[d setObject:[Number numberWithDouble:NSCellIsBordered] forKey:@"NSCellIsBordered"];
[d setObject:[Number numberWithDouble:NSCellIsInsetButton] forKey:@"NSCellIsInsetButton"];
[d setObject:[Number numberWithDouble:NSCellLightsByBackground] forKey:@"NSCellLightsByBackground"];
[d setObject:[Number numberWithDouble:NSCellLightsByContents] forKey:@"NSCellLightsByContents"];
[d setObject:[Number numberWithDouble:NSCellLightsByGray] forKey:@"NSCellLightsByGray"];
[d setObject:[Number numberWithDouble:NSCellState] forKey:@"NSCellState"];
[d setObject:[Number numberWithDouble:NSCenterTabStopType] forKey:@"NSCenterTabStopType"];
[d setObject:[Number numberWithDouble:NSCenterTextAlignment] forKey:@"NSCenterTextAlignment"];
[d setObject:[Number numberWithDouble:NSChangeAutosaved] forKey:@"NSChangeAutosaved"];
[d setObject:[Number numberWithDouble:NSChangeBackgroundCell] forKey:@"NSChangeBackgroundCell"];
[d setObject:[Number numberWithDouble:NSChangeBackgroundCellMask] forKey:@"NSChangeBackgroundCellMask"];
[d setObject:[Number numberWithDouble:NSChangeCleared] forKey:@"NSChangeCleared"];
[d setObject:[Number numberWithDouble:NSChangeDone] forKey:@"NSChangeDone"];
[d setObject:[Number numberWithDouble:NSChangeGrayCell] forKey:@"NSChangeGrayCell"];
[d setObject:[Number numberWithDouble:NSChangeGrayCellMask] forKey:@"NSChangeGrayCellMask"];
[d setObject:[Number numberWithDouble:NSChangeReadOtherContents] forKey:@"NSChangeReadOtherContents"];
[d setObject:[Number numberWithDouble:NSChangeRedone] forKey:@"NSChangeRedone"];
[d setObject:[Number numberWithDouble:NSChangeUndone] forKey:@"NSChangeUndone"];
[d setObject:[Number numberWithDouble:NSCircularBezelStyle] forKey:@"NSCircularBezelStyle"];
[d setObject:[Number numberWithDouble:NSCircularSlider] forKey:@"NSCircularSlider"];
[d setObject:[Number numberWithDouble:NSClearControlTint] forKey:@"NSClearControlTint"];
[d setObject:[Number numberWithDouble:NSClearDisplayFunctionKey] forKey:@"NSClearDisplayFunctionKey"];
[d setObject:[Number numberWithDouble:NSClearLineFunctionKey] forKey:@"NSClearLineFunctionKey"];
[d setObject:[Number numberWithDouble:NSClipPagination] forKey:@"NSClipPagination"];
[d setObject:[Number numberWithDouble:NSClockAndCalendarDatePickerStyle] forKey:@"NSClockAndCalendarDatePickerStyle"];
[d setObject:[Number numberWithDouble:NSClosableWindowMask] forKey:@"NSClosableWindowMask"];
[d setObject:[Number numberWithDouble:NSClosePathBezierPathElement] forKey:@"NSClosePathBezierPathElement"];
[d setObject:[Number numberWithDouble:NSColorListModeColorPanel] forKey:@"NSColorListModeColorPanel"];
[d setObject:[Number numberWithDouble:NSColorPanelAllModesMask] forKey:@"NSColorPanelAllModesMask"];
[d setObject:[Number numberWithDouble:NSColorPanelCMYKModeMask] forKey:@"NSColorPanelCMYKModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelColorListModeMask] forKey:@"NSColorPanelColorListModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelCrayonModeMask] forKey:@"NSColorPanelCrayonModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelCustomPaletteModeMask] forKey:@"NSColorPanelCustomPaletteModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelGrayModeMask] forKey:@"NSColorPanelGrayModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelHSBModeMask] forKey:@"NSColorPanelHSBModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelRGBModeMask] forKey:@"NSColorPanelRGBModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelWheelModeMask] forKey:@"NSColorPanelWheelModeMask"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentAbsoluteColorimetric] forKey:@"NSColorRenderingIntentAbsoluteColorimetric"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentDefault] forKey:@"NSColorRenderingIntentDefault"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentPerceptual] forKey:@"NSColorRenderingIntentPerceptual"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentRelativeColorimetric] forKey:@"NSColorRenderingIntentRelativeColorimetric"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentSaturation] forKey:@"NSColorRenderingIntentSaturation"];
[d setObject:[Number numberWithDouble:NSCommandKeyMask] forKey:@"NSCommandKeyMask"];
[d setObject:[Number numberWithDouble:NSCompositeClear] forKey:@"NSCompositeClear"];
[d setObject:[Number numberWithDouble:NSCompositeCopy] forKey:@"NSCompositeCopy"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationAtop] forKey:@"NSCompositeDestinationAtop"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationIn] forKey:@"NSCompositeDestinationIn"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationOut] forKey:@"NSCompositeDestinationOut"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationOver] forKey:@"NSCompositeDestinationOver"];
[d setObject:[Number numberWithDouble:NSCompositeHighlight] forKey:@"NSCompositeHighlight"];
[d setObject:[Number numberWithDouble:NSCompositePlusDarker] forKey:@"NSCompositePlusDarker"];
[d setObject:[Number numberWithDouble:NSCompositePlusLighter] forKey:@"NSCompositePlusLighter"];
[d setObject:[Number numberWithDouble:NSCompositeSourceAtop] forKey:@"NSCompositeSourceAtop"];
[d setObject:[Number numberWithDouble:NSCompositeSourceIn] forKey:@"NSCompositeSourceIn"];
[d setObject:[Number numberWithDouble:NSCompositeSourceOut] forKey:@"NSCompositeSourceOut"];
[d setObject:[Number numberWithDouble:NSCompositeSourceOver] forKey:@"NSCompositeSourceOver"];
[d setObject:[Number numberWithDouble:NSCompositeXOR] forKey:@"NSCompositeXOR"];
[d setObject:[Number numberWithDouble:NSCompressedFontMask] forKey:@"NSCompressedFontMask"];
[d setObject:[Number numberWithDouble:NSCondensedFontMask] forKey:@"NSCondensedFontMask"];
[d setObject:[Number numberWithDouble:NSContentsCellMask] forKey:@"NSContentsCellMask"];
[d setObject:[Number numberWithDouble:NSContinuousCapacityLevelIndicatorStyle] forKey:@"NSContinuousCapacityLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSControlGlyph] forKey:@"NSControlGlyph"];
[d setObject:[Number numberWithDouble:NSControlKeyMask] forKey:@"NSControlKeyMask"];
[d setObject:[Number numberWithDouble:NSCrayonModeColorPanel] forKey:@"NSCrayonModeColorPanel"];
[d setObject:[Number numberWithDouble:NSCriticalAlertStyle] forKey:@"NSCriticalAlertStyle"];
[d setObject:[Number numberWithDouble:NSCriticalRequest] forKey:@"NSCriticalRequest"];
[d setObject:[Number numberWithDouble:NSCursorPointingDevice] forKey:@"NSCursorPointingDevice"];
[d setObject:[Number numberWithDouble:NSCursorUpdate] forKey:@"NSCursorUpdate"];
[d setObject:[Number numberWithDouble:NSCursorUpdateMask] forKey:@"NSCursorUpdateMask"];
[d setObject:[Number numberWithDouble:NSCurveToBezierPathElement] forKey:@"NSCurveToBezierPathElement"];
[d setObject:[Number numberWithDouble:NSCustomPaletteModeColorPanel] forKey:@"NSCustomPaletteModeColorPanel"];
[d setObject:[Number numberWithDouble:NSDecimalTabStopType] forKey:@"NSDecimalTabStopType"];
[d setObject:[Number numberWithDouble:NSDefaultControlTint] forKey:@"NSDefaultControlTint"];
[d setObject:[Number numberWithDouble:NSDefaultTokenStyle] forKey:@"NSDefaultTokenStyle"];
[d setObject:[Number numberWithDouble:NSDeleteCharFunctionKey] forKey:@"NSDeleteCharFunctionKey"];
[d setObject:[Number numberWithDouble:NSDeleteCharacter] forKey:@"NSDeleteCharacter"];
[d setObject:[Number numberWithDouble:NSDeleteFunctionKey] forKey:@"NSDeleteFunctionKey"];
[d setObject:[Number numberWithDouble:NSDeleteLineFunctionKey] forKey:@"NSDeleteLineFunctionKey"];
[d setObject:[Number numberWithDouble:NSDescendingPageOrder] forKey:@"NSDescendingPageOrder"];
[d setObject:[Number numberWithDouble:NSDeviceIndependentModifierFlagsMask] forKey:@"NSDeviceIndependentModifierFlagsMask"];
[d setObject:[Number numberWithDouble:NSDeviceNColorSpaceModel] forKey:@"NSDeviceNColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSDirectSelection] forKey:@"NSDirectSelection"];
[d setObject:[Number numberWithDouble:NSDisclosureBezelStyle] forKey:@"NSDisclosureBezelStyle"];
[d setObject:[Number numberWithDouble:NSDiscreteCapacityLevelIndicatorStyle] forKey:@"NSDiscreteCapacityLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSDisplayWindowRunLoopOrdering] forKey:@"NSDisplayWindowRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSDocModalWindowMask] forKey:@"NSDocModalWindowMask"];
[d setObject:[Number numberWithDouble:NSDockWindowLevel] forKey:@"NSDockWindowLevel"];
[d setObject:[Number numberWithDouble:NSDoubleType] forKey:@"NSDoubleType"];
[d setObject:[Number numberWithDouble:NSDownArrowFunctionKey] forKey:@"NSDownArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSDownTextMovement] forKey:@"NSDownTextMovement"];
[d setObject:[Number numberWithDouble:NSDragOperationAll] forKey:@"NSDragOperationAll"];
[d setObject:[Number numberWithDouble:NSDragOperationAll_Obsolete] forKey:@"NSDragOperationAll_Obsolete"];
[d setObject:[Number numberWithDouble:NSDragOperationCopy] forKey:@"NSDragOperationCopy"];
[d setObject:[Number numberWithDouble:NSDragOperationDelete] forKey:@"NSDragOperationDelete"];
[d setObject:[Number numberWithDouble:NSDragOperationEvery] forKey:@"NSDragOperationEvery"];
[d setObject:[Number numberWithDouble:NSDragOperationGeneric] forKey:@"NSDragOperationGeneric"];
[d setObject:[Number numberWithDouble:NSDragOperationLink] forKey:@"NSDragOperationLink"];
[d setObject:[Number numberWithDouble:NSDragOperationMove] forKey:@"NSDragOperationMove"];
[d setObject:[Number numberWithDouble:NSDragOperationNone] forKey:@"NSDragOperationNone"];
[d setObject:[Number numberWithDouble:NSDragOperationPrivate] forKey:@"NSDragOperationPrivate"];
[d setObject:[Number numberWithDouble:NSDrawerClosedState] forKey:@"NSDrawerClosedState"];
[d setObject:[Number numberWithDouble:NSDrawerClosingState] forKey:@"NSDrawerClosingState"];
[d setObject:[Number numberWithDouble:NSDrawerOpenState] forKey:@"NSDrawerOpenState"];
[d setObject:[Number numberWithDouble:NSDrawerOpeningState] forKey:@"NSDrawerOpeningState"];
[d setObject:[Number numberWithDouble:NSEndFunctionKey] forKey:@"NSEndFunctionKey"];
[d setObject:[Number numberWithDouble:NSEnterCharacter] forKey:@"NSEnterCharacter"];
[d setObject:[Number numberWithDouble:NSEraDatePickerElementFlag] forKey:@"NSEraDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSEraserPointingDevice] forKey:@"NSEraserPointingDevice"];
[d setObject:[Number numberWithDouble:NSEvenOddWindingRule] forKey:@"NSEvenOddWindingRule"];
[d setObject:[Number numberWithDouble:NSExclude10_4ElementsIconCreationOption] forKey:@"NSExclude10_4ElementsIconCreationOption"];
[d setObject:[Number numberWithDouble:NSExcludeQuickDrawElementsIconCreationOption] forKey:@"NSExcludeQuickDrawElementsIconCreationOption"];
[d setObject:[Number numberWithDouble:NSExecuteFunctionKey] forKey:@"NSExecuteFunctionKey"];
[d setObject:[Number numberWithDouble:NSExpandedFontMask] forKey:@"NSExpandedFontMask"];
[d setObject:[Number numberWithDouble:NSF10FunctionKey] forKey:@"NSF10FunctionKey"];
[d setObject:[Number numberWithDouble:NSF11FunctionKey] forKey:@"NSF11FunctionKey"];
[d setObject:[Number numberWithDouble:NSF12FunctionKey] forKey:@"NSF12FunctionKey"];
[d setObject:[Number numberWithDouble:NSF13FunctionKey] forKey:@"NSF13FunctionKey"];
[d setObject:[Number numberWithDouble:NSF14FunctionKey] forKey:@"NSF14FunctionKey"];
[d setObject:[Number numberWithDouble:NSF15FunctionKey] forKey:@"NSF15FunctionKey"];
[d setObject:[Number numberWithDouble:NSF16FunctionKey] forKey:@"NSF16FunctionKey"];
[d setObject:[Number numberWithDouble:NSF17FunctionKey] forKey:@"NSF17FunctionKey"];
[d setObject:[Number numberWithDouble:NSF18FunctionKey] forKey:@"NSF18FunctionKey"];
[d setObject:[Number numberWithDouble:NSF19FunctionKey] forKey:@"NSF19FunctionKey"];
[d setObject:[Number numberWithDouble:NSF1FunctionKey] forKey:@"NSF1FunctionKey"];
[d setObject:[Number numberWithDouble:NSF20FunctionKey] forKey:@"NSF20FunctionKey"];
[d setObject:[Number numberWithDouble:NSF21FunctionKey] forKey:@"NSF21FunctionKey"];
[d setObject:[Number numberWithDouble:NSF22FunctionKey] forKey:@"NSF22FunctionKey"];
[d setObject:[Number numberWithDouble:NSF23FunctionKey] forKey:@"NSF23FunctionKey"];
[d setObject:[Number numberWithDouble:NSF24FunctionKey] forKey:@"NSF24FunctionKey"];
[d setObject:[Number numberWithDouble:NSF25FunctionKey] forKey:@"NSF25FunctionKey"];
[d setObject:[Number numberWithDouble:NSF26FunctionKey] forKey:@"NSF26FunctionKey"];
[d setObject:[Number numberWithDouble:NSF27FunctionKey] forKey:@"NSF27FunctionKey"];
[d setObject:[Number numberWithDouble:NSF28FunctionKey] forKey:@"NSF28FunctionKey"];
[d setObject:[Number numberWithDouble:NSF29FunctionKey] forKey:@"NSF29FunctionKey"];
[d setObject:[Number numberWithDouble:NSF2FunctionKey] forKey:@"NSF2FunctionKey"];
[d setObject:[Number numberWithDouble:NSF30FunctionKey] forKey:@"NSF30FunctionKey"];
[d setObject:[Number numberWithDouble:NSF31FunctionKey] forKey:@"NSF31FunctionKey"];
[d setObject:[Number numberWithDouble:NSF32FunctionKey] forKey:@"NSF32FunctionKey"];
[d setObject:[Number numberWithDouble:NSF33FunctionKey] forKey:@"NSF33FunctionKey"];
[d setObject:[Number numberWithDouble:NSF34FunctionKey] forKey:@"NSF34FunctionKey"];
[d setObject:[Number numberWithDouble:NSF35FunctionKey] forKey:@"NSF35FunctionKey"];
[d setObject:[Number numberWithDouble:NSF3FunctionKey] forKey:@"NSF3FunctionKey"];
[d setObject:[Number numberWithDouble:NSF4FunctionKey] forKey:@"NSF4FunctionKey"];
[d setObject:[Number numberWithDouble:NSF5FunctionKey] forKey:@"NSF5FunctionKey"];
[d setObject:[Number numberWithDouble:NSF6FunctionKey] forKey:@"NSF6FunctionKey"];
[d setObject:[Number numberWithDouble:NSF7FunctionKey] forKey:@"NSF7FunctionKey"];
[d setObject:[Number numberWithDouble:NSF8FunctionKey] forKey:@"NSF8FunctionKey"];
[d setObject:[Number numberWithDouble:NSF9FunctionKey] forKey:@"NSF9FunctionKey"];
[d setObject:[Number numberWithDouble:NSFPCurrentField] forKey:@"NSFPCurrentField"];
[d setObject:[Number numberWithDouble:NSFPPreviewButton] forKey:@"NSFPPreviewButton"];
[d setObject:[Number numberWithDouble:NSFPPreviewField] forKey:@"NSFPPreviewField"];
[d setObject:[Number numberWithDouble:NSFPRevertButton] forKey:@"NSFPRevertButton"];
[d setObject:[Number numberWithDouble:NSFPSetButton] forKey:@"NSFPSetButton"];
[d setObject:[Number numberWithDouble:NSFPSizeField] forKey:@"NSFPSizeField"];
[d setObject:[Number numberWithDouble:NSFPSizeTitle] forKey:@"NSFPSizeTitle"];
[d setObject:[Number numberWithDouble:NSFileHandlingPanelCancelButton] forKey:@"NSFileHandlingPanelCancelButton"];
[d setObject:[Number numberWithDouble:NSFileHandlingPanelOKButton] forKey:@"NSFileHandlingPanelOKButton"];
[d setObject:[Number numberWithDouble:NSFindFunctionKey] forKey:@"NSFindFunctionKey"];
[d setObject:[Number numberWithDouble:NSFindPanelActionNext] forKey:@"NSFindPanelActionNext"];
[d setObject:[Number numberWithDouble:NSFindPanelActionPrevious] forKey:@"NSFindPanelActionPrevious"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplace] forKey:@"NSFindPanelActionReplace"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplaceAll] forKey:@"NSFindPanelActionReplaceAll"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplaceAllInSelection] forKey:@"NSFindPanelActionReplaceAllInSelection"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplaceAndFind] forKey:@"NSFindPanelActionReplaceAndFind"];
[d setObject:[Number numberWithDouble:NSFindPanelActionSelectAll] forKey:@"NSFindPanelActionSelectAll"];
[d setObject:[Number numberWithDouble:NSFindPanelActionSelectAllInSelection] forKey:@"NSFindPanelActionSelectAllInSelection"];
[d setObject:[Number numberWithDouble:NSFindPanelActionSetFindString] forKey:@"NSFindPanelActionSetFindString"];
[d setObject:[Number numberWithDouble:NSFindPanelActionShowFindPanel] forKey:@"NSFindPanelActionShowFindPanel"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeContains] forKey:@"NSFindPanelSubstringMatchTypeContains"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeEndsWith] forKey:@"NSFindPanelSubstringMatchTypeEndsWith"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeFullWord] forKey:@"NSFindPanelSubstringMatchTypeFullWord"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeStartsWith] forKey:@"NSFindPanelSubstringMatchTypeStartsWith"];
[d setObject:[Number numberWithDouble:NSFitPagination] forKey:@"NSFitPagination"];
[d setObject:[Number numberWithDouble:NSFixedPitchFontMask] forKey:@"NSFixedPitchFontMask"];
[d setObject:[Number numberWithDouble:NSFlagsChanged] forKey:@"NSFlagsChanged"];
[d setObject:[Number numberWithDouble:NSFlagsChangedMask] forKey:@"NSFlagsChangedMask"];
[d setObject:[Number numberWithDouble:NSFloatType] forKey:@"NSFloatType"];
[d setObject:[Number numberWithDouble:NSFloatingPointSamplesBitmapFormat] forKey:@"NSFloatingPointSamplesBitmapFormat"];
[d setObject:[Number numberWithDouble:NSFloatingWindowLevel] forKey:@"NSFloatingWindowLevel"];
[d setObject:[Number numberWithDouble:NSFocusRingAbove] forKey:@"NSFocusRingAbove"];
[d setObject:[Number numberWithDouble:NSFocusRingBelow] forKey:@"NSFocusRingBelow"];
[d setObject:[Number numberWithDouble:NSFocusRingOnly] forKey:@"NSFocusRingOnly"];
[d setObject:[Number numberWithDouble:NSFocusRingTypeDefault] forKey:@"NSFocusRingTypeDefault"];
[d setObject:[Number numberWithDouble:NSFocusRingTypeExterior] forKey:@"NSFocusRingTypeExterior"];
[d setObject:[Number numberWithDouble:NSFocusRingTypeNone] forKey:@"NSFocusRingTypeNone"];
[d setObject:[Number numberWithDouble:NSFontAntialiasedIntegerAdvancementsRenderingMode] forKey:@"NSFontAntialiasedIntegerAdvancementsRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontAntialiasedRenderingMode] forKey:@"NSFontAntialiasedRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontBoldTrait] forKey:@"NSFontBoldTrait"];
[d setObject:[Number numberWithDouble:NSFontClarendonSerifsClass] forKey:@"NSFontClarendonSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontCollectionApplicationOnlyMask] forKey:@"NSFontCollectionApplicationOnlyMask"];
[d setObject:[Number numberWithDouble:NSFontCondensedTrait] forKey:@"NSFontCondensedTrait"];
[d setObject:[Number numberWithDouble:NSFontDefaultRenderingMode] forKey:@"NSFontDefaultRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontExpandedTrait] forKey:@"NSFontExpandedTrait"];
[d setObject:[Number numberWithDouble:NSFontFamilyClassMask] forKey:@"NSFontFamilyClassMask"];
[d setObject:[Number numberWithDouble:NSFontFreeformSerifsClass] forKey:@"NSFontFreeformSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontIntegerAdvancementsRenderingMode] forKey:@"NSFontIntegerAdvancementsRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontItalicTrait] forKey:@"NSFontItalicTrait"];
[d setObject:[Number numberWithDouble:NSFontModernSerifsClass] forKey:@"NSFontModernSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontMonoSpaceTrait] forKey:@"NSFontMonoSpaceTrait"];
[d setObject:[Number numberWithDouble:NSFontOldStyleSerifsClass] forKey:@"NSFontOldStyleSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontOrnamentalsClass] forKey:@"NSFontOrnamentalsClass"];
[d setObject:[Number numberWithDouble:NSFontPanelAllEffectsModeMask] forKey:@"NSFontPanelAllEffectsModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelAllModesMask] forKey:@"NSFontPanelAllModesMask"];
[d setObject:[Number numberWithDouble:NSFontPanelCollectionModeMask] forKey:@"NSFontPanelCollectionModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelDocumentColorEffectModeMask] forKey:@"NSFontPanelDocumentColorEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelFaceModeMask] forKey:@"NSFontPanelFaceModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelShadowEffectModeMask] forKey:@"NSFontPanelShadowEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelSizeModeMask] forKey:@"NSFontPanelSizeModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelStandardModesMask] forKey:@"NSFontPanelStandardModesMask"];
[d setObject:[Number numberWithDouble:NSFontPanelStrikethroughEffectModeMask] forKey:@"NSFontPanelStrikethroughEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelTextColorEffectModeMask] forKey:@"NSFontPanelTextColorEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelUnderlineEffectModeMask] forKey:@"NSFontPanelUnderlineEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontSansSerifClass] forKey:@"NSFontSansSerifClass"];
[d setObject:[Number numberWithDouble:NSFontScriptsClass] forKey:@"NSFontScriptsClass"];
[d setObject:[Number numberWithDouble:NSFontSlabSerifsClass] forKey:@"NSFontSlabSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontSymbolicClass] forKey:@"NSFontSymbolicClass"];
[d setObject:[Number numberWithDouble:NSFontTransitionalSerifsClass] forKey:@"NSFontTransitionalSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontUIOptimizedTrait] forKey:@"NSFontUIOptimizedTrait"];
[d setObject:[Number numberWithDouble:NSFontUnknownClass] forKey:@"NSFontUnknownClass"];
[d setObject:[Number numberWithDouble:NSFontVerticalTrait] forKey:@"NSFontVerticalTrait"];
[d setObject:[Number numberWithDouble:NSFormFeedCharacter] forKey:@"NSFormFeedCharacter"];
[d setObject:[Number numberWithDouble:NSFunctionKeyMask] forKey:@"NSFunctionKeyMask"];
[d setObject:[Number numberWithDouble:NSGIFFileType] forKey:@"NSGIFFileType"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeBidiLevel] forKey:@"NSGlyphAttributeBidiLevel"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeElastic] forKey:@"NSGlyphAttributeElastic"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeInscribe] forKey:@"NSGlyphAttributeInscribe"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeSoft] forKey:@"NSGlyphAttributeSoft"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeAbove] forKey:@"NSGlyphInscribeAbove"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeBase] forKey:@"NSGlyphInscribeBase"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeBelow] forKey:@"NSGlyphInscribeBelow"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeOverBelow] forKey:@"NSGlyphInscribeOverBelow"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeOverstrike] forKey:@"NSGlyphInscribeOverstrike"];
[d setObject:[Number numberWithDouble:NSGradientConcaveStrong] forKey:@"NSGradientConcaveStrong"];
[d setObject:[Number numberWithDouble:NSGradientConcaveWeak] forKey:@"NSGradientConcaveWeak"];
[d setObject:[Number numberWithDouble:NSGradientConvexStrong] forKey:@"NSGradientConvexStrong"];
[d setObject:[Number numberWithDouble:NSGradientConvexWeak] forKey:@"NSGradientConvexWeak"];
[d setObject:[Number numberWithDouble:NSGradientDrawsAfterEndingLocation] forKey:@"NSGradientDrawsAfterEndingLocation"];
[d setObject:[Number numberWithDouble:NSGradientDrawsBeforeStartingLocation] forKey:@"NSGradientDrawsBeforeStartingLocation"];
[d setObject:[Number numberWithDouble:NSGradientNone] forKey:@"NSGradientNone"];
[d setObject:[Number numberWithDouble:NSGraphiteControlTint] forKey:@"NSGraphiteControlTint"];
[d setObject:[Number numberWithDouble:NSGrayColorSpaceModel] forKey:@"NSGrayColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSGrayModeColorPanel] forKey:@"NSGrayModeColorPanel"];
[d setObject:[Number numberWithDouble:NSGrooveBorder] forKey:@"NSGrooveBorder"];
[d setObject:[Number numberWithDouble:NSHSBModeColorPanel] forKey:@"NSHSBModeColorPanel"];
[d setObject:[Number numberWithDouble:NSHUDWindowMask] forKey:@"NSHUDWindowMask"];
[d setObject:[Number numberWithDouble:NSHeavierFontAction] forKey:@"NSHeavierFontAction"];
[d setObject:[Number numberWithDouble:NSHelpButtonBezelStyle] forKey:@"NSHelpButtonBezelStyle"];
[d setObject:[Number numberWithDouble:NSHelpFunctionKey] forKey:@"NSHelpFunctionKey"];
[d setObject:[Number numberWithDouble:NSHelpKeyMask] forKey:@"NSHelpKeyMask"];
[d setObject:[Number numberWithDouble:NSHighlightModeMatrix] forKey:@"NSHighlightModeMatrix"];
[d setObject:[Number numberWithDouble:NSHomeFunctionKey] forKey:@"NSHomeFunctionKey"];
[d setObject:[Number numberWithDouble:NSHorizontalRuler] forKey:@"NSHorizontalRuler"];
[d setObject:[Number numberWithDouble:NSHourMinuteDatePickerElementFlag] forKey:@"NSHourMinuteDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSHourMinuteSecondDatePickerElementFlag] forKey:@"NSHourMinuteSecondDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSIdentityMappingCharacterCollection] forKey:@"NSIdentityMappingCharacterCollection"];
[d setObject:[Number numberWithDouble:NSIllegalTextMovement] forKey:@"NSIllegalTextMovement"];
[d setObject:[Number numberWithDouble:NSImageAbove] forKey:@"NSImageAbove"];
[d setObject:[Number numberWithDouble:NSImageAlignBottom] forKey:@"NSImageAlignBottom"];
[d setObject:[Number numberWithDouble:NSImageAlignBottomLeft] forKey:@"NSImageAlignBottomLeft"];
[d setObject:[Number numberWithDouble:NSImageAlignBottomRight] forKey:@"NSImageAlignBottomRight"];
[d setObject:[Number numberWithDouble:NSImageAlignCenter] forKey:@"NSImageAlignCenter"];
[d setObject:[Number numberWithDouble:NSImageAlignLeft] forKey:@"NSImageAlignLeft"];
[d setObject:[Number numberWithDouble:NSImageAlignRight] forKey:@"NSImageAlignRight"];
[d setObject:[Number numberWithDouble:NSImageAlignTop] forKey:@"NSImageAlignTop"];
[d setObject:[Number numberWithDouble:NSImageAlignTopLeft] forKey:@"NSImageAlignTopLeft"];
[d setObject:[Number numberWithDouble:NSImageAlignTopRight] forKey:@"NSImageAlignTopRight"];
[d setObject:[Number numberWithDouble:NSImageBelow] forKey:@"NSImageBelow"];
[d setObject:[Number numberWithDouble:NSImageCacheAlways] forKey:@"NSImageCacheAlways"];
[d setObject:[Number numberWithDouble:NSImageCacheBySize] forKey:@"NSImageCacheBySize"];
[d setObject:[Number numberWithDouble:NSImageCacheDefault] forKey:@"NSImageCacheDefault"];
[d setObject:[Number numberWithDouble:NSImageCacheNever] forKey:@"NSImageCacheNever"];
[d setObject:[Number numberWithDouble:NSImageCellType] forKey:@"NSImageCellType"];
[d setObject:[Number numberWithDouble:NSImageFrameButton] forKey:@"NSImageFrameButton"];
[d setObject:[Number numberWithDouble:NSImageFrameGrayBezel] forKey:@"NSImageFrameGrayBezel"];
[d setObject:[Number numberWithDouble:NSImageFrameGroove] forKey:@"NSImageFrameGroove"];
[d setObject:[Number numberWithDouble:NSImageFrameNone] forKey:@"NSImageFrameNone"];
[d setObject:[Number numberWithDouble:NSImageFramePhoto] forKey:@"NSImageFramePhoto"];
[d setObject:[Number numberWithDouble:NSImageInterpolationDefault] forKey:@"NSImageInterpolationDefault"];
[d setObject:[Number numberWithDouble:NSImageInterpolationHigh] forKey:@"NSImageInterpolationHigh"];
[d setObject:[Number numberWithDouble:NSImageInterpolationLow] forKey:@"NSImageInterpolationLow"];
[d setObject:[Number numberWithDouble:NSImageInterpolationNone] forKey:@"NSImageInterpolationNone"];
[d setObject:[Number numberWithDouble:NSImageLeft] forKey:@"NSImageLeft"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusCancelled] forKey:@"NSImageLoadStatusCancelled"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusCompleted] forKey:@"NSImageLoadStatusCompleted"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusInvalidData] forKey:@"NSImageLoadStatusInvalidData"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusReadError] forKey:@"NSImageLoadStatusReadError"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusUnexpectedEOF] forKey:@"NSImageLoadStatusUnexpectedEOF"];
[d setObject:[Number numberWithDouble:NSImageOnly] forKey:@"NSImageOnly"];
[d setObject:[Number numberWithDouble:NSImageOverlaps] forKey:@"NSImageOverlaps"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusCompleted] forKey:@"NSImageRepLoadStatusCompleted"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusInvalidData] forKey:@"NSImageRepLoadStatusInvalidData"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusReadingHeader] forKey:@"NSImageRepLoadStatusReadingHeader"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusUnexpectedEOF] forKey:@"NSImageRepLoadStatusUnexpectedEOF"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusUnknownType] forKey:@"NSImageRepLoadStatusUnknownType"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusWillNeedAllData] forKey:@"NSImageRepLoadStatusWillNeedAllData"];
[d setObject:[Number numberWithDouble:NSImageRepMatchesDevice] forKey:@"NSImageRepMatchesDevice"];
[d setObject:[Number numberWithDouble:NSImageRight] forKey:@"NSImageRight"];
[d setObject:[Number numberWithDouble:NSImageScaleAxesIndependently] forKey:@"NSImageScaleAxesIndependently"];
[d setObject:[Number numberWithDouble:NSImageScaleNone] forKey:@"NSImageScaleNone"];
[d setObject:[Number numberWithDouble:NSImageScaleProportionallyDown] forKey:@"NSImageScaleProportionallyDown"];
[d setObject:[Number numberWithDouble:NSImageScaleProportionallyUpOrDown] forKey:@"NSImageScaleProportionallyUpOrDown"];
[d setObject:[Number numberWithDouble:NSIndexedColorSpaceModel] forKey:@"NSIndexedColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSInformationalAlertStyle] forKey:@"NSInformationalAlertStyle"];
[d setObject:[Number numberWithDouble:NSInformationalRequest] forKey:@"NSInformationalRequest"];
[d setObject:[Number numberWithDouble:NSInsertCharFunctionKey] forKey:@"NSInsertCharFunctionKey"];
[d setObject:[Number numberWithDouble:NSInsertFunctionKey] forKey:@"NSInsertFunctionKey"];
[d setObject:[Number numberWithDouble:NSInsertLineFunctionKey] forKey:@"NSInsertLineFunctionKey"];
[d setObject:[Number numberWithDouble:NSIntType] forKey:@"NSIntType"];
[d setObject:[Number numberWithDouble:NSItalicFontMask] forKey:@"NSItalicFontMask"];
[d setObject:[Number numberWithDouble:NSJPEG2000FileType] forKey:@"NSJPEG2000FileType"];
[d setObject:[Number numberWithDouble:NSJPEGFileType] forKey:@"NSJPEGFileType"];
[d setObject:[Number numberWithDouble:NSJustifiedTextAlignment] forKey:@"NSJustifiedTextAlignment"];
[d setObject:[Number numberWithDouble:NSKeyDown] forKey:@"NSKeyDown"];
[d setObject:[Number numberWithDouble:NSKeyDownMask] forKey:@"NSKeyDownMask"];
[d setObject:[Number numberWithDouble:NSKeyUp] forKey:@"NSKeyUp"];
[d setObject:[Number numberWithDouble:NSKeyUpMask] forKey:@"NSKeyUpMask"];
[d setObject:[Number numberWithDouble:NSLABColorSpaceModel] forKey:@"NSLABColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSLandscapeOrientation] forKey:@"NSLandscapeOrientation"];
[d setObject:[Number numberWithDouble:NSLeftArrowFunctionKey] forKey:@"NSLeftArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSLeftMouseDown] forKey:@"NSLeftMouseDown"];
[d setObject:[Number numberWithDouble:NSLeftMouseDownMask] forKey:@"NSLeftMouseDownMask"];
[d setObject:[Number numberWithDouble:NSLeftMouseDragged] forKey:@"NSLeftMouseDragged"];
[d setObject:[Number numberWithDouble:NSLeftMouseDraggedMask] forKey:@"NSLeftMouseDraggedMask"];
[d setObject:[Number numberWithDouble:NSLeftMouseUp] forKey:@"NSLeftMouseUp"];
[d setObject:[Number numberWithDouble:NSLeftMouseUpMask] forKey:@"NSLeftMouseUpMask"];
[d setObject:[Number numberWithDouble:NSLeftTabStopType] forKey:@"NSLeftTabStopType"];
[d setObject:[Number numberWithDouble:NSLeftTabsBezelBorder] forKey:@"NSLeftTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSLeftTextAlignment] forKey:@"NSLeftTextAlignment"];
[d setObject:[Number numberWithDouble:NSLeftTextMovement] forKey:@"NSLeftTextMovement"];
[d setObject:[Number numberWithDouble:NSLighterFontAction] forKey:@"NSLighterFontAction"];
[d setObject:[Number numberWithDouble:NSLineBorder] forKey:@"NSLineBorder"];
[d setObject:[Number numberWithDouble:NSLineBreakByCharWrapping] forKey:@"NSLineBreakByCharWrapping"];
[d setObject:[Number numberWithDouble:NSLineBreakByClipping] forKey:@"NSLineBreakByClipping"];
[d setObject:[Number numberWithDouble:NSLineBreakByTruncatingHead] forKey:@"NSLineBreakByTruncatingHead"];
[d setObject:[Number numberWithDouble:NSLineBreakByTruncatingMiddle] forKey:@"NSLineBreakByTruncatingMiddle"];
[d setObject:[Number numberWithDouble:NSLineBreakByTruncatingTail] forKey:@"NSLineBreakByTruncatingTail"];
[d setObject:[Number numberWithDouble:NSLineBreakByWordWrapping] forKey:@"NSLineBreakByWordWrapping"];
[d setObject:[Number numberWithDouble:NSLineDoesntMove] forKey:@"NSLineDoesntMove"];
[d setObject:[Number numberWithDouble:NSLineMovesDown] forKey:@"NSLineMovesDown"];
[d setObject:[Number numberWithDouble:NSLineMovesLeft] forKey:@"NSLineMovesLeft"];
[d setObject:[Number numberWithDouble:NSLineMovesRight] forKey:@"NSLineMovesRight"];
[d setObject:[Number numberWithDouble:NSLineMovesUp] forKey:@"NSLineMovesUp"];
[d setObject:[Number numberWithDouble:NSLineSeparatorCharacter] forKey:@"NSLineSeparatorCharacter"];
[d setObject:[Number numberWithDouble:NSLineSweepDown] forKey:@"NSLineSweepDown"];
[d setObject:[Number numberWithDouble:NSLineSweepLeft] forKey:@"NSLineSweepLeft"];
[d setObject:[Number numberWithDouble:NSLineSweepRight] forKey:@"NSLineSweepRight"];
[d setObject:[Number numberWithDouble:NSLineSweepUp] forKey:@"NSLineSweepUp"];
[d setObject:[Number numberWithDouble:NSLineToBezierPathElement] forKey:@"NSLineToBezierPathElement"];
[d setObject:[Number numberWithDouble:NSLinearSlider] forKey:@"NSLinearSlider"];
[d setObject:[Number numberWithDouble:NSListModeMatrix] forKey:@"NSListModeMatrix"];
[d setObject:[Number numberWithDouble:NSMacintoshInterfaceStyle] forKey:@"NSMacintoshInterfaceStyle"];
[d setObject:[Number numberWithDouble:NSMainMenuWindowLevel] forKey:@"NSMainMenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSMenuFunctionKey] forKey:@"NSMenuFunctionKey"];
[d setObject:[Number numberWithDouble:NSMiniControlSize] forKey:@"NSMiniControlSize"];
[d setObject:[Number numberWithDouble:NSMiniaturizableWindowMask] forKey:@"NSMiniaturizableWindowMask"];
[d setObject:[Number numberWithDouble:NSMiterLineJoinStyle] forKey:@"NSMiterLineJoinStyle"];
[d setObject:[Number numberWithDouble:NSMixedState] forKey:@"NSMixedState"];
[d setObject:[Number numberWithDouble:NSModalPanelWindowLevel] forKey:@"NSModalPanelWindowLevel"];
[d setObject:[Number numberWithDouble:NSModeSwitchFunctionKey] forKey:@"NSModeSwitchFunctionKey"];
[d setObject:[Number numberWithDouble:NSMomentaryChangeButton] forKey:@"NSMomentaryChangeButton"];
[d setObject:[Number numberWithDouble:NSMomentaryLight] forKey:@"NSMomentaryLight"];
[d setObject:[Number numberWithDouble:NSMomentaryLightButton] forKey:@"NSMomentaryLightButton"];
[d setObject:[Number numberWithDouble:NSMomentaryPushButton] forKey:@"NSMomentaryPushButton"];
[d setObject:[Number numberWithDouble:NSMomentaryPushInButton] forKey:@"NSMomentaryPushInButton"];
[d setObject:[Number numberWithDouble:NSMouseEntered] forKey:@"NSMouseEntered"];
[d setObject:[Number numberWithDouble:NSMouseEnteredMask] forKey:@"NSMouseEnteredMask"];
[d setObject:[Number numberWithDouble:NSMouseEventSubtype] forKey:@"NSMouseEventSubtype"];
[d setObject:[Number numberWithDouble:NSMouseExited] forKey:@"NSMouseExited"];
[d setObject:[Number numberWithDouble:NSMouseExitedMask] forKey:@"NSMouseExitedMask"];
[d setObject:[Number numberWithDouble:NSMouseMoved] forKey:@"NSMouseMoved"];
[d setObject:[Number numberWithDouble:NSMouseMovedMask] forKey:@"NSMouseMovedMask"];
[d setObject:[Number numberWithDouble:NSMoveToBezierPathElement] forKey:@"NSMoveToBezierPathElement"];
[d setObject:[Number numberWithDouble:NSNarrowFontMask] forKey:@"NSNarrowFontMask"];
[d setObject:[Number numberWithDouble:NSNativeShortGlyphPacking] forKey:@"NSNativeShortGlyphPacking"];
[d setObject:[Number numberWithDouble:NSNaturalTextAlignment] forKey:@"NSNaturalTextAlignment"];
[d setObject:[Number numberWithDouble:NSNewlineCharacter] forKey:@"NSNewlineCharacter"];
[d setObject:[Number numberWithDouble:NSNextFunctionKey] forKey:@"NSNextFunctionKey"];
[d setObject:[Number numberWithDouble:NSNextStepInterfaceStyle] forKey:@"NSNextStepInterfaceStyle"];
[d setObject:[Number numberWithDouble:NSNoBorder] forKey:@"NSNoBorder"];
[d setObject:[Number numberWithDouble:NSNoCellMask] forKey:@"NSNoCellMask"];
[d setObject:[Number numberWithDouble:NSNoFontChangeAction] forKey:@"NSNoFontChangeAction"];
[d setObject:[Number numberWithDouble:NSNoImage] forKey:@"NSNoImage"];
[d setObject:[Number numberWithDouble:NSNoInterfaceStyle] forKey:@"NSNoInterfaceStyle"];
[d setObject:[Number numberWithDouble:NSNoModeColorPanel] forKey:@"NSNoModeColorPanel"];
[d setObject:[Number numberWithDouble:NSNoScrollerParts] forKey:@"NSNoScrollerParts"];
[d setObject:[Number numberWithDouble:NSNoTabsBezelBorder] forKey:@"NSNoTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSNoTabsLineBorder] forKey:@"NSNoTabsLineBorder"];
[d setObject:[Number numberWithDouble:NSNoTabsNoBorder] forKey:@"NSNoTabsNoBorder"];
[d setObject:[Number numberWithDouble:NSNoTitle] forKey:@"NSNoTitle"];
[d setObject:[Number numberWithDouble:NSNoUnderlineStyle] forKey:@"NSNoUnderlineStyle"];
[d setObject:[Number numberWithDouble:NSNonStandardCharacterSetFontMask] forKey:@"NSNonStandardCharacterSetFontMask"];
[d setObject:[Number numberWithDouble:NSNonZeroWindingRule] forKey:@"NSNonZeroWindingRule"];
[d setObject:[Number numberWithDouble:NSNonactivatingPanelMask] forKey:@"NSNonactivatingPanelMask"];
[d setObject:[Number numberWithDouble:NSNormalWindowLevel] forKey:@"NSNormalWindowLevel"];
[d setObject:[Number numberWithDouble:NSNullCellType] forKey:@"NSNullCellType"];
[d setObject:[Number numberWithDouble:NSNullGlyph] forKey:@"NSNullGlyph"];
[d setObject:[Number numberWithDouble:NSNumericPadKeyMask] forKey:@"NSNumericPadKeyMask"];
[d setObject:[Number numberWithDouble:NSOKButton] forKey:@"NSOKButton"];
[d setObject:[Number numberWithDouble:NSOPENGL_CURRENT_VERSION] forKey:@"NSOPENGL_CURRENT_VERSION"];
[d setObject:[Number numberWithDouble:NSOffState] forKey:@"NSOffState"];
[d setObject:[Number numberWithDouble:NSOnOffButton] forKey:@"NSOnOffButton"];
[d setObject:[Number numberWithDouble:NSOnState] forKey:@"NSOnState"];
[d setObject:[Number numberWithDouble:NSOnlyScrollerArrows] forKey:@"NSOnlyScrollerArrows"];
[d setObject:[Number numberWithDouble:NSOpenGLCPRasterizationEnable] forKey:@"NSOpenGLCPRasterizationEnable"];
[d setObject:[Number numberWithDouble:NSOpenGLCPStateValidation] forKey:@"NSOpenGLCPStateValidation"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSurfaceOpacity] forKey:@"NSOpenGLCPSurfaceOpacity"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSurfaceOrder] forKey:@"NSOpenGLCPSurfaceOrder"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSwapInterval] forKey:@"NSOpenGLCPSwapInterval"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSwapRectangle] forKey:@"NSOpenGLCPSwapRectangle"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSwapRectangleEnable] forKey:@"NSOpenGLCPSwapRectangleEnable"];
[d setObject:[Number numberWithDouble:NSOpenGLGOClearFormatCache] forKey:@"NSOpenGLGOClearFormatCache"];
[d setObject:[Number numberWithDouble:NSOpenGLGOFormatCacheSize] forKey:@"NSOpenGLGOFormatCacheSize"];
[d setObject:[Number numberWithDouble:NSOpenGLGOResetLibrary] forKey:@"NSOpenGLGOResetLibrary"];
[d setObject:[Number numberWithDouble:NSOpenGLGORetainRenderers] forKey:@"NSOpenGLGORetainRenderers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAccelerated] forKey:@"NSOpenGLPFAAccelerated"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAccumSize] forKey:@"NSOpenGLPFAAccumSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAllRenderers] forKey:@"NSOpenGLPFAAllRenderers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAllowOfflineRenderers] forKey:@"NSOpenGLPFAAllowOfflineRenderers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAlphaSize] forKey:@"NSOpenGLPFAAlphaSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAuxBuffers] forKey:@"NSOpenGLPFAAuxBuffers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAuxDepthStencil] forKey:@"NSOpenGLPFAAuxDepthStencil"];
[d setObject:[Number numberWithDouble:NSOpenGLPFABackingStore] forKey:@"NSOpenGLPFABackingStore"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAClosestPolicy] forKey:@"NSOpenGLPFAClosestPolicy"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAColorFloat] forKey:@"NSOpenGLPFAColorFloat"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAColorSize] forKey:@"NSOpenGLPFAColorSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFACompliant] forKey:@"NSOpenGLPFACompliant"];
[d setObject:[Number numberWithDouble:NSOpenGLPFADepthSize] forKey:@"NSOpenGLPFADepthSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFADoubleBuffer] forKey:@"NSOpenGLPFADoubleBuffer"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAFullScreen] forKey:@"NSOpenGLPFAFullScreen"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMPSafe] forKey:@"NSOpenGLPFAMPSafe"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMaximumPolicy] forKey:@"NSOpenGLPFAMaximumPolicy"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMinimumPolicy] forKey:@"NSOpenGLPFAMinimumPolicy"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMultiScreen] forKey:@"NSOpenGLPFAMultiScreen"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMultisample] forKey:@"NSOpenGLPFAMultisample"];
[d setObject:[Number numberWithDouble:NSOpenGLPFANoRecovery] forKey:@"NSOpenGLPFANoRecovery"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAOffScreen] forKey:@"NSOpenGLPFAOffScreen"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAPixelBuffer] forKey:@"NSOpenGLPFAPixelBuffer"];
[d setObject:[Number numberWithDouble:NSOpenGLPFARendererID] forKey:@"NSOpenGLPFARendererID"];
[d setObject:[Number numberWithDouble:NSOpenGLPFARobust] forKey:@"NSOpenGLPFARobust"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASampleAlpha] forKey:@"NSOpenGLPFASampleAlpha"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASampleBuffers] forKey:@"NSOpenGLPFASampleBuffers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASamples] forKey:@"NSOpenGLPFASamples"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAScreenMask] forKey:@"NSOpenGLPFAScreenMask"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASingleRenderer] forKey:@"NSOpenGLPFASingleRenderer"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAStencilSize] forKey:@"NSOpenGLPFAStencilSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAStereo] forKey:@"NSOpenGLPFAStereo"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASupersample] forKey:@"NSOpenGLPFASupersample"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAVirtualScreenCount] forKey:@"NSOpenGLPFAVirtualScreenCount"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAWindow] forKey:@"NSOpenGLPFAWindow"];
[d setObject:[Number numberWithDouble:NSOtherMouseDown] forKey:@"NSOtherMouseDown"];
[d setObject:[Number numberWithDouble:NSOtherMouseDownMask] forKey:@"NSOtherMouseDownMask"];
[d setObject:[Number numberWithDouble:NSOtherMouseDragged] forKey:@"NSOtherMouseDragged"];
[d setObject:[Number numberWithDouble:NSOtherMouseDraggedMask] forKey:@"NSOtherMouseDraggedMask"];
[d setObject:[Number numberWithDouble:NSOtherMouseUp] forKey:@"NSOtherMouseUp"];
[d setObject:[Number numberWithDouble:NSOtherMouseUpMask] forKey:@"NSOtherMouseUpMask"];
[d setObject:[Number numberWithDouble:NSOtherTextMovement] forKey:@"NSOtherTextMovement"];
[d setObject:[Number numberWithDouble:NSOutlineViewDropOnItemIndex] forKey:@"NSOutlineViewDropOnItemIndex"];
[d setObject:[Number numberWithDouble:NSPNGFileType] forKey:@"NSPNGFileType"];
[d setObject:[Number numberWithDouble:NSPageDownFunctionKey] forKey:@"NSPageDownFunctionKey"];
[d setObject:[Number numberWithDouble:NSPageUpFunctionKey] forKey:@"NSPageUpFunctionKey"];
[d setObject:[Number numberWithDouble:NSParagraphSeparatorCharacter] forKey:@"NSParagraphSeparatorCharacter"];
[d setObject:[Number numberWithDouble:NSPathStyleNavigationBar] forKey:@"NSPathStyleNavigationBar"];
[d setObject:[Number numberWithDouble:NSPathStylePopUp] forKey:@"NSPathStylePopUp"];
[d setObject:[Number numberWithDouble:NSPathStyleStandard] forKey:@"NSPathStyleStandard"];
[d setObject:[Number numberWithDouble:NSPatternColorSpaceModel] forKey:@"NSPatternColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSPauseFunctionKey] forKey:@"NSPauseFunctionKey"];
[d setObject:[Number numberWithDouble:NSPenLowerSideMask] forKey:@"NSPenLowerSideMask"];
[d setObject:[Number numberWithDouble:NSPenPointingDevice] forKey:@"NSPenPointingDevice"];
[d setObject:[Number numberWithDouble:NSPenTipMask] forKey:@"NSPenTipMask"];
[d setObject:[Number numberWithDouble:NSPenUpperSideMask] forKey:@"NSPenUpperSideMask"];
[d setObject:[Number numberWithDouble:NSPeriodic] forKey:@"NSPeriodic"];
[d setObject:[Number numberWithDouble:NSPeriodicMask] forKey:@"NSPeriodicMask"];
[d setObject:[Number numberWithDouble:NSPlainTextTokenStyle] forKey:@"NSPlainTextTokenStyle"];
[d setObject:[Number numberWithDouble:NSPopUpArrowAtBottom] forKey:@"NSPopUpArrowAtBottom"];
[d setObject:[Number numberWithDouble:NSPopUpArrowAtCenter] forKey:@"NSPopUpArrowAtCenter"];
[d setObject:[Number numberWithDouble:NSPopUpMenuWindowLevel] forKey:@"NSPopUpMenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSPopUpNoArrow] forKey:@"NSPopUpNoArrow"];
[d setObject:[Number numberWithDouble:NSPortraitOrientation] forKey:@"NSPortraitOrientation"];
[d setObject:[Number numberWithDouble:NSPositiveDoubleType] forKey:@"NSPositiveDoubleType"];
[d setObject:[Number numberWithDouble:NSPositiveFloatType] forKey:@"NSPositiveFloatType"];
[d setObject:[Number numberWithDouble:NSPositiveIntType] forKey:@"NSPositiveIntType"];
[d setObject:[Number numberWithDouble:NSPosterFontMask] forKey:@"NSPosterFontMask"];
[d setObject:[Number numberWithDouble:NSPowerOffEventType] forKey:@"NSPowerOffEventType"];
[d setObject:[Number numberWithDouble:NSPressedTab] forKey:@"NSPressedTab"];
[d setObject:[Number numberWithDouble:NSPrevFunctionKey] forKey:@"NSPrevFunctionKey"];
[d setObject:[Number numberWithDouble:NSPrintFunctionKey] forKey:@"NSPrintFunctionKey"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsCopies] forKey:@"NSPrintPanelShowsCopies"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsOrientation] forKey:@"NSPrintPanelShowsOrientation"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPageRange] forKey:@"NSPrintPanelShowsPageRange"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPageSetupAccessory] forKey:@"NSPrintPanelShowsPageSetupAccessory"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPaperSize] forKey:@"NSPrintPanelShowsPaperSize"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPreview] forKey:@"NSPrintPanelShowsPreview"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsScaling] forKey:@"NSPrintPanelShowsScaling"];
[d setObject:[Number numberWithDouble:NSPrintScreenFunctionKey] forKey:@"NSPrintScreenFunctionKey"];
[d setObject:[Number numberWithDouble:NSPrinterTableError] forKey:@"NSPrinterTableError"];
[d setObject:[Number numberWithDouble:NSPrinterTableNotFound] forKey:@"NSPrinterTableNotFound"];
[d setObject:[Number numberWithDouble:NSPrinterTableOK] forKey:@"NSPrinterTableOK"];
[d setObject:[Number numberWithDouble:NSPrintingCancelled] forKey:@"NSPrintingCancelled"];
[d setObject:[Number numberWithDouble:NSPrintingFailure] forKey:@"NSPrintingFailure"];
[d setObject:[Number numberWithDouble:NSPrintingReplyLater] forKey:@"NSPrintingReplyLater"];
[d setObject:[Number numberWithDouble:NSPrintingSuccess] forKey:@"NSPrintingSuccess"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorBarStyle] forKey:@"NSProgressIndicatorBarStyle"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredAquaThickness] forKey:@"NSProgressIndicatorPreferredAquaThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredLargeThickness] forKey:@"NSProgressIndicatorPreferredLargeThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredSmallThickness] forKey:@"NSProgressIndicatorPreferredSmallThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredThickness] forKey:@"NSProgressIndicatorPreferredThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorSpinningStyle] forKey:@"NSProgressIndicatorSpinningStyle"];
[d setObject:[Number numberWithDouble:NSPushInCell] forKey:@"NSPushInCell"];
[d setObject:[Number numberWithDouble:NSPushInCellMask] forKey:@"NSPushInCellMask"];
[d setObject:[Number numberWithDouble:NSPushOnPushOffButton] forKey:@"NSPushOnPushOffButton"];
[d setObject:[Number numberWithDouble:NSRGBColorSpaceModel] forKey:@"NSRGBColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSRGBModeColorPanel] forKey:@"NSRGBModeColorPanel"];
[d setObject:[Number numberWithDouble:NSRadioButton] forKey:@"NSRadioButton"];
[d setObject:[Number numberWithDouble:NSRadioModeMatrix] forKey:@"NSRadioModeMatrix"];
[d setObject:[Number numberWithDouble:NSRangeDateMode] forKey:@"NSRangeDateMode"];
[d setObject:[Number numberWithDouble:NSRatingLevelIndicatorStyle] forKey:@"NSRatingLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSRecessedBezelStyle] forKey:@"NSRecessedBezelStyle"];
[d setObject:[Number numberWithDouble:NSRedoFunctionKey] forKey:@"NSRedoFunctionKey"];
[d setObject:[Number numberWithDouble:NSRegularControlSize] forKey:@"NSRegularControlSize"];
[d setObject:[Number numberWithDouble:NSRegularSquareBezelStyle] forKey:@"NSRegularSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSRelevancyLevelIndicatorStyle] forKey:@"NSRelevancyLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSRemoveTraitFontAction] forKey:@"NSRemoveTraitFontAction"];
[d setObject:[Number numberWithDouble:NSResetCursorRectsRunLoopOrdering] forKey:@"NSResetCursorRectsRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSResetFunctionKey] forKey:@"NSResetFunctionKey"];
[d setObject:[Number numberWithDouble:NSResizableWindowMask] forKey:@"NSResizableWindowMask"];
[d setObject:[Number numberWithDouble:NSReturnTextMovement] forKey:@"NSReturnTextMovement"];
[d setObject:[Number numberWithDouble:NSRightArrowFunctionKey] forKey:@"NSRightArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSRightMouseDown] forKey:@"NSRightMouseDown"];
[d setObject:[Number numberWithDouble:NSRightMouseDownMask] forKey:@"NSRightMouseDownMask"];
[d setObject:[Number numberWithDouble:NSRightMouseDragged] forKey:@"NSRightMouseDragged"];
[d setObject:[Number numberWithDouble:NSRightMouseDraggedMask] forKey:@"NSRightMouseDraggedMask"];
[d setObject:[Number numberWithDouble:NSRightMouseUp] forKey:@"NSRightMouseUp"];
[d setObject:[Number numberWithDouble:NSRightMouseUpMask] forKey:@"NSRightMouseUpMask"];
[d setObject:[Number numberWithDouble:NSRightTabStopType] forKey:@"NSRightTabStopType"];
[d setObject:[Number numberWithDouble:NSRightTabsBezelBorder] forKey:@"NSRightTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSRightTextAlignment] forKey:@"NSRightTextAlignment"];
[d setObject:[Number numberWithDouble:NSRightTextMovement] forKey:@"NSRightTextMovement"];
[d setObject:[Number numberWithDouble:NSRoundLineCapStyle] forKey:@"NSRoundLineCapStyle"];
[d setObject:[Number numberWithDouble:NSRoundLineJoinStyle] forKey:@"NSRoundLineJoinStyle"];
[d setObject:[Number numberWithDouble:NSRoundRectBezelStyle] forKey:@"NSRoundRectBezelStyle"];
[d setObject:[Number numberWithDouble:NSRoundedBezelStyle] forKey:@"NSRoundedBezelStyle"];
[d setObject:[Number numberWithDouble:NSRoundedDisclosureBezelStyle] forKey:@"NSRoundedDisclosureBezelStyle"];
[d setObject:[Number numberWithDouble:NSRoundedTokenStyle] forKey:@"NSRoundedTokenStyle"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeCompound] forKey:@"NSRuleEditorNestingModeCompound"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeList] forKey:@"NSRuleEditorNestingModeList"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeSimple] forKey:@"NSRuleEditorNestingModeSimple"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeSingle] forKey:@"NSRuleEditorNestingModeSingle"];
[d setObject:[Number numberWithDouble:NSRuleEditorRowTypeCompound] forKey:@"NSRuleEditorRowTypeCompound"];
[d setObject:[Number numberWithDouble:NSRuleEditorRowTypeSimple] forKey:@"NSRuleEditorRowTypeSimple"];
[d setObject:[Number numberWithDouble:NSRunAbortedResponse] forKey:@"NSRunAbortedResponse"];
[d setObject:[Number numberWithDouble:NSRunContinuesResponse] forKey:@"NSRunContinuesResponse"];
[d setObject:[Number numberWithDouble:NSRunStoppedResponse] forKey:@"NSRunStoppedResponse"];
[d setObject:[Number numberWithDouble:NSSaveAsOperation] forKey:@"NSSaveAsOperation"];
[d setObject:[Number numberWithDouble:NSSaveOperation] forKey:@"NSSaveOperation"];
[d setObject:[Number numberWithDouble:NSSaveToOperation] forKey:@"NSSaveToOperation"];
[d setObject:[Number numberWithDouble:NSScaleNone] forKey:@"NSScaleNone"];
[d setObject:[Number numberWithDouble:NSScaleProportionally] forKey:@"NSScaleProportionally"];
[d setObject:[Number numberWithDouble:NSScaleToFit] forKey:@"NSScaleToFit"];
[d setObject:[Number numberWithDouble:NSScreenChangedEventType] forKey:@"NSScreenChangedEventType"];
[d setObject:[Number numberWithDouble:NSScreenSaverWindowLevel] forKey:@"NSScreenSaverWindowLevel"];
[d setObject:[Number numberWithDouble:NSScrollLockFunctionKey] forKey:@"NSScrollLockFunctionKey"];
[d setObject:[Number numberWithDouble:NSScrollWheel] forKey:@"NSScrollWheel"];
[d setObject:[Number numberWithDouble:NSScrollWheelMask] forKey:@"NSScrollWheelMask"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsDefaultSetting] forKey:@"NSScrollerArrowsDefaultSetting"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsMaxEnd] forKey:@"NSScrollerArrowsMaxEnd"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsMinEnd] forKey:@"NSScrollerArrowsMinEnd"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsNone] forKey:@"NSScrollerArrowsNone"];
[d setObject:[Number numberWithDouble:NSScrollerDecrementArrow] forKey:@"NSScrollerDecrementArrow"];
[d setObject:[Number numberWithDouble:NSScrollerDecrementLine] forKey:@"NSScrollerDecrementLine"];
[d setObject:[Number numberWithDouble:NSScrollerDecrementPage] forKey:@"NSScrollerDecrementPage"];
[d setObject:[Number numberWithDouble:NSScrollerIncrementArrow] forKey:@"NSScrollerIncrementArrow"];
[d setObject:[Number numberWithDouble:NSScrollerIncrementLine] forKey:@"NSScrollerIncrementLine"];
[d setObject:[Number numberWithDouble:NSScrollerIncrementPage] forKey:@"NSScrollerIncrementPage"];
[d setObject:[Number numberWithDouble:NSScrollerKnob] forKey:@"NSScrollerKnob"];
[d setObject:[Number numberWithDouble:NSScrollerKnobSlot] forKey:@"NSScrollerKnobSlot"];
[d setObject:[Number numberWithDouble:NSScrollerNoPart] forKey:@"NSScrollerNoPart"];
[d setObject:[Number numberWithDouble:NSSearchFieldClearRecentsMenuItemTag] forKey:@"NSSearchFieldClearRecentsMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSearchFieldNoRecentsMenuItemTag] forKey:@"NSSearchFieldNoRecentsMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSearchFieldRecentsMenuItemTag] forKey:@"NSSearchFieldRecentsMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSearchFieldRecentsTitleMenuItemTag] forKey:@"NSSearchFieldRecentsTitleMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSegmentStyleAutomatic] forKey:@"NSSegmentStyleAutomatic"];
[d setObject:[Number numberWithDouble:NSSegmentStyleCapsule] forKey:@"NSSegmentStyleCapsule"];
[d setObject:[Number numberWithDouble:NSSegmentStyleRoundRect] forKey:@"NSSegmentStyleRoundRect"];
[d setObject:[Number numberWithDouble:NSSegmentStyleRounded] forKey:@"NSSegmentStyleRounded"];
[d setObject:[Number numberWithDouble:NSSegmentStyleSmallSquare] forKey:@"NSSegmentStyleSmallSquare"];
[d setObject:[Number numberWithDouble:NSSegmentStyleTexturedRounded] forKey:@"NSSegmentStyleTexturedRounded"];
[d setObject:[Number numberWithDouble:NSSegmentStyleTexturedSquare] forKey:@"NSSegmentStyleTexturedSquare"];
[d setObject:[Number numberWithDouble:NSSegmentSwitchTrackingMomentary] forKey:@"NSSegmentSwitchTrackingMomentary"];
[d setObject:[Number numberWithDouble:NSSegmentSwitchTrackingSelectAny] forKey:@"NSSegmentSwitchTrackingSelectAny"];
[d setObject:[Number numberWithDouble:NSSegmentSwitchTrackingSelectOne] forKey:@"NSSegmentSwitchTrackingSelectOne"];
[d setObject:[Number numberWithDouble:NSSelectByCharacter] forKey:@"NSSelectByCharacter"];
[d setObject:[Number numberWithDouble:NSSelectByParagraph] forKey:@"NSSelectByParagraph"];
[d setObject:[Number numberWithDouble:NSSelectByWord] forKey:@"NSSelectByWord"];
[d setObject:[Number numberWithDouble:NSSelectFunctionKey] forKey:@"NSSelectFunctionKey"];
[d setObject:[Number numberWithDouble:NSSelectedTab] forKey:@"NSSelectedTab"];
[d setObject:[Number numberWithDouble:NSSelectingNext] forKey:@"NSSelectingNext"];
[d setObject:[Number numberWithDouble:NSSelectingPrevious] forKey:@"NSSelectingPrevious"];
[d setObject:[Number numberWithDouble:NSSelectionAffinityDownstream] forKey:@"NSSelectionAffinityDownstream"];
[d setObject:[Number numberWithDouble:NSSelectionAffinityUpstream] forKey:@"NSSelectionAffinityUpstream"];
[d setObject:[Number numberWithDouble:NSServiceApplicationLaunchFailedError] forKey:@"NSServiceApplicationLaunchFailedError"];
[d setObject:[Number numberWithDouble:NSServiceApplicationNotFoundError] forKey:@"NSServiceApplicationNotFoundError"];
[d setObject:[Number numberWithDouble:NSServiceErrorMaximum] forKey:@"NSServiceErrorMaximum"];
[d setObject:[Number numberWithDouble:NSServiceErrorMinimum] forKey:@"NSServiceErrorMinimum"];
[d setObject:[Number numberWithDouble:NSServiceInvalidPasteboardDataError] forKey:@"NSServiceInvalidPasteboardDataError"];
[d setObject:[Number numberWithDouble:NSServiceMalformedServiceDictionaryError] forKey:@"NSServiceMalformedServiceDictionaryError"];
[d setObject:[Number numberWithDouble:NSServiceMiscellaneousError] forKey:@"NSServiceMiscellaneousError"];
[d setObject:[Number numberWithDouble:NSServiceRequestTimedOutError] forKey:@"NSServiceRequestTimedOutError"];
[d setObject:[Number numberWithDouble:NSShadowlessSquareBezelStyle] forKey:@"NSShadowlessSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSShiftKeyMask] forKey:@"NSShiftKeyMask"];
[d setObject:[Number numberWithDouble:NSShowControlGlyphs] forKey:@"NSShowControlGlyphs"];
[d setObject:[Number numberWithDouble:NSShowInvisibleGlyphs] forKey:@"NSShowInvisibleGlyphs"];
[d setObject:[Number numberWithDouble:NSSingleDateMode] forKey:@"NSSingleDateMode"];
[d setObject:[Number numberWithDouble:NSSingleUnderlineStyle] forKey:@"NSSingleUnderlineStyle"];
[d setObject:[Number numberWithDouble:NSSizeDownFontAction] forKey:@"NSSizeDownFontAction"];
[d setObject:[Number numberWithDouble:NSSizeUpFontAction] forKey:@"NSSizeUpFontAction"];
[d setObject:[Number numberWithDouble:NSSmallCapsFontMask] forKey:@"NSSmallCapsFontMask"];
[d setObject:[Number numberWithDouble:NSSmallControlSize] forKey:@"NSSmallControlSize"];
[d setObject:[Number numberWithDouble:NSSmallIconButtonBezelStyle] forKey:@"NSSmallIconButtonBezelStyle"];
[d setObject:[Number numberWithDouble:NSSmallSquareBezelStyle] forKey:@"NSSmallSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSSpecialPageOrder] forKey:@"NSSpecialPageOrder"];
[d setObject:[Number numberWithDouble:NSSpeechImmediateBoundary] forKey:@"NSSpeechImmediateBoundary"];
[d setObject:[Number numberWithDouble:NSSpeechSentenceBoundary] forKey:@"NSSpeechSentenceBoundary"];
[d setObject:[Number numberWithDouble:NSSpeechWordBoundary] forKey:@"NSSpeechWordBoundary"];
[d setObject:[Number numberWithDouble:NSSpellingStateGrammarFlag] forKey:@"NSSpellingStateGrammarFlag"];
[d setObject:[Number numberWithDouble:NSSpellingStateSpellingFlag] forKey:@"NSSpellingStateSpellingFlag"];
[d setObject:[Number numberWithDouble:NSSplitViewDividerStyleThick] forKey:@"NSSplitViewDividerStyleThick"];
[d setObject:[Number numberWithDouble:NSSplitViewDividerStyleThin] forKey:@"NSSplitViewDividerStyleThin"];
[d setObject:[Number numberWithDouble:NSSquareLineCapStyle] forKey:@"NSSquareLineCapStyle"];
[d setObject:[Number numberWithDouble:NSSquareStatusItemLength] forKey:@"NSSquareStatusItemLength"];
[d setObject:[Number numberWithDouble:NSStatusWindowLevel] forKey:@"NSStatusWindowLevel"];
[d setObject:[Number numberWithDouble:NSStopFunctionKey] forKey:@"NSStopFunctionKey"];
[d setObject:[Number numberWithDouble:NSStringDrawingDisableScreenFontSubstitution] forKey:@"NSStringDrawingDisableScreenFontSubstitution"];
[d setObject:[Number numberWithDouble:NSStringDrawingOneShot] forKey:@"NSStringDrawingOneShot"];
[d setObject:[Number numberWithDouble:NSStringDrawingTruncatesLastVisibleLine] forKey:@"NSStringDrawingTruncatesLastVisibleLine"];
[d setObject:[Number numberWithDouble:NSStringDrawingUsesDeviceMetrics] forKey:@"NSStringDrawingUsesDeviceMetrics"];
[d setObject:[Number numberWithDouble:NSStringDrawingUsesFontLeading] forKey:@"NSStringDrawingUsesFontLeading"];
[d setObject:[Number numberWithDouble:NSStringDrawingUsesLineFragmentOrigin] forKey:@"NSStringDrawingUsesLineFragmentOrigin"];
[d setObject:[Number numberWithDouble:NSSubmenuWindowLevel] forKey:@"NSSubmenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSSwitchButton] forKey:@"NSSwitchButton"];
[d setObject:[Number numberWithDouble:NSSysReqFunctionKey] forKey:@"NSSysReqFunctionKey"];
[d setObject:[Number numberWithDouble:NSSystemDefined] forKey:@"NSSystemDefined"];
[d setObject:[Number numberWithDouble:NSSystemDefinedMask] forKey:@"NSSystemDefinedMask"];
[d setObject:[Number numberWithDouble:NSSystemFunctionKey] forKey:@"NSSystemFunctionKey"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionCCITTFAX3] forKey:@"NSTIFFCompressionCCITTFAX3"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionCCITTFAX4] forKey:@"NSTIFFCompressionCCITTFAX4"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionJPEG] forKey:@"NSTIFFCompressionJPEG"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionLZW] forKey:@"NSTIFFCompressionLZW"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionNEXT] forKey:@"NSTIFFCompressionNEXT"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionNone] forKey:@"NSTIFFCompressionNone"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionOldJPEG] forKey:@"NSTIFFCompressionOldJPEG"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionPackBits] forKey:@"NSTIFFCompressionPackBits"];
[d setObject:[Number numberWithDouble:NSTIFFFileType] forKey:@"NSTIFFFileType"];
[d setObject:[Number numberWithDouble:NSTabCharacter] forKey:@"NSTabCharacter"];
[d setObject:[Number numberWithDouble:NSTabTextMovement] forKey:@"NSTabTextMovement"];
[d setObject:[Number numberWithDouble:NSTableColumnAutoresizingMask] forKey:@"NSTableColumnAutoresizingMask"];
[d setObject:[Number numberWithDouble:NSTableColumnNoResizing] forKey:@"NSTableColumnNoResizing"];
[d setObject:[Number numberWithDouble:NSTableColumnUserResizingMask] forKey:@"NSTableColumnUserResizingMask"];
[d setObject:[Number numberWithDouble:NSTableViewDropAbove] forKey:@"NSTableViewDropAbove"];
[d setObject:[Number numberWithDouble:NSTableViewDropOn] forKey:@"NSTableViewDropOn"];
[d setObject:[Number numberWithDouble:NSTableViewFirstColumnOnlyAutoresizingStyle] forKey:@"NSTableViewFirstColumnOnlyAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewGridNone] forKey:@"NSTableViewGridNone"];
[d setObject:[Number numberWithDouble:NSTableViewLastColumnOnlyAutoresizingStyle] forKey:@"NSTableViewLastColumnOnlyAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewNoColumnAutoresizing] forKey:@"NSTableViewNoColumnAutoresizing"];
[d setObject:[Number numberWithDouble:NSTableViewReverseSequentialColumnAutoresizingStyle] forKey:@"NSTableViewReverseSequentialColumnAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewSelectionHighlightStyleRegular] forKey:@"NSTableViewSelectionHighlightStyleRegular"];
[d setObject:[Number numberWithDouble:NSTableViewSelectionHighlightStyleSourceList] forKey:@"NSTableViewSelectionHighlightStyleSourceList"];
[d setObject:[Number numberWithDouble:NSTableViewSequentialColumnAutoresizingStyle] forKey:@"NSTableViewSequentialColumnAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewSolidHorizontalGridLineMask] forKey:@"NSTableViewSolidHorizontalGridLineMask"];
[d setObject:[Number numberWithDouble:NSTableViewSolidVerticalGridLineMask] forKey:@"NSTableViewSolidVerticalGridLineMask"];
[d setObject:[Number numberWithDouble:NSTableViewUniformColumnAutoresizingStyle] forKey:@"NSTableViewUniformColumnAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTabletPoint] forKey:@"NSTabletPoint"];
[d setObject:[Number numberWithDouble:NSTabletPointEventSubtype] forKey:@"NSTabletPointEventSubtype"];
[d setObject:[Number numberWithDouble:NSTabletPointMask] forKey:@"NSTabletPointMask"];
[d setObject:[Number numberWithDouble:NSTabletProximity] forKey:@"NSTabletProximity"];
[d setObject:[Number numberWithDouble:NSTabletProximityEventSubtype] forKey:@"NSTabletProximityEventSubtype"];
[d setObject:[Number numberWithDouble:NSTabletProximityMask] forKey:@"NSTabletProximityMask"];
[d setObject:[Number numberWithDouble:NSTerminateCancel] forKey:@"NSTerminateCancel"];
[d setObject:[Number numberWithDouble:NSTerminateLater] forKey:@"NSTerminateLater"];
[d setObject:[Number numberWithDouble:NSTerminateNow] forKey:@"NSTerminateNow"];
[d setObject:[Number numberWithDouble:NSTextBlockAbsoluteValueType] forKey:@"NSTextBlockAbsoluteValueType"];
[d setObject:[Number numberWithDouble:NSTextBlockBaselineAlignment] forKey:@"NSTextBlockBaselineAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockBorder] forKey:@"NSTextBlockBorder"];
[d setObject:[Number numberWithDouble:NSTextBlockBottomAlignment] forKey:@"NSTextBlockBottomAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockHeight] forKey:@"NSTextBlockHeight"];
[d setObject:[Number numberWithDouble:NSTextBlockMargin] forKey:@"NSTextBlockMargin"];
[d setObject:[Number numberWithDouble:NSTextBlockMaximumHeight] forKey:@"NSTextBlockMaximumHeight"];
[d setObject:[Number numberWithDouble:NSTextBlockMaximumWidth] forKey:@"NSTextBlockMaximumWidth"];
[d setObject:[Number numberWithDouble:NSTextBlockMiddleAlignment] forKey:@"NSTextBlockMiddleAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockMinimumHeight] forKey:@"NSTextBlockMinimumHeight"];
[d setObject:[Number numberWithDouble:NSTextBlockMinimumWidth] forKey:@"NSTextBlockMinimumWidth"];
[d setObject:[Number numberWithDouble:NSTextBlockPadding] forKey:@"NSTextBlockPadding"];
[d setObject:[Number numberWithDouble:NSTextBlockPercentageValueType] forKey:@"NSTextBlockPercentageValueType"];
[d setObject:[Number numberWithDouble:NSTextBlockTopAlignment] forKey:@"NSTextBlockTopAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockWidth] forKey:@"NSTextBlockWidth"];
[d setObject:[Number numberWithDouble:NSTextCellType] forKey:@"NSTextCellType"];
[d setObject:[Number numberWithDouble:NSTextFieldAndStepperDatePickerStyle] forKey:@"NSTextFieldAndStepperDatePickerStyle"];
[d setObject:[Number numberWithDouble:NSTextFieldDatePickerStyle] forKey:@"NSTextFieldDatePickerStyle"];
[d setObject:[Number numberWithDouble:NSTextFieldRoundedBezel] forKey:@"NSTextFieldRoundedBezel"];
[d setObject:[Number numberWithDouble:NSTextFieldSquareBezel] forKey:@"NSTextFieldSquareBezel"];
[d setObject:[Number numberWithDouble:NSTextListPrependEnclosingMarker] forKey:@"NSTextListPrependEnclosingMarker"];
[d setObject:[Number numberWithDouble:NSTextReadInapplicableDocumentTypeError] forKey:@"NSTextReadInapplicableDocumentTypeError"];
[d setObject:[Number numberWithDouble:NSTextReadWriteErrorMaximum] forKey:@"NSTextReadWriteErrorMaximum"];
[d setObject:[Number numberWithDouble:NSTextReadWriteErrorMinimum] forKey:@"NSTextReadWriteErrorMinimum"];
[d setObject:[Number numberWithDouble:NSTextStorageEditedAttributes] forKey:@"NSTextStorageEditedAttributes"];
[d setObject:[Number numberWithDouble:NSTextStorageEditedCharacters] forKey:@"NSTextStorageEditedCharacters"];
[d setObject:[Number numberWithDouble:NSTextTableAutomaticLayoutAlgorithm] forKey:@"NSTextTableAutomaticLayoutAlgorithm"];
[d setObject:[Number numberWithDouble:NSTextTableFixedLayoutAlgorithm] forKey:@"NSTextTableFixedLayoutAlgorithm"];
[d setObject:[Number numberWithDouble:NSTextWriteInapplicableDocumentTypeError] forKey:@"NSTextWriteInapplicableDocumentTypeError"];
[d setObject:[Number numberWithDouble:NSTexturedBackgroundWindowMask] forKey:@"NSTexturedBackgroundWindowMask"];
[d setObject:[Number numberWithDouble:NSTexturedRoundedBezelStyle] forKey:@"NSTexturedRoundedBezelStyle"];
[d setObject:[Number numberWithDouble:NSTexturedSquareBezelStyle] forKey:@"NSTexturedSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSThickSquareBezelStyle] forKey:@"NSThickSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSThickerSquareBezelStyle] forKey:@"NSThickerSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSTickMarkAbove] forKey:@"NSTickMarkAbove"];
[d setObject:[Number numberWithDouble:NSTickMarkBelow] forKey:@"NSTickMarkBelow"];
[d setObject:[Number numberWithDouble:NSTickMarkLeft] forKey:@"NSTickMarkLeft"];
[d setObject:[Number numberWithDouble:NSTickMarkRight] forKey:@"NSTickMarkRight"];
[d setObject:[Number numberWithDouble:NSTimeZoneDatePickerElementFlag] forKey:@"NSTimeZoneDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSTitledWindowMask] forKey:@"NSTitledWindowMask"];
[d setObject:[Number numberWithDouble:NSToggleButton] forKey:@"NSToggleButton"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeDefault] forKey:@"NSToolbarDisplayModeDefault"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeIconAndLabel] forKey:@"NSToolbarDisplayModeIconAndLabel"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeIconOnly] forKey:@"NSToolbarDisplayModeIconOnly"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeLabelOnly] forKey:@"NSToolbarDisplayModeLabelOnly"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityHigh] forKey:@"NSToolbarItemVisibilityPriorityHigh"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityLow] forKey:@"NSToolbarItemVisibilityPriorityLow"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityStandard] forKey:@"NSToolbarItemVisibilityPriorityStandard"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityUser] forKey:@"NSToolbarItemVisibilityPriorityUser"];
[d setObject:[Number numberWithDouble:NSToolbarSizeModeDefault] forKey:@"NSToolbarSizeModeDefault"];
[d setObject:[Number numberWithDouble:NSToolbarSizeModeRegular] forKey:@"NSToolbarSizeModeRegular"];
[d setObject:[Number numberWithDouble:NSToolbarSizeModeSmall] forKey:@"NSToolbarSizeModeSmall"];
[d setObject:[Number numberWithDouble:NSTopTabsBezelBorder] forKey:@"NSTopTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSTornOffMenuWindowLevel] forKey:@"NSTornOffMenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSTrackModeMatrix] forKey:@"NSTrackModeMatrix"];
[d setObject:[Number numberWithDouble:NSTrackingActiveAlways] forKey:@"NSTrackingActiveAlways"];
[d setObject:[Number numberWithDouble:NSTrackingActiveInActiveApp] forKey:@"NSTrackingActiveInActiveApp"];
[d setObject:[Number numberWithDouble:NSTrackingActiveInKeyWindow] forKey:@"NSTrackingActiveInKeyWindow"];
[d setObject:[Number numberWithDouble:NSTrackingActiveWhenFirstResponder] forKey:@"NSTrackingActiveWhenFirstResponder"];
[d setObject:[Number numberWithDouble:NSTrackingAssumeInside] forKey:@"NSTrackingAssumeInside"];
[d setObject:[Number numberWithDouble:NSTrackingCursorUpdate] forKey:@"NSTrackingCursorUpdate"];
[d setObject:[Number numberWithDouble:NSTrackingEnabledDuringMouseDrag] forKey:@"NSTrackingEnabledDuringMouseDrag"];
[d setObject:[Number numberWithDouble:NSTrackingInVisibleRect] forKey:@"NSTrackingInVisibleRect"];
[d setObject:[Number numberWithDouble:NSTrackingMouseEnteredAndExited] forKey:@"NSTrackingMouseEnteredAndExited"];
[d setObject:[Number numberWithDouble:NSTrackingMouseMoved] forKey:@"NSTrackingMouseMoved"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_2] forKey:@"NSTypesetterBehavior_10_2"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_2_WithCompatibility] forKey:@"NSTypesetterBehavior_10_2_WithCompatibility"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_3] forKey:@"NSTypesetterBehavior_10_3"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_4] forKey:@"NSTypesetterBehavior_10_4"];
[d setObject:[Number numberWithDouble:NSTypesetterContainerBreakAction] forKey:@"NSTypesetterContainerBreakAction"];
[d setObject:[Number numberWithDouble:NSTypesetterHorizontalTabAction] forKey:@"NSTypesetterHorizontalTabAction"];
[d setObject:[Number numberWithDouble:NSTypesetterLatestBehavior] forKey:@"NSTypesetterLatestBehavior"];
[d setObject:[Number numberWithDouble:NSTypesetterLineBreakAction] forKey:@"NSTypesetterLineBreakAction"];
[d setObject:[Number numberWithDouble:NSTypesetterOriginalBehavior] forKey:@"NSTypesetterOriginalBehavior"];
[d setObject:[Number numberWithDouble:NSTypesetterParagraphBreakAction] forKey:@"NSTypesetterParagraphBreakAction"];
[d setObject:[Number numberWithDouble:NSTypesetterWhitespaceAction] forKey:@"NSTypesetterWhitespaceAction"];
[d setObject:[Number numberWithDouble:NSTypesetterZeroAdvancementAction] forKey:@"NSTypesetterZeroAdvancementAction"];
[d setObject:[Number numberWithDouble:NSUnboldFontMask] forKey:@"NSUnboldFontMask"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDash] forKey:@"NSUnderlinePatternDash"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDashDot] forKey:@"NSUnderlinePatternDashDot"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDashDotDot] forKey:@"NSUnderlinePatternDashDotDot"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDot] forKey:@"NSUnderlinePatternDot"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternSolid] forKey:@"NSUnderlinePatternSolid"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleDouble] forKey:@"NSUnderlineStyleDouble"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleNone] forKey:@"NSUnderlineStyleNone"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleSingle] forKey:@"NSUnderlineStyleSingle"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleThick] forKey:@"NSUnderlineStyleThick"];
[d setObject:[Number numberWithDouble:NSUndoFunctionKey] forKey:@"NSUndoFunctionKey"];
[d setObject:[Number numberWithDouble:NSUnifiedTitleAndToolbarWindowMask] forKey:@"NSUnifiedTitleAndToolbarWindowMask"];
[d setObject:[Number numberWithDouble:NSUnitalicFontMask] forKey:@"NSUnitalicFontMask"];
[d setObject:[Number numberWithDouble:NSUnknownColorSpaceModel] forKey:@"NSUnknownColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSUnknownPageOrder] forKey:@"NSUnknownPageOrder"];
[d setObject:[Number numberWithDouble:NSUnknownPointingDevice] forKey:@"NSUnknownPointingDevice"];
[d setObject:[Number numberWithDouble:NSUnscaledWindowMask] forKey:@"NSUnscaledWindowMask"];
[d setObject:[Number numberWithDouble:NSUpArrowFunctionKey] forKey:@"NSUpArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSUpTextMovement] forKey:@"NSUpTextMovement"];
[d setObject:[Number numberWithDouble:NSUpdateWindowsRunLoopOrdering] forKey:@"NSUpdateWindowsRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSUserFunctionKey] forKey:@"NSUserFunctionKey"];
[d setObject:[Number numberWithDouble:NSUtilityWindowMask] forKey:@"NSUtilityWindowMask"];
[d setObject:[Number numberWithDouble:NSVariableStatusItemLength] forKey:@"NSVariableStatusItemLength"];
[d setObject:[Number numberWithDouble:NSVerticalRuler] forKey:@"NSVerticalRuler"];
[d setObject:[Number numberWithDouble:NSViaPanelFontAction] forKey:@"NSViaPanelFontAction"];
[d setObject:[Number numberWithDouble:NSViewHeightSizable] forKey:@"NSViewHeightSizable"];
[d setObject:[Number numberWithDouble:NSViewMaxXMargin] forKey:@"NSViewMaxXMargin"];
[d setObject:[Number numberWithDouble:NSViewMaxYMargin] forKey:@"NSViewMaxYMargin"];
[d setObject:[Number numberWithDouble:NSViewMinXMargin] forKey:@"NSViewMinXMargin"];
[d setObject:[Number numberWithDouble:NSViewMinYMargin] forKey:@"NSViewMinYMargin"];
[d setObject:[Number numberWithDouble:NSViewNotSizable] forKey:@"NSViewNotSizable"];
[d setObject:[Number numberWithDouble:NSViewWidthSizable] forKey:@"NSViewWidthSizable"];
[d setObject:[Number numberWithDouble:NSWantsBidiLevels] forKey:@"NSWantsBidiLevels"];
[d setObject:[Number numberWithDouble:NSWarningAlertStyle] forKey:@"NSWarningAlertStyle"];
[d setObject:[Number numberWithDouble:NSWheelModeColorPanel] forKey:@"NSWheelModeColorPanel"];
[d setObject:[Number numberWithDouble:NSWindowAbove] forKey:@"NSWindowAbove"];
[d setObject:[Number numberWithDouble:NSWindowBackingLocationDefault] forKey:@"NSWindowBackingLocationDefault"];
[d setObject:[Number numberWithDouble:NSWindowBackingLocationMainMemory] forKey:@"NSWindowBackingLocationMainMemory"];
[d setObject:[Number numberWithDouble:NSWindowBackingLocationVideoMemory] forKey:@"NSWindowBackingLocationVideoMemory"];
[d setObject:[Number numberWithDouble:NSWindowBelow] forKey:@"NSWindowBelow"];
[d setObject:[Number numberWithDouble:NSWindowCloseButton] forKey:@"NSWindowCloseButton"];
[d setObject:[Number numberWithDouble:NSWindowCollectionBehaviorCanJoinAllSpaces] forKey:@"NSWindowCollectionBehaviorCanJoinAllSpaces"];
[d setObject:[Number numberWithDouble:NSWindowCollectionBehaviorDefault] forKey:@"NSWindowCollectionBehaviorDefault"];
[d setObject:[Number numberWithDouble:NSWindowCollectionBehaviorMoveToActiveSpace] forKey:@"NSWindowCollectionBehaviorMoveToActiveSpace"];
[d setObject:[Number numberWithDouble:NSWindowDocumentIconButton] forKey:@"NSWindowDocumentIconButton"];
[d setObject:[Number numberWithDouble:NSWindowExposedEventType] forKey:@"NSWindowExposedEventType"];
[d setObject:[Number numberWithDouble:NSWindowMiniaturizeButton] forKey:@"NSWindowMiniaturizeButton"];
[d setObject:[Number numberWithDouble:NSWindowMovedEventType] forKey:@"NSWindowMovedEventType"];
[d setObject:[Number numberWithDouble:NSWindowOut] forKey:@"NSWindowOut"];
[d setObject:[Number numberWithDouble:NSWindowSharingNone] forKey:@"NSWindowSharingNone"];
[d setObject:[Number numberWithDouble:NSWindowSharingReadOnly] forKey:@"NSWindowSharingReadOnly"];
[d setObject:[Number numberWithDouble:NSWindowSharingReadWrite] forKey:@"NSWindowSharingReadWrite"];
[d setObject:[Number numberWithDouble:NSWindowToolbarButton] forKey:@"NSWindowToolbarButton"];
[d setObject:[Number numberWithDouble:NSWindowZoomButton] forKey:@"NSWindowZoomButton"];
[d setObject:[Number numberWithDouble:NSWindows95InterfaceStyle] forKey:@"NSWindows95InterfaceStyle"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAllowingClassicStartup] forKey:@"NSWorkspaceLaunchAllowingClassicStartup"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAndHide] forKey:@"NSWorkspaceLaunchAndHide"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAndHideOthers] forKey:@"NSWorkspaceLaunchAndHideOthers"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAndPrint] forKey:@"NSWorkspaceLaunchAndPrint"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAsync] forKey:@"NSWorkspaceLaunchAsync"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchDefault] forKey:@"NSWorkspaceLaunchDefault"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchInhibitingBackgroundOnly] forKey:@"NSWorkspaceLaunchInhibitingBackgroundOnly"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchNewInstance] forKey:@"NSWorkspaceLaunchNewInstance"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchPreferringClassic] forKey:@"NSWorkspaceLaunchPreferringClassic"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchWithoutActivation] forKey:@"NSWorkspaceLaunchWithoutActivation"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchWithoutAddingToRecents] forKey:@"NSWorkspaceLaunchWithoutAddingToRecents"];
[d setObject:[Number numberWithDouble:NSWritingDirectionLeftToRight] forKey:@"NSWritingDirectionLeftToRight"];
[d setObject:[Number numberWithDouble:NSWritingDirectionNatural] forKey:@"NSWritingDirectionNatural"];
[d setObject:[Number numberWithDouble:NSWritingDirectionRightToLeft] forKey:@"NSWritingDirectionRightToLeft"];
[d setObject:[Number numberWithDouble:NSYearMonthDatePickerElementFlag] forKey:@"NSYearMonthDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSYearMonthDayDatePickerElementFlag] forKey:@"NSYearMonthDayDatePickerElementFlag"];
if ([NSAbortModalException isKindOfClass:[NSString class]]) [d setObject:NSAbortModalException forKey:@"NSAbortModalException"]; else NSLog([@"Can't initialize NSAbortModalException with object " stringByAppendingString:[NSAbortModalException description]]);
if ([NSAbortPrintingException isKindOfClass:[NSString class]]) [d setObject:NSAbortPrintingException forKey:@"NSAbortPrintingException"]; else NSLog([@"Can't initialize NSAbortPrintingException with object " stringByAppendingString:[NSAbortPrintingException description]]);
if ([NSAccessibilityAllowedValuesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAllowedValuesAttribute forKey:@"NSAccessibilityAllowedValuesAttribute"]; else NSLog([@"Can't initialize NSAccessibilityAllowedValuesAttribute with object " stringByAppendingString:[NSAccessibilityAllowedValuesAttribute description]]);
if ([NSAccessibilityApplicationActivatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationActivatedNotification forKey:@"NSAccessibilityApplicationActivatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationActivatedNotification with object " stringByAppendingString:[NSAccessibilityApplicationActivatedNotification description]]);
if ([NSAccessibilityApplicationDeactivatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationDeactivatedNotification forKey:@"NSAccessibilityApplicationDeactivatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationDeactivatedNotification with object " stringByAppendingString:[NSAccessibilityApplicationDeactivatedNotification description]]);
if ([NSAccessibilityApplicationHiddenNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationHiddenNotification forKey:@"NSAccessibilityApplicationHiddenNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationHiddenNotification with object " stringByAppendingString:[NSAccessibilityApplicationHiddenNotification description]]);
if ([NSAccessibilityApplicationRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationRole forKey:@"NSAccessibilityApplicationRole"]; else NSLog([@"Can't initialize NSAccessibilityApplicationRole with object " stringByAppendingString:[NSAccessibilityApplicationRole description]]);
if ([NSAccessibilityApplicationShownNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityApplicationShownNotification forKey:@"NSAccessibilityApplicationShownNotification"]; else NSLog([@"Can't initialize NSAccessibilityApplicationShownNotification with object " stringByAppendingString:[NSAccessibilityApplicationShownNotification description]]);
if ([NSAccessibilityAscendingSortDirectionValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAscendingSortDirectionValue forKey:@"NSAccessibilityAscendingSortDirectionValue"]; else NSLog([@"Can't initialize NSAccessibilityAscendingSortDirectionValue with object " stringByAppendingString:[NSAccessibilityAscendingSortDirectionValue description]]);
if ([NSAccessibilityAttachmentTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAttachmentTextAttribute forKey:@"NSAccessibilityAttachmentTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityAttachmentTextAttribute with object " stringByAppendingString:[NSAccessibilityAttachmentTextAttribute description]]);
if ([NSAccessibilityAttributedStringForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityAttributedStringForRangeParameterizedAttribute forKey:@"NSAccessibilityAttributedStringForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityAttributedStringForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityAttributedStringForRangeParameterizedAttribute description]]);
if ([NSAccessibilityBackgroundColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBackgroundColorTextAttribute forKey:@"NSAccessibilityBackgroundColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityBackgroundColorTextAttribute with object " stringByAppendingString:[NSAccessibilityBackgroundColorTextAttribute description]]);
if ([NSAccessibilityBoundsForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBoundsForRangeParameterizedAttribute forKey:@"NSAccessibilityBoundsForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityBoundsForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityBoundsForRangeParameterizedAttribute description]]);
if ([NSAccessibilityBrowserRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBrowserRole forKey:@"NSAccessibilityBrowserRole"]; else NSLog([@"Can't initialize NSAccessibilityBrowserRole with object " stringByAppendingString:[NSAccessibilityBrowserRole description]]);
if ([NSAccessibilityBusyIndicatorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityBusyIndicatorRole forKey:@"NSAccessibilityBusyIndicatorRole"]; else NSLog([@"Can't initialize NSAccessibilityBusyIndicatorRole with object " stringByAppendingString:[NSAccessibilityBusyIndicatorRole description]]);
if ([NSAccessibilityButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityButtonRole forKey:@"NSAccessibilityButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityButtonRole with object " stringByAppendingString:[NSAccessibilityButtonRole description]]);
if ([NSAccessibilityCancelAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCancelAction forKey:@"NSAccessibilityCancelAction"]; else NSLog([@"Can't initialize NSAccessibilityCancelAction with object " stringByAppendingString:[NSAccessibilityCancelAction description]]);
if ([NSAccessibilityCancelButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCancelButtonAttribute forKey:@"NSAccessibilityCancelButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityCancelButtonAttribute with object " stringByAppendingString:[NSAccessibilityCancelButtonAttribute description]]);
if ([NSAccessibilityCenterTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCenterTabStopMarkerTypeValue forKey:@"NSAccessibilityCenterTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityCenterTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityCenterTabStopMarkerTypeValue description]]);
if ([NSAccessibilityCentimetersUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCentimetersUnitValue forKey:@"NSAccessibilityCentimetersUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityCentimetersUnitValue with object " stringByAppendingString:[NSAccessibilityCentimetersUnitValue description]]);
if ([NSAccessibilityCheckBoxRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCheckBoxRole forKey:@"NSAccessibilityCheckBoxRole"]; else NSLog([@"Can't initialize NSAccessibilityCheckBoxRole with object " stringByAppendingString:[NSAccessibilityCheckBoxRole description]]);
if ([NSAccessibilityChildrenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityChildrenAttribute forKey:@"NSAccessibilityChildrenAttribute"]; else NSLog([@"Can't initialize NSAccessibilityChildrenAttribute with object " stringByAppendingString:[NSAccessibilityChildrenAttribute description]]);
if ([NSAccessibilityClearButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityClearButtonAttribute forKey:@"NSAccessibilityClearButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityClearButtonAttribute with object " stringByAppendingString:[NSAccessibilityClearButtonAttribute description]]);
if ([NSAccessibilityCloseButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCloseButtonAttribute forKey:@"NSAccessibilityCloseButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityCloseButtonAttribute with object " stringByAppendingString:[NSAccessibilityCloseButtonAttribute description]]);
if ([NSAccessibilityCloseButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCloseButtonSubrole forKey:@"NSAccessibilityCloseButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityCloseButtonSubrole with object " stringByAppendingString:[NSAccessibilityCloseButtonSubrole description]]);
if ([NSAccessibilityColorWellRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColorWellRole forKey:@"NSAccessibilityColorWellRole"]; else NSLog([@"Can't initialize NSAccessibilityColorWellRole with object " stringByAppendingString:[NSAccessibilityColorWellRole description]]);
if ([NSAccessibilityColumnCountAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnCountAttribute forKey:@"NSAccessibilityColumnCountAttribute"]; else NSLog([@"Can't initialize NSAccessibilityColumnCountAttribute with object " stringByAppendingString:[NSAccessibilityColumnCountAttribute description]]);
if ([NSAccessibilityColumnRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnRole forKey:@"NSAccessibilityColumnRole"]; else NSLog([@"Can't initialize NSAccessibilityColumnRole with object " stringByAppendingString:[NSAccessibilityColumnRole description]]);
if ([NSAccessibilityColumnTitlesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnTitlesAttribute forKey:@"NSAccessibilityColumnTitlesAttribute"]; else NSLog([@"Can't initialize NSAccessibilityColumnTitlesAttribute with object " stringByAppendingString:[NSAccessibilityColumnTitlesAttribute description]]);
if ([NSAccessibilityColumnsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityColumnsAttribute forKey:@"NSAccessibilityColumnsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityColumnsAttribute with object " stringByAppendingString:[NSAccessibilityColumnsAttribute description]]);
if ([NSAccessibilityComboBoxRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityComboBoxRole forKey:@"NSAccessibilityComboBoxRole"]; else NSLog([@"Can't initialize NSAccessibilityComboBoxRole with object " stringByAppendingString:[NSAccessibilityComboBoxRole description]]);
if ([NSAccessibilityConfirmAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityConfirmAction forKey:@"NSAccessibilityConfirmAction"]; else NSLog([@"Can't initialize NSAccessibilityConfirmAction with object " stringByAppendingString:[NSAccessibilityConfirmAction description]]);
if ([NSAccessibilityContentsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityContentsAttribute forKey:@"NSAccessibilityContentsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityContentsAttribute with object " stringByAppendingString:[NSAccessibilityContentsAttribute description]]);
if ([NSAccessibilityCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityCreatedNotification forKey:@"NSAccessibilityCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityCreatedNotification with object " stringByAppendingString:[NSAccessibilityCreatedNotification description]]);
if ([NSAccessibilityDecimalTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecimalTabStopMarkerTypeValue forKey:@"NSAccessibilityDecimalTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityDecimalTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityDecimalTabStopMarkerTypeValue description]]);
if ([NSAccessibilityDecrementAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementAction forKey:@"NSAccessibilityDecrementAction"]; else NSLog([@"Can't initialize NSAccessibilityDecrementAction with object " stringByAppendingString:[NSAccessibilityDecrementAction description]]);
if ([NSAccessibilityDecrementArrowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementArrowSubrole forKey:@"NSAccessibilityDecrementArrowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityDecrementArrowSubrole with object " stringByAppendingString:[NSAccessibilityDecrementArrowSubrole description]]);
if ([NSAccessibilityDecrementButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementButtonAttribute forKey:@"NSAccessibilityDecrementButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDecrementButtonAttribute with object " stringByAppendingString:[NSAccessibilityDecrementButtonAttribute description]]);
if ([NSAccessibilityDecrementPageSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDecrementPageSubrole forKey:@"NSAccessibilityDecrementPageSubrole"]; else NSLog([@"Can't initialize NSAccessibilityDecrementPageSubrole with object " stringByAppendingString:[NSAccessibilityDecrementPageSubrole description]]);
if ([NSAccessibilityDefaultButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDefaultButtonAttribute forKey:@"NSAccessibilityDefaultButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDefaultButtonAttribute with object " stringByAppendingString:[NSAccessibilityDefaultButtonAttribute description]]);
if ([NSAccessibilityDeleteAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDeleteAction forKey:@"NSAccessibilityDeleteAction"]; else NSLog([@"Can't initialize NSAccessibilityDeleteAction with object " stringByAppendingString:[NSAccessibilityDeleteAction description]]);
if ([NSAccessibilityDescendingSortDirectionValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDescendingSortDirectionValue forKey:@"NSAccessibilityDescendingSortDirectionValue"]; else NSLog([@"Can't initialize NSAccessibilityDescendingSortDirectionValue with object " stringByAppendingString:[NSAccessibilityDescendingSortDirectionValue description]]);
if ([NSAccessibilityDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDescriptionAttribute forKey:@"NSAccessibilityDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityDescriptionAttribute description]]);
if ([NSAccessibilityDialogSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDialogSubrole forKey:@"NSAccessibilityDialogSubrole"]; else NSLog([@"Can't initialize NSAccessibilityDialogSubrole with object " stringByAppendingString:[NSAccessibilityDialogSubrole description]]);
if ([NSAccessibilityDisclosedByRowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosedByRowAttribute forKey:@"NSAccessibilityDisclosedByRowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosedByRowAttribute with object " stringByAppendingString:[NSAccessibilityDisclosedByRowAttribute description]]);
if ([NSAccessibilityDisclosedRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosedRowsAttribute forKey:@"NSAccessibilityDisclosedRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosedRowsAttribute with object " stringByAppendingString:[NSAccessibilityDisclosedRowsAttribute description]]);
if ([NSAccessibilityDisclosingAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosingAttribute forKey:@"NSAccessibilityDisclosingAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosingAttribute with object " stringByAppendingString:[NSAccessibilityDisclosingAttribute description]]);
if ([NSAccessibilityDisclosureLevelAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosureLevelAttribute forKey:@"NSAccessibilityDisclosureLevelAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDisclosureLevelAttribute with object " stringByAppendingString:[NSAccessibilityDisclosureLevelAttribute description]]);
if ([NSAccessibilityDisclosureTriangleRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDisclosureTriangleRole forKey:@"NSAccessibilityDisclosureTriangleRole"]; else NSLog([@"Can't initialize NSAccessibilityDisclosureTriangleRole with object " stringByAppendingString:[NSAccessibilityDisclosureTriangleRole description]]);
if ([NSAccessibilityDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDocumentAttribute forKey:@"NSAccessibilityDocumentAttribute"]; else NSLog([@"Can't initialize NSAccessibilityDocumentAttribute with object " stringByAppendingString:[NSAccessibilityDocumentAttribute description]]);
if ([NSAccessibilityDrawerCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDrawerCreatedNotification forKey:@"NSAccessibilityDrawerCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityDrawerCreatedNotification with object " stringByAppendingString:[NSAccessibilityDrawerCreatedNotification description]]);
if ([NSAccessibilityDrawerRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityDrawerRole forKey:@"NSAccessibilityDrawerRole"]; else NSLog([@"Can't initialize NSAccessibilityDrawerRole with object " stringByAppendingString:[NSAccessibilityDrawerRole description]]);
if ([NSAccessibilityEditedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityEditedAttribute forKey:@"NSAccessibilityEditedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityEditedAttribute with object " stringByAppendingString:[NSAccessibilityEditedAttribute description]]);
if ([NSAccessibilityEnabledAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityEnabledAttribute forKey:@"NSAccessibilityEnabledAttribute"]; else NSLog([@"Can't initialize NSAccessibilityEnabledAttribute with object " stringByAppendingString:[NSAccessibilityEnabledAttribute description]]);
if ([NSAccessibilityErrorCodeExceptionInfo isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityErrorCodeExceptionInfo forKey:@"NSAccessibilityErrorCodeExceptionInfo"]; else NSLog([@"Can't initialize NSAccessibilityErrorCodeExceptionInfo with object " stringByAppendingString:[NSAccessibilityErrorCodeExceptionInfo description]]);
if ([NSAccessibilityException isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityException forKey:@"NSAccessibilityException"]; else NSLog([@"Can't initialize NSAccessibilityException with object " stringByAppendingString:[NSAccessibilityException description]]);
if ([NSAccessibilityExpandedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityExpandedAttribute forKey:@"NSAccessibilityExpandedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityExpandedAttribute with object " stringByAppendingString:[NSAccessibilityExpandedAttribute description]]);
if ([NSAccessibilityFilenameAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFilenameAttribute forKey:@"NSAccessibilityFilenameAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFilenameAttribute with object " stringByAppendingString:[NSAccessibilityFilenameAttribute description]]);
if ([NSAccessibilityFirstLineIndentMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFirstLineIndentMarkerTypeValue forKey:@"NSAccessibilityFirstLineIndentMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityFirstLineIndentMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityFirstLineIndentMarkerTypeValue description]]);
if ([NSAccessibilityFloatingWindowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFloatingWindowSubrole forKey:@"NSAccessibilityFloatingWindowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityFloatingWindowSubrole with object " stringByAppendingString:[NSAccessibilityFloatingWindowSubrole description]]);
if ([NSAccessibilityFocusedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedAttribute forKey:@"NSAccessibilityFocusedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFocusedAttribute with object " stringByAppendingString:[NSAccessibilityFocusedAttribute description]]);
if ([NSAccessibilityFocusedUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedUIElementAttribute forKey:@"NSAccessibilityFocusedUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFocusedUIElementAttribute with object " stringByAppendingString:[NSAccessibilityFocusedUIElementAttribute description]]);
if ([NSAccessibilityFocusedUIElementChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedUIElementChangedNotification forKey:@"NSAccessibilityFocusedUIElementChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityFocusedUIElementChangedNotification with object " stringByAppendingString:[NSAccessibilityFocusedUIElementChangedNotification description]]);
if ([NSAccessibilityFocusedWindowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedWindowAttribute forKey:@"NSAccessibilityFocusedWindowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFocusedWindowAttribute with object " stringByAppendingString:[NSAccessibilityFocusedWindowAttribute description]]);
if ([NSAccessibilityFocusedWindowChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFocusedWindowChangedNotification forKey:@"NSAccessibilityFocusedWindowChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityFocusedWindowChangedNotification with object " stringByAppendingString:[NSAccessibilityFocusedWindowChangedNotification description]]);
if ([NSAccessibilityFontFamilyKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontFamilyKey forKey:@"NSAccessibilityFontFamilyKey"]; else NSLog([@"Can't initialize NSAccessibilityFontFamilyKey with object " stringByAppendingString:[NSAccessibilityFontFamilyKey description]]);
if ([NSAccessibilityFontNameKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontNameKey forKey:@"NSAccessibilityFontNameKey"]; else NSLog([@"Can't initialize NSAccessibilityFontNameKey with object " stringByAppendingString:[NSAccessibilityFontNameKey description]]);
if ([NSAccessibilityFontSizeKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontSizeKey forKey:@"NSAccessibilityFontSizeKey"]; else NSLog([@"Can't initialize NSAccessibilityFontSizeKey with object " stringByAppendingString:[NSAccessibilityFontSizeKey description]]);
if ([NSAccessibilityFontTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFontTextAttribute forKey:@"NSAccessibilityFontTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFontTextAttribute with object " stringByAppendingString:[NSAccessibilityFontTextAttribute description]]);
if ([NSAccessibilityForegroundColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityForegroundColorTextAttribute forKey:@"NSAccessibilityForegroundColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityForegroundColorTextAttribute with object " stringByAppendingString:[NSAccessibilityForegroundColorTextAttribute description]]);
if ([NSAccessibilityFrontmostAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityFrontmostAttribute forKey:@"NSAccessibilityFrontmostAttribute"]; else NSLog([@"Can't initialize NSAccessibilityFrontmostAttribute with object " stringByAppendingString:[NSAccessibilityFrontmostAttribute description]]);
if ([NSAccessibilityGridRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGridRole forKey:@"NSAccessibilityGridRole"]; else NSLog([@"Can't initialize NSAccessibilityGridRole with object " stringByAppendingString:[NSAccessibilityGridRole description]]);
if ([NSAccessibilityGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGroupRole forKey:@"NSAccessibilityGroupRole"]; else NSLog([@"Can't initialize NSAccessibilityGroupRole with object " stringByAppendingString:[NSAccessibilityGroupRole description]]);
if ([NSAccessibilityGrowAreaAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGrowAreaAttribute forKey:@"NSAccessibilityGrowAreaAttribute"]; else NSLog([@"Can't initialize NSAccessibilityGrowAreaAttribute with object " stringByAppendingString:[NSAccessibilityGrowAreaAttribute description]]);
if ([NSAccessibilityGrowAreaRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityGrowAreaRole forKey:@"NSAccessibilityGrowAreaRole"]; else NSLog([@"Can't initialize NSAccessibilityGrowAreaRole with object " stringByAppendingString:[NSAccessibilityGrowAreaRole description]]);
if ([NSAccessibilityHeadIndentMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHeadIndentMarkerTypeValue forKey:@"NSAccessibilityHeadIndentMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityHeadIndentMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityHeadIndentMarkerTypeValue description]]);
if ([NSAccessibilityHeaderAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHeaderAttribute forKey:@"NSAccessibilityHeaderAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHeaderAttribute with object " stringByAppendingString:[NSAccessibilityHeaderAttribute description]]);
if ([NSAccessibilityHelpAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHelpAttribute forKey:@"NSAccessibilityHelpAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHelpAttribute with object " stringByAppendingString:[NSAccessibilityHelpAttribute description]]);
if ([NSAccessibilityHelpTagCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHelpTagCreatedNotification forKey:@"NSAccessibilityHelpTagCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityHelpTagCreatedNotification with object " stringByAppendingString:[NSAccessibilityHelpTagCreatedNotification description]]);
if ([NSAccessibilityHelpTagRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHelpTagRole forKey:@"NSAccessibilityHelpTagRole"]; else NSLog([@"Can't initialize NSAccessibilityHelpTagRole with object " stringByAppendingString:[NSAccessibilityHelpTagRole description]]);
if ([NSAccessibilityHiddenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHiddenAttribute forKey:@"NSAccessibilityHiddenAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHiddenAttribute with object " stringByAppendingString:[NSAccessibilityHiddenAttribute description]]);
if ([NSAccessibilityHorizontalOrientationValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHorizontalOrientationValue forKey:@"NSAccessibilityHorizontalOrientationValue"]; else NSLog([@"Can't initialize NSAccessibilityHorizontalOrientationValue with object " stringByAppendingString:[NSAccessibilityHorizontalOrientationValue description]]);
if ([NSAccessibilityHorizontalScrollBarAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityHorizontalScrollBarAttribute forKey:@"NSAccessibilityHorizontalScrollBarAttribute"]; else NSLog([@"Can't initialize NSAccessibilityHorizontalScrollBarAttribute with object " stringByAppendingString:[NSAccessibilityHorizontalScrollBarAttribute description]]);
if ([NSAccessibilityImageRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityImageRole forKey:@"NSAccessibilityImageRole"]; else NSLog([@"Can't initialize NSAccessibilityImageRole with object " stringByAppendingString:[NSAccessibilityImageRole description]]);
if ([NSAccessibilityInchesUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityInchesUnitValue forKey:@"NSAccessibilityInchesUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityInchesUnitValue with object " stringByAppendingString:[NSAccessibilityInchesUnitValue description]]);
if ([NSAccessibilityIncrementAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementAction forKey:@"NSAccessibilityIncrementAction"]; else NSLog([@"Can't initialize NSAccessibilityIncrementAction with object " stringByAppendingString:[NSAccessibilityIncrementAction description]]);
if ([NSAccessibilityIncrementArrowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementArrowSubrole forKey:@"NSAccessibilityIncrementArrowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityIncrementArrowSubrole with object " stringByAppendingString:[NSAccessibilityIncrementArrowSubrole description]]);
if ([NSAccessibilityIncrementButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementButtonAttribute forKey:@"NSAccessibilityIncrementButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityIncrementButtonAttribute with object " stringByAppendingString:[NSAccessibilityIncrementButtonAttribute description]]);
if ([NSAccessibilityIncrementPageSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementPageSubrole forKey:@"NSAccessibilityIncrementPageSubrole"]; else NSLog([@"Can't initialize NSAccessibilityIncrementPageSubrole with object " stringByAppendingString:[NSAccessibilityIncrementPageSubrole description]]);
if ([NSAccessibilityIncrementorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIncrementorRole forKey:@"NSAccessibilityIncrementorRole"]; else NSLog([@"Can't initialize NSAccessibilityIncrementorRole with object " stringByAppendingString:[NSAccessibilityIncrementorRole description]]);
if ([NSAccessibilityIndexAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityIndexAttribute forKey:@"NSAccessibilityIndexAttribute"]; else NSLog([@"Can't initialize NSAccessibilityIndexAttribute with object " stringByAppendingString:[NSAccessibilityIndexAttribute description]]);
if ([NSAccessibilityInsertionPointLineNumberAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityInsertionPointLineNumberAttribute forKey:@"NSAccessibilityInsertionPointLineNumberAttribute"]; else NSLog([@"Can't initialize NSAccessibilityInsertionPointLineNumberAttribute with object " stringByAppendingString:[NSAccessibilityInsertionPointLineNumberAttribute description]]);
if ([NSAccessibilityLabelUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLabelUIElementsAttribute forKey:@"NSAccessibilityLabelUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLabelUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityLabelUIElementsAttribute description]]);
if ([NSAccessibilityLabelValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLabelValueAttribute forKey:@"NSAccessibilityLabelValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLabelValueAttribute with object " stringByAppendingString:[NSAccessibilityLabelValueAttribute description]]);
if ([NSAccessibilityLeftTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLeftTabStopMarkerTypeValue forKey:@"NSAccessibilityLeftTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityLeftTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityLeftTabStopMarkerTypeValue description]]);
if ([NSAccessibilityLineForIndexParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLineForIndexParameterizedAttribute forKey:@"NSAccessibilityLineForIndexParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLineForIndexParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityLineForIndexParameterizedAttribute description]]);
if ([NSAccessibilityLinkRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLinkRole forKey:@"NSAccessibilityLinkRole"]; else NSLog([@"Can't initialize NSAccessibilityLinkRole with object " stringByAppendingString:[NSAccessibilityLinkRole description]]);
if ([NSAccessibilityLinkTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLinkTextAttribute forKey:@"NSAccessibilityLinkTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLinkTextAttribute with object " stringByAppendingString:[NSAccessibilityLinkTextAttribute description]]);
if ([NSAccessibilityLinkedUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityLinkedUIElementsAttribute forKey:@"NSAccessibilityLinkedUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityLinkedUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityLinkedUIElementsAttribute description]]);
if ([NSAccessibilityListRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityListRole forKey:@"NSAccessibilityListRole"]; else NSLog([@"Can't initialize NSAccessibilityListRole with object " stringByAppendingString:[NSAccessibilityListRole description]]);
if ([NSAccessibilityMainAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMainAttribute forKey:@"NSAccessibilityMainAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMainAttribute with object " stringByAppendingString:[NSAccessibilityMainAttribute description]]);
if ([NSAccessibilityMainWindowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMainWindowAttribute forKey:@"NSAccessibilityMainWindowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMainWindowAttribute with object " stringByAppendingString:[NSAccessibilityMainWindowAttribute description]]);
if ([NSAccessibilityMainWindowChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMainWindowChangedNotification forKey:@"NSAccessibilityMainWindowChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityMainWindowChangedNotification with object " stringByAppendingString:[NSAccessibilityMainWindowChangedNotification description]]);
if ([NSAccessibilityMarkerGroupUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerGroupUIElementAttribute forKey:@"NSAccessibilityMarkerGroupUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerGroupUIElementAttribute with object " stringByAppendingString:[NSAccessibilityMarkerGroupUIElementAttribute description]]);
if ([NSAccessibilityMarkerTypeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerTypeAttribute forKey:@"NSAccessibilityMarkerTypeAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerTypeAttribute with object " stringByAppendingString:[NSAccessibilityMarkerTypeAttribute description]]);
if ([NSAccessibilityMarkerTypeDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerTypeDescriptionAttribute forKey:@"NSAccessibilityMarkerTypeDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerTypeDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityMarkerTypeDescriptionAttribute description]]);
if ([NSAccessibilityMarkerUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerUIElementsAttribute forKey:@"NSAccessibilityMarkerUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityMarkerUIElementsAttribute description]]);
if ([NSAccessibilityMarkerValuesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMarkerValuesAttribute forKey:@"NSAccessibilityMarkerValuesAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMarkerValuesAttribute with object " stringByAppendingString:[NSAccessibilityMarkerValuesAttribute description]]);
if ([NSAccessibilityMatteContentUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMatteContentUIElementAttribute forKey:@"NSAccessibilityMatteContentUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMatteContentUIElementAttribute with object " stringByAppendingString:[NSAccessibilityMatteContentUIElementAttribute description]]);
if ([NSAccessibilityMatteHoleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMatteHoleAttribute forKey:@"NSAccessibilityMatteHoleAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMatteHoleAttribute with object " stringByAppendingString:[NSAccessibilityMatteHoleAttribute description]]);
if ([NSAccessibilityMatteRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMatteRole forKey:@"NSAccessibilityMatteRole"]; else NSLog([@"Can't initialize NSAccessibilityMatteRole with object " stringByAppendingString:[NSAccessibilityMatteRole description]]);
if ([NSAccessibilityMaxValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMaxValueAttribute forKey:@"NSAccessibilityMaxValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMaxValueAttribute with object " stringByAppendingString:[NSAccessibilityMaxValueAttribute description]]);
if ([NSAccessibilityMenuBarAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuBarAttribute forKey:@"NSAccessibilityMenuBarAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMenuBarAttribute with object " stringByAppendingString:[NSAccessibilityMenuBarAttribute description]]);
if ([NSAccessibilityMenuBarRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuBarRole forKey:@"NSAccessibilityMenuBarRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuBarRole with object " stringByAppendingString:[NSAccessibilityMenuBarRole description]]);
if ([NSAccessibilityMenuButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuButtonRole forKey:@"NSAccessibilityMenuButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuButtonRole with object " stringByAppendingString:[NSAccessibilityMenuButtonRole description]]);
if ([NSAccessibilityMenuItemRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuItemRole forKey:@"NSAccessibilityMenuItemRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuItemRole with object " stringByAppendingString:[NSAccessibilityMenuItemRole description]]);
if ([NSAccessibilityMenuRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMenuRole forKey:@"NSAccessibilityMenuRole"]; else NSLog([@"Can't initialize NSAccessibilityMenuRole with object " stringByAppendingString:[NSAccessibilityMenuRole description]]);
if ([NSAccessibilityMinValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinValueAttribute forKey:@"NSAccessibilityMinValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMinValueAttribute with object " stringByAppendingString:[NSAccessibilityMinValueAttribute description]]);
if ([NSAccessibilityMinimizeButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinimizeButtonAttribute forKey:@"NSAccessibilityMinimizeButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMinimizeButtonAttribute with object " stringByAppendingString:[NSAccessibilityMinimizeButtonAttribute description]]);
if ([NSAccessibilityMinimizeButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinimizeButtonSubrole forKey:@"NSAccessibilityMinimizeButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityMinimizeButtonSubrole with object " stringByAppendingString:[NSAccessibilityMinimizeButtonSubrole description]]);
if ([NSAccessibilityMinimizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMinimizedAttribute forKey:@"NSAccessibilityMinimizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMinimizedAttribute with object " stringByAppendingString:[NSAccessibilityMinimizedAttribute description]]);
if ([NSAccessibilityMisspelledTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMisspelledTextAttribute forKey:@"NSAccessibilityMisspelledTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityMisspelledTextAttribute with object " stringByAppendingString:[NSAccessibilityMisspelledTextAttribute description]]);
if ([NSAccessibilityModalAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityModalAttribute forKey:@"NSAccessibilityModalAttribute"]; else NSLog([@"Can't initialize NSAccessibilityModalAttribute with object " stringByAppendingString:[NSAccessibilityModalAttribute description]]);
if ([NSAccessibilityMovedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityMovedNotification forKey:@"NSAccessibilityMovedNotification"]; else NSLog([@"Can't initialize NSAccessibilityMovedNotification with object " stringByAppendingString:[NSAccessibilityMovedNotification description]]);
if ([NSAccessibilityNextContentsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityNextContentsAttribute forKey:@"NSAccessibilityNextContentsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityNextContentsAttribute with object " stringByAppendingString:[NSAccessibilityNextContentsAttribute description]]);
if ([NSAccessibilityNumberOfCharactersAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityNumberOfCharactersAttribute forKey:@"NSAccessibilityNumberOfCharactersAttribute"]; else NSLog([@"Can't initialize NSAccessibilityNumberOfCharactersAttribute with object " stringByAppendingString:[NSAccessibilityNumberOfCharactersAttribute description]]);
if ([NSAccessibilityOrderedByRowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOrderedByRowAttribute forKey:@"NSAccessibilityOrderedByRowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityOrderedByRowAttribute with object " stringByAppendingString:[NSAccessibilityOrderedByRowAttribute description]]);
if ([NSAccessibilityOrientationAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOrientationAttribute forKey:@"NSAccessibilityOrientationAttribute"]; else NSLog([@"Can't initialize NSAccessibilityOrientationAttribute with object " stringByAppendingString:[NSAccessibilityOrientationAttribute description]]);
if ([NSAccessibilityOutlineRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOutlineRole forKey:@"NSAccessibilityOutlineRole"]; else NSLog([@"Can't initialize NSAccessibilityOutlineRole with object " stringByAppendingString:[NSAccessibilityOutlineRole description]]);
if ([NSAccessibilityOutlineRowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOutlineRowSubrole forKey:@"NSAccessibilityOutlineRowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityOutlineRowSubrole with object " stringByAppendingString:[NSAccessibilityOutlineRowSubrole description]]);
if ([NSAccessibilityOverflowButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityOverflowButtonAttribute forKey:@"NSAccessibilityOverflowButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityOverflowButtonAttribute with object " stringByAppendingString:[NSAccessibilityOverflowButtonAttribute description]]);
if ([NSAccessibilityParentAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityParentAttribute forKey:@"NSAccessibilityParentAttribute"]; else NSLog([@"Can't initialize NSAccessibilityParentAttribute with object " stringByAppendingString:[NSAccessibilityParentAttribute description]]);
if ([NSAccessibilityPicasUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPicasUnitValue forKey:@"NSAccessibilityPicasUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityPicasUnitValue with object " stringByAppendingString:[NSAccessibilityPicasUnitValue description]]);
if ([NSAccessibilityPickAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPickAction forKey:@"NSAccessibilityPickAction"]; else NSLog([@"Can't initialize NSAccessibilityPickAction with object " stringByAppendingString:[NSAccessibilityPickAction description]]);
if ([NSAccessibilityPointsUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPointsUnitValue forKey:@"NSAccessibilityPointsUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityPointsUnitValue with object " stringByAppendingString:[NSAccessibilityPointsUnitValue description]]);
if ([NSAccessibilityPopUpButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPopUpButtonRole forKey:@"NSAccessibilityPopUpButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityPopUpButtonRole with object " stringByAppendingString:[NSAccessibilityPopUpButtonRole description]]);
if ([NSAccessibilityPositionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPositionAttribute forKey:@"NSAccessibilityPositionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityPositionAttribute with object " stringByAppendingString:[NSAccessibilityPositionAttribute description]]);
if ([NSAccessibilityPressAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPressAction forKey:@"NSAccessibilityPressAction"]; else NSLog([@"Can't initialize NSAccessibilityPressAction with object " stringByAppendingString:[NSAccessibilityPressAction description]]);
if ([NSAccessibilityPreviousContentsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityPreviousContentsAttribute forKey:@"NSAccessibilityPreviousContentsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityPreviousContentsAttribute with object " stringByAppendingString:[NSAccessibilityPreviousContentsAttribute description]]);
if ([NSAccessibilityProgressIndicatorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityProgressIndicatorRole forKey:@"NSAccessibilityProgressIndicatorRole"]; else NSLog([@"Can't initialize NSAccessibilityProgressIndicatorRole with object " stringByAppendingString:[NSAccessibilityProgressIndicatorRole description]]);
if ([NSAccessibilityProxyAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityProxyAttribute forKey:@"NSAccessibilityProxyAttribute"]; else NSLog([@"Can't initialize NSAccessibilityProxyAttribute with object " stringByAppendingString:[NSAccessibilityProxyAttribute description]]);
if ([NSAccessibilityRTFForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRTFForRangeParameterizedAttribute forKey:@"NSAccessibilityRTFForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRTFForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRTFForRangeParameterizedAttribute description]]);
if ([NSAccessibilityRadioButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRadioButtonRole forKey:@"NSAccessibilityRadioButtonRole"]; else NSLog([@"Can't initialize NSAccessibilityRadioButtonRole with object " stringByAppendingString:[NSAccessibilityRadioButtonRole description]]);
if ([NSAccessibilityRadioGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRadioGroupRole forKey:@"NSAccessibilityRadioGroupRole"]; else NSLog([@"Can't initialize NSAccessibilityRadioGroupRole with object " stringByAppendingString:[NSAccessibilityRadioGroupRole description]]);
if ([NSAccessibilityRaiseAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRaiseAction forKey:@"NSAccessibilityRaiseAction"]; else NSLog([@"Can't initialize NSAccessibilityRaiseAction with object " stringByAppendingString:[NSAccessibilityRaiseAction description]]);
if ([NSAccessibilityRangeForIndexParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRangeForIndexParameterizedAttribute forKey:@"NSAccessibilityRangeForIndexParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRangeForIndexParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRangeForIndexParameterizedAttribute description]]);
if ([NSAccessibilityRangeForLineParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRangeForLineParameterizedAttribute forKey:@"NSAccessibilityRangeForLineParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRangeForLineParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRangeForLineParameterizedAttribute description]]);
if ([NSAccessibilityRangeForPositionParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRangeForPositionParameterizedAttribute forKey:@"NSAccessibilityRangeForPositionParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRangeForPositionParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityRangeForPositionParameterizedAttribute description]]);
if ([NSAccessibilityResizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityResizedNotification forKey:@"NSAccessibilityResizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityResizedNotification with object " stringByAppendingString:[NSAccessibilityResizedNotification description]]);
if ([NSAccessibilityRightTabStopMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRightTabStopMarkerTypeValue forKey:@"NSAccessibilityRightTabStopMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityRightTabStopMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityRightTabStopMarkerTypeValue description]]);
if ([NSAccessibilityRoleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRoleAttribute forKey:@"NSAccessibilityRoleAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRoleAttribute with object " stringByAppendingString:[NSAccessibilityRoleAttribute description]]);
if ([NSAccessibilityRoleDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRoleDescriptionAttribute forKey:@"NSAccessibilityRoleDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRoleDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityRoleDescriptionAttribute description]]);
if ([NSAccessibilityRowCountAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowCountAttribute forKey:@"NSAccessibilityRowCountAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRowCountAttribute with object " stringByAppendingString:[NSAccessibilityRowCountAttribute description]]);
if ([NSAccessibilityRowCountChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowCountChangedNotification forKey:@"NSAccessibilityRowCountChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityRowCountChangedNotification with object " stringByAppendingString:[NSAccessibilityRowCountChangedNotification description]]);
if ([NSAccessibilityRowRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowRole forKey:@"NSAccessibilityRowRole"]; else NSLog([@"Can't initialize NSAccessibilityRowRole with object " stringByAppendingString:[NSAccessibilityRowRole description]]);
if ([NSAccessibilityRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRowsAttribute forKey:@"NSAccessibilityRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityRowsAttribute with object " stringByAppendingString:[NSAccessibilityRowsAttribute description]]);
if ([NSAccessibilityRulerMarkerRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRulerMarkerRole forKey:@"NSAccessibilityRulerMarkerRole"]; else NSLog([@"Can't initialize NSAccessibilityRulerMarkerRole with object " stringByAppendingString:[NSAccessibilityRulerMarkerRole description]]);
if ([NSAccessibilityRulerRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityRulerRole forKey:@"NSAccessibilityRulerRole"]; else NSLog([@"Can't initialize NSAccessibilityRulerRole with object " stringByAppendingString:[NSAccessibilityRulerRole description]]);
if ([NSAccessibilityScrollAreaRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityScrollAreaRole forKey:@"NSAccessibilityScrollAreaRole"]; else NSLog([@"Can't initialize NSAccessibilityScrollAreaRole with object " stringByAppendingString:[NSAccessibilityScrollAreaRole description]]);
if ([NSAccessibilityScrollBarRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityScrollBarRole forKey:@"NSAccessibilityScrollBarRole"]; else NSLog([@"Can't initialize NSAccessibilityScrollBarRole with object " stringByAppendingString:[NSAccessibilityScrollBarRole description]]);
if ([NSAccessibilitySearchButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySearchButtonAttribute forKey:@"NSAccessibilitySearchButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySearchButtonAttribute with object " stringByAppendingString:[NSAccessibilitySearchButtonAttribute description]]);
if ([NSAccessibilitySearchFieldSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySearchFieldSubrole forKey:@"NSAccessibilitySearchFieldSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySearchFieldSubrole with object " stringByAppendingString:[NSAccessibilitySearchFieldSubrole description]]);
if ([NSAccessibilitySearchMenuAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySearchMenuAttribute forKey:@"NSAccessibilitySearchMenuAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySearchMenuAttribute with object " stringByAppendingString:[NSAccessibilitySearchMenuAttribute description]]);
if ([NSAccessibilitySecureTextFieldSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySecureTextFieldSubrole forKey:@"NSAccessibilitySecureTextFieldSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySecureTextFieldSubrole with object " stringByAppendingString:[NSAccessibilitySecureTextFieldSubrole description]]);
if ([NSAccessibilitySelectedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedAttribute forKey:@"NSAccessibilitySelectedAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedAttribute with object " stringByAppendingString:[NSAccessibilitySelectedAttribute description]]);
if ([NSAccessibilitySelectedChildrenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedChildrenAttribute forKey:@"NSAccessibilitySelectedChildrenAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedChildrenAttribute with object " stringByAppendingString:[NSAccessibilitySelectedChildrenAttribute description]]);
if ([NSAccessibilitySelectedChildrenChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedChildrenChangedNotification forKey:@"NSAccessibilitySelectedChildrenChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedChildrenChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedChildrenChangedNotification description]]);
if ([NSAccessibilitySelectedColumnsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedColumnsAttribute forKey:@"NSAccessibilitySelectedColumnsAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedColumnsAttribute with object " stringByAppendingString:[NSAccessibilitySelectedColumnsAttribute description]]);
if ([NSAccessibilitySelectedColumnsChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedColumnsChangedNotification forKey:@"NSAccessibilitySelectedColumnsChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedColumnsChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedColumnsChangedNotification description]]);
if ([NSAccessibilitySelectedRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedRowsAttribute forKey:@"NSAccessibilitySelectedRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedRowsAttribute with object " stringByAppendingString:[NSAccessibilitySelectedRowsAttribute description]]);
if ([NSAccessibilitySelectedRowsChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedRowsChangedNotification forKey:@"NSAccessibilitySelectedRowsChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedRowsChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedRowsChangedNotification description]]);
if ([NSAccessibilitySelectedTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextAttribute forKey:@"NSAccessibilitySelectedTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextAttribute with object " stringByAppendingString:[NSAccessibilitySelectedTextAttribute description]]);
if ([NSAccessibilitySelectedTextChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextChangedNotification forKey:@"NSAccessibilitySelectedTextChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextChangedNotification with object " stringByAppendingString:[NSAccessibilitySelectedTextChangedNotification description]]);
if ([NSAccessibilitySelectedTextRangeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextRangeAttribute forKey:@"NSAccessibilitySelectedTextRangeAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextRangeAttribute with object " stringByAppendingString:[NSAccessibilitySelectedTextRangeAttribute description]]);
if ([NSAccessibilitySelectedTextRangesAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySelectedTextRangesAttribute forKey:@"NSAccessibilitySelectedTextRangesAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySelectedTextRangesAttribute with object " stringByAppendingString:[NSAccessibilitySelectedTextRangesAttribute description]]);
if ([NSAccessibilityServesAsTitleForUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityServesAsTitleForUIElementsAttribute forKey:@"NSAccessibilityServesAsTitleForUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityServesAsTitleForUIElementsAttribute with object " stringByAppendingString:[NSAccessibilityServesAsTitleForUIElementsAttribute description]]);
if ([NSAccessibilityShadowTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityShadowTextAttribute forKey:@"NSAccessibilityShadowTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityShadowTextAttribute with object " stringByAppendingString:[NSAccessibilityShadowTextAttribute description]]);
if ([NSAccessibilitySharedCharacterRangeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySharedCharacterRangeAttribute forKey:@"NSAccessibilitySharedCharacterRangeAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySharedCharacterRangeAttribute with object " stringByAppendingString:[NSAccessibilitySharedCharacterRangeAttribute description]]);
if ([NSAccessibilitySharedTextUIElementsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySharedTextUIElementsAttribute forKey:@"NSAccessibilitySharedTextUIElementsAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySharedTextUIElementsAttribute with object " stringByAppendingString:[NSAccessibilitySharedTextUIElementsAttribute description]]);
if ([NSAccessibilitySheetCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySheetCreatedNotification forKey:@"NSAccessibilitySheetCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilitySheetCreatedNotification with object " stringByAppendingString:[NSAccessibilitySheetCreatedNotification description]]);
if ([NSAccessibilitySheetRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySheetRole forKey:@"NSAccessibilitySheetRole"]; else NSLog([@"Can't initialize NSAccessibilitySheetRole with object " stringByAppendingString:[NSAccessibilitySheetRole description]]);
if ([NSAccessibilityShowMenuAction isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityShowMenuAction forKey:@"NSAccessibilityShowMenuAction"]; else NSLog([@"Can't initialize NSAccessibilityShowMenuAction with object " stringByAppendingString:[NSAccessibilityShowMenuAction description]]);
if ([NSAccessibilityShownMenuAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityShownMenuAttribute forKey:@"NSAccessibilityShownMenuAttribute"]; else NSLog([@"Can't initialize NSAccessibilityShownMenuAttribute with object " stringByAppendingString:[NSAccessibilityShownMenuAttribute description]]);
if ([NSAccessibilitySizeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySizeAttribute forKey:@"NSAccessibilitySizeAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySizeAttribute with object " stringByAppendingString:[NSAccessibilitySizeAttribute description]]);
if ([NSAccessibilitySliderRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySliderRole forKey:@"NSAccessibilitySliderRole"]; else NSLog([@"Can't initialize NSAccessibilitySliderRole with object " stringByAppendingString:[NSAccessibilitySliderRole description]]);
if ([NSAccessibilitySortButtonRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySortButtonRole forKey:@"NSAccessibilitySortButtonRole"]; else NSLog([@"Can't initialize NSAccessibilitySortButtonRole with object " stringByAppendingString:[NSAccessibilitySortButtonRole description]]);
if ([NSAccessibilitySortDirectionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySortDirectionAttribute forKey:@"NSAccessibilitySortDirectionAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySortDirectionAttribute with object " stringByAppendingString:[NSAccessibilitySortDirectionAttribute description]]);
if ([NSAccessibilitySplitGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySplitGroupRole forKey:@"NSAccessibilitySplitGroupRole"]; else NSLog([@"Can't initialize NSAccessibilitySplitGroupRole with object " stringByAppendingString:[NSAccessibilitySplitGroupRole description]]);
if ([NSAccessibilitySplitterRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySplitterRole forKey:@"NSAccessibilitySplitterRole"]; else NSLog([@"Can't initialize NSAccessibilitySplitterRole with object " stringByAppendingString:[NSAccessibilitySplitterRole description]]);
if ([NSAccessibilitySplittersAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySplittersAttribute forKey:@"NSAccessibilitySplittersAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySplittersAttribute with object " stringByAppendingString:[NSAccessibilitySplittersAttribute description]]);
if ([NSAccessibilityStandardWindowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStandardWindowSubrole forKey:@"NSAccessibilityStandardWindowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityStandardWindowSubrole with object " stringByAppendingString:[NSAccessibilityStandardWindowSubrole description]]);
if ([NSAccessibilityStaticTextRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStaticTextRole forKey:@"NSAccessibilityStaticTextRole"]; else NSLog([@"Can't initialize NSAccessibilityStaticTextRole with object " stringByAppendingString:[NSAccessibilityStaticTextRole description]]);
if ([NSAccessibilityStrikethroughColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStrikethroughColorTextAttribute forKey:@"NSAccessibilityStrikethroughColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStrikethroughColorTextAttribute with object " stringByAppendingString:[NSAccessibilityStrikethroughColorTextAttribute description]]);
if ([NSAccessibilityStrikethroughTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStrikethroughTextAttribute forKey:@"NSAccessibilityStrikethroughTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStrikethroughTextAttribute with object " stringByAppendingString:[NSAccessibilityStrikethroughTextAttribute description]]);
if ([NSAccessibilityStringForRangeParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStringForRangeParameterizedAttribute forKey:@"NSAccessibilityStringForRangeParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStringForRangeParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityStringForRangeParameterizedAttribute description]]);
if ([NSAccessibilityStyleRangeForIndexParameterizedAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityStyleRangeForIndexParameterizedAttribute forKey:@"NSAccessibilityStyleRangeForIndexParameterizedAttribute"]; else NSLog([@"Can't initialize NSAccessibilityStyleRangeForIndexParameterizedAttribute with object " stringByAppendingString:[NSAccessibilityStyleRangeForIndexParameterizedAttribute description]]);
if ([NSAccessibilitySubroleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySubroleAttribute forKey:@"NSAccessibilitySubroleAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySubroleAttribute with object " stringByAppendingString:[NSAccessibilitySubroleAttribute description]]);
if ([NSAccessibilitySuperscriptTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySuperscriptTextAttribute forKey:@"NSAccessibilitySuperscriptTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilitySuperscriptTextAttribute with object " stringByAppendingString:[NSAccessibilitySuperscriptTextAttribute description]]);
if ([NSAccessibilitySystemDialogSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySystemDialogSubrole forKey:@"NSAccessibilitySystemDialogSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySystemDialogSubrole with object " stringByAppendingString:[NSAccessibilitySystemDialogSubrole description]]);
if ([NSAccessibilitySystemFloatingWindowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySystemFloatingWindowSubrole forKey:@"NSAccessibilitySystemFloatingWindowSubrole"]; else NSLog([@"Can't initialize NSAccessibilitySystemFloatingWindowSubrole with object " stringByAppendingString:[NSAccessibilitySystemFloatingWindowSubrole description]]);
if ([NSAccessibilitySystemWideRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilitySystemWideRole forKey:@"NSAccessibilitySystemWideRole"]; else NSLog([@"Can't initialize NSAccessibilitySystemWideRole with object " stringByAppendingString:[NSAccessibilitySystemWideRole description]]);
if ([NSAccessibilityTabGroupRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTabGroupRole forKey:@"NSAccessibilityTabGroupRole"]; else NSLog([@"Can't initialize NSAccessibilityTabGroupRole with object " stringByAppendingString:[NSAccessibilityTabGroupRole description]]);
if ([NSAccessibilityTableRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTableRole forKey:@"NSAccessibilityTableRole"]; else NSLog([@"Can't initialize NSAccessibilityTableRole with object " stringByAppendingString:[NSAccessibilityTableRole description]]);
if ([NSAccessibilityTableRowSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTableRowSubrole forKey:@"NSAccessibilityTableRowSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTableRowSubrole with object " stringByAppendingString:[NSAccessibilityTableRowSubrole description]]);
if ([NSAccessibilityTabsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTabsAttribute forKey:@"NSAccessibilityTabsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTabsAttribute with object " stringByAppendingString:[NSAccessibilityTabsAttribute description]]);
if ([NSAccessibilityTailIndentMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTailIndentMarkerTypeValue forKey:@"NSAccessibilityTailIndentMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityTailIndentMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityTailIndentMarkerTypeValue description]]);
if ([NSAccessibilityTextAreaRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextAreaRole forKey:@"NSAccessibilityTextAreaRole"]; else NSLog([@"Can't initialize NSAccessibilityTextAreaRole with object " stringByAppendingString:[NSAccessibilityTextAreaRole description]]);
if ([NSAccessibilityTextAttachmentSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextAttachmentSubrole forKey:@"NSAccessibilityTextAttachmentSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTextAttachmentSubrole with object " stringByAppendingString:[NSAccessibilityTextAttachmentSubrole description]]);
if ([NSAccessibilityTextFieldRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextFieldRole forKey:@"NSAccessibilityTextFieldRole"]; else NSLog([@"Can't initialize NSAccessibilityTextFieldRole with object " stringByAppendingString:[NSAccessibilityTextFieldRole description]]);
if ([NSAccessibilityTextLinkSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTextLinkSubrole forKey:@"NSAccessibilityTextLinkSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTextLinkSubrole with object " stringByAppendingString:[NSAccessibilityTextLinkSubrole description]]);
if ([NSAccessibilityTimelineSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTimelineSubrole forKey:@"NSAccessibilityTimelineSubrole"]; else NSLog([@"Can't initialize NSAccessibilityTimelineSubrole with object " stringByAppendingString:[NSAccessibilityTimelineSubrole description]]);
if ([NSAccessibilityTitleAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTitleAttribute forKey:@"NSAccessibilityTitleAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTitleAttribute with object " stringByAppendingString:[NSAccessibilityTitleAttribute description]]);
if ([NSAccessibilityTitleChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTitleChangedNotification forKey:@"NSAccessibilityTitleChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityTitleChangedNotification with object " stringByAppendingString:[NSAccessibilityTitleChangedNotification description]]);
if ([NSAccessibilityTitleUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTitleUIElementAttribute forKey:@"NSAccessibilityTitleUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTitleUIElementAttribute with object " stringByAppendingString:[NSAccessibilityTitleUIElementAttribute description]]);
if ([NSAccessibilityToolbarButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityToolbarButtonAttribute forKey:@"NSAccessibilityToolbarButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityToolbarButtonAttribute with object " stringByAppendingString:[NSAccessibilityToolbarButtonAttribute description]]);
if ([NSAccessibilityToolbarButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityToolbarButtonSubrole forKey:@"NSAccessibilityToolbarButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityToolbarButtonSubrole with object " stringByAppendingString:[NSAccessibilityToolbarButtonSubrole description]]);
if ([NSAccessibilityToolbarRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityToolbarRole forKey:@"NSAccessibilityToolbarRole"]; else NSLog([@"Can't initialize NSAccessibilityToolbarRole with object " stringByAppendingString:[NSAccessibilityToolbarRole description]]);
if ([NSAccessibilityTopLevelUIElementAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityTopLevelUIElementAttribute forKey:@"NSAccessibilityTopLevelUIElementAttribute"]; else NSLog([@"Can't initialize NSAccessibilityTopLevelUIElementAttribute with object " stringByAppendingString:[NSAccessibilityTopLevelUIElementAttribute description]]);
if ([NSAccessibilityUIElementDestroyedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUIElementDestroyedNotification forKey:@"NSAccessibilityUIElementDestroyedNotification"]; else NSLog([@"Can't initialize NSAccessibilityUIElementDestroyedNotification with object " stringByAppendingString:[NSAccessibilityUIElementDestroyedNotification description]]);
if ([NSAccessibilityURLAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityURLAttribute forKey:@"NSAccessibilityURLAttribute"]; else NSLog([@"Can't initialize NSAccessibilityURLAttribute with object " stringByAppendingString:[NSAccessibilityURLAttribute description]]);
if ([NSAccessibilityUnderlineColorTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnderlineColorTextAttribute forKey:@"NSAccessibilityUnderlineColorTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnderlineColorTextAttribute with object " stringByAppendingString:[NSAccessibilityUnderlineColorTextAttribute description]]);
if ([NSAccessibilityUnderlineTextAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnderlineTextAttribute forKey:@"NSAccessibilityUnderlineTextAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnderlineTextAttribute with object " stringByAppendingString:[NSAccessibilityUnderlineTextAttribute description]]);
if ([NSAccessibilityUnitDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnitDescriptionAttribute forKey:@"NSAccessibilityUnitDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnitDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityUnitDescriptionAttribute description]]);
if ([NSAccessibilityUnitsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnitsAttribute forKey:@"NSAccessibilityUnitsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityUnitsAttribute with object " stringByAppendingString:[NSAccessibilityUnitsAttribute description]]);
if ([NSAccessibilityUnknownMarkerTypeValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownMarkerTypeValue forKey:@"NSAccessibilityUnknownMarkerTypeValue"]; else NSLog([@"Can't initialize NSAccessibilityUnknownMarkerTypeValue with object " stringByAppendingString:[NSAccessibilityUnknownMarkerTypeValue description]]);
if ([NSAccessibilityUnknownRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownRole forKey:@"NSAccessibilityUnknownRole"]; else NSLog([@"Can't initialize NSAccessibilityUnknownRole with object " stringByAppendingString:[NSAccessibilityUnknownRole description]]);
if ([NSAccessibilityUnknownSortDirectionValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownSortDirectionValue forKey:@"NSAccessibilityUnknownSortDirectionValue"]; else NSLog([@"Can't initialize NSAccessibilityUnknownSortDirectionValue with object " stringByAppendingString:[NSAccessibilityUnknownSortDirectionValue description]]);
if ([NSAccessibilityUnknownSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownSubrole forKey:@"NSAccessibilityUnknownSubrole"]; else NSLog([@"Can't initialize NSAccessibilityUnknownSubrole with object " stringByAppendingString:[NSAccessibilityUnknownSubrole description]]);
if ([NSAccessibilityUnknownUnitValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityUnknownUnitValue forKey:@"NSAccessibilityUnknownUnitValue"]; else NSLog([@"Can't initialize NSAccessibilityUnknownUnitValue with object " stringByAppendingString:[NSAccessibilityUnknownUnitValue description]]);
if ([NSAccessibilityValueAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueAttribute forKey:@"NSAccessibilityValueAttribute"]; else NSLog([@"Can't initialize NSAccessibilityValueAttribute with object " stringByAppendingString:[NSAccessibilityValueAttribute description]]);
if ([NSAccessibilityValueChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueChangedNotification forKey:@"NSAccessibilityValueChangedNotification"]; else NSLog([@"Can't initialize NSAccessibilityValueChangedNotification with object " stringByAppendingString:[NSAccessibilityValueChangedNotification description]]);
if ([NSAccessibilityValueDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueDescriptionAttribute forKey:@"NSAccessibilityValueDescriptionAttribute"]; else NSLog([@"Can't initialize NSAccessibilityValueDescriptionAttribute with object " stringByAppendingString:[NSAccessibilityValueDescriptionAttribute description]]);
if ([NSAccessibilityValueIndicatorRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityValueIndicatorRole forKey:@"NSAccessibilityValueIndicatorRole"]; else NSLog([@"Can't initialize NSAccessibilityValueIndicatorRole with object " stringByAppendingString:[NSAccessibilityValueIndicatorRole description]]);
if ([NSAccessibilityVerticalOrientationValue isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVerticalOrientationValue forKey:@"NSAccessibilityVerticalOrientationValue"]; else NSLog([@"Can't initialize NSAccessibilityVerticalOrientationValue with object " stringByAppendingString:[NSAccessibilityVerticalOrientationValue description]]);
if ([NSAccessibilityVerticalScrollBarAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVerticalScrollBarAttribute forKey:@"NSAccessibilityVerticalScrollBarAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVerticalScrollBarAttribute with object " stringByAppendingString:[NSAccessibilityVerticalScrollBarAttribute description]]);
if ([NSAccessibilityVisibleCharacterRangeAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleCharacterRangeAttribute forKey:@"NSAccessibilityVisibleCharacterRangeAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleCharacterRangeAttribute with object " stringByAppendingString:[NSAccessibilityVisibleCharacterRangeAttribute description]]);
if ([NSAccessibilityVisibleChildrenAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleChildrenAttribute forKey:@"NSAccessibilityVisibleChildrenAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleChildrenAttribute with object " stringByAppendingString:[NSAccessibilityVisibleChildrenAttribute description]]);
if ([NSAccessibilityVisibleColumnsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleColumnsAttribute forKey:@"NSAccessibilityVisibleColumnsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleColumnsAttribute with object " stringByAppendingString:[NSAccessibilityVisibleColumnsAttribute description]]);
if ([NSAccessibilityVisibleNameKey isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleNameKey forKey:@"NSAccessibilityVisibleNameKey"]; else NSLog([@"Can't initialize NSAccessibilityVisibleNameKey with object " stringByAppendingString:[NSAccessibilityVisibleNameKey description]]);
if ([NSAccessibilityVisibleRowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityVisibleRowsAttribute forKey:@"NSAccessibilityVisibleRowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityVisibleRowsAttribute with object " stringByAppendingString:[NSAccessibilityVisibleRowsAttribute description]]);
if ([NSAccessibilityWindowAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowAttribute forKey:@"NSAccessibilityWindowAttribute"]; else NSLog([@"Can't initialize NSAccessibilityWindowAttribute with object " stringByAppendingString:[NSAccessibilityWindowAttribute description]]);
if ([NSAccessibilityWindowCreatedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowCreatedNotification forKey:@"NSAccessibilityWindowCreatedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowCreatedNotification with object " stringByAppendingString:[NSAccessibilityWindowCreatedNotification description]]);
if ([NSAccessibilityWindowDeminiaturizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowDeminiaturizedNotification forKey:@"NSAccessibilityWindowDeminiaturizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowDeminiaturizedNotification with object " stringByAppendingString:[NSAccessibilityWindowDeminiaturizedNotification description]]);
if ([NSAccessibilityWindowMiniaturizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowMiniaturizedNotification forKey:@"NSAccessibilityWindowMiniaturizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowMiniaturizedNotification with object " stringByAppendingString:[NSAccessibilityWindowMiniaturizedNotification description]]);
if ([NSAccessibilityWindowMovedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowMovedNotification forKey:@"NSAccessibilityWindowMovedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowMovedNotification with object " stringByAppendingString:[NSAccessibilityWindowMovedNotification description]]);
if ([NSAccessibilityWindowResizedNotification isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowResizedNotification forKey:@"NSAccessibilityWindowResizedNotification"]; else NSLog([@"Can't initialize NSAccessibilityWindowResizedNotification with object " stringByAppendingString:[NSAccessibilityWindowResizedNotification description]]);
if ([NSAccessibilityWindowRole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowRole forKey:@"NSAccessibilityWindowRole"]; else NSLog([@"Can't initialize NSAccessibilityWindowRole with object " stringByAppendingString:[NSAccessibilityWindowRole description]]);
if ([NSAccessibilityWindowsAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityWindowsAttribute forKey:@"NSAccessibilityWindowsAttribute"]; else NSLog([@"Can't initialize NSAccessibilityWindowsAttribute with object " stringByAppendingString:[NSAccessibilityWindowsAttribute description]]);
if ([NSAccessibilityZoomButtonAttribute isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityZoomButtonAttribute forKey:@"NSAccessibilityZoomButtonAttribute"]; else NSLog([@"Can't initialize NSAccessibilityZoomButtonAttribute with object " stringByAppendingString:[NSAccessibilityZoomButtonAttribute description]]);
if ([NSAccessibilityZoomButtonSubrole isKindOfClass:[NSString class]]) [d setObject:NSAccessibilityZoomButtonSubrole forKey:@"NSAccessibilityZoomButtonSubrole"]; else NSLog([@"Can't initialize NSAccessibilityZoomButtonSubrole with object " stringByAppendingString:[NSAccessibilityZoomButtonSubrole description]]);
if ([NSAlignmentBinding isKindOfClass:[NSString class]]) [d setObject:NSAlignmentBinding forKey:@"NSAlignmentBinding"]; else NSLog([@"Can't initialize NSAlignmentBinding with object " stringByAppendingString:[NSAlignmentBinding description]]);
if ([NSAllRomanInputSourcesLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSAllRomanInputSourcesLocaleIdentifier forKey:@"NSAllRomanInputSourcesLocaleIdentifier"]; else NSLog([@"Can't initialize NSAllRomanInputSourcesLocaleIdentifier with object " stringByAppendingString:[NSAllRomanInputSourcesLocaleIdentifier description]]);
if ([NSAllowsEditingMultipleValuesSelectionBindingOption isKindOfClass:[NSString class]]) [d setObject:NSAllowsEditingMultipleValuesSelectionBindingOption forKey:@"NSAllowsEditingMultipleValuesSelectionBindingOption"]; else NSLog([@"Can't initialize NSAllowsEditingMultipleValuesSelectionBindingOption with object " stringByAppendingString:[NSAllowsEditingMultipleValuesSelectionBindingOption description]]);
if ([NSAllowsNullArgumentBindingOption isKindOfClass:[NSString class]]) [d setObject:NSAllowsNullArgumentBindingOption forKey:@"NSAllowsNullArgumentBindingOption"]; else NSLog([@"Can't initialize NSAllowsNullArgumentBindingOption with object " stringByAppendingString:[NSAllowsNullArgumentBindingOption description]]);
if ([NSAlternateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSAlternateImageBinding forKey:@"NSAlternateImageBinding"]; else NSLog([@"Can't initialize NSAlternateImageBinding with object " stringByAppendingString:[NSAlternateImageBinding description]]);
if ([NSAlternateTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSAlternateTitleBinding forKey:@"NSAlternateTitleBinding"]; else NSLog([@"Can't initialize NSAlternateTitleBinding with object " stringByAppendingString:[NSAlternateTitleBinding description]]);
if ([NSAlwaysPresentsApplicationModalAlertsBindingOption isKindOfClass:[NSString class]]) [d setObject:NSAlwaysPresentsApplicationModalAlertsBindingOption forKey:@"NSAlwaysPresentsApplicationModalAlertsBindingOption"]; else NSLog([@"Can't initialize NSAlwaysPresentsApplicationModalAlertsBindingOption with object " stringByAppendingString:[NSAlwaysPresentsApplicationModalAlertsBindingOption description]]);
if ([NSAnimateBinding isKindOfClass:[NSString class]]) [d setObject:NSAnimateBinding forKey:@"NSAnimateBinding"]; else NSLog([@"Can't initialize NSAnimateBinding with object " stringByAppendingString:[NSAnimateBinding description]]);
if ([NSAnimationDelayBinding isKindOfClass:[NSString class]]) [d setObject:NSAnimationDelayBinding forKey:@"NSAnimationDelayBinding"]; else NSLog([@"Can't initialize NSAnimationDelayBinding with object " stringByAppendingString:[NSAnimationDelayBinding description]]);
if ([NSAnimationProgressMark isKindOfClass:[NSString class]]) [d setObject:NSAnimationProgressMark forKey:@"NSAnimationProgressMark"]; else NSLog([@"Can't initialize NSAnimationProgressMark with object " stringByAppendingString:[NSAnimationProgressMark description]]);
if ([NSAnimationProgressMarkNotification isKindOfClass:[NSString class]]) [d setObject:NSAnimationProgressMarkNotification forKey:@"NSAnimationProgressMarkNotification"]; else NSLog([@"Can't initialize NSAnimationProgressMarkNotification with object " stringByAppendingString:[NSAnimationProgressMarkNotification description]]);
if ([NSAnimationTriggerOrderIn isKindOfClass:[NSString class]]) [d setObject:NSAnimationTriggerOrderIn forKey:@"NSAnimationTriggerOrderIn"]; else NSLog([@"Can't initialize NSAnimationTriggerOrderIn with object " stringByAppendingString:[NSAnimationTriggerOrderIn description]]);
if ([NSAnimationTriggerOrderOut isKindOfClass:[NSString class]]) [d setObject:NSAnimationTriggerOrderOut forKey:@"NSAnimationTriggerOrderOut"]; else NSLog([@"Can't initialize NSAnimationTriggerOrderOut with object " stringByAppendingString:[NSAnimationTriggerOrderOut description]]);
if ([NSAntialiasThresholdChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSAntialiasThresholdChangedNotification forKey:@"NSAntialiasThresholdChangedNotification"]; else NSLog([@"Can't initialize NSAntialiasThresholdChangedNotification with object " stringByAppendingString:[NSAntialiasThresholdChangedNotification description]]);
if ([NSApp isKindOfClass:[NSString class]]) [d setObject:NSApp forKey:@"NSApp"]; else NSLog([@"Can't initialize NSApp with object " stringByAppendingString:[NSApp description]]);
if ([NSAppKitIgnoredException isKindOfClass:[NSString class]]) [d setObject:NSAppKitIgnoredException forKey:@"NSAppKitIgnoredException"]; else NSLog([@"Can't initialize NSAppKitIgnoredException with object " stringByAppendingString:[NSAppKitIgnoredException description]]);
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber] forKey:@"NSAppKitVersionNumber"];
if ([NSAppKitVirtualMemoryException isKindOfClass:[NSString class]]) [d setObject:NSAppKitVirtualMemoryException forKey:@"NSAppKitVirtualMemoryException"]; else NSLog([@"Can't initialize NSAppKitVirtualMemoryException with object " stringByAppendingString:[NSAppKitVirtualMemoryException description]]);
if ([NSApplicationDidBecomeActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidBecomeActiveNotification forKey:@"NSApplicationDidBecomeActiveNotification"]; else NSLog([@"Can't initialize NSApplicationDidBecomeActiveNotification with object " stringByAppendingString:[NSApplicationDidBecomeActiveNotification description]]);
if ([NSApplicationDidChangeScreenParametersNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidChangeScreenParametersNotification forKey:@"NSApplicationDidChangeScreenParametersNotification"]; else NSLog([@"Can't initialize NSApplicationDidChangeScreenParametersNotification with object " stringByAppendingString:[NSApplicationDidChangeScreenParametersNotification description]]);
if ([NSApplicationDidFinishLaunchingNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidFinishLaunchingNotification forKey:@"NSApplicationDidFinishLaunchingNotification"]; else NSLog([@"Can't initialize NSApplicationDidFinishLaunchingNotification with object " stringByAppendingString:[NSApplicationDidFinishLaunchingNotification description]]);
if ([NSApplicationDidHideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidHideNotification forKey:@"NSApplicationDidHideNotification"]; else NSLog([@"Can't initialize NSApplicationDidHideNotification with object " stringByAppendingString:[NSApplicationDidHideNotification description]]);
if ([NSApplicationDidResignActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidResignActiveNotification forKey:@"NSApplicationDidResignActiveNotification"]; else NSLog([@"Can't initialize NSApplicationDidResignActiveNotification with object " stringByAppendingString:[NSApplicationDidResignActiveNotification description]]);
if ([NSApplicationDidUnhideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidUnhideNotification forKey:@"NSApplicationDidUnhideNotification"]; else NSLog([@"Can't initialize NSApplicationDidUnhideNotification with object " stringByAppendingString:[NSApplicationDidUnhideNotification description]]);
if ([NSApplicationDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationDidUpdateNotification forKey:@"NSApplicationDidUpdateNotification"]; else NSLog([@"Can't initialize NSApplicationDidUpdateNotification with object " stringByAppendingString:[NSApplicationDidUpdateNotification description]]);
if ([NSApplicationFileType isKindOfClass:[NSString class]]) [d setObject:NSApplicationFileType forKey:@"NSApplicationFileType"]; else NSLog([@"Can't initialize NSApplicationFileType with object " stringByAppendingString:[NSApplicationFileType description]]);
if ([NSApplicationWillBecomeActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillBecomeActiveNotification forKey:@"NSApplicationWillBecomeActiveNotification"]; else NSLog([@"Can't initialize NSApplicationWillBecomeActiveNotification with object " stringByAppendingString:[NSApplicationWillBecomeActiveNotification description]]);
if ([NSApplicationWillFinishLaunchingNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillFinishLaunchingNotification forKey:@"NSApplicationWillFinishLaunchingNotification"]; else NSLog([@"Can't initialize NSApplicationWillFinishLaunchingNotification with object " stringByAppendingString:[NSApplicationWillFinishLaunchingNotification description]]);
if ([NSApplicationWillHideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillHideNotification forKey:@"NSApplicationWillHideNotification"]; else NSLog([@"Can't initialize NSApplicationWillHideNotification with object " stringByAppendingString:[NSApplicationWillHideNotification description]]);
if ([NSApplicationWillResignActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillResignActiveNotification forKey:@"NSApplicationWillResignActiveNotification"]; else NSLog([@"Can't initialize NSApplicationWillResignActiveNotification with object " stringByAppendingString:[NSApplicationWillResignActiveNotification description]]);
if ([NSApplicationWillTerminateNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillTerminateNotification forKey:@"NSApplicationWillTerminateNotification"]; else NSLog([@"Can't initialize NSApplicationWillTerminateNotification with object " stringByAppendingString:[NSApplicationWillTerminateNotification description]]);
if ([NSApplicationWillUnhideNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillUnhideNotification forKey:@"NSApplicationWillUnhideNotification"]; else NSLog([@"Can't initialize NSApplicationWillUnhideNotification with object " stringByAppendingString:[NSApplicationWillUnhideNotification description]]);
if ([NSApplicationWillUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSApplicationWillUpdateNotification forKey:@"NSApplicationWillUpdateNotification"]; else NSLog([@"Can't initialize NSApplicationWillUpdateNotification with object " stringByAppendingString:[NSApplicationWillUpdateNotification description]]);
if ([NSArgumentBinding isKindOfClass:[NSString class]]) [d setObject:NSArgumentBinding forKey:@"NSArgumentBinding"]; else NSLog([@"Can't initialize NSArgumentBinding with object " stringByAppendingString:[NSArgumentBinding description]]);
if ([NSAttachmentAttributeName isKindOfClass:[NSString class]]) [d setObject:NSAttachmentAttributeName forKey:@"NSAttachmentAttributeName"]; else NSLog([@"Can't initialize NSAttachmentAttributeName with object " stringByAppendingString:[NSAttachmentAttributeName description]]);
if ([NSAttributedStringBinding isKindOfClass:[NSString class]]) [d setObject:NSAttributedStringBinding forKey:@"NSAttributedStringBinding"]; else NSLog([@"Can't initialize NSAttributedStringBinding with object " stringByAppendingString:[NSAttributedStringBinding description]]);
if ([NSAuthorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSAuthorDocumentAttribute forKey:@"NSAuthorDocumentAttribute"]; else NSLog([@"Can't initialize NSAuthorDocumentAttribute with object " stringByAppendingString:[NSAuthorDocumentAttribute description]]);
if ([NSBackgroundColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSBackgroundColorAttributeName forKey:@"NSBackgroundColorAttributeName"]; else NSLog([@"Can't initialize NSBackgroundColorAttributeName with object " stringByAppendingString:[NSBackgroundColorAttributeName description]]);
if ([NSBackgroundColorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSBackgroundColorDocumentAttribute forKey:@"NSBackgroundColorDocumentAttribute"]; else NSLog([@"Can't initialize NSBackgroundColorDocumentAttribute with object " stringByAppendingString:[NSBackgroundColorDocumentAttribute description]]);
if ([NSBadBitmapParametersException isKindOfClass:[NSString class]]) [d setObject:NSBadBitmapParametersException forKey:@"NSBadBitmapParametersException"]; else NSLog([@"Can't initialize NSBadBitmapParametersException with object " stringByAppendingString:[NSBadBitmapParametersException description]]);
if ([NSBadComparisonException isKindOfClass:[NSString class]]) [d setObject:NSBadComparisonException forKey:@"NSBadComparisonException"]; else NSLog([@"Can't initialize NSBadComparisonException with object " stringByAppendingString:[NSBadComparisonException description]]);
if ([NSBadRTFColorTableException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFColorTableException forKey:@"NSBadRTFColorTableException"]; else NSLog([@"Can't initialize NSBadRTFColorTableException with object " stringByAppendingString:[NSBadRTFColorTableException description]]);
if ([NSBadRTFDirectiveException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFDirectiveException forKey:@"NSBadRTFDirectiveException"]; else NSLog([@"Can't initialize NSBadRTFDirectiveException with object " stringByAppendingString:[NSBadRTFDirectiveException description]]);
if ([NSBadRTFFontTableException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFFontTableException forKey:@"NSBadRTFFontTableException"]; else NSLog([@"Can't initialize NSBadRTFFontTableException with object " stringByAppendingString:[NSBadRTFFontTableException description]]);
if ([NSBadRTFStyleSheetException isKindOfClass:[NSString class]]) [d setObject:NSBadRTFStyleSheetException forKey:@"NSBadRTFStyleSheetException"]; else NSLog([@"Can't initialize NSBadRTFStyleSheetException with object " stringByAppendingString:[NSBadRTFStyleSheetException description]]);
if ([NSBaseURLDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSBaseURLDocumentOption forKey:@"NSBaseURLDocumentOption"]; else NSLog([@"Can't initialize NSBaseURLDocumentOption with object " stringByAppendingString:[NSBaseURLDocumentOption description]]);
if ([NSBaselineOffsetAttributeName isKindOfClass:[NSString class]]) [d setObject:NSBaselineOffsetAttributeName forKey:@"NSBaselineOffsetAttributeName"]; else NSLog([@"Can't initialize NSBaselineOffsetAttributeName with object " stringByAppendingString:[NSBaselineOffsetAttributeName description]]);
if ([NSBottomMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSBottomMarginDocumentAttribute forKey:@"NSBottomMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSBottomMarginDocumentAttribute with object " stringByAppendingString:[NSBottomMarginDocumentAttribute description]]);
if ([NSBrowserColumnConfigurationDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSBrowserColumnConfigurationDidChangeNotification forKey:@"NSBrowserColumnConfigurationDidChangeNotification"]; else NSLog([@"Can't initialize NSBrowserColumnConfigurationDidChangeNotification with object " stringByAppendingString:[NSBrowserColumnConfigurationDidChangeNotification description]]);
if ([NSBrowserIllegalDelegateException isKindOfClass:[NSString class]]) [d setObject:NSBrowserIllegalDelegateException forKey:@"NSBrowserIllegalDelegateException"]; else NSLog([@"Can't initialize NSBrowserIllegalDelegateException with object " stringByAppendingString:[NSBrowserIllegalDelegateException description]]);
if ([NSCalibratedBlackColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCalibratedBlackColorSpace forKey:@"NSCalibratedBlackColorSpace"]; else NSLog([@"Can't initialize NSCalibratedBlackColorSpace with object " stringByAppendingString:[NSCalibratedBlackColorSpace description]]);
if ([NSCalibratedRGBColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCalibratedRGBColorSpace forKey:@"NSCalibratedRGBColorSpace"]; else NSLog([@"Can't initialize NSCalibratedRGBColorSpace with object " stringByAppendingString:[NSCalibratedRGBColorSpace description]]);
if ([NSCalibratedWhiteColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCalibratedWhiteColorSpace forKey:@"NSCalibratedWhiteColorSpace"]; else NSLog([@"Can't initialize NSCalibratedWhiteColorSpace with object " stringByAppendingString:[NSCalibratedWhiteColorSpace description]]);
if ([NSCharacterEncodingDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCharacterEncodingDocumentAttribute forKey:@"NSCharacterEncodingDocumentAttribute"]; else NSLog([@"Can't initialize NSCharacterEncodingDocumentAttribute with object " stringByAppendingString:[NSCharacterEncodingDocumentAttribute description]]);
if ([NSCharacterEncodingDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSCharacterEncodingDocumentOption forKey:@"NSCharacterEncodingDocumentOption"]; else NSLog([@"Can't initialize NSCharacterEncodingDocumentOption with object " stringByAppendingString:[NSCharacterEncodingDocumentOption description]]);
if ([NSCharacterShapeAttributeName isKindOfClass:[NSString class]]) [d setObject:NSCharacterShapeAttributeName forKey:@"NSCharacterShapeAttributeName"]; else NSLog([@"Can't initialize NSCharacterShapeAttributeName with object " stringByAppendingString:[NSCharacterShapeAttributeName description]]);
if ([NSCocoaVersionDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCocoaVersionDocumentAttribute forKey:@"NSCocoaVersionDocumentAttribute"]; else NSLog([@"Can't initialize NSCocoaVersionDocumentAttribute with object " stringByAppendingString:[NSCocoaVersionDocumentAttribute description]]);
if ([NSColorListDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSColorListDidChangeNotification forKey:@"NSColorListDidChangeNotification"]; else NSLog([@"Can't initialize NSColorListDidChangeNotification with object " stringByAppendingString:[NSColorListDidChangeNotification description]]);
if ([NSColorListIOException isKindOfClass:[NSString class]]) [d setObject:NSColorListIOException forKey:@"NSColorListIOException"]; else NSLog([@"Can't initialize NSColorListIOException with object " stringByAppendingString:[NSColorListIOException description]]);
if ([NSColorListNotEditableException isKindOfClass:[NSString class]]) [d setObject:NSColorListNotEditableException forKey:@"NSColorListNotEditableException"]; else NSLog([@"Can't initialize NSColorListNotEditableException with object " stringByAppendingString:[NSColorListNotEditableException description]]);
if ([NSColorPanelColorDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSColorPanelColorDidChangeNotification forKey:@"NSColorPanelColorDidChangeNotification"]; else NSLog([@"Can't initialize NSColorPanelColorDidChangeNotification with object " stringByAppendingString:[NSColorPanelColorDidChangeNotification description]]);
if ([NSColorPboardType isKindOfClass:[NSString class]]) [d setObject:NSColorPboardType forKey:@"NSColorPboardType"]; else NSLog([@"Can't initialize NSColorPboardType with object " stringByAppendingString:[NSColorPboardType description]]);
if ([NSComboBoxSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxSelectionDidChangeNotification forKey:@"NSComboBoxSelectionDidChangeNotification"]; else NSLog([@"Can't initialize NSComboBoxSelectionDidChangeNotification with object " stringByAppendingString:[NSComboBoxSelectionDidChangeNotification description]]);
if ([NSComboBoxSelectionIsChangingNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxSelectionIsChangingNotification forKey:@"NSComboBoxSelectionIsChangingNotification"]; else NSLog([@"Can't initialize NSComboBoxSelectionIsChangingNotification with object " stringByAppendingString:[NSComboBoxSelectionIsChangingNotification description]]);
if ([NSComboBoxWillDismissNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxWillDismissNotification forKey:@"NSComboBoxWillDismissNotification"]; else NSLog([@"Can't initialize NSComboBoxWillDismissNotification with object " stringByAppendingString:[NSComboBoxWillDismissNotification description]]);
if ([NSComboBoxWillPopUpNotification isKindOfClass:[NSString class]]) [d setObject:NSComboBoxWillPopUpNotification forKey:@"NSComboBoxWillPopUpNotification"]; else NSLog([@"Can't initialize NSComboBoxWillPopUpNotification with object " stringByAppendingString:[NSComboBoxWillPopUpNotification description]]);
if ([NSCommentDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCommentDocumentAttribute forKey:@"NSCommentDocumentAttribute"]; else NSLog([@"Can't initialize NSCommentDocumentAttribute with object " stringByAppendingString:[NSCommentDocumentAttribute description]]);
if ([NSCompanyDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCompanyDocumentAttribute forKey:@"NSCompanyDocumentAttribute"]; else NSLog([@"Can't initialize NSCompanyDocumentAttribute with object " stringByAppendingString:[NSCompanyDocumentAttribute description]]);
if ([NSConditionallySetsEditableBindingOption isKindOfClass:[NSString class]]) [d setObject:NSConditionallySetsEditableBindingOption forKey:@"NSConditionallySetsEditableBindingOption"]; else NSLog([@"Can't initialize NSConditionallySetsEditableBindingOption with object " stringByAppendingString:[NSConditionallySetsEditableBindingOption description]]);
if ([NSConditionallySetsEnabledBindingOption isKindOfClass:[NSString class]]) [d setObject:NSConditionallySetsEnabledBindingOption forKey:@"NSConditionallySetsEnabledBindingOption"]; else NSLog([@"Can't initialize NSConditionallySetsEnabledBindingOption with object " stringByAppendingString:[NSConditionallySetsEnabledBindingOption description]]);
if ([NSConditionallySetsHiddenBindingOption isKindOfClass:[NSString class]]) [d setObject:NSConditionallySetsHiddenBindingOption forKey:@"NSConditionallySetsHiddenBindingOption"]; else NSLog([@"Can't initialize NSConditionallySetsHiddenBindingOption with object " stringByAppendingString:[NSConditionallySetsHiddenBindingOption description]]);
if ([NSContentArrayBinding isKindOfClass:[NSString class]]) [d setObject:NSContentArrayBinding forKey:@"NSContentArrayBinding"]; else NSLog([@"Can't initialize NSContentArrayBinding with object " stringByAppendingString:[NSContentArrayBinding description]]);
if ([NSContentArrayForMultipleSelectionBinding isKindOfClass:[NSString class]]) [d setObject:NSContentArrayForMultipleSelectionBinding forKey:@"NSContentArrayForMultipleSelectionBinding"]; else NSLog([@"Can't initialize NSContentArrayForMultipleSelectionBinding with object " stringByAppendingString:[NSContentArrayForMultipleSelectionBinding description]]);
if ([NSContentBinding isKindOfClass:[NSString class]]) [d setObject:NSContentBinding forKey:@"NSContentBinding"]; else NSLog([@"Can't initialize NSContentBinding with object " stringByAppendingString:[NSContentBinding description]]);
if ([NSContentDictionaryBinding isKindOfClass:[NSString class]]) [d setObject:NSContentDictionaryBinding forKey:@"NSContentDictionaryBinding"]; else NSLog([@"Can't initialize NSContentDictionaryBinding with object " stringByAppendingString:[NSContentDictionaryBinding description]]);
if ([NSContentHeightBinding isKindOfClass:[NSString class]]) [d setObject:NSContentHeightBinding forKey:@"NSContentHeightBinding"]; else NSLog([@"Can't initialize NSContentHeightBinding with object " stringByAppendingString:[NSContentHeightBinding description]]);
if ([NSContentObjectBinding isKindOfClass:[NSString class]]) [d setObject:NSContentObjectBinding forKey:@"NSContentObjectBinding"]; else NSLog([@"Can't initialize NSContentObjectBinding with object " stringByAppendingString:[NSContentObjectBinding description]]);
if ([NSContentObjectsBinding isKindOfClass:[NSString class]]) [d setObject:NSContentObjectsBinding forKey:@"NSContentObjectsBinding"]; else NSLog([@"Can't initialize NSContentObjectsBinding with object " stringByAppendingString:[NSContentObjectsBinding description]]);
if ([NSContentPlacementTagBindingOption isKindOfClass:[NSString class]]) [d setObject:NSContentPlacementTagBindingOption forKey:@"NSContentPlacementTagBindingOption"]; else NSLog([@"Can't initialize NSContentPlacementTagBindingOption with object " stringByAppendingString:[NSContentPlacementTagBindingOption description]]);
if ([NSContentSetBinding isKindOfClass:[NSString class]]) [d setObject:NSContentSetBinding forKey:@"NSContentSetBinding"]; else NSLog([@"Can't initialize NSContentSetBinding with object " stringByAppendingString:[NSContentSetBinding description]]);
if ([NSContentValuesBinding isKindOfClass:[NSString class]]) [d setObject:NSContentValuesBinding forKey:@"NSContentValuesBinding"]; else NSLog([@"Can't initialize NSContentValuesBinding with object " stringByAppendingString:[NSContentValuesBinding description]]);
if ([NSContentWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSContentWidthBinding forKey:@"NSContentWidthBinding"]; else NSLog([@"Can't initialize NSContentWidthBinding with object " stringByAppendingString:[NSContentWidthBinding description]]);
if ([NSContextHelpModeDidActivateNotification isKindOfClass:[NSString class]]) [d setObject:NSContextHelpModeDidActivateNotification forKey:@"NSContextHelpModeDidActivateNotification"]; else NSLog([@"Can't initialize NSContextHelpModeDidActivateNotification with object " stringByAppendingString:[NSContextHelpModeDidActivateNotification description]]);
if ([NSContextHelpModeDidDeactivateNotification isKindOfClass:[NSString class]]) [d setObject:NSContextHelpModeDidDeactivateNotification forKey:@"NSContextHelpModeDidDeactivateNotification"]; else NSLog([@"Can't initialize NSContextHelpModeDidDeactivateNotification with object " stringByAppendingString:[NSContextHelpModeDidDeactivateNotification description]]);
if ([NSContinuouslyUpdatesValueBindingOption isKindOfClass:[NSString class]]) [d setObject:NSContinuouslyUpdatesValueBindingOption forKey:@"NSContinuouslyUpdatesValueBindingOption"]; else NSLog([@"Can't initialize NSContinuouslyUpdatesValueBindingOption with object " stringByAppendingString:[NSContinuouslyUpdatesValueBindingOption description]]);
if ([NSControlTextDidBeginEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTextDidBeginEditingNotification forKey:@"NSControlTextDidBeginEditingNotification"]; else NSLog([@"Can't initialize NSControlTextDidBeginEditingNotification with object " stringByAppendingString:[NSControlTextDidBeginEditingNotification description]]);
if ([NSControlTextDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTextDidChangeNotification forKey:@"NSControlTextDidChangeNotification"]; else NSLog([@"Can't initialize NSControlTextDidChangeNotification with object " stringByAppendingString:[NSControlTextDidChangeNotification description]]);
if ([NSControlTextDidEndEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTextDidEndEditingNotification forKey:@"NSControlTextDidEndEditingNotification"]; else NSLog([@"Can't initialize NSControlTextDidEndEditingNotification with object " stringByAppendingString:[NSControlTextDidEndEditingNotification description]]);
if ([NSControlTintDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSControlTintDidChangeNotification forKey:@"NSControlTintDidChangeNotification"]; else NSLog([@"Can't initialize NSControlTintDidChangeNotification with object " stringByAppendingString:[NSControlTintDidChangeNotification description]]);
if ([NSConvertedDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSConvertedDocumentAttribute forKey:@"NSConvertedDocumentAttribute"]; else NSLog([@"Can't initialize NSConvertedDocumentAttribute with object " stringByAppendingString:[NSConvertedDocumentAttribute description]]);
if ([NSCopyrightDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCopyrightDocumentAttribute forKey:@"NSCopyrightDocumentAttribute"]; else NSLog([@"Can't initialize NSCopyrightDocumentAttribute with object " stringByAppendingString:[NSCopyrightDocumentAttribute description]]);
if ([NSCreatesSortDescriptorBindingOption isKindOfClass:[NSString class]]) [d setObject:NSCreatesSortDescriptorBindingOption forKey:@"NSCreatesSortDescriptorBindingOption"]; else NSLog([@"Can't initialize NSCreatesSortDescriptorBindingOption with object " stringByAppendingString:[NSCreatesSortDescriptorBindingOption description]]);
if ([NSCreationTimeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSCreationTimeDocumentAttribute forKey:@"NSCreationTimeDocumentAttribute"]; else NSLog([@"Can't initialize NSCreationTimeDocumentAttribute with object " stringByAppendingString:[NSCreationTimeDocumentAttribute description]]);
if ([NSCriticalValueBinding isKindOfClass:[NSString class]]) [d setObject:NSCriticalValueBinding forKey:@"NSCriticalValueBinding"]; else NSLog([@"Can't initialize NSCriticalValueBinding with object " stringByAppendingString:[NSCriticalValueBinding description]]);
if ([NSCursorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSCursorAttributeName forKey:@"NSCursorAttributeName"]; else NSLog([@"Can't initialize NSCursorAttributeName with object " stringByAppendingString:[NSCursorAttributeName description]]);
if ([NSCustomColorSpace isKindOfClass:[NSString class]]) [d setObject:NSCustomColorSpace forKey:@"NSCustomColorSpace"]; else NSLog([@"Can't initialize NSCustomColorSpace with object " stringByAppendingString:[NSCustomColorSpace description]]);
if ([NSDataBinding isKindOfClass:[NSString class]]) [d setObject:NSDataBinding forKey:@"NSDataBinding"]; else NSLog([@"Can't initialize NSDataBinding with object " stringByAppendingString:[NSDataBinding description]]);
if ([NSDefaultAttributesDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSDefaultAttributesDocumentOption forKey:@"NSDefaultAttributesDocumentOption"]; else NSLog([@"Can't initialize NSDefaultAttributesDocumentOption with object " stringByAppendingString:[NSDefaultAttributesDocumentOption description]]);
if ([NSDefaultTabIntervalDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSDefaultTabIntervalDocumentAttribute forKey:@"NSDefaultTabIntervalDocumentAttribute"]; else NSLog([@"Can't initialize NSDefaultTabIntervalDocumentAttribute with object " stringByAppendingString:[NSDefaultTabIntervalDocumentAttribute description]]);
if ([NSDeletesObjectsOnRemoveBindingsOption isKindOfClass:[NSString class]]) [d setObject:NSDeletesObjectsOnRemoveBindingsOption forKey:@"NSDeletesObjectsOnRemoveBindingsOption"]; else NSLog([@"Can't initialize NSDeletesObjectsOnRemoveBindingsOption with object " stringByAppendingString:[NSDeletesObjectsOnRemoveBindingsOption description]]);
if ([NSDeviceBitsPerSample isKindOfClass:[NSString class]]) [d setObject:NSDeviceBitsPerSample forKey:@"NSDeviceBitsPerSample"]; else NSLog([@"Can't initialize NSDeviceBitsPerSample with object " stringByAppendingString:[NSDeviceBitsPerSample description]]);
if ([NSDeviceBlackColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceBlackColorSpace forKey:@"NSDeviceBlackColorSpace"]; else NSLog([@"Can't initialize NSDeviceBlackColorSpace with object " stringByAppendingString:[NSDeviceBlackColorSpace description]]);
if ([NSDeviceCMYKColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceCMYKColorSpace forKey:@"NSDeviceCMYKColorSpace"]; else NSLog([@"Can't initialize NSDeviceCMYKColorSpace with object " stringByAppendingString:[NSDeviceCMYKColorSpace description]]);
if ([NSDeviceColorSpaceName isKindOfClass:[NSString class]]) [d setObject:NSDeviceColorSpaceName forKey:@"NSDeviceColorSpaceName"]; else NSLog([@"Can't initialize NSDeviceColorSpaceName with object " stringByAppendingString:[NSDeviceColorSpaceName description]]);
if ([NSDeviceIsPrinter isKindOfClass:[NSString class]]) [d setObject:NSDeviceIsPrinter forKey:@"NSDeviceIsPrinter"]; else NSLog([@"Can't initialize NSDeviceIsPrinter with object " stringByAppendingString:[NSDeviceIsPrinter description]]);
if ([NSDeviceIsScreen isKindOfClass:[NSString class]]) [d setObject:NSDeviceIsScreen forKey:@"NSDeviceIsScreen"]; else NSLog([@"Can't initialize NSDeviceIsScreen with object " stringByAppendingString:[NSDeviceIsScreen description]]);
if ([NSDeviceRGBColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceRGBColorSpace forKey:@"NSDeviceRGBColorSpace"]; else NSLog([@"Can't initialize NSDeviceRGBColorSpace with object " stringByAppendingString:[NSDeviceRGBColorSpace description]]);
if ([NSDeviceResolution isKindOfClass:[NSString class]]) [d setObject:NSDeviceResolution forKey:@"NSDeviceResolution"]; else NSLog([@"Can't initialize NSDeviceResolution with object " stringByAppendingString:[NSDeviceResolution description]]);
if ([NSDeviceSize isKindOfClass:[NSString class]]) [d setObject:NSDeviceSize forKey:@"NSDeviceSize"]; else NSLog([@"Can't initialize NSDeviceSize with object " stringByAppendingString:[NSDeviceSize description]]);
if ([NSDeviceWhiteColorSpace isKindOfClass:[NSString class]]) [d setObject:NSDeviceWhiteColorSpace forKey:@"NSDeviceWhiteColorSpace"]; else NSLog([@"Can't initialize NSDeviceWhiteColorSpace with object " stringByAppendingString:[NSDeviceWhiteColorSpace description]]);
if ([NSDirectoryFileType isKindOfClass:[NSString class]]) [d setObject:NSDirectoryFileType forKey:@"NSDirectoryFileType"]; else NSLog([@"Can't initialize NSDirectoryFileType with object " stringByAppendingString:[NSDirectoryFileType description]]);
if ([NSDisplayNameBindingOption isKindOfClass:[NSString class]]) [d setObject:NSDisplayNameBindingOption forKey:@"NSDisplayNameBindingOption"]; else NSLog([@"Can't initialize NSDisplayNameBindingOption with object " stringByAppendingString:[NSDisplayNameBindingOption description]]);
if ([NSDisplayPatternBindingOption isKindOfClass:[NSString class]]) [d setObject:NSDisplayPatternBindingOption forKey:@"NSDisplayPatternBindingOption"]; else NSLog([@"Can't initialize NSDisplayPatternBindingOption with object " stringByAppendingString:[NSDisplayPatternBindingOption description]]);
if ([NSDisplayPatternTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSDisplayPatternTitleBinding forKey:@"NSDisplayPatternTitleBinding"]; else NSLog([@"Can't initialize NSDisplayPatternTitleBinding with object " stringByAppendingString:[NSDisplayPatternTitleBinding description]]);
if ([NSDisplayPatternValueBinding isKindOfClass:[NSString class]]) [d setObject:NSDisplayPatternValueBinding forKey:@"NSDisplayPatternValueBinding"]; else NSLog([@"Can't initialize NSDisplayPatternValueBinding with object " stringByAppendingString:[NSDisplayPatternValueBinding description]]);
if ([NSDocFormatTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSDocFormatTextDocumentType forKey:@"NSDocFormatTextDocumentType"]; else NSLog([@"Can't initialize NSDocFormatTextDocumentType with object " stringByAppendingString:[NSDocFormatTextDocumentType description]]);
if ([NSDocumentEditedBinding isKindOfClass:[NSString class]]) [d setObject:NSDocumentEditedBinding forKey:@"NSDocumentEditedBinding"]; else NSLog([@"Can't initialize NSDocumentEditedBinding with object " stringByAppendingString:[NSDocumentEditedBinding description]]);
if ([NSDocumentTypeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSDocumentTypeDocumentAttribute forKey:@"NSDocumentTypeDocumentAttribute"]; else NSLog([@"Can't initialize NSDocumentTypeDocumentAttribute with object " stringByAppendingString:[NSDocumentTypeDocumentAttribute description]]);
if ([NSDocumentTypeDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSDocumentTypeDocumentOption forKey:@"NSDocumentTypeDocumentOption"]; else NSLog([@"Can't initialize NSDocumentTypeDocumentOption with object " stringByAppendingString:[NSDocumentTypeDocumentOption description]]);
if ([NSDoubleClickArgumentBinding isKindOfClass:[NSString class]]) [d setObject:NSDoubleClickArgumentBinding forKey:@"NSDoubleClickArgumentBinding"]; else NSLog([@"Can't initialize NSDoubleClickArgumentBinding with object " stringByAppendingString:[NSDoubleClickArgumentBinding description]]);
if ([NSDoubleClickTargetBinding isKindOfClass:[NSString class]]) [d setObject:NSDoubleClickTargetBinding forKey:@"NSDoubleClickTargetBinding"]; else NSLog([@"Can't initialize NSDoubleClickTargetBinding with object " stringByAppendingString:[NSDoubleClickTargetBinding description]]);
if ([NSDragPboard isKindOfClass:[NSString class]]) [d setObject:NSDragPboard forKey:@"NSDragPboard"]; else NSLog([@"Can't initialize NSDragPboard with object " stringByAppendingString:[NSDragPboard description]]);
if ([NSDraggingException isKindOfClass:[NSString class]]) [d setObject:NSDraggingException forKey:@"NSDraggingException"]; else NSLog([@"Can't initialize NSDraggingException with object " stringByAppendingString:[NSDraggingException description]]);
if ([NSDrawerDidCloseNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerDidCloseNotification forKey:@"NSDrawerDidCloseNotification"]; else NSLog([@"Can't initialize NSDrawerDidCloseNotification with object " stringByAppendingString:[NSDrawerDidCloseNotification description]]);
if ([NSDrawerDidOpenNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerDidOpenNotification forKey:@"NSDrawerDidOpenNotification"]; else NSLog([@"Can't initialize NSDrawerDidOpenNotification with object " stringByAppendingString:[NSDrawerDidOpenNotification description]]);
if ([NSDrawerWillCloseNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerWillCloseNotification forKey:@"NSDrawerWillCloseNotification"]; else NSLog([@"Can't initialize NSDrawerWillCloseNotification with object " stringByAppendingString:[NSDrawerWillCloseNotification description]]);
if ([NSDrawerWillOpenNotification isKindOfClass:[NSString class]]) [d setObject:NSDrawerWillOpenNotification forKey:@"NSDrawerWillOpenNotification"]; else NSLog([@"Can't initialize NSDrawerWillOpenNotification with object " stringByAppendingString:[NSDrawerWillOpenNotification description]]);
if ([NSEditableBinding isKindOfClass:[NSString class]]) [d setObject:NSEditableBinding forKey:@"NSEditableBinding"]; else NSLog([@"Can't initialize NSEditableBinding with object " stringByAppendingString:[NSEditableBinding description]]);
if ([NSEditorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSEditorDocumentAttribute forKey:@"NSEditorDocumentAttribute"]; else NSLog([@"Can't initialize NSEditorDocumentAttribute with object " stringByAppendingString:[NSEditorDocumentAttribute description]]);
if ([NSEnabledBinding isKindOfClass:[NSString class]]) [d setObject:NSEnabledBinding forKey:@"NSEnabledBinding"]; else NSLog([@"Can't initialize NSEnabledBinding with object " stringByAppendingString:[NSEnabledBinding description]]);
if ([NSEventTrackingRunLoopMode isKindOfClass:[NSString class]]) [d setObject:NSEventTrackingRunLoopMode forKey:@"NSEventTrackingRunLoopMode"]; else NSLog([@"Can't initialize NSEventTrackingRunLoopMode with object " stringByAppendingString:[NSEventTrackingRunLoopMode description]]);
if ([NSExcludedElementsDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSExcludedElementsDocumentAttribute forKey:@"NSExcludedElementsDocumentAttribute"]; else NSLog([@"Can't initialize NSExcludedElementsDocumentAttribute with object " stringByAppendingString:[NSExcludedElementsDocumentAttribute description]]);
if ([NSExcludedKeysBinding isKindOfClass:[NSString class]]) [d setObject:NSExcludedKeysBinding forKey:@"NSExcludedKeysBinding"]; else NSLog([@"Can't initialize NSExcludedKeysBinding with object " stringByAppendingString:[NSExcludedKeysBinding description]]);
if ([NSExpansionAttributeName isKindOfClass:[NSString class]]) [d setObject:NSExpansionAttributeName forKey:@"NSExpansionAttributeName"]; else NSLog([@"Can't initialize NSExpansionAttributeName with object " stringByAppendingString:[NSExpansionAttributeName description]]);
if ([NSFileContentsPboardType isKindOfClass:[NSString class]]) [d setObject:NSFileContentsPboardType forKey:@"NSFileContentsPboardType"]; else NSLog([@"Can't initialize NSFileContentsPboardType with object " stringByAppendingString:[NSFileContentsPboardType description]]);
if ([NSFilenamesPboardType isKindOfClass:[NSString class]]) [d setObject:NSFilenamesPboardType forKey:@"NSFilenamesPboardType"]; else NSLog([@"Can't initialize NSFilenamesPboardType with object " stringByAppendingString:[NSFilenamesPboardType description]]);
if ([NSFilesPromisePboardType isKindOfClass:[NSString class]]) [d setObject:NSFilesPromisePboardType forKey:@"NSFilesPromisePboardType"]; else NSLog([@"Can't initialize NSFilesPromisePboardType with object " stringByAppendingString:[NSFilesPromisePboardType description]]);
if ([NSFilesystemFileType isKindOfClass:[NSString class]]) [d setObject:NSFilesystemFileType forKey:@"NSFilesystemFileType"]; else NSLog([@"Can't initialize NSFilesystemFileType with object " stringByAppendingString:[NSFilesystemFileType description]]);
if ([NSFilterPredicateBinding isKindOfClass:[NSString class]]) [d setObject:NSFilterPredicateBinding forKey:@"NSFilterPredicateBinding"]; else NSLog([@"Can't initialize NSFilterPredicateBinding with object " stringByAppendingString:[NSFilterPredicateBinding description]]);
if ([NSFindPanelCaseInsensitiveSearch isKindOfClass:[NSString class]]) [d setObject:NSFindPanelCaseInsensitiveSearch forKey:@"NSFindPanelCaseInsensitiveSearch"]; else NSLog([@"Can't initialize NSFindPanelCaseInsensitiveSearch with object " stringByAppendingString:[NSFindPanelCaseInsensitiveSearch description]]);
if ([NSFindPanelSearchOptionsPboardType isKindOfClass:[NSString class]]) [d setObject:NSFindPanelSearchOptionsPboardType forKey:@"NSFindPanelSearchOptionsPboardType"]; else NSLog([@"Can't initialize NSFindPanelSearchOptionsPboardType with object " stringByAppendingString:[NSFindPanelSearchOptionsPboardType description]]);
if ([NSFindPanelSubstringMatch isKindOfClass:[NSString class]]) [d setObject:NSFindPanelSubstringMatch forKey:@"NSFindPanelSubstringMatch"]; else NSLog([@"Can't initialize NSFindPanelSubstringMatch with object " stringByAppendingString:[NSFindPanelSubstringMatch description]]);
if ([NSFindPboard isKindOfClass:[NSString class]]) [d setObject:NSFindPboard forKey:@"NSFindPboard"]; else NSLog([@"Can't initialize NSFindPboard with object " stringByAppendingString:[NSFindPboard description]]);
if ([NSFontAttributeName isKindOfClass:[NSString class]]) [d setObject:NSFontAttributeName forKey:@"NSFontAttributeName"]; else NSLog([@"Can't initialize NSFontAttributeName with object " stringByAppendingString:[NSFontAttributeName description]]);
if ([NSFontBinding isKindOfClass:[NSString class]]) [d setObject:NSFontBinding forKey:@"NSFontBinding"]; else NSLog([@"Can't initialize NSFontBinding with object " stringByAppendingString:[NSFontBinding description]]);
if ([NSFontBoldBinding isKindOfClass:[NSString class]]) [d setObject:NSFontBoldBinding forKey:@"NSFontBoldBinding"]; else NSLog([@"Can't initialize NSFontBoldBinding with object " stringByAppendingString:[NSFontBoldBinding description]]);
if ([NSFontCascadeListAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontCascadeListAttribute forKey:@"NSFontCascadeListAttribute"]; else NSLog([@"Can't initialize NSFontCascadeListAttribute with object " stringByAppendingString:[NSFontCascadeListAttribute description]]);
if ([NSFontCharacterSetAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontCharacterSetAttribute forKey:@"NSFontCharacterSetAttribute"]; else NSLog([@"Can't initialize NSFontCharacterSetAttribute with object " stringByAppendingString:[NSFontCharacterSetAttribute description]]);
if ([NSFontFaceAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFaceAttribute forKey:@"NSFontFaceAttribute"]; else NSLog([@"Can't initialize NSFontFaceAttribute with object " stringByAppendingString:[NSFontFaceAttribute description]]);
if ([NSFontFamilyAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFamilyAttribute forKey:@"NSFontFamilyAttribute"]; else NSLog([@"Can't initialize NSFontFamilyAttribute with object " stringByAppendingString:[NSFontFamilyAttribute description]]);
if ([NSFontFamilyNameBinding isKindOfClass:[NSString class]]) [d setObject:NSFontFamilyNameBinding forKey:@"NSFontFamilyNameBinding"]; else NSLog([@"Can't initialize NSFontFamilyNameBinding with object " stringByAppendingString:[NSFontFamilyNameBinding description]]);
if ([NSFontFeatureSelectorIdentifierKey isKindOfClass:[NSString class]]) [d setObject:NSFontFeatureSelectorIdentifierKey forKey:@"NSFontFeatureSelectorIdentifierKey"]; else NSLog([@"Can't initialize NSFontFeatureSelectorIdentifierKey with object " stringByAppendingString:[NSFontFeatureSelectorIdentifierKey description]]);
if ([NSFontFeatureSettingsAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFeatureSettingsAttribute forKey:@"NSFontFeatureSettingsAttribute"]; else NSLog([@"Can't initialize NSFontFeatureSettingsAttribute with object " stringByAppendingString:[NSFontFeatureSettingsAttribute description]]);
if ([NSFontFeatureTypeIdentifierKey isKindOfClass:[NSString class]]) [d setObject:NSFontFeatureTypeIdentifierKey forKey:@"NSFontFeatureTypeIdentifierKey"]; else NSLog([@"Can't initialize NSFontFeatureTypeIdentifierKey with object " stringByAppendingString:[NSFontFeatureTypeIdentifierKey description]]);
if ([NSFontFixedAdvanceAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontFixedAdvanceAttribute forKey:@"NSFontFixedAdvanceAttribute"]; else NSLog([@"Can't initialize NSFontFixedAdvanceAttribute with object " stringByAppendingString:[NSFontFixedAdvanceAttribute description]]);
if ([NSFontItalicBinding isKindOfClass:[NSString class]]) [d setObject:NSFontItalicBinding forKey:@"NSFontItalicBinding"]; else NSLog([@"Can't initialize NSFontItalicBinding with object " stringByAppendingString:[NSFontItalicBinding description]]);
if ([NSFontMatrixAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontMatrixAttribute forKey:@"NSFontMatrixAttribute"]; else NSLog([@"Can't initialize NSFontMatrixAttribute with object " stringByAppendingString:[NSFontMatrixAttribute description]]);
if ([NSFontNameAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontNameAttribute forKey:@"NSFontNameAttribute"]; else NSLog([@"Can't initialize NSFontNameAttribute with object " stringByAppendingString:[NSFontNameAttribute description]]);
if ([NSFontNameBinding isKindOfClass:[NSString class]]) [d setObject:NSFontNameBinding forKey:@"NSFontNameBinding"]; else NSLog([@"Can't initialize NSFontNameBinding with object " stringByAppendingString:[NSFontNameBinding description]]);
if ([NSFontPboard isKindOfClass:[NSString class]]) [d setObject:NSFontPboard forKey:@"NSFontPboard"]; else NSLog([@"Can't initialize NSFontPboard with object " stringByAppendingString:[NSFontPboard description]]);
if ([NSFontPboardType isKindOfClass:[NSString class]]) [d setObject:NSFontPboardType forKey:@"NSFontPboardType"]; else NSLog([@"Can't initialize NSFontPboardType with object " stringByAppendingString:[NSFontPboardType description]]);
if ([NSFontSetChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSFontSetChangedNotification forKey:@"NSFontSetChangedNotification"]; else NSLog([@"Can't initialize NSFontSetChangedNotification with object " stringByAppendingString:[NSFontSetChangedNotification description]]);
if ([NSFontSizeAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontSizeAttribute forKey:@"NSFontSizeAttribute"]; else NSLog([@"Can't initialize NSFontSizeAttribute with object " stringByAppendingString:[NSFontSizeAttribute description]]);
if ([NSFontSizeBinding isKindOfClass:[NSString class]]) [d setObject:NSFontSizeBinding forKey:@"NSFontSizeBinding"]; else NSLog([@"Can't initialize NSFontSizeBinding with object " stringByAppendingString:[NSFontSizeBinding description]]);
if ([NSFontSlantTrait isKindOfClass:[NSString class]]) [d setObject:NSFontSlantTrait forKey:@"NSFontSlantTrait"]; else NSLog([@"Can't initialize NSFontSlantTrait with object " stringByAppendingString:[NSFontSlantTrait description]]);
if ([NSFontSymbolicTrait isKindOfClass:[NSString class]]) [d setObject:NSFontSymbolicTrait forKey:@"NSFontSymbolicTrait"]; else NSLog([@"Can't initialize NSFontSymbolicTrait with object " stringByAppendingString:[NSFontSymbolicTrait description]]);
if ([NSFontTraitsAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontTraitsAttribute forKey:@"NSFontTraitsAttribute"]; else NSLog([@"Can't initialize NSFontTraitsAttribute with object " stringByAppendingString:[NSFontTraitsAttribute description]]);
if ([NSFontUnavailableException isKindOfClass:[NSString class]]) [d setObject:NSFontUnavailableException forKey:@"NSFontUnavailableException"]; else NSLog([@"Can't initialize NSFontUnavailableException with object " stringByAppendingString:[NSFontUnavailableException description]]);
if ([NSFontVariationAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAttribute forKey:@"NSFontVariationAttribute"]; else NSLog([@"Can't initialize NSFontVariationAttribute with object " stringByAppendingString:[NSFontVariationAttribute description]]);
if ([NSFontVariationAxisDefaultValueKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisDefaultValueKey forKey:@"NSFontVariationAxisDefaultValueKey"]; else NSLog([@"Can't initialize NSFontVariationAxisDefaultValueKey with object " stringByAppendingString:[NSFontVariationAxisDefaultValueKey description]]);
if ([NSFontVariationAxisIdentifierKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisIdentifierKey forKey:@"NSFontVariationAxisIdentifierKey"]; else NSLog([@"Can't initialize NSFontVariationAxisIdentifierKey with object " stringByAppendingString:[NSFontVariationAxisIdentifierKey description]]);
if ([NSFontVariationAxisMaximumValueKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisMaximumValueKey forKey:@"NSFontVariationAxisMaximumValueKey"]; else NSLog([@"Can't initialize NSFontVariationAxisMaximumValueKey with object " stringByAppendingString:[NSFontVariationAxisMaximumValueKey description]]);
if ([NSFontVariationAxisMinimumValueKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisMinimumValueKey forKey:@"NSFontVariationAxisMinimumValueKey"]; else NSLog([@"Can't initialize NSFontVariationAxisMinimumValueKey with object " stringByAppendingString:[NSFontVariationAxisMinimumValueKey description]]);
if ([NSFontVariationAxisNameKey isKindOfClass:[NSString class]]) [d setObject:NSFontVariationAxisNameKey forKey:@"NSFontVariationAxisNameKey"]; else NSLog([@"Can't initialize NSFontVariationAxisNameKey with object " stringByAppendingString:[NSFontVariationAxisNameKey description]]);
if ([NSFontVisibleNameAttribute isKindOfClass:[NSString class]]) [d setObject:NSFontVisibleNameAttribute forKey:@"NSFontVisibleNameAttribute"]; else NSLog([@"Can't initialize NSFontVisibleNameAttribute with object " stringByAppendingString:[NSFontVisibleNameAttribute description]]);
if ([NSFontWeightTrait isKindOfClass:[NSString class]]) [d setObject:NSFontWeightTrait forKey:@"NSFontWeightTrait"]; else NSLog([@"Can't initialize NSFontWeightTrait with object " stringByAppendingString:[NSFontWeightTrait description]]);
if ([NSFontWidthTrait isKindOfClass:[NSString class]]) [d setObject:NSFontWidthTrait forKey:@"NSFontWidthTrait"]; else NSLog([@"Can't initialize NSFontWidthTrait with object " stringByAppendingString:[NSFontWidthTrait description]]);
if ([NSForegroundColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSForegroundColorAttributeName forKey:@"NSForegroundColorAttributeName"]; else NSLog([@"Can't initialize NSForegroundColorAttributeName with object " stringByAppendingString:[NSForegroundColorAttributeName description]]);
if ([NSFullScreenModeAllScreens isKindOfClass:[NSString class]]) [d setObject:NSFullScreenModeAllScreens forKey:@"NSFullScreenModeAllScreens"]; else NSLog([@"Can't initialize NSFullScreenModeAllScreens with object " stringByAppendingString:[NSFullScreenModeAllScreens description]]);
if ([NSFullScreenModeSetting isKindOfClass:[NSString class]]) [d setObject:NSFullScreenModeSetting forKey:@"NSFullScreenModeSetting"]; else NSLog([@"Can't initialize NSFullScreenModeSetting with object " stringByAppendingString:[NSFullScreenModeSetting description]]);
if ([NSFullScreenModeWindowLevel isKindOfClass:[NSString class]]) [d setObject:NSFullScreenModeWindowLevel forKey:@"NSFullScreenModeWindowLevel"]; else NSLog([@"Can't initialize NSFullScreenModeWindowLevel with object " stringByAppendingString:[NSFullScreenModeWindowLevel description]]);
if ([NSGeneralPboard isKindOfClass:[NSString class]]) [d setObject:NSGeneralPboard forKey:@"NSGeneralPboard"]; else NSLog([@"Can't initialize NSGeneralPboard with object " stringByAppendingString:[NSGeneralPboard description]]);
if ([NSGlyphInfoAttributeName isKindOfClass:[NSString class]]) [d setObject:NSGlyphInfoAttributeName forKey:@"NSGlyphInfoAttributeName"]; else NSLog([@"Can't initialize NSGlyphInfoAttributeName with object " stringByAppendingString:[NSGlyphInfoAttributeName description]]);
if ([NSGraphicsContextDestinationAttributeName isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextDestinationAttributeName forKey:@"NSGraphicsContextDestinationAttributeName"]; else NSLog([@"Can't initialize NSGraphicsContextDestinationAttributeName with object " stringByAppendingString:[NSGraphicsContextDestinationAttributeName description]]);
if ([NSGraphicsContextPDFFormat isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextPDFFormat forKey:@"NSGraphicsContextPDFFormat"]; else NSLog([@"Can't initialize NSGraphicsContextPDFFormat with object " stringByAppendingString:[NSGraphicsContextPDFFormat description]]);
if ([NSGraphicsContextPSFormat isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextPSFormat forKey:@"NSGraphicsContextPSFormat"]; else NSLog([@"Can't initialize NSGraphicsContextPSFormat with object " stringByAppendingString:[NSGraphicsContextPSFormat description]]);
if ([NSGraphicsContextRepresentationFormatAttributeName isKindOfClass:[NSString class]]) [d setObject:NSGraphicsContextRepresentationFormatAttributeName forKey:@"NSGraphicsContextRepresentationFormatAttributeName"]; else NSLog([@"Can't initialize NSGraphicsContextRepresentationFormatAttributeName with object " stringByAppendingString:[NSGraphicsContextRepresentationFormatAttributeName description]]);
if ([NSHTMLPboardType isKindOfClass:[NSString class]]) [d setObject:NSHTMLPboardType forKey:@"NSHTMLPboardType"]; else NSLog([@"Can't initialize NSHTMLPboardType with object " stringByAppendingString:[NSHTMLPboardType description]]);
if ([NSHTMLTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSHTMLTextDocumentType forKey:@"NSHTMLTextDocumentType"]; else NSLog([@"Can't initialize NSHTMLTextDocumentType with object " stringByAppendingString:[NSHTMLTextDocumentType description]]);
if ([NSHandlesContentAsCompoundValueBindingOption isKindOfClass:[NSString class]]) [d setObject:NSHandlesContentAsCompoundValueBindingOption forKey:@"NSHandlesContentAsCompoundValueBindingOption"]; else NSLog([@"Can't initialize NSHandlesContentAsCompoundValueBindingOption with object " stringByAppendingString:[NSHandlesContentAsCompoundValueBindingOption description]]);
if ([NSHeaderTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSHeaderTitleBinding forKey:@"NSHeaderTitleBinding"]; else NSLog([@"Can't initialize NSHeaderTitleBinding with object " stringByAppendingString:[NSHeaderTitleBinding description]]);
if ([NSHiddenBinding isKindOfClass:[NSString class]]) [d setObject:NSHiddenBinding forKey:@"NSHiddenBinding"]; else NSLog([@"Can't initialize NSHiddenBinding with object " stringByAppendingString:[NSHiddenBinding description]]);
if ([NSHyphenationFactorDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSHyphenationFactorDocumentAttribute forKey:@"NSHyphenationFactorDocumentAttribute"]; else NSLog([@"Can't initialize NSHyphenationFactorDocumentAttribute with object " stringByAppendingString:[NSHyphenationFactorDocumentAttribute description]]);
if ([NSIllegalSelectorException isKindOfClass:[NSString class]]) [d setObject:NSIllegalSelectorException forKey:@"NSIllegalSelectorException"]; else NSLog([@"Can't initialize NSIllegalSelectorException with object " stringByAppendingString:[NSIllegalSelectorException description]]);
if ([NSImageBinding isKindOfClass:[NSString class]]) [d setObject:NSImageBinding forKey:@"NSImageBinding"]; else NSLog([@"Can't initialize NSImageBinding with object " stringByAppendingString:[NSImageBinding description]]);
if ([NSImageCacheException isKindOfClass:[NSString class]]) [d setObject:NSImageCacheException forKey:@"NSImageCacheException"]; else NSLog([@"Can't initialize NSImageCacheException with object " stringByAppendingString:[NSImageCacheException description]]);
if ([NSImageColorSyncProfileData isKindOfClass:[NSString class]]) [d setObject:NSImageColorSyncProfileData forKey:@"NSImageColorSyncProfileData"]; else NSLog([@"Can't initialize NSImageColorSyncProfileData with object " stringByAppendingString:[NSImageColorSyncProfileData description]]);
if ([NSImageCompressionFactor isKindOfClass:[NSString class]]) [d setObject:NSImageCompressionFactor forKey:@"NSImageCompressionFactor"]; else NSLog([@"Can't initialize NSImageCompressionFactor with object " stringByAppendingString:[NSImageCompressionFactor description]]);
if ([NSImageCompressionMethod isKindOfClass:[NSString class]]) [d setObject:NSImageCompressionMethod forKey:@"NSImageCompressionMethod"]; else NSLog([@"Can't initialize NSImageCompressionMethod with object " stringByAppendingString:[NSImageCompressionMethod description]]);
if ([NSImageCurrentFrame isKindOfClass:[NSString class]]) [d setObject:NSImageCurrentFrame forKey:@"NSImageCurrentFrame"]; else NSLog([@"Can't initialize NSImageCurrentFrame with object " stringByAppendingString:[NSImageCurrentFrame description]]);
if ([NSImageCurrentFrameDuration isKindOfClass:[NSString class]]) [d setObject:NSImageCurrentFrameDuration forKey:@"NSImageCurrentFrameDuration"]; else NSLog([@"Can't initialize NSImageCurrentFrameDuration with object " stringByAppendingString:[NSImageCurrentFrameDuration description]]);
if ([NSImageDitherTransparency isKindOfClass:[NSString class]]) [d setObject:NSImageDitherTransparency forKey:@"NSImageDitherTransparency"]; else NSLog([@"Can't initialize NSImageDitherTransparency with object " stringByAppendingString:[NSImageDitherTransparency description]]);
if ([NSImageEXIFData isKindOfClass:[NSString class]]) [d setObject:NSImageEXIFData forKey:@"NSImageEXIFData"]; else NSLog([@"Can't initialize NSImageEXIFData with object " stringByAppendingString:[NSImageEXIFData description]]);
if ([NSImageFallbackBackgroundColor isKindOfClass:[NSString class]]) [d setObject:NSImageFallbackBackgroundColor forKey:@"NSImageFallbackBackgroundColor"]; else NSLog([@"Can't initialize NSImageFallbackBackgroundColor with object " stringByAppendingString:[NSImageFallbackBackgroundColor description]]);
if ([NSImageFrameCount isKindOfClass:[NSString class]]) [d setObject:NSImageFrameCount forKey:@"NSImageFrameCount"]; else NSLog([@"Can't initialize NSImageFrameCount with object " stringByAppendingString:[NSImageFrameCount description]]);
if ([NSImageGamma isKindOfClass:[NSString class]]) [d setObject:NSImageGamma forKey:@"NSImageGamma"]; else NSLog([@"Can't initialize NSImageGamma with object " stringByAppendingString:[NSImageGamma description]]);
if ([NSImageInterlaced isKindOfClass:[NSString class]]) [d setObject:NSImageInterlaced forKey:@"NSImageInterlaced"]; else NSLog([@"Can't initialize NSImageInterlaced with object " stringByAppendingString:[NSImageInterlaced description]]);
if ([NSImageLoopCount isKindOfClass:[NSString class]]) [d setObject:NSImageLoopCount forKey:@"NSImageLoopCount"]; else NSLog([@"Can't initialize NSImageLoopCount with object " stringByAppendingString:[NSImageLoopCount description]]);
if ([NSImageNameActionTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameActionTemplate forKey:@"NSImageNameActionTemplate"]; else NSLog([@"Can't initialize NSImageNameActionTemplate with object " stringByAppendingString:[NSImageNameActionTemplate description]]);
if ([NSImageNameAddTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameAddTemplate forKey:@"NSImageNameAddTemplate"]; else NSLog([@"Can't initialize NSImageNameAddTemplate with object " stringByAppendingString:[NSImageNameAddTemplate description]]);
if ([NSImageNameAdvanced isKindOfClass:[NSString class]]) [d setObject:NSImageNameAdvanced forKey:@"NSImageNameAdvanced"]; else NSLog([@"Can't initialize NSImageNameAdvanced with object " stringByAppendingString:[NSImageNameAdvanced description]]);
if ([NSImageNameBluetoothTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameBluetoothTemplate forKey:@"NSImageNameBluetoothTemplate"]; else NSLog([@"Can't initialize NSImageNameBluetoothTemplate with object " stringByAppendingString:[NSImageNameBluetoothTemplate description]]);
if ([NSImageNameBonjour isKindOfClass:[NSString class]]) [d setObject:NSImageNameBonjour forKey:@"NSImageNameBonjour"]; else NSLog([@"Can't initialize NSImageNameBonjour with object " stringByAppendingString:[NSImageNameBonjour description]]);
if ([NSImageNameColorPanel isKindOfClass:[NSString class]]) [d setObject:NSImageNameColorPanel forKey:@"NSImageNameColorPanel"]; else NSLog([@"Can't initialize NSImageNameColorPanel with object " stringByAppendingString:[NSImageNameColorPanel description]]);
if ([NSImageNameColumnViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameColumnViewTemplate forKey:@"NSImageNameColumnViewTemplate"]; else NSLog([@"Can't initialize NSImageNameColumnViewTemplate with object " stringByAppendingString:[NSImageNameColumnViewTemplate description]]);
if ([NSImageNameComputer isKindOfClass:[NSString class]]) [d setObject:NSImageNameComputer forKey:@"NSImageNameComputer"]; else NSLog([@"Can't initialize NSImageNameComputer with object " stringByAppendingString:[NSImageNameComputer description]]);
if ([NSImageNameDotMac isKindOfClass:[NSString class]]) [d setObject:NSImageNameDotMac forKey:@"NSImageNameDotMac"]; else NSLog([@"Can't initialize NSImageNameDotMac with object " stringByAppendingString:[NSImageNameDotMac description]]);
if ([NSImageNameEnterFullScreenTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameEnterFullScreenTemplate forKey:@"NSImageNameEnterFullScreenTemplate"]; else NSLog([@"Can't initialize NSImageNameEnterFullScreenTemplate with object " stringByAppendingString:[NSImageNameEnterFullScreenTemplate description]]);
if ([NSImageNameEveryone isKindOfClass:[NSString class]]) [d setObject:NSImageNameEveryone forKey:@"NSImageNameEveryone"]; else NSLog([@"Can't initialize NSImageNameEveryone with object " stringByAppendingString:[NSImageNameEveryone description]]);
if ([NSImageNameExitFullScreenTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameExitFullScreenTemplate forKey:@"NSImageNameExitFullScreenTemplate"]; else NSLog([@"Can't initialize NSImageNameExitFullScreenTemplate with object " stringByAppendingString:[NSImageNameExitFullScreenTemplate description]]);
if ([NSImageNameFlowViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameFlowViewTemplate forKey:@"NSImageNameFlowViewTemplate"]; else NSLog([@"Can't initialize NSImageNameFlowViewTemplate with object " stringByAppendingString:[NSImageNameFlowViewTemplate description]]);
if ([NSImageNameFolderBurnable isKindOfClass:[NSString class]]) [d setObject:NSImageNameFolderBurnable forKey:@"NSImageNameFolderBurnable"]; else NSLog([@"Can't initialize NSImageNameFolderBurnable with object " stringByAppendingString:[NSImageNameFolderBurnable description]]);
if ([NSImageNameFolderSmart isKindOfClass:[NSString class]]) [d setObject:NSImageNameFolderSmart forKey:@"NSImageNameFolderSmart"]; else NSLog([@"Can't initialize NSImageNameFolderSmart with object " stringByAppendingString:[NSImageNameFolderSmart description]]);
if ([NSImageNameFollowLinkFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameFollowLinkFreestandingTemplate forKey:@"NSImageNameFollowLinkFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameFollowLinkFreestandingTemplate with object " stringByAppendingString:[NSImageNameFollowLinkFreestandingTemplate description]]);
if ([NSImageNameFontPanel isKindOfClass:[NSString class]]) [d setObject:NSImageNameFontPanel forKey:@"NSImageNameFontPanel"]; else NSLog([@"Can't initialize NSImageNameFontPanel with object " stringByAppendingString:[NSImageNameFontPanel description]]);
if ([NSImageNameGoLeftTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameGoLeftTemplate forKey:@"NSImageNameGoLeftTemplate"]; else NSLog([@"Can't initialize NSImageNameGoLeftTemplate with object " stringByAppendingString:[NSImageNameGoLeftTemplate description]]);
if ([NSImageNameGoRightTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameGoRightTemplate forKey:@"NSImageNameGoRightTemplate"]; else NSLog([@"Can't initialize NSImageNameGoRightTemplate with object " stringByAppendingString:[NSImageNameGoRightTemplate description]]);
if ([NSImageNameIChatTheaterTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameIChatTheaterTemplate forKey:@"NSImageNameIChatTheaterTemplate"]; else NSLog([@"Can't initialize NSImageNameIChatTheaterTemplate with object " stringByAppendingString:[NSImageNameIChatTheaterTemplate description]]);
if ([NSImageNameIconViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameIconViewTemplate forKey:@"NSImageNameIconViewTemplate"]; else NSLog([@"Can't initialize NSImageNameIconViewTemplate with object " stringByAppendingString:[NSImageNameIconViewTemplate description]]);
if ([NSImageNameInfo isKindOfClass:[NSString class]]) [d setObject:NSImageNameInfo forKey:@"NSImageNameInfo"]; else NSLog([@"Can't initialize NSImageNameInfo with object " stringByAppendingString:[NSImageNameInfo description]]);
if ([NSImageNameInvalidDataFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameInvalidDataFreestandingTemplate forKey:@"NSImageNameInvalidDataFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameInvalidDataFreestandingTemplate with object " stringByAppendingString:[NSImageNameInvalidDataFreestandingTemplate description]]);
if ([NSImageNameLeftFacingTriangleTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameLeftFacingTriangleTemplate forKey:@"NSImageNameLeftFacingTriangleTemplate"]; else NSLog([@"Can't initialize NSImageNameLeftFacingTriangleTemplate with object " stringByAppendingString:[NSImageNameLeftFacingTriangleTemplate description]]);
if ([NSImageNameListViewTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameListViewTemplate forKey:@"NSImageNameListViewTemplate"]; else NSLog([@"Can't initialize NSImageNameListViewTemplate with object " stringByAppendingString:[NSImageNameListViewTemplate description]]);
if ([NSImageNameLockLockedTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameLockLockedTemplate forKey:@"NSImageNameLockLockedTemplate"]; else NSLog([@"Can't initialize NSImageNameLockLockedTemplate with object " stringByAppendingString:[NSImageNameLockLockedTemplate description]]);
if ([NSImageNameLockUnlockedTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameLockUnlockedTemplate forKey:@"NSImageNameLockUnlockedTemplate"]; else NSLog([@"Can't initialize NSImageNameLockUnlockedTemplate with object " stringByAppendingString:[NSImageNameLockUnlockedTemplate description]]);
if ([NSImageNameMultipleDocuments isKindOfClass:[NSString class]]) [d setObject:NSImageNameMultipleDocuments forKey:@"NSImageNameMultipleDocuments"]; else NSLog([@"Can't initialize NSImageNameMultipleDocuments with object " stringByAppendingString:[NSImageNameMultipleDocuments description]]);
if ([NSImageNameNetwork isKindOfClass:[NSString class]]) [d setObject:NSImageNameNetwork forKey:@"NSImageNameNetwork"]; else NSLog([@"Can't initialize NSImageNameNetwork with object " stringByAppendingString:[NSImageNameNetwork description]]);
if ([NSImageNamePathTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNamePathTemplate forKey:@"NSImageNamePathTemplate"]; else NSLog([@"Can't initialize NSImageNamePathTemplate with object " stringByAppendingString:[NSImageNamePathTemplate description]]);
if ([NSImageNamePreferencesGeneral isKindOfClass:[NSString class]]) [d setObject:NSImageNamePreferencesGeneral forKey:@"NSImageNamePreferencesGeneral"]; else NSLog([@"Can't initialize NSImageNamePreferencesGeneral with object " stringByAppendingString:[NSImageNamePreferencesGeneral description]]);
if ([NSImageNameQuickLookTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameQuickLookTemplate forKey:@"NSImageNameQuickLookTemplate"]; else NSLog([@"Can't initialize NSImageNameQuickLookTemplate with object " stringByAppendingString:[NSImageNameQuickLookTemplate description]]);
if ([NSImageNameRefreshFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRefreshFreestandingTemplate forKey:@"NSImageNameRefreshFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameRefreshFreestandingTemplate with object " stringByAppendingString:[NSImageNameRefreshFreestandingTemplate description]]);
if ([NSImageNameRefreshTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRefreshTemplate forKey:@"NSImageNameRefreshTemplate"]; else NSLog([@"Can't initialize NSImageNameRefreshTemplate with object " stringByAppendingString:[NSImageNameRefreshTemplate description]]);
if ([NSImageNameRemoveTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRemoveTemplate forKey:@"NSImageNameRemoveTemplate"]; else NSLog([@"Can't initialize NSImageNameRemoveTemplate with object " stringByAppendingString:[NSImageNameRemoveTemplate description]]);
if ([NSImageNameRevealFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRevealFreestandingTemplate forKey:@"NSImageNameRevealFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameRevealFreestandingTemplate with object " stringByAppendingString:[NSImageNameRevealFreestandingTemplate description]]);
if ([NSImageNameRightFacingTriangleTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameRightFacingTriangleTemplate forKey:@"NSImageNameRightFacingTriangleTemplate"]; else NSLog([@"Can't initialize NSImageNameRightFacingTriangleTemplate with object " stringByAppendingString:[NSImageNameRightFacingTriangleTemplate description]]);
if ([NSImageNameSlideshowTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameSlideshowTemplate forKey:@"NSImageNameSlideshowTemplate"]; else NSLog([@"Can't initialize NSImageNameSlideshowTemplate with object " stringByAppendingString:[NSImageNameSlideshowTemplate description]]);
if ([NSImageNameSmartBadgeTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameSmartBadgeTemplate forKey:@"NSImageNameSmartBadgeTemplate"]; else NSLog([@"Can't initialize NSImageNameSmartBadgeTemplate with object " stringByAppendingString:[NSImageNameSmartBadgeTemplate description]]);
if ([NSImageNameStopProgressFreestandingTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameStopProgressFreestandingTemplate forKey:@"NSImageNameStopProgressFreestandingTemplate"]; else NSLog([@"Can't initialize NSImageNameStopProgressFreestandingTemplate with object " stringByAppendingString:[NSImageNameStopProgressFreestandingTemplate description]]);
if ([NSImageNameStopProgressTemplate isKindOfClass:[NSString class]]) [d setObject:NSImageNameStopProgressTemplate forKey:@"NSImageNameStopProgressTemplate"]; else NSLog([@"Can't initialize NSImageNameStopProgressTemplate with object " stringByAppendingString:[NSImageNameStopProgressTemplate description]]);
if ([NSImageNameUser isKindOfClass:[NSString class]]) [d setObject:NSImageNameUser forKey:@"NSImageNameUser"]; else NSLog([@"Can't initialize NSImageNameUser with object " stringByAppendingString:[NSImageNameUser description]]);
if ([NSImageNameUserAccounts isKindOfClass:[NSString class]]) [d setObject:NSImageNameUserAccounts forKey:@"NSImageNameUserAccounts"]; else NSLog([@"Can't initialize NSImageNameUserAccounts with object " stringByAppendingString:[NSImageNameUserAccounts description]]);
if ([NSImageNameUserGroup isKindOfClass:[NSString class]]) [d setObject:NSImageNameUserGroup forKey:@"NSImageNameUserGroup"]; else NSLog([@"Can't initialize NSImageNameUserGroup with object " stringByAppendingString:[NSImageNameUserGroup description]]);
if ([NSImageProgressive isKindOfClass:[NSString class]]) [d setObject:NSImageProgressive forKey:@"NSImageProgressive"]; else NSLog([@"Can't initialize NSImageProgressive with object " stringByAppendingString:[NSImageProgressive description]]);
if ([NSImageRGBColorTable isKindOfClass:[NSString class]]) [d setObject:NSImageRGBColorTable forKey:@"NSImageRGBColorTable"]; else NSLog([@"Can't initialize NSImageRGBColorTable with object " stringByAppendingString:[NSImageRGBColorTable description]]);
if ([NSImageRepRegistryDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSImageRepRegistryDidChangeNotification forKey:@"NSImageRepRegistryDidChangeNotification"]; else NSLog([@"Can't initialize NSImageRepRegistryDidChangeNotification with object " stringByAppendingString:[NSImageRepRegistryDidChangeNotification description]]);
if ([NSIncludedKeysBinding isKindOfClass:[NSString class]]) [d setObject:NSIncludedKeysBinding forKey:@"NSIncludedKeysBinding"]; else NSLog([@"Can't initialize NSIncludedKeysBinding with object " stringByAppendingString:[NSIncludedKeysBinding description]]);
if ([NSInitialKeyBinding isKindOfClass:[NSString class]]) [d setObject:NSInitialKeyBinding forKey:@"NSInitialKeyBinding"]; else NSLog([@"Can't initialize NSInitialKeyBinding with object " stringByAppendingString:[NSInitialKeyBinding description]]);
if ([NSInitialValueBinding isKindOfClass:[NSString class]]) [d setObject:NSInitialValueBinding forKey:@"NSInitialValueBinding"]; else NSLog([@"Can't initialize NSInitialValueBinding with object " stringByAppendingString:[NSInitialValueBinding description]]);
if ([NSInkTextPboardType isKindOfClass:[NSString class]]) [d setObject:NSInkTextPboardType forKey:@"NSInkTextPboardType"]; else NSLog([@"Can't initialize NSInkTextPboardType with object " stringByAppendingString:[NSInkTextPboardType description]]);
if ([NSInsertsNullPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSInsertsNullPlaceholderBindingOption forKey:@"NSInsertsNullPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSInsertsNullPlaceholderBindingOption with object " stringByAppendingString:[NSInsertsNullPlaceholderBindingOption description]]);
if ([NSInterfaceStyleDefault isKindOfClass:[NSString class]]) [d setObject:NSInterfaceStyleDefault forKey:@"NSInterfaceStyleDefault"]; else NSLog([@"Can't initialize NSInterfaceStyleDefault with object " stringByAppendingString:[NSInterfaceStyleDefault description]]);
if ([NSInvokesSeparatelyWithArrayObjectsBindingOption isKindOfClass:[NSString class]]) [d setObject:NSInvokesSeparatelyWithArrayObjectsBindingOption forKey:@"NSInvokesSeparatelyWithArrayObjectsBindingOption"]; else NSLog([@"Can't initialize NSInvokesSeparatelyWithArrayObjectsBindingOption with object " stringByAppendingString:[NSInvokesSeparatelyWithArrayObjectsBindingOption description]]);
if ([NSIsIndeterminateBinding isKindOfClass:[NSString class]]) [d setObject:NSIsIndeterminateBinding forKey:@"NSIsIndeterminateBinding"]; else NSLog([@"Can't initialize NSIsIndeterminateBinding with object " stringByAppendingString:[NSIsIndeterminateBinding description]]);
if ([NSKernAttributeName isKindOfClass:[NSString class]]) [d setObject:NSKernAttributeName forKey:@"NSKernAttributeName"]; else NSLog([@"Can't initialize NSKernAttributeName with object " stringByAppendingString:[NSKernAttributeName description]]);
if ([NSKeywordsDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSKeywordsDocumentAttribute forKey:@"NSKeywordsDocumentAttribute"]; else NSLog([@"Can't initialize NSKeywordsDocumentAttribute with object " stringByAppendingString:[NSKeywordsDocumentAttribute description]]);
if ([NSLabelBinding isKindOfClass:[NSString class]]) [d setObject:NSLabelBinding forKey:@"NSLabelBinding"]; else NSLog([@"Can't initialize NSLabelBinding with object " stringByAppendingString:[NSLabelBinding description]]);
if ([NSLeftMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSLeftMarginDocumentAttribute forKey:@"NSLeftMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSLeftMarginDocumentAttribute with object " stringByAppendingString:[NSLeftMarginDocumentAttribute description]]);
if ([NSLigatureAttributeName isKindOfClass:[NSString class]]) [d setObject:NSLigatureAttributeName forKey:@"NSLigatureAttributeName"]; else NSLog([@"Can't initialize NSLigatureAttributeName with object " stringByAppendingString:[NSLigatureAttributeName description]]);
if ([NSLinkAttributeName isKindOfClass:[NSString class]]) [d setObject:NSLinkAttributeName forKey:@"NSLinkAttributeName"]; else NSLog([@"Can't initialize NSLinkAttributeName with object " stringByAppendingString:[NSLinkAttributeName description]]);
if ([NSLocalizedKeyDictionaryBinding isKindOfClass:[NSString class]]) [d setObject:NSLocalizedKeyDictionaryBinding forKey:@"NSLocalizedKeyDictionaryBinding"]; else NSLog([@"Can't initialize NSLocalizedKeyDictionaryBinding with object " stringByAppendingString:[NSLocalizedKeyDictionaryBinding description]]);
if ([NSMacSimpleTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSMacSimpleTextDocumentType forKey:@"NSMacSimpleTextDocumentType"]; else NSLog([@"Can't initialize NSMacSimpleTextDocumentType with object " stringByAppendingString:[NSMacSimpleTextDocumentType description]]);
if ([NSManagedObjectContextBinding isKindOfClass:[NSString class]]) [d setObject:NSManagedObjectContextBinding forKey:@"NSManagedObjectContextBinding"]; else NSLog([@"Can't initialize NSManagedObjectContextBinding with object " stringByAppendingString:[NSManagedObjectContextBinding description]]);
if ([NSMarkedClauseSegmentAttributeName isKindOfClass:[NSString class]]) [d setObject:NSMarkedClauseSegmentAttributeName forKey:@"NSMarkedClauseSegmentAttributeName"]; else NSLog([@"Can't initialize NSMarkedClauseSegmentAttributeName with object " stringByAppendingString:[NSMarkedClauseSegmentAttributeName description]]);
if ([NSMaxValueBinding isKindOfClass:[NSString class]]) [d setObject:NSMaxValueBinding forKey:@"NSMaxValueBinding"]; else NSLog([@"Can't initialize NSMaxValueBinding with object " stringByAppendingString:[NSMaxValueBinding description]]);
if ([NSMaxWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSMaxWidthBinding forKey:@"NSMaxWidthBinding"]; else NSLog([@"Can't initialize NSMaxWidthBinding with object " stringByAppendingString:[NSMaxWidthBinding description]]);
if ([NSMaximumRecentsBinding isKindOfClass:[NSString class]]) [d setObject:NSMaximumRecentsBinding forKey:@"NSMaximumRecentsBinding"]; else NSLog([@"Can't initialize NSMaximumRecentsBinding with object " stringByAppendingString:[NSMaximumRecentsBinding description]]);
if ([NSMenuDidAddItemNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidAddItemNotification forKey:@"NSMenuDidAddItemNotification"]; else NSLog([@"Can't initialize NSMenuDidAddItemNotification with object " stringByAppendingString:[NSMenuDidAddItemNotification description]]);
if ([NSMenuDidBeginTrackingNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidBeginTrackingNotification forKey:@"NSMenuDidBeginTrackingNotification"]; else NSLog([@"Can't initialize NSMenuDidBeginTrackingNotification with object " stringByAppendingString:[NSMenuDidBeginTrackingNotification description]]);
if ([NSMenuDidChangeItemNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidChangeItemNotification forKey:@"NSMenuDidChangeItemNotification"]; else NSLog([@"Can't initialize NSMenuDidChangeItemNotification with object " stringByAppendingString:[NSMenuDidChangeItemNotification description]]);
if ([NSMenuDidEndTrackingNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidEndTrackingNotification forKey:@"NSMenuDidEndTrackingNotification"]; else NSLog([@"Can't initialize NSMenuDidEndTrackingNotification with object " stringByAppendingString:[NSMenuDidEndTrackingNotification description]]);
if ([NSMenuDidRemoveItemNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidRemoveItemNotification forKey:@"NSMenuDidRemoveItemNotification"]; else NSLog([@"Can't initialize NSMenuDidRemoveItemNotification with object " stringByAppendingString:[NSMenuDidRemoveItemNotification description]]);
if ([NSMenuDidSendActionNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuDidSendActionNotification forKey:@"NSMenuDidSendActionNotification"]; else NSLog([@"Can't initialize NSMenuDidSendActionNotification with object " stringByAppendingString:[NSMenuDidSendActionNotification description]]);
if ([NSMenuWillSendActionNotification isKindOfClass:[NSString class]]) [d setObject:NSMenuWillSendActionNotification forKey:@"NSMenuWillSendActionNotification"]; else NSLog([@"Can't initialize NSMenuWillSendActionNotification with object " stringByAppendingString:[NSMenuWillSendActionNotification description]]);
if ([NSMinValueBinding isKindOfClass:[NSString class]]) [d setObject:NSMinValueBinding forKey:@"NSMinValueBinding"]; else NSLog([@"Can't initialize NSMinValueBinding with object " stringByAppendingString:[NSMinValueBinding description]]);
if ([NSMinWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSMinWidthBinding forKey:@"NSMinWidthBinding"]; else NSLog([@"Can't initialize NSMinWidthBinding with object " stringByAppendingString:[NSMinWidthBinding description]]);
if ([NSMixedStateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSMixedStateImageBinding forKey:@"NSMixedStateImageBinding"]; else NSLog([@"Can't initialize NSMixedStateImageBinding with object " stringByAppendingString:[NSMixedStateImageBinding description]]);
if ([NSModalPanelRunLoopMode isKindOfClass:[NSString class]]) [d setObject:NSModalPanelRunLoopMode forKey:@"NSModalPanelRunLoopMode"]; else NSLog([@"Can't initialize NSModalPanelRunLoopMode with object " stringByAppendingString:[NSModalPanelRunLoopMode description]]);
if ([NSModificationTimeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSModificationTimeDocumentAttribute forKey:@"NSModificationTimeDocumentAttribute"]; else NSLog([@"Can't initialize NSModificationTimeDocumentAttribute with object " stringByAppendingString:[NSModificationTimeDocumentAttribute description]]);
if ([NSMultipleTextSelectionPboardType isKindOfClass:[NSString class]]) [d setObject:NSMultipleTextSelectionPboardType forKey:@"NSMultipleTextSelectionPboardType"]; else NSLog([@"Can't initialize NSMultipleTextSelectionPboardType with object " stringByAppendingString:[NSMultipleTextSelectionPboardType description]]);
if ([NSMultipleValuesMarker isKindOfClass:[NSString class]]) [d setObject:NSMultipleValuesMarker forKey:@"NSMultipleValuesMarker"]; else NSLog([@"Can't initialize NSMultipleValuesMarker with object " stringByAppendingString:[NSMultipleValuesMarker description]]);
if ([NSMultipleValuesPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSMultipleValuesPlaceholderBindingOption forKey:@"NSMultipleValuesPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSMultipleValuesPlaceholderBindingOption with object " stringByAppendingString:[NSMultipleValuesPlaceholderBindingOption description]]);
if ([NSNamedColorSpace isKindOfClass:[NSString class]]) [d setObject:NSNamedColorSpace forKey:@"NSNamedColorSpace"]; else NSLog([@"Can't initialize NSNamedColorSpace with object " stringByAppendingString:[NSNamedColorSpace description]]);
if ([NSNibLoadingException isKindOfClass:[NSString class]]) [d setObject:NSNibLoadingException forKey:@"NSNibLoadingException"]; else NSLog([@"Can't initialize NSNibLoadingException with object " stringByAppendingString:[NSNibLoadingException description]]);
if ([NSNibOwner isKindOfClass:[NSString class]]) [d setObject:NSNibOwner forKey:@"NSNibOwner"]; else NSLog([@"Can't initialize NSNibOwner with object " stringByAppendingString:[NSNibOwner description]]);
if ([NSNibTopLevelObjects isKindOfClass:[NSString class]]) [d setObject:NSNibTopLevelObjects forKey:@"NSNibTopLevelObjects"]; else NSLog([@"Can't initialize NSNibTopLevelObjects with object " stringByAppendingString:[NSNibTopLevelObjects description]]);
if ([NSNoSelectionMarker isKindOfClass:[NSString class]]) [d setObject:NSNoSelectionMarker forKey:@"NSNoSelectionMarker"]; else NSLog([@"Can't initialize NSNoSelectionMarker with object " stringByAppendingString:[NSNoSelectionMarker description]]);
if ([NSNoSelectionPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSNoSelectionPlaceholderBindingOption forKey:@"NSNoSelectionPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSNoSelectionPlaceholderBindingOption with object " stringByAppendingString:[NSNoSelectionPlaceholderBindingOption description]]);
if ([NSNotApplicableMarker isKindOfClass:[NSString class]]) [d setObject:NSNotApplicableMarker forKey:@"NSNotApplicableMarker"]; else NSLog([@"Can't initialize NSNotApplicableMarker with object " stringByAppendingString:[NSNotApplicableMarker description]]);
if ([NSNotApplicablePlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSNotApplicablePlaceholderBindingOption forKey:@"NSNotApplicablePlaceholderBindingOption"]; else NSLog([@"Can't initialize NSNotApplicablePlaceholderBindingOption with object " stringByAppendingString:[NSNotApplicablePlaceholderBindingOption description]]);
if ([NSNullPlaceholderBindingOption isKindOfClass:[NSString class]]) [d setObject:NSNullPlaceholderBindingOption forKey:@"NSNullPlaceholderBindingOption"]; else NSLog([@"Can't initialize NSNullPlaceholderBindingOption with object " stringByAppendingString:[NSNullPlaceholderBindingOption description]]);
if ([NSObliquenessAttributeName isKindOfClass:[NSString class]]) [d setObject:NSObliquenessAttributeName forKey:@"NSObliquenessAttributeName"]; else NSLog([@"Can't initialize NSObliquenessAttributeName with object " stringByAppendingString:[NSObliquenessAttributeName description]]);
if ([NSObservedKeyPathKey isKindOfClass:[NSString class]]) [d setObject:NSObservedKeyPathKey forKey:@"NSObservedKeyPathKey"]; else NSLog([@"Can't initialize NSObservedKeyPathKey with object " stringByAppendingString:[NSObservedKeyPathKey description]]);
if ([NSObservedObjectKey isKindOfClass:[NSString class]]) [d setObject:NSObservedObjectKey forKey:@"NSObservedObjectKey"]; else NSLog([@"Can't initialize NSObservedObjectKey with object " stringByAppendingString:[NSObservedObjectKey description]]);
if ([NSOffStateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSOffStateImageBinding forKey:@"NSOffStateImageBinding"]; else NSLog([@"Can't initialize NSOffStateImageBinding with object " stringByAppendingString:[NSOffStateImageBinding description]]);
if ([NSOfficeOpenXMLTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSOfficeOpenXMLTextDocumentType forKey:@"NSOfficeOpenXMLTextDocumentType"]; else NSLog([@"Can't initialize NSOfficeOpenXMLTextDocumentType with object " stringByAppendingString:[NSOfficeOpenXMLTextDocumentType description]]);
if ([NSOnStateImageBinding isKindOfClass:[NSString class]]) [d setObject:NSOnStateImageBinding forKey:@"NSOnStateImageBinding"]; else NSLog([@"Can't initialize NSOnStateImageBinding with object " stringByAppendingString:[NSOnStateImageBinding description]]);
if ([NSOpenDocumentTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSOpenDocumentTextDocumentType forKey:@"NSOpenDocumentTextDocumentType"]; else NSLog([@"Can't initialize NSOpenDocumentTextDocumentType with object " stringByAppendingString:[NSOpenDocumentTextDocumentType description]]);
if ([NSOptionsKey isKindOfClass:[NSString class]]) [d setObject:NSOptionsKey forKey:@"NSOptionsKey"]; else NSLog([@"Can't initialize NSOptionsKey with object " stringByAppendingString:[NSOptionsKey description]]);
if ([NSOutlineViewColumnDidMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewColumnDidMoveNotification forKey:@"NSOutlineViewColumnDidMoveNotification"]; else NSLog([@"Can't initialize NSOutlineViewColumnDidMoveNotification with object " stringByAppendingString:[NSOutlineViewColumnDidMoveNotification description]]);
if ([NSOutlineViewColumnDidResizeNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewColumnDidResizeNotification forKey:@"NSOutlineViewColumnDidResizeNotification"]; else NSLog([@"Can't initialize NSOutlineViewColumnDidResizeNotification with object " stringByAppendingString:[NSOutlineViewColumnDidResizeNotification description]]);
if ([NSOutlineViewItemDidCollapseNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemDidCollapseNotification forKey:@"NSOutlineViewItemDidCollapseNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemDidCollapseNotification with object " stringByAppendingString:[NSOutlineViewItemDidCollapseNotification description]]);
if ([NSOutlineViewItemDidExpandNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemDidExpandNotification forKey:@"NSOutlineViewItemDidExpandNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemDidExpandNotification with object " stringByAppendingString:[NSOutlineViewItemDidExpandNotification description]]);
if ([NSOutlineViewItemWillCollapseNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemWillCollapseNotification forKey:@"NSOutlineViewItemWillCollapseNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemWillCollapseNotification with object " stringByAppendingString:[NSOutlineViewItemWillCollapseNotification description]]);
if ([NSOutlineViewItemWillExpandNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewItemWillExpandNotification forKey:@"NSOutlineViewItemWillExpandNotification"]; else NSLog([@"Can't initialize NSOutlineViewItemWillExpandNotification with object " stringByAppendingString:[NSOutlineViewItemWillExpandNotification description]]);
if ([NSOutlineViewSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewSelectionDidChangeNotification forKey:@"NSOutlineViewSelectionDidChangeNotification"]; else NSLog([@"Can't initialize NSOutlineViewSelectionDidChangeNotification with object " stringByAppendingString:[NSOutlineViewSelectionDidChangeNotification description]]);
if ([NSOutlineViewSelectionIsChangingNotification isKindOfClass:[NSString class]]) [d setObject:NSOutlineViewSelectionIsChangingNotification forKey:@"NSOutlineViewSelectionIsChangingNotification"]; else NSLog([@"Can't initialize NSOutlineViewSelectionIsChangingNotification with object " stringByAppendingString:[NSOutlineViewSelectionIsChangingNotification description]]);
if ([NSPDFPboardType isKindOfClass:[NSString class]]) [d setObject:NSPDFPboardType forKey:@"NSPDFPboardType"]; else NSLog([@"Can't initialize NSPDFPboardType with object " stringByAppendingString:[NSPDFPboardType description]]);
if ([NSPICTPboardType isKindOfClass:[NSString class]]) [d setObject:NSPICTPboardType forKey:@"NSPICTPboardType"]; else NSLog([@"Can't initialize NSPICTPboardType with object " stringByAppendingString:[NSPICTPboardType description]]);
if ([NSPPDIncludeNotFoundException isKindOfClass:[NSString class]]) [d setObject:NSPPDIncludeNotFoundException forKey:@"NSPPDIncludeNotFoundException"]; else NSLog([@"Can't initialize NSPPDIncludeNotFoundException with object " stringByAppendingString:[NSPPDIncludeNotFoundException description]]);
if ([NSPPDIncludeStackOverflowException isKindOfClass:[NSString class]]) [d setObject:NSPPDIncludeStackOverflowException forKey:@"NSPPDIncludeStackOverflowException"]; else NSLog([@"Can't initialize NSPPDIncludeStackOverflowException with object " stringByAppendingString:[NSPPDIncludeStackOverflowException description]]);
if ([NSPPDIncludeStackUnderflowException isKindOfClass:[NSString class]]) [d setObject:NSPPDIncludeStackUnderflowException forKey:@"NSPPDIncludeStackUnderflowException"]; else NSLog([@"Can't initialize NSPPDIncludeStackUnderflowException with object " stringByAppendingString:[NSPPDIncludeStackUnderflowException description]]);
if ([NSPPDParseException isKindOfClass:[NSString class]]) [d setObject:NSPPDParseException forKey:@"NSPPDParseException"]; else NSLog([@"Can't initialize NSPPDParseException with object " stringByAppendingString:[NSPPDParseException description]]);
if ([NSPaperSizeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSPaperSizeDocumentAttribute forKey:@"NSPaperSizeDocumentAttribute"]; else NSLog([@"Can't initialize NSPaperSizeDocumentAttribute with object " stringByAppendingString:[NSPaperSizeDocumentAttribute description]]);
if ([NSParagraphStyleAttributeName isKindOfClass:[NSString class]]) [d setObject:NSParagraphStyleAttributeName forKey:@"NSParagraphStyleAttributeName"]; else NSLog([@"Can't initialize NSParagraphStyleAttributeName with object " stringByAppendingString:[NSParagraphStyleAttributeName description]]);
if ([NSPasteboardCommunicationException isKindOfClass:[NSString class]]) [d setObject:NSPasteboardCommunicationException forKey:@"NSPasteboardCommunicationException"]; else NSLog([@"Can't initialize NSPasteboardCommunicationException with object " stringByAppendingString:[NSPasteboardCommunicationException description]]);
if ([NSPatternColorSpace isKindOfClass:[NSString class]]) [d setObject:NSPatternColorSpace forKey:@"NSPatternColorSpace"]; else NSLog([@"Can't initialize NSPatternColorSpace with object " stringByAppendingString:[NSPatternColorSpace description]]);
if ([NSPlainFileType isKindOfClass:[NSString class]]) [d setObject:NSPlainFileType forKey:@"NSPlainFileType"]; else NSLog([@"Can't initialize NSPlainFileType with object " stringByAppendingString:[NSPlainFileType description]]);
if ([NSPlainTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSPlainTextDocumentType forKey:@"NSPlainTextDocumentType"]; else NSLog([@"Can't initialize NSPlainTextDocumentType with object " stringByAppendingString:[NSPlainTextDocumentType description]]);
if ([NSPopUpButtonCellWillPopUpNotification isKindOfClass:[NSString class]]) [d setObject:NSPopUpButtonCellWillPopUpNotification forKey:@"NSPopUpButtonCellWillPopUpNotification"]; else NSLog([@"Can't initialize NSPopUpButtonCellWillPopUpNotification with object " stringByAppendingString:[NSPopUpButtonCellWillPopUpNotification description]]);
if ([NSPopUpButtonWillPopUpNotification isKindOfClass:[NSString class]]) [d setObject:NSPopUpButtonWillPopUpNotification forKey:@"NSPopUpButtonWillPopUpNotification"]; else NSLog([@"Can't initialize NSPopUpButtonWillPopUpNotification with object " stringByAppendingString:[NSPopUpButtonWillPopUpNotification description]]);
if ([NSPostScriptPboardType isKindOfClass:[NSString class]]) [d setObject:NSPostScriptPboardType forKey:@"NSPostScriptPboardType"]; else NSLog([@"Can't initialize NSPostScriptPboardType with object " stringByAppendingString:[NSPostScriptPboardType description]]);
if ([NSPredicateBinding isKindOfClass:[NSString class]]) [d setObject:NSPredicateBinding forKey:@"NSPredicateBinding"]; else NSLog([@"Can't initialize NSPredicateBinding with object " stringByAppendingString:[NSPredicateBinding description]]);
if ([NSPredicateFormatBindingOption isKindOfClass:[NSString class]]) [d setObject:NSPredicateFormatBindingOption forKey:@"NSPredicateFormatBindingOption"]; else NSLog([@"Can't initialize NSPredicateFormatBindingOption with object " stringByAppendingString:[NSPredicateFormatBindingOption description]]);
if ([NSPrefixSpacesDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSPrefixSpacesDocumentAttribute forKey:@"NSPrefixSpacesDocumentAttribute"]; else NSLog([@"Can't initialize NSPrefixSpacesDocumentAttribute with object " stringByAppendingString:[NSPrefixSpacesDocumentAttribute description]]);
if ([NSPrintAllPages isKindOfClass:[NSString class]]) [d setObject:NSPrintAllPages forKey:@"NSPrintAllPages"]; else NSLog([@"Can't initialize NSPrintAllPages with object " stringByAppendingString:[NSPrintAllPages description]]);
if ([NSPrintBottomMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintBottomMargin forKey:@"NSPrintBottomMargin"]; else NSLog([@"Can't initialize NSPrintBottomMargin with object " stringByAppendingString:[NSPrintBottomMargin description]]);
if ([NSPrintCancelJob isKindOfClass:[NSString class]]) [d setObject:NSPrintCancelJob forKey:@"NSPrintCancelJob"]; else NSLog([@"Can't initialize NSPrintCancelJob with object " stringByAppendingString:[NSPrintCancelJob description]]);
if ([NSPrintCopies isKindOfClass:[NSString class]]) [d setObject:NSPrintCopies forKey:@"NSPrintCopies"]; else NSLog([@"Can't initialize NSPrintCopies with object " stringByAppendingString:[NSPrintCopies description]]);
if ([NSPrintDetailedErrorReporting isKindOfClass:[NSString class]]) [d setObject:NSPrintDetailedErrorReporting forKey:@"NSPrintDetailedErrorReporting"]; else NSLog([@"Can't initialize NSPrintDetailedErrorReporting with object " stringByAppendingString:[NSPrintDetailedErrorReporting description]]);
if ([NSPrintFaxCoverSheetName isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxCoverSheetName forKey:@"NSPrintFaxCoverSheetName"]; else NSLog([@"Can't initialize NSPrintFaxCoverSheetName with object " stringByAppendingString:[NSPrintFaxCoverSheetName description]]);
if ([NSPrintFaxHighResolution isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxHighResolution forKey:@"NSPrintFaxHighResolution"]; else NSLog([@"Can't initialize NSPrintFaxHighResolution with object " stringByAppendingString:[NSPrintFaxHighResolution description]]);
if ([NSPrintFaxJob isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxJob forKey:@"NSPrintFaxJob"]; else NSLog([@"Can't initialize NSPrintFaxJob with object " stringByAppendingString:[NSPrintFaxJob description]]);
if ([NSPrintFaxModem isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxModem forKey:@"NSPrintFaxModem"]; else NSLog([@"Can't initialize NSPrintFaxModem with object " stringByAppendingString:[NSPrintFaxModem description]]);
if ([NSPrintFaxNumber isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxNumber forKey:@"NSPrintFaxNumber"]; else NSLog([@"Can't initialize NSPrintFaxNumber with object " stringByAppendingString:[NSPrintFaxNumber description]]);
if ([NSPrintFaxReceiverNames isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxReceiverNames forKey:@"NSPrintFaxReceiverNames"]; else NSLog([@"Can't initialize NSPrintFaxReceiverNames with object " stringByAppendingString:[NSPrintFaxReceiverNames description]]);
if ([NSPrintFaxReceiverNumbers isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxReceiverNumbers forKey:@"NSPrintFaxReceiverNumbers"]; else NSLog([@"Can't initialize NSPrintFaxReceiverNumbers with object " stringByAppendingString:[NSPrintFaxReceiverNumbers description]]);
if ([NSPrintFaxReturnReceipt isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxReturnReceipt forKey:@"NSPrintFaxReturnReceipt"]; else NSLog([@"Can't initialize NSPrintFaxReturnReceipt with object " stringByAppendingString:[NSPrintFaxReturnReceipt description]]);
if ([NSPrintFaxSendTime isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxSendTime forKey:@"NSPrintFaxSendTime"]; else NSLog([@"Can't initialize NSPrintFaxSendTime with object " stringByAppendingString:[NSPrintFaxSendTime description]]);
if ([NSPrintFaxTrimPageEnds isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxTrimPageEnds forKey:@"NSPrintFaxTrimPageEnds"]; else NSLog([@"Can't initialize NSPrintFaxTrimPageEnds with object " stringByAppendingString:[NSPrintFaxTrimPageEnds description]]);
if ([NSPrintFaxUseCoverSheet isKindOfClass:[NSString class]]) [d setObject:NSPrintFaxUseCoverSheet forKey:@"NSPrintFaxUseCoverSheet"]; else NSLog([@"Can't initialize NSPrintFaxUseCoverSheet with object " stringByAppendingString:[NSPrintFaxUseCoverSheet description]]);
if ([NSPrintFirstPage isKindOfClass:[NSString class]]) [d setObject:NSPrintFirstPage forKey:@"NSPrintFirstPage"]; else NSLog([@"Can't initialize NSPrintFirstPage with object " stringByAppendingString:[NSPrintFirstPage description]]);
if ([NSPrintFormName isKindOfClass:[NSString class]]) [d setObject:NSPrintFormName forKey:@"NSPrintFormName"]; else NSLog([@"Can't initialize NSPrintFormName with object " stringByAppendingString:[NSPrintFormName description]]);
if ([NSPrintHeaderAndFooter isKindOfClass:[NSString class]]) [d setObject:NSPrintHeaderAndFooter forKey:@"NSPrintHeaderAndFooter"]; else NSLog([@"Can't initialize NSPrintHeaderAndFooter with object " stringByAppendingString:[NSPrintHeaderAndFooter description]]);
if ([NSPrintHorizontalPagination isKindOfClass:[NSString class]]) [d setObject:NSPrintHorizontalPagination forKey:@"NSPrintHorizontalPagination"]; else NSLog([@"Can't initialize NSPrintHorizontalPagination with object " stringByAppendingString:[NSPrintHorizontalPagination description]]);
if ([NSPrintHorizontallyCentered isKindOfClass:[NSString class]]) [d setObject:NSPrintHorizontallyCentered forKey:@"NSPrintHorizontallyCentered"]; else NSLog([@"Can't initialize NSPrintHorizontallyCentered with object " stringByAppendingString:[NSPrintHorizontallyCentered description]]);
if ([NSPrintJobDisposition isKindOfClass:[NSString class]]) [d setObject:NSPrintJobDisposition forKey:@"NSPrintJobDisposition"]; else NSLog([@"Can't initialize NSPrintJobDisposition with object " stringByAppendingString:[NSPrintJobDisposition description]]);
if ([NSPrintJobFeatures isKindOfClass:[NSString class]]) [d setObject:NSPrintJobFeatures forKey:@"NSPrintJobFeatures"]; else NSLog([@"Can't initialize NSPrintJobFeatures with object " stringByAppendingString:[NSPrintJobFeatures description]]);
if ([NSPrintLastPage isKindOfClass:[NSString class]]) [d setObject:NSPrintLastPage forKey:@"NSPrintLastPage"]; else NSLog([@"Can't initialize NSPrintLastPage with object " stringByAppendingString:[NSPrintLastPage description]]);
if ([NSPrintLeftMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintLeftMargin forKey:@"NSPrintLeftMargin"]; else NSLog([@"Can't initialize NSPrintLeftMargin with object " stringByAppendingString:[NSPrintLeftMargin description]]);
if ([NSPrintManualFeed isKindOfClass:[NSString class]]) [d setObject:NSPrintManualFeed forKey:@"NSPrintManualFeed"]; else NSLog([@"Can't initialize NSPrintManualFeed with object " stringByAppendingString:[NSPrintManualFeed description]]);
if ([NSPrintMustCollate isKindOfClass:[NSString class]]) [d setObject:NSPrintMustCollate forKey:@"NSPrintMustCollate"]; else NSLog([@"Can't initialize NSPrintMustCollate with object " stringByAppendingString:[NSPrintMustCollate description]]);
if ([NSPrintOperationExistsException isKindOfClass:[NSString class]]) [d setObject:NSPrintOperationExistsException forKey:@"NSPrintOperationExistsException"]; else NSLog([@"Can't initialize NSPrintOperationExistsException with object " stringByAppendingString:[NSPrintOperationExistsException description]]);
if ([NSPrintOrientation isKindOfClass:[NSString class]]) [d setObject:NSPrintOrientation forKey:@"NSPrintOrientation"]; else NSLog([@"Can't initialize NSPrintOrientation with object " stringByAppendingString:[NSPrintOrientation description]]);
if ([NSPrintPackageException isKindOfClass:[NSString class]]) [d setObject:NSPrintPackageException forKey:@"NSPrintPackageException"]; else NSLog([@"Can't initialize NSPrintPackageException with object " stringByAppendingString:[NSPrintPackageException description]]);
if ([NSPrintPagesAcross isKindOfClass:[NSString class]]) [d setObject:NSPrintPagesAcross forKey:@"NSPrintPagesAcross"]; else NSLog([@"Can't initialize NSPrintPagesAcross with object " stringByAppendingString:[NSPrintPagesAcross description]]);
if ([NSPrintPagesDown isKindOfClass:[NSString class]]) [d setObject:NSPrintPagesDown forKey:@"NSPrintPagesDown"]; else NSLog([@"Can't initialize NSPrintPagesDown with object " stringByAppendingString:[NSPrintPagesDown description]]);
if ([NSPrintPagesPerSheet isKindOfClass:[NSString class]]) [d setObject:NSPrintPagesPerSheet forKey:@"NSPrintPagesPerSheet"]; else NSLog([@"Can't initialize NSPrintPagesPerSheet with object " stringByAppendingString:[NSPrintPagesPerSheet description]]);
if ([NSPrintPanelAccessorySummaryItemDescriptionKey isKindOfClass:[NSString class]]) [d setObject:NSPrintPanelAccessorySummaryItemDescriptionKey forKey:@"NSPrintPanelAccessorySummaryItemDescriptionKey"]; else NSLog([@"Can't initialize NSPrintPanelAccessorySummaryItemDescriptionKey with object " stringByAppendingString:[NSPrintPanelAccessorySummaryItemDescriptionKey description]]);
if ([NSPrintPanelAccessorySummaryItemNameKey isKindOfClass:[NSString class]]) [d setObject:NSPrintPanelAccessorySummaryItemNameKey forKey:@"NSPrintPanelAccessorySummaryItemNameKey"]; else NSLog([@"Can't initialize NSPrintPanelAccessorySummaryItemNameKey with object " stringByAppendingString:[NSPrintPanelAccessorySummaryItemNameKey description]]);
if ([NSPrintPaperFeed isKindOfClass:[NSString class]]) [d setObject:NSPrintPaperFeed forKey:@"NSPrintPaperFeed"]; else NSLog([@"Can't initialize NSPrintPaperFeed with object " stringByAppendingString:[NSPrintPaperFeed description]]);
if ([NSPrintPaperName isKindOfClass:[NSString class]]) [d setObject:NSPrintPaperName forKey:@"NSPrintPaperName"]; else NSLog([@"Can't initialize NSPrintPaperName with object " stringByAppendingString:[NSPrintPaperName description]]);
if ([NSPrintPaperSize isKindOfClass:[NSString class]]) [d setObject:NSPrintPaperSize forKey:@"NSPrintPaperSize"]; else NSLog([@"Can't initialize NSPrintPaperSize with object " stringByAppendingString:[NSPrintPaperSize description]]);
if ([NSPrintPhotoJobStyleHint isKindOfClass:[NSString class]]) [d setObject:NSPrintPhotoJobStyleHint forKey:@"NSPrintPhotoJobStyleHint"]; else NSLog([@"Can't initialize NSPrintPhotoJobStyleHint with object " stringByAppendingString:[NSPrintPhotoJobStyleHint description]]);
if ([NSPrintPreviewJob isKindOfClass:[NSString class]]) [d setObject:NSPrintPreviewJob forKey:@"NSPrintPreviewJob"]; else NSLog([@"Can't initialize NSPrintPreviewJob with object " stringByAppendingString:[NSPrintPreviewJob description]]);
if ([NSPrintPrinter isKindOfClass:[NSString class]]) [d setObject:NSPrintPrinter forKey:@"NSPrintPrinter"]; else NSLog([@"Can't initialize NSPrintPrinter with object " stringByAppendingString:[NSPrintPrinter description]]);
if ([NSPrintPrinterName isKindOfClass:[NSString class]]) [d setObject:NSPrintPrinterName forKey:@"NSPrintPrinterName"]; else NSLog([@"Can't initialize NSPrintPrinterName with object " stringByAppendingString:[NSPrintPrinterName description]]);
if ([NSPrintReversePageOrder isKindOfClass:[NSString class]]) [d setObject:NSPrintReversePageOrder forKey:@"NSPrintReversePageOrder"]; else NSLog([@"Can't initialize NSPrintReversePageOrder with object " stringByAppendingString:[NSPrintReversePageOrder description]]);
if ([NSPrintRightMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintRightMargin forKey:@"NSPrintRightMargin"]; else NSLog([@"Can't initialize NSPrintRightMargin with object " stringByAppendingString:[NSPrintRightMargin description]]);
if ([NSPrintSaveJob isKindOfClass:[NSString class]]) [d setObject:NSPrintSaveJob forKey:@"NSPrintSaveJob"]; else NSLog([@"Can't initialize NSPrintSaveJob with object " stringByAppendingString:[NSPrintSaveJob description]]);
if ([NSPrintSavePath isKindOfClass:[NSString class]]) [d setObject:NSPrintSavePath forKey:@"NSPrintSavePath"]; else NSLog([@"Can't initialize NSPrintSavePath with object " stringByAppendingString:[NSPrintSavePath description]]);
if ([NSPrintScalingFactor isKindOfClass:[NSString class]]) [d setObject:NSPrintScalingFactor forKey:@"NSPrintScalingFactor"]; else NSLog([@"Can't initialize NSPrintScalingFactor with object " stringByAppendingString:[NSPrintScalingFactor description]]);
if ([NSPrintSpoolJob isKindOfClass:[NSString class]]) [d setObject:NSPrintSpoolJob forKey:@"NSPrintSpoolJob"]; else NSLog([@"Can't initialize NSPrintSpoolJob with object " stringByAppendingString:[NSPrintSpoolJob description]]);
if ([NSPrintTime isKindOfClass:[NSString class]]) [d setObject:NSPrintTime forKey:@"NSPrintTime"]; else NSLog([@"Can't initialize NSPrintTime with object " stringByAppendingString:[NSPrintTime description]]);
if ([NSPrintTopMargin isKindOfClass:[NSString class]]) [d setObject:NSPrintTopMargin forKey:@"NSPrintTopMargin"]; else NSLog([@"Can't initialize NSPrintTopMargin with object " stringByAppendingString:[NSPrintTopMargin description]]);
if ([NSPrintVerticalPagination isKindOfClass:[NSString class]]) [d setObject:NSPrintVerticalPagination forKey:@"NSPrintVerticalPagination"]; else NSLog([@"Can't initialize NSPrintVerticalPagination with object " stringByAppendingString:[NSPrintVerticalPagination description]]);
if ([NSPrintVerticallyCentered isKindOfClass:[NSString class]]) [d setObject:NSPrintVerticallyCentered forKey:@"NSPrintVerticallyCentered"]; else NSLog([@"Can't initialize NSPrintVerticallyCentered with object " stringByAppendingString:[NSPrintVerticallyCentered description]]);
if ([NSPrintingCommunicationException isKindOfClass:[NSString class]]) [d setObject:NSPrintingCommunicationException forKey:@"NSPrintingCommunicationException"]; else NSLog([@"Can't initialize NSPrintingCommunicationException with object " stringByAppendingString:[NSPrintingCommunicationException description]]);
if ([NSRTFDPboardType isKindOfClass:[NSString class]]) [d setObject:NSRTFDPboardType forKey:@"NSRTFDPboardType"]; else NSLog([@"Can't initialize NSRTFDPboardType with object " stringByAppendingString:[NSRTFDPboardType description]]);
if ([NSRTFDTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSRTFDTextDocumentType forKey:@"NSRTFDTextDocumentType"]; else NSLog([@"Can't initialize NSRTFDTextDocumentType with object " stringByAppendingString:[NSRTFDTextDocumentType description]]);
if ([NSRTFPboardType isKindOfClass:[NSString class]]) [d setObject:NSRTFPboardType forKey:@"NSRTFPboardType"]; else NSLog([@"Can't initialize NSRTFPboardType with object " stringByAppendingString:[NSRTFPboardType description]]);
if ([NSRTFPropertyStackOverflowException isKindOfClass:[NSString class]]) [d setObject:NSRTFPropertyStackOverflowException forKey:@"NSRTFPropertyStackOverflowException"]; else NSLog([@"Can't initialize NSRTFPropertyStackOverflowException with object " stringByAppendingString:[NSRTFPropertyStackOverflowException description]]);
if ([NSRTFTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSRTFTextDocumentType forKey:@"NSRTFTextDocumentType"]; else NSLog([@"Can't initialize NSRTFTextDocumentType with object " stringByAppendingString:[NSRTFTextDocumentType description]]);
if ([NSRaisesForNotApplicableKeysBindingOption isKindOfClass:[NSString class]]) [d setObject:NSRaisesForNotApplicableKeysBindingOption forKey:@"NSRaisesForNotApplicableKeysBindingOption"]; else NSLog([@"Can't initialize NSRaisesForNotApplicableKeysBindingOption with object " stringByAppendingString:[NSRaisesForNotApplicableKeysBindingOption description]]);
if ([NSReadOnlyDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSReadOnlyDocumentAttribute forKey:@"NSReadOnlyDocumentAttribute"]; else NSLog([@"Can't initialize NSReadOnlyDocumentAttribute with object " stringByAppendingString:[NSReadOnlyDocumentAttribute description]]);
if ([NSRecentSearchesBinding isKindOfClass:[NSString class]]) [d setObject:NSRecentSearchesBinding forKey:@"NSRecentSearchesBinding"]; else NSLog([@"Can't initialize NSRecentSearchesBinding with object " stringByAppendingString:[NSRecentSearchesBinding description]]);
if ([NSRepresentedFilenameBinding isKindOfClass:[NSString class]]) [d setObject:NSRepresentedFilenameBinding forKey:@"NSRepresentedFilenameBinding"]; else NSLog([@"Can't initialize NSRepresentedFilenameBinding with object " stringByAppendingString:[NSRepresentedFilenameBinding description]]);
if ([NSRightMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSRightMarginDocumentAttribute forKey:@"NSRightMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSRightMarginDocumentAttribute with object " stringByAppendingString:[NSRightMarginDocumentAttribute description]]);
if ([NSRowHeightBinding isKindOfClass:[NSString class]]) [d setObject:NSRowHeightBinding forKey:@"NSRowHeightBinding"]; else NSLog([@"Can't initialize NSRowHeightBinding with object " stringByAppendingString:[NSRowHeightBinding description]]);
if ([NSRuleEditorPredicateComparisonModifier isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateComparisonModifier forKey:@"NSRuleEditorPredicateComparisonModifier"]; else NSLog([@"Can't initialize NSRuleEditorPredicateComparisonModifier with object " stringByAppendingString:[NSRuleEditorPredicateComparisonModifier description]]);
if ([NSRuleEditorPredicateCompoundType isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateCompoundType forKey:@"NSRuleEditorPredicateCompoundType"]; else NSLog([@"Can't initialize NSRuleEditorPredicateCompoundType with object " stringByAppendingString:[NSRuleEditorPredicateCompoundType description]]);
if ([NSRuleEditorPredicateCustomSelector isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateCustomSelector forKey:@"NSRuleEditorPredicateCustomSelector"]; else NSLog([@"Can't initialize NSRuleEditorPredicateCustomSelector with object " stringByAppendingString:[NSRuleEditorPredicateCustomSelector description]]);
if ([NSRuleEditorPredicateLeftExpression isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateLeftExpression forKey:@"NSRuleEditorPredicateLeftExpression"]; else NSLog([@"Can't initialize NSRuleEditorPredicateLeftExpression with object " stringByAppendingString:[NSRuleEditorPredicateLeftExpression description]]);
if ([NSRuleEditorPredicateOperatorType isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateOperatorType forKey:@"NSRuleEditorPredicateOperatorType"]; else NSLog([@"Can't initialize NSRuleEditorPredicateOperatorType with object " stringByAppendingString:[NSRuleEditorPredicateOperatorType description]]);
if ([NSRuleEditorPredicateOptions isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateOptions forKey:@"NSRuleEditorPredicateOptions"]; else NSLog([@"Can't initialize NSRuleEditorPredicateOptions with object " stringByAppendingString:[NSRuleEditorPredicateOptions description]]);
if ([NSRuleEditorPredicateRightExpression isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorPredicateRightExpression forKey:@"NSRuleEditorPredicateRightExpression"]; else NSLog([@"Can't initialize NSRuleEditorPredicateRightExpression with object " stringByAppendingString:[NSRuleEditorPredicateRightExpression description]]);
if ([NSRuleEditorRowsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSRuleEditorRowsDidChangeNotification forKey:@"NSRuleEditorRowsDidChangeNotification"]; else NSLog([@"Can't initialize NSRuleEditorRowsDidChangeNotification with object " stringByAppendingString:[NSRuleEditorRowsDidChangeNotification description]]);
if ([NSRulerPboard isKindOfClass:[NSString class]]) [d setObject:NSRulerPboard forKey:@"NSRulerPboard"]; else NSLog([@"Can't initialize NSRulerPboard with object " stringByAppendingString:[NSRulerPboard description]]);
if ([NSRulerPboardType isKindOfClass:[NSString class]]) [d setObject:NSRulerPboardType forKey:@"NSRulerPboardType"]; else NSLog([@"Can't initialize NSRulerPboardType with object " stringByAppendingString:[NSRulerPboardType description]]);
if ([NSSelectedIdentifierBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedIdentifierBinding forKey:@"NSSelectedIdentifierBinding"]; else NSLog([@"Can't initialize NSSelectedIdentifierBinding with object " stringByAppendingString:[NSSelectedIdentifierBinding description]]);
if ([NSSelectedIndexBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedIndexBinding forKey:@"NSSelectedIndexBinding"]; else NSLog([@"Can't initialize NSSelectedIndexBinding with object " stringByAppendingString:[NSSelectedIndexBinding description]]);
if ([NSSelectedLabelBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedLabelBinding forKey:@"NSSelectedLabelBinding"]; else NSLog([@"Can't initialize NSSelectedLabelBinding with object " stringByAppendingString:[NSSelectedLabelBinding description]]);
if ([NSSelectedObjectBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedObjectBinding forKey:@"NSSelectedObjectBinding"]; else NSLog([@"Can't initialize NSSelectedObjectBinding with object " stringByAppendingString:[NSSelectedObjectBinding description]]);
if ([NSSelectedObjectsBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedObjectsBinding forKey:@"NSSelectedObjectsBinding"]; else NSLog([@"Can't initialize NSSelectedObjectsBinding with object " stringByAppendingString:[NSSelectedObjectsBinding description]]);
if ([NSSelectedTagBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedTagBinding forKey:@"NSSelectedTagBinding"]; else NSLog([@"Can't initialize NSSelectedTagBinding with object " stringByAppendingString:[NSSelectedTagBinding description]]);
if ([NSSelectedValueBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedValueBinding forKey:@"NSSelectedValueBinding"]; else NSLog([@"Can't initialize NSSelectedValueBinding with object " stringByAppendingString:[NSSelectedValueBinding description]]);
if ([NSSelectedValuesBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectedValuesBinding forKey:@"NSSelectedValuesBinding"]; else NSLog([@"Can't initialize NSSelectedValuesBinding with object " stringByAppendingString:[NSSelectedValuesBinding description]]);
if ([NSSelectionIndexPathsBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectionIndexPathsBinding forKey:@"NSSelectionIndexPathsBinding"]; else NSLog([@"Can't initialize NSSelectionIndexPathsBinding with object " stringByAppendingString:[NSSelectionIndexPathsBinding description]]);
if ([NSSelectionIndexesBinding isKindOfClass:[NSString class]]) [d setObject:NSSelectionIndexesBinding forKey:@"NSSelectionIndexesBinding"]; else NSLog([@"Can't initialize NSSelectionIndexesBinding with object " stringByAppendingString:[NSSelectionIndexesBinding description]]);
if ([NSSelectorNameBindingOption isKindOfClass:[NSString class]]) [d setObject:NSSelectorNameBindingOption forKey:@"NSSelectorNameBindingOption"]; else NSLog([@"Can't initialize NSSelectorNameBindingOption with object " stringByAppendingString:[NSSelectorNameBindingOption description]]);
if ([NSSelectsAllWhenSettingContentBindingOption isKindOfClass:[NSString class]]) [d setObject:NSSelectsAllWhenSettingContentBindingOption forKey:@"NSSelectsAllWhenSettingContentBindingOption"]; else NSLog([@"Can't initialize NSSelectsAllWhenSettingContentBindingOption with object " stringByAppendingString:[NSSelectsAllWhenSettingContentBindingOption description]]);
if ([NSShadowAttributeName isKindOfClass:[NSString class]]) [d setObject:NSShadowAttributeName forKey:@"NSShadowAttributeName"]; else NSLog([@"Can't initialize NSShadowAttributeName with object " stringByAppendingString:[NSShadowAttributeName description]]);
if ([NSShellCommandFileType isKindOfClass:[NSString class]]) [d setObject:NSShellCommandFileType forKey:@"NSShellCommandFileType"]; else NSLog([@"Can't initialize NSShellCommandFileType with object " stringByAppendingString:[NSShellCommandFileType description]]);
if ([NSSortDescriptorsBinding isKindOfClass:[NSString class]]) [d setObject:NSSortDescriptorsBinding forKey:@"NSSortDescriptorsBinding"]; else NSLog([@"Can't initialize NSSortDescriptorsBinding with object " stringByAppendingString:[NSSortDescriptorsBinding description]]);
if ([NSSoundPboardType isKindOfClass:[NSString class]]) [d setObject:NSSoundPboardType forKey:@"NSSoundPboardType"]; else NSLog([@"Can't initialize NSSoundPboardType with object " stringByAppendingString:[NSSoundPboardType description]]);
if ([NSSpeechCharacterModeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechCharacterModeProperty forKey:@"NSSpeechCharacterModeProperty"]; else NSLog([@"Can't initialize NSSpeechCharacterModeProperty with object " stringByAppendingString:[NSSpeechCharacterModeProperty description]]);
if ([NSSpeechCommandDelimiterProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechCommandDelimiterProperty forKey:@"NSSpeechCommandDelimiterProperty"]; else NSLog([@"Can't initialize NSSpeechCommandDelimiterProperty with object " stringByAppendingString:[NSSpeechCommandDelimiterProperty description]]);
if ([NSSpeechCommandPrefix isKindOfClass:[NSString class]]) [d setObject:NSSpeechCommandPrefix forKey:@"NSSpeechCommandPrefix"]; else NSLog([@"Can't initialize NSSpeechCommandPrefix with object " stringByAppendingString:[NSSpeechCommandPrefix description]]);
if ([NSSpeechCommandSuffix isKindOfClass:[NSString class]]) [d setObject:NSSpeechCommandSuffix forKey:@"NSSpeechCommandSuffix"]; else NSLog([@"Can't initialize NSSpeechCommandSuffix with object " stringByAppendingString:[NSSpeechCommandSuffix description]]);
if ([NSSpeechCurrentVoiceProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechCurrentVoiceProperty forKey:@"NSSpeechCurrentVoiceProperty"]; else NSLog([@"Can't initialize NSSpeechCurrentVoiceProperty with object " stringByAppendingString:[NSSpeechCurrentVoiceProperty description]]);
if ([NSSpeechDictionaryAbbreviations isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryAbbreviations forKey:@"NSSpeechDictionaryAbbreviations"]; else NSLog([@"Can't initialize NSSpeechDictionaryAbbreviations with object " stringByAppendingString:[NSSpeechDictionaryAbbreviations description]]);
if ([NSSpeechDictionaryEntryPhonemes isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryEntryPhonemes forKey:@"NSSpeechDictionaryEntryPhonemes"]; else NSLog([@"Can't initialize NSSpeechDictionaryEntryPhonemes with object " stringByAppendingString:[NSSpeechDictionaryEntryPhonemes description]]);
if ([NSSpeechDictionaryEntrySpelling isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryEntrySpelling forKey:@"NSSpeechDictionaryEntrySpelling"]; else NSLog([@"Can't initialize NSSpeechDictionaryEntrySpelling with object " stringByAppendingString:[NSSpeechDictionaryEntrySpelling description]]);
if ([NSSpeechDictionaryLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryLocaleIdentifier forKey:@"NSSpeechDictionaryLocaleIdentifier"]; else NSLog([@"Can't initialize NSSpeechDictionaryLocaleIdentifier with object " stringByAppendingString:[NSSpeechDictionaryLocaleIdentifier description]]);
if ([NSSpeechDictionaryModificationDate isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryModificationDate forKey:@"NSSpeechDictionaryModificationDate"]; else NSLog([@"Can't initialize NSSpeechDictionaryModificationDate with object " stringByAppendingString:[NSSpeechDictionaryModificationDate description]]);
if ([NSSpeechDictionaryPronunciations isKindOfClass:[NSString class]]) [d setObject:NSSpeechDictionaryPronunciations forKey:@"NSSpeechDictionaryPronunciations"]; else NSLog([@"Can't initialize NSSpeechDictionaryPronunciations with object " stringByAppendingString:[NSSpeechDictionaryPronunciations description]]);
if ([NSSpeechErrorCount isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorCount forKey:@"NSSpeechErrorCount"]; else NSLog([@"Can't initialize NSSpeechErrorCount with object " stringByAppendingString:[NSSpeechErrorCount description]]);
if ([NSSpeechErrorNewestCharacterOffset isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorNewestCharacterOffset forKey:@"NSSpeechErrorNewestCharacterOffset"]; else NSLog([@"Can't initialize NSSpeechErrorNewestCharacterOffset with object " stringByAppendingString:[NSSpeechErrorNewestCharacterOffset description]]);
if ([NSSpeechErrorNewestCode isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorNewestCode forKey:@"NSSpeechErrorNewestCode"]; else NSLog([@"Can't initialize NSSpeechErrorNewestCode with object " stringByAppendingString:[NSSpeechErrorNewestCode description]]);
if ([NSSpeechErrorOldestCharacterOffset isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorOldestCharacterOffset forKey:@"NSSpeechErrorOldestCharacterOffset"]; else NSLog([@"Can't initialize NSSpeechErrorOldestCharacterOffset with object " stringByAppendingString:[NSSpeechErrorOldestCharacterOffset description]]);
if ([NSSpeechErrorOldestCode isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorOldestCode forKey:@"NSSpeechErrorOldestCode"]; else NSLog([@"Can't initialize NSSpeechErrorOldestCode with object " stringByAppendingString:[NSSpeechErrorOldestCode description]]);
if ([NSSpeechErrorsProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechErrorsProperty forKey:@"NSSpeechErrorsProperty"]; else NSLog([@"Can't initialize NSSpeechErrorsProperty with object " stringByAppendingString:[NSSpeechErrorsProperty description]]);
if ([NSSpeechInputModeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechInputModeProperty forKey:@"NSSpeechInputModeProperty"]; else NSLog([@"Can't initialize NSSpeechInputModeProperty with object " stringByAppendingString:[NSSpeechInputModeProperty description]]);
if ([NSSpeechModeLiteral isKindOfClass:[NSString class]]) [d setObject:NSSpeechModeLiteral forKey:@"NSSpeechModeLiteral"]; else NSLog([@"Can't initialize NSSpeechModeLiteral with object " stringByAppendingString:[NSSpeechModeLiteral description]]);
if ([NSSpeechModeNormal isKindOfClass:[NSString class]]) [d setObject:NSSpeechModeNormal forKey:@"NSSpeechModeNormal"]; else NSLog([@"Can't initialize NSSpeechModeNormal with object " stringByAppendingString:[NSSpeechModeNormal description]]);
if ([NSSpeechModePhoneme isKindOfClass:[NSString class]]) [d setObject:NSSpeechModePhoneme forKey:@"NSSpeechModePhoneme"]; else NSLog([@"Can't initialize NSSpeechModePhoneme with object " stringByAppendingString:[NSSpeechModePhoneme description]]);
if ([NSSpeechModeText isKindOfClass:[NSString class]]) [d setObject:NSSpeechModeText forKey:@"NSSpeechModeText"]; else NSLog([@"Can't initialize NSSpeechModeText with object " stringByAppendingString:[NSSpeechModeText description]]);
if ([NSSpeechNumberModeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechNumberModeProperty forKey:@"NSSpeechNumberModeProperty"]; else NSLog([@"Can't initialize NSSpeechNumberModeProperty with object " stringByAppendingString:[NSSpeechNumberModeProperty description]]);
if ([NSSpeechOutputToFileURLProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechOutputToFileURLProperty forKey:@"NSSpeechOutputToFileURLProperty"]; else NSLog([@"Can't initialize NSSpeechOutputToFileURLProperty with object " stringByAppendingString:[NSSpeechOutputToFileURLProperty description]]);
if ([NSSpeechPhonemeInfoExample isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoExample forKey:@"NSSpeechPhonemeInfoExample"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoExample with object " stringByAppendingString:[NSSpeechPhonemeInfoExample description]]);
if ([NSSpeechPhonemeInfoHiliteEnd isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoHiliteEnd forKey:@"NSSpeechPhonemeInfoHiliteEnd"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoHiliteEnd with object " stringByAppendingString:[NSSpeechPhonemeInfoHiliteEnd description]]);
if ([NSSpeechPhonemeInfoHiliteStart isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoHiliteStart forKey:@"NSSpeechPhonemeInfoHiliteStart"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoHiliteStart with object " stringByAppendingString:[NSSpeechPhonemeInfoHiliteStart description]]);
if ([NSSpeechPhonemeInfoOpcode isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoOpcode forKey:@"NSSpeechPhonemeInfoOpcode"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoOpcode with object " stringByAppendingString:[NSSpeechPhonemeInfoOpcode description]]);
if ([NSSpeechPhonemeInfoSymbol isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeInfoSymbol forKey:@"NSSpeechPhonemeInfoSymbol"]; else NSLog([@"Can't initialize NSSpeechPhonemeInfoSymbol with object " stringByAppendingString:[NSSpeechPhonemeInfoSymbol description]]);
if ([NSSpeechPhonemeSymbolsProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechPhonemeSymbolsProperty forKey:@"NSSpeechPhonemeSymbolsProperty"]; else NSLog([@"Can't initialize NSSpeechPhonemeSymbolsProperty with object " stringByAppendingString:[NSSpeechPhonemeSymbolsProperty description]]);
if ([NSSpeechPitchBaseProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechPitchBaseProperty forKey:@"NSSpeechPitchBaseProperty"]; else NSLog([@"Can't initialize NSSpeechPitchBaseProperty with object " stringByAppendingString:[NSSpeechPitchBaseProperty description]]);
if ([NSSpeechPitchModProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechPitchModProperty forKey:@"NSSpeechPitchModProperty"]; else NSLog([@"Can't initialize NSSpeechPitchModProperty with object " stringByAppendingString:[NSSpeechPitchModProperty description]]);
if ([NSSpeechRateProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechRateProperty forKey:@"NSSpeechRateProperty"]; else NSLog([@"Can't initialize NSSpeechRateProperty with object " stringByAppendingString:[NSSpeechRateProperty description]]);
if ([NSSpeechRecentSyncProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechRecentSyncProperty forKey:@"NSSpeechRecentSyncProperty"]; else NSLog([@"Can't initialize NSSpeechRecentSyncProperty with object " stringByAppendingString:[NSSpeechRecentSyncProperty description]]);
if ([NSSpeechResetProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechResetProperty forKey:@"NSSpeechResetProperty"]; else NSLog([@"Can't initialize NSSpeechResetProperty with object " stringByAppendingString:[NSSpeechResetProperty description]]);
if ([NSSpeechStatusNumberOfCharactersLeft isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusNumberOfCharactersLeft forKey:@"NSSpeechStatusNumberOfCharactersLeft"]; else NSLog([@"Can't initialize NSSpeechStatusNumberOfCharactersLeft with object " stringByAppendingString:[NSSpeechStatusNumberOfCharactersLeft description]]);
if ([NSSpeechStatusOutputBusy isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusOutputBusy forKey:@"NSSpeechStatusOutputBusy"]; else NSLog([@"Can't initialize NSSpeechStatusOutputBusy with object " stringByAppendingString:[NSSpeechStatusOutputBusy description]]);
if ([NSSpeechStatusOutputPaused isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusOutputPaused forKey:@"NSSpeechStatusOutputPaused"]; else NSLog([@"Can't initialize NSSpeechStatusOutputPaused with object " stringByAppendingString:[NSSpeechStatusOutputPaused description]]);
if ([NSSpeechStatusPhonemeCode isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusPhonemeCode forKey:@"NSSpeechStatusPhonemeCode"]; else NSLog([@"Can't initialize NSSpeechStatusPhonemeCode with object " stringByAppendingString:[NSSpeechStatusPhonemeCode description]]);
if ([NSSpeechStatusProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechStatusProperty forKey:@"NSSpeechStatusProperty"]; else NSLog([@"Can't initialize NSSpeechStatusProperty with object " stringByAppendingString:[NSSpeechStatusProperty description]]);
if ([NSSpeechSynthesizerInfoIdentifier isKindOfClass:[NSString class]]) [d setObject:NSSpeechSynthesizerInfoIdentifier forKey:@"NSSpeechSynthesizerInfoIdentifier"]; else NSLog([@"Can't initialize NSSpeechSynthesizerInfoIdentifier with object " stringByAppendingString:[NSSpeechSynthesizerInfoIdentifier description]]);
if ([NSSpeechSynthesizerInfoProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechSynthesizerInfoProperty forKey:@"NSSpeechSynthesizerInfoProperty"]; else NSLog([@"Can't initialize NSSpeechSynthesizerInfoProperty with object " stringByAppendingString:[NSSpeechSynthesizerInfoProperty description]]);
if ([NSSpeechSynthesizerInfoVersion isKindOfClass:[NSString class]]) [d setObject:NSSpeechSynthesizerInfoVersion forKey:@"NSSpeechSynthesizerInfoVersion"]; else NSLog([@"Can't initialize NSSpeechSynthesizerInfoVersion with object " stringByAppendingString:[NSSpeechSynthesizerInfoVersion description]]);
if ([NSSpeechVolumeProperty isKindOfClass:[NSString class]]) [d setObject:NSSpeechVolumeProperty forKey:@"NSSpeechVolumeProperty"]; else NSLog([@"Can't initialize NSSpeechVolumeProperty with object " stringByAppendingString:[NSSpeechVolumeProperty description]]);
if ([NSSpellingStateAttributeName isKindOfClass:[NSString class]]) [d setObject:NSSpellingStateAttributeName forKey:@"NSSpellingStateAttributeName"]; else NSLog([@"Can't initialize NSSpellingStateAttributeName with object " stringByAppendingString:[NSSpellingStateAttributeName description]]);
if ([NSSplitViewDidResizeSubviewsNotification isKindOfClass:[NSString class]]) [d setObject:NSSplitViewDidResizeSubviewsNotification forKey:@"NSSplitViewDidResizeSubviewsNotification"]; else NSLog([@"Can't initialize NSSplitViewDidResizeSubviewsNotification with object " stringByAppendingString:[NSSplitViewDidResizeSubviewsNotification description]]);
if ([NSSplitViewWillResizeSubviewsNotification isKindOfClass:[NSString class]]) [d setObject:NSSplitViewWillResizeSubviewsNotification forKey:@"NSSplitViewWillResizeSubviewsNotification"]; else NSLog([@"Can't initialize NSSplitViewWillResizeSubviewsNotification with object " stringByAppendingString:[NSSplitViewWillResizeSubviewsNotification description]]);
if ([NSStrikethroughColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrikethroughColorAttributeName forKey:@"NSStrikethroughColorAttributeName"]; else NSLog([@"Can't initialize NSStrikethroughColorAttributeName with object " stringByAppendingString:[NSStrikethroughColorAttributeName description]]);
if ([NSStrikethroughStyleAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrikethroughStyleAttributeName forKey:@"NSStrikethroughStyleAttributeName"]; else NSLog([@"Can't initialize NSStrikethroughStyleAttributeName with object " stringByAppendingString:[NSStrikethroughStyleAttributeName description]]);
if ([NSStringPboardType isKindOfClass:[NSString class]]) [d setObject:NSStringPboardType forKey:@"NSStringPboardType"]; else NSLog([@"Can't initialize NSStringPboardType with object " stringByAppendingString:[NSStringPboardType description]]);
if ([NSStrokeColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrokeColorAttributeName forKey:@"NSStrokeColorAttributeName"]; else NSLog([@"Can't initialize NSStrokeColorAttributeName with object " stringByAppendingString:[NSStrokeColorAttributeName description]]);
if ([NSStrokeWidthAttributeName isKindOfClass:[NSString class]]) [d setObject:NSStrokeWidthAttributeName forKey:@"NSStrokeWidthAttributeName"]; else NSLog([@"Can't initialize NSStrokeWidthAttributeName with object " stringByAppendingString:[NSStrokeWidthAttributeName description]]);
if ([NSSubjectDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSSubjectDocumentAttribute forKey:@"NSSubjectDocumentAttribute"]; else NSLog([@"Can't initialize NSSubjectDocumentAttribute with object " stringByAppendingString:[NSSubjectDocumentAttribute description]]);
if ([NSSuperscriptAttributeName isKindOfClass:[NSString class]]) [d setObject:NSSuperscriptAttributeName forKey:@"NSSuperscriptAttributeName"]; else NSLog([@"Can't initialize NSSuperscriptAttributeName with object " stringByAppendingString:[NSSuperscriptAttributeName description]]);
if ([NSSystemColorsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSSystemColorsDidChangeNotification forKey:@"NSSystemColorsDidChangeNotification"]; else NSLog([@"Can't initialize NSSystemColorsDidChangeNotification with object " stringByAppendingString:[NSSystemColorsDidChangeNotification description]]);
if ([NSTIFFException isKindOfClass:[NSString class]]) [d setObject:NSTIFFException forKey:@"NSTIFFException"]; else NSLog([@"Can't initialize NSTIFFException with object " stringByAppendingString:[NSTIFFException description]]);
if ([NSTIFFPboardType isKindOfClass:[NSString class]]) [d setObject:NSTIFFPboardType forKey:@"NSTIFFPboardType"]; else NSLog([@"Can't initialize NSTIFFPboardType with object " stringByAppendingString:[NSTIFFPboardType description]]);
if ([NSTabColumnTerminatorsAttributeName isKindOfClass:[NSString class]]) [d setObject:NSTabColumnTerminatorsAttributeName forKey:@"NSTabColumnTerminatorsAttributeName"]; else NSLog([@"Can't initialize NSTabColumnTerminatorsAttributeName with object " stringByAppendingString:[NSTabColumnTerminatorsAttributeName description]]);
if ([NSTableViewColumnDidMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewColumnDidMoveNotification forKey:@"NSTableViewColumnDidMoveNotification"]; else NSLog([@"Can't initialize NSTableViewColumnDidMoveNotification with object " stringByAppendingString:[NSTableViewColumnDidMoveNotification description]]);
if ([NSTableViewColumnDidResizeNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewColumnDidResizeNotification forKey:@"NSTableViewColumnDidResizeNotification"]; else NSLog([@"Can't initialize NSTableViewColumnDidResizeNotification with object " stringByAppendingString:[NSTableViewColumnDidResizeNotification description]]);
if ([NSTableViewSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewSelectionDidChangeNotification forKey:@"NSTableViewSelectionDidChangeNotification"]; else NSLog([@"Can't initialize NSTableViewSelectionDidChangeNotification with object " stringByAppendingString:[NSTableViewSelectionDidChangeNotification description]]);
if ([NSTableViewSelectionIsChangingNotification isKindOfClass:[NSString class]]) [d setObject:NSTableViewSelectionIsChangingNotification forKey:@"NSTableViewSelectionIsChangingNotification"]; else NSLog([@"Can't initialize NSTableViewSelectionIsChangingNotification with object " stringByAppendingString:[NSTableViewSelectionIsChangingNotification description]]);
if ([NSTabularTextPboardType isKindOfClass:[NSString class]]) [d setObject:NSTabularTextPboardType forKey:@"NSTabularTextPboardType"]; else NSLog([@"Can't initialize NSTabularTextPboardType with object " stringByAppendingString:[NSTabularTextPboardType description]]);
if ([NSTargetBinding isKindOfClass:[NSString class]]) [d setObject:NSTargetBinding forKey:@"NSTargetBinding"]; else NSLog([@"Can't initialize NSTargetBinding with object " stringByAppendingString:[NSTargetBinding description]]);
if ([NSTextColorBinding isKindOfClass:[NSString class]]) [d setObject:NSTextColorBinding forKey:@"NSTextColorBinding"]; else NSLog([@"Can't initialize NSTextColorBinding with object " stringByAppendingString:[NSTextColorBinding description]]);
if ([NSTextDidBeginEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextDidBeginEditingNotification forKey:@"NSTextDidBeginEditingNotification"]; else NSLog([@"Can't initialize NSTextDidBeginEditingNotification with object " stringByAppendingString:[NSTextDidBeginEditingNotification description]]);
if ([NSTextDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSTextDidChangeNotification forKey:@"NSTextDidChangeNotification"]; else NSLog([@"Can't initialize NSTextDidChangeNotification with object " stringByAppendingString:[NSTextDidChangeNotification description]]);
if ([NSTextDidEndEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextDidEndEditingNotification forKey:@"NSTextDidEndEditingNotification"]; else NSLog([@"Can't initialize NSTextDidEndEditingNotification with object " stringByAppendingString:[NSTextDidEndEditingNotification description]]);
if ([NSTextEncodingNameDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSTextEncodingNameDocumentAttribute forKey:@"NSTextEncodingNameDocumentAttribute"]; else NSLog([@"Can't initialize NSTextEncodingNameDocumentAttribute with object " stringByAppendingString:[NSTextEncodingNameDocumentAttribute description]]);
if ([NSTextEncodingNameDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSTextEncodingNameDocumentOption forKey:@"NSTextEncodingNameDocumentOption"]; else NSLog([@"Can't initialize NSTextEncodingNameDocumentOption with object " stringByAppendingString:[NSTextEncodingNameDocumentOption description]]);
if ([NSTextLineTooLongException isKindOfClass:[NSString class]]) [d setObject:NSTextLineTooLongException forKey:@"NSTextLineTooLongException"]; else NSLog([@"Can't initialize NSTextLineTooLongException with object " stringByAppendingString:[NSTextLineTooLongException description]]);
if ([NSTextNoSelectionException isKindOfClass:[NSString class]]) [d setObject:NSTextNoSelectionException forKey:@"NSTextNoSelectionException"]; else NSLog([@"Can't initialize NSTextNoSelectionException with object " stringByAppendingString:[NSTextNoSelectionException description]]);
if ([NSTextReadException isKindOfClass:[NSString class]]) [d setObject:NSTextReadException forKey:@"NSTextReadException"]; else NSLog([@"Can't initialize NSTextReadException with object " stringByAppendingString:[NSTextReadException description]]);
if ([NSTextSizeMultiplierDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSTextSizeMultiplierDocumentOption forKey:@"NSTextSizeMultiplierDocumentOption"]; else NSLog([@"Can't initialize NSTextSizeMultiplierDocumentOption with object " stringByAppendingString:[NSTextSizeMultiplierDocumentOption description]]);
if ([NSTextStorageDidProcessEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextStorageDidProcessEditingNotification forKey:@"NSTextStorageDidProcessEditingNotification"]; else NSLog([@"Can't initialize NSTextStorageDidProcessEditingNotification with object " stringByAppendingString:[NSTextStorageDidProcessEditingNotification description]]);
if ([NSTextStorageWillProcessEditingNotification isKindOfClass:[NSString class]]) [d setObject:NSTextStorageWillProcessEditingNotification forKey:@"NSTextStorageWillProcessEditingNotification"]; else NSLog([@"Can't initialize NSTextStorageWillProcessEditingNotification with object " stringByAppendingString:[NSTextStorageWillProcessEditingNotification description]]);
if ([NSTextViewDidChangeSelectionNotification isKindOfClass:[NSString class]]) [d setObject:NSTextViewDidChangeSelectionNotification forKey:@"NSTextViewDidChangeSelectionNotification"]; else NSLog([@"Can't initialize NSTextViewDidChangeSelectionNotification with object " stringByAppendingString:[NSTextViewDidChangeSelectionNotification description]]);
if ([NSTextViewDidChangeTypingAttributesNotification isKindOfClass:[NSString class]]) [d setObject:NSTextViewDidChangeTypingAttributesNotification forKey:@"NSTextViewDidChangeTypingAttributesNotification"]; else NSLog([@"Can't initialize NSTextViewDidChangeTypingAttributesNotification with object " stringByAppendingString:[NSTextViewDidChangeTypingAttributesNotification description]]);
if ([NSTextViewWillChangeNotifyingTextViewNotification isKindOfClass:[NSString class]]) [d setObject:NSTextViewWillChangeNotifyingTextViewNotification forKey:@"NSTextViewWillChangeNotifyingTextViewNotification"]; else NSLog([@"Can't initialize NSTextViewWillChangeNotifyingTextViewNotification with object " stringByAppendingString:[NSTextViewWillChangeNotifyingTextViewNotification description]]);
if ([NSTextWriteException isKindOfClass:[NSString class]]) [d setObject:NSTextWriteException forKey:@"NSTextWriteException"]; else NSLog([@"Can't initialize NSTextWriteException with object " stringByAppendingString:[NSTextWriteException description]]);
if ([NSTimeoutDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSTimeoutDocumentOption forKey:@"NSTimeoutDocumentOption"]; else NSLog([@"Can't initialize NSTimeoutDocumentOption with object " stringByAppendingString:[NSTimeoutDocumentOption description]]);
if ([NSTitleBinding isKindOfClass:[NSString class]]) [d setObject:NSTitleBinding forKey:@"NSTitleBinding"]; else NSLog([@"Can't initialize NSTitleBinding with object " stringByAppendingString:[NSTitleBinding description]]);
if ([NSTitleDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSTitleDocumentAttribute forKey:@"NSTitleDocumentAttribute"]; else NSLog([@"Can't initialize NSTitleDocumentAttribute with object " stringByAppendingString:[NSTitleDocumentAttribute description]]);
if ([NSToolTipAttributeName isKindOfClass:[NSString class]]) [d setObject:NSToolTipAttributeName forKey:@"NSToolTipAttributeName"]; else NSLog([@"Can't initialize NSToolTipAttributeName with object " stringByAppendingString:[NSToolTipAttributeName description]]);
if ([NSToolTipBinding isKindOfClass:[NSString class]]) [d setObject:NSToolTipBinding forKey:@"NSToolTipBinding"]; else NSLog([@"Can't initialize NSToolTipBinding with object " stringByAppendingString:[NSToolTipBinding description]]);
if ([NSToolbarCustomizeToolbarItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarCustomizeToolbarItemIdentifier forKey:@"NSToolbarCustomizeToolbarItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarCustomizeToolbarItemIdentifier with object " stringByAppendingString:[NSToolbarCustomizeToolbarItemIdentifier description]]);
if ([NSToolbarDidRemoveItemNotification isKindOfClass:[NSString class]]) [d setObject:NSToolbarDidRemoveItemNotification forKey:@"NSToolbarDidRemoveItemNotification"]; else NSLog([@"Can't initialize NSToolbarDidRemoveItemNotification with object " stringByAppendingString:[NSToolbarDidRemoveItemNotification description]]);
if ([NSToolbarFlexibleSpaceItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarFlexibleSpaceItemIdentifier forKey:@"NSToolbarFlexibleSpaceItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarFlexibleSpaceItemIdentifier with object " stringByAppendingString:[NSToolbarFlexibleSpaceItemIdentifier description]]);
if ([NSToolbarPrintItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarPrintItemIdentifier forKey:@"NSToolbarPrintItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarPrintItemIdentifier with object " stringByAppendingString:[NSToolbarPrintItemIdentifier description]]);
if ([NSToolbarSeparatorItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarSeparatorItemIdentifier forKey:@"NSToolbarSeparatorItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarSeparatorItemIdentifier with object " stringByAppendingString:[NSToolbarSeparatorItemIdentifier description]]);
if ([NSToolbarShowColorsItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarShowColorsItemIdentifier forKey:@"NSToolbarShowColorsItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarShowColorsItemIdentifier with object " stringByAppendingString:[NSToolbarShowColorsItemIdentifier description]]);
if ([NSToolbarShowFontsItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarShowFontsItemIdentifier forKey:@"NSToolbarShowFontsItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarShowFontsItemIdentifier with object " stringByAppendingString:[NSToolbarShowFontsItemIdentifier description]]);
if ([NSToolbarSpaceItemIdentifier isKindOfClass:[NSString class]]) [d setObject:NSToolbarSpaceItemIdentifier forKey:@"NSToolbarSpaceItemIdentifier"]; else NSLog([@"Can't initialize NSToolbarSpaceItemIdentifier with object " stringByAppendingString:[NSToolbarSpaceItemIdentifier description]]);
if ([NSToolbarWillAddItemNotification isKindOfClass:[NSString class]]) [d setObject:NSToolbarWillAddItemNotification forKey:@"NSToolbarWillAddItemNotification"]; else NSLog([@"Can't initialize NSToolbarWillAddItemNotification with object " stringByAppendingString:[NSToolbarWillAddItemNotification description]]);
if ([NSTopMarginDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSTopMarginDocumentAttribute forKey:@"NSTopMarginDocumentAttribute"]; else NSLog([@"Can't initialize NSTopMarginDocumentAttribute with object " stringByAppendingString:[NSTopMarginDocumentAttribute description]]);
if ([NSTransparentBinding isKindOfClass:[NSString class]]) [d setObject:NSTransparentBinding forKey:@"NSTransparentBinding"]; else NSLog([@"Can't initialize NSTransparentBinding with object " stringByAppendingString:[NSTransparentBinding description]]);
if ([NSTypedStreamVersionException isKindOfClass:[NSString class]]) [d setObject:NSTypedStreamVersionException forKey:@"NSTypedStreamVersionException"]; else NSLog([@"Can't initialize NSTypedStreamVersionException with object " stringByAppendingString:[NSTypedStreamVersionException description]]);
if ([NSURLPboardType isKindOfClass:[NSString class]]) [d setObject:NSURLPboardType forKey:@"NSURLPboardType"]; else NSLog([@"Can't initialize NSURLPboardType with object " stringByAppendingString:[NSURLPboardType description]]);
if ([NSUnderlineColorAttributeName isKindOfClass:[NSString class]]) [d setObject:NSUnderlineColorAttributeName forKey:@"NSUnderlineColorAttributeName"]; else NSLog([@"Can't initialize NSUnderlineColorAttributeName with object " stringByAppendingString:[NSUnderlineColorAttributeName description]]);
if ([NSUnderlineStyleAttributeName isKindOfClass:[NSString class]]) [d setObject:NSUnderlineStyleAttributeName forKey:@"NSUnderlineStyleAttributeName"]; else NSLog([@"Can't initialize NSUnderlineStyleAttributeName with object " stringByAppendingString:[NSUnderlineStyleAttributeName description]]);
if ([NSVCardPboardType isKindOfClass:[NSString class]]) [d setObject:NSVCardPboardType forKey:@"NSVCardPboardType"]; else NSLog([@"Can't initialize NSVCardPboardType with object " stringByAppendingString:[NSVCardPboardType description]]);
if ([NSValidatesImmediatelyBindingOption isKindOfClass:[NSString class]]) [d setObject:NSValidatesImmediatelyBindingOption forKey:@"NSValidatesImmediatelyBindingOption"]; else NSLog([@"Can't initialize NSValidatesImmediatelyBindingOption with object " stringByAppendingString:[NSValidatesImmediatelyBindingOption description]]);
if ([NSValueBinding isKindOfClass:[NSString class]]) [d setObject:NSValueBinding forKey:@"NSValueBinding"]; else NSLog([@"Can't initialize NSValueBinding with object " stringByAppendingString:[NSValueBinding description]]);
if ([NSValuePathBinding isKindOfClass:[NSString class]]) [d setObject:NSValuePathBinding forKey:@"NSValuePathBinding"]; else NSLog([@"Can't initialize NSValuePathBinding with object " stringByAppendingString:[NSValuePathBinding description]]);
if ([NSValueTransformerBindingOption isKindOfClass:[NSString class]]) [d setObject:NSValueTransformerBindingOption forKey:@"NSValueTransformerBindingOption"]; else NSLog([@"Can't initialize NSValueTransformerBindingOption with object " stringByAppendingString:[NSValueTransformerBindingOption description]]);
if ([NSValueTransformerNameBindingOption isKindOfClass:[NSString class]]) [d setObject:NSValueTransformerNameBindingOption forKey:@"NSValueTransformerNameBindingOption"]; else NSLog([@"Can't initialize NSValueTransformerNameBindingOption with object " stringByAppendingString:[NSValueTransformerNameBindingOption description]]);
if ([NSValueURLBinding isKindOfClass:[NSString class]]) [d setObject:NSValueURLBinding forKey:@"NSValueURLBinding"]; else NSLog([@"Can't initialize NSValueURLBinding with object " stringByAppendingString:[NSValueURLBinding description]]);
if ([NSViewAnimationEffectKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationEffectKey forKey:@"NSViewAnimationEffectKey"]; else NSLog([@"Can't initialize NSViewAnimationEffectKey with object " stringByAppendingString:[NSViewAnimationEffectKey description]]);
if ([NSViewAnimationEndFrameKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationEndFrameKey forKey:@"NSViewAnimationEndFrameKey"]; else NSLog([@"Can't initialize NSViewAnimationEndFrameKey with object " stringByAppendingString:[NSViewAnimationEndFrameKey description]]);
if ([NSViewAnimationFadeInEffect isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationFadeInEffect forKey:@"NSViewAnimationFadeInEffect"]; else NSLog([@"Can't initialize NSViewAnimationFadeInEffect with object " stringByAppendingString:[NSViewAnimationFadeInEffect description]]);
if ([NSViewAnimationFadeOutEffect isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationFadeOutEffect forKey:@"NSViewAnimationFadeOutEffect"]; else NSLog([@"Can't initialize NSViewAnimationFadeOutEffect with object " stringByAppendingString:[NSViewAnimationFadeOutEffect description]]);
if ([NSViewAnimationStartFrameKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationStartFrameKey forKey:@"NSViewAnimationStartFrameKey"]; else NSLog([@"Can't initialize NSViewAnimationStartFrameKey with object " stringByAppendingString:[NSViewAnimationStartFrameKey description]]);
if ([NSViewAnimationTargetKey isKindOfClass:[NSString class]]) [d setObject:NSViewAnimationTargetKey forKey:@"NSViewAnimationTargetKey"]; else NSLog([@"Can't initialize NSViewAnimationTargetKey with object " stringByAppendingString:[NSViewAnimationTargetKey description]]);
if ([NSViewBoundsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewBoundsDidChangeNotification forKey:@"NSViewBoundsDidChangeNotification"]; else NSLog([@"Can't initialize NSViewBoundsDidChangeNotification with object " stringByAppendingString:[NSViewBoundsDidChangeNotification description]]);
if ([NSViewDidUpdateTrackingAreasNotification isKindOfClass:[NSString class]]) [d setObject:NSViewDidUpdateTrackingAreasNotification forKey:@"NSViewDidUpdateTrackingAreasNotification"]; else NSLog([@"Can't initialize NSViewDidUpdateTrackingAreasNotification with object " stringByAppendingString:[NSViewDidUpdateTrackingAreasNotification description]]);
if ([NSViewFocusDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewFocusDidChangeNotification forKey:@"NSViewFocusDidChangeNotification"]; else NSLog([@"Can't initialize NSViewFocusDidChangeNotification with object " stringByAppendingString:[NSViewFocusDidChangeNotification description]]);
if ([NSViewFrameDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewFrameDidChangeNotification forKey:@"NSViewFrameDidChangeNotification"]; else NSLog([@"Can't initialize NSViewFrameDidChangeNotification with object " stringByAppendingString:[NSViewFrameDidChangeNotification description]]);
if ([NSViewGlobalFrameDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSViewGlobalFrameDidChangeNotification forKey:@"NSViewGlobalFrameDidChangeNotification"]; else NSLog([@"Can't initialize NSViewGlobalFrameDidChangeNotification with object " stringByAppendingString:[NSViewGlobalFrameDidChangeNotification description]]);
if ([NSViewModeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSViewModeDocumentAttribute forKey:@"NSViewModeDocumentAttribute"]; else NSLog([@"Can't initialize NSViewModeDocumentAttribute with object " stringByAppendingString:[NSViewModeDocumentAttribute description]]);
if ([NSViewSizeDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSViewSizeDocumentAttribute forKey:@"NSViewSizeDocumentAttribute"]; else NSLog([@"Can't initialize NSViewSizeDocumentAttribute with object " stringByAppendingString:[NSViewSizeDocumentAttribute description]]);
if ([NSViewZoomDocumentAttribute isKindOfClass:[NSString class]]) [d setObject:NSViewZoomDocumentAttribute forKey:@"NSViewZoomDocumentAttribute"]; else NSLog([@"Can't initialize NSViewZoomDocumentAttribute with object " stringByAppendingString:[NSViewZoomDocumentAttribute description]]);
if ([NSVisibleBinding isKindOfClass:[NSString class]]) [d setObject:NSVisibleBinding forKey:@"NSVisibleBinding"]; else NSLog([@"Can't initialize NSVisibleBinding with object " stringByAppendingString:[NSVisibleBinding description]]);
if ([NSVoiceAge isKindOfClass:[NSString class]]) [d setObject:NSVoiceAge forKey:@"NSVoiceAge"]; else NSLog([@"Can't initialize NSVoiceAge with object " stringByAppendingString:[NSVoiceAge description]]);
if ([NSVoiceDemoText isKindOfClass:[NSString class]]) [d setObject:NSVoiceDemoText forKey:@"NSVoiceDemoText"]; else NSLog([@"Can't initialize NSVoiceDemoText with object " stringByAppendingString:[NSVoiceDemoText description]]);
if ([NSVoiceGender isKindOfClass:[NSString class]]) [d setObject:NSVoiceGender forKey:@"NSVoiceGender"]; else NSLog([@"Can't initialize NSVoiceGender with object " stringByAppendingString:[NSVoiceGender description]]);
if ([NSVoiceGenderFemale isKindOfClass:[NSString class]]) [d setObject:NSVoiceGenderFemale forKey:@"NSVoiceGenderFemale"]; else NSLog([@"Can't initialize NSVoiceGenderFemale with object " stringByAppendingString:[NSVoiceGenderFemale description]]);
if ([NSVoiceGenderMale isKindOfClass:[NSString class]]) [d setObject:NSVoiceGenderMale forKey:@"NSVoiceGenderMale"]; else NSLog([@"Can't initialize NSVoiceGenderMale with object " stringByAppendingString:[NSVoiceGenderMale description]]);
if ([NSVoiceGenderNeuter isKindOfClass:[NSString class]]) [d setObject:NSVoiceGenderNeuter forKey:@"NSVoiceGenderNeuter"]; else NSLog([@"Can't initialize NSVoiceGenderNeuter with object " stringByAppendingString:[NSVoiceGenderNeuter description]]);
if ([NSVoiceIdentifier isKindOfClass:[NSString class]]) [d setObject:NSVoiceIdentifier forKey:@"NSVoiceIdentifier"]; else NSLog([@"Can't initialize NSVoiceIdentifier with object " stringByAppendingString:[NSVoiceIdentifier description]]);
if ([NSVoiceIndividuallySpokenCharacters isKindOfClass:[NSString class]]) [d setObject:NSVoiceIndividuallySpokenCharacters forKey:@"NSVoiceIndividuallySpokenCharacters"]; else NSLog([@"Can't initialize NSVoiceIndividuallySpokenCharacters with object " stringByAppendingString:[NSVoiceIndividuallySpokenCharacters description]]);
if ([NSVoiceLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSVoiceLocaleIdentifier forKey:@"NSVoiceLocaleIdentifier"]; else NSLog([@"Can't initialize NSVoiceLocaleIdentifier with object " stringByAppendingString:[NSVoiceLocaleIdentifier description]]);
if ([NSVoiceName isKindOfClass:[NSString class]]) [d setObject:NSVoiceName forKey:@"NSVoiceName"]; else NSLog([@"Can't initialize NSVoiceName with object " stringByAppendingString:[NSVoiceName description]]);
if ([NSVoiceSupportedCharacters isKindOfClass:[NSString class]]) [d setObject:NSVoiceSupportedCharacters forKey:@"NSVoiceSupportedCharacters"]; else NSLog([@"Can't initialize NSVoiceSupportedCharacters with object " stringByAppendingString:[NSVoiceSupportedCharacters description]]);
if ([NSWarningValueBinding isKindOfClass:[NSString class]]) [d setObject:NSWarningValueBinding forKey:@"NSWarningValueBinding"]; else NSLog([@"Can't initialize NSWarningValueBinding with object " stringByAppendingString:[NSWarningValueBinding description]]);
if ([NSWebArchiveTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSWebArchiveTextDocumentType forKey:@"NSWebArchiveTextDocumentType"]; else NSLog([@"Can't initialize NSWebArchiveTextDocumentType with object " stringByAppendingString:[NSWebArchiveTextDocumentType description]]);
if ([NSWebPreferencesDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSWebPreferencesDocumentOption forKey:@"NSWebPreferencesDocumentOption"]; else NSLog([@"Can't initialize NSWebPreferencesDocumentOption with object " stringByAppendingString:[NSWebPreferencesDocumentOption description]]);
if ([NSWebResourceLoadDelegateDocumentOption isKindOfClass:[NSString class]]) [d setObject:NSWebResourceLoadDelegateDocumentOption forKey:@"NSWebResourceLoadDelegateDocumentOption"]; else NSLog([@"Can't initialize NSWebResourceLoadDelegateDocumentOption with object " stringByAppendingString:[NSWebResourceLoadDelegateDocumentOption description]]);
if ([NSWidthBinding isKindOfClass:[NSString class]]) [d setObject:NSWidthBinding forKey:@"NSWidthBinding"]; else NSLog([@"Can't initialize NSWidthBinding with object " stringByAppendingString:[NSWidthBinding description]]);
if ([NSWindowDidBecomeKeyNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidBecomeKeyNotification forKey:@"NSWindowDidBecomeKeyNotification"]; else NSLog([@"Can't initialize NSWindowDidBecomeKeyNotification with object " stringByAppendingString:[NSWindowDidBecomeKeyNotification description]]);
if ([NSWindowDidBecomeMainNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidBecomeMainNotification forKey:@"NSWindowDidBecomeMainNotification"]; else NSLog([@"Can't initialize NSWindowDidBecomeMainNotification with object " stringByAppendingString:[NSWindowDidBecomeMainNotification description]]);
if ([NSWindowDidChangeScreenNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidChangeScreenNotification forKey:@"NSWindowDidChangeScreenNotification"]; else NSLog([@"Can't initialize NSWindowDidChangeScreenNotification with object " stringByAppendingString:[NSWindowDidChangeScreenNotification description]]);
if ([NSWindowDidChangeScreenProfileNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidChangeScreenProfileNotification forKey:@"NSWindowDidChangeScreenProfileNotification"]; else NSLog([@"Can't initialize NSWindowDidChangeScreenProfileNotification with object " stringByAppendingString:[NSWindowDidChangeScreenProfileNotification description]]);
if ([NSWindowDidDeminiaturizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidDeminiaturizeNotification forKey:@"NSWindowDidDeminiaturizeNotification"]; else NSLog([@"Can't initialize NSWindowDidDeminiaturizeNotification with object " stringByAppendingString:[NSWindowDidDeminiaturizeNotification description]]);
if ([NSWindowDidEndSheetNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidEndSheetNotification forKey:@"NSWindowDidEndSheetNotification"]; else NSLog([@"Can't initialize NSWindowDidEndSheetNotification with object " stringByAppendingString:[NSWindowDidEndSheetNotification description]]);
if ([NSWindowDidExposeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidExposeNotification forKey:@"NSWindowDidExposeNotification"]; else NSLog([@"Can't initialize NSWindowDidExposeNotification with object " stringByAppendingString:[NSWindowDidExposeNotification description]]);
if ([NSWindowDidMiniaturizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidMiniaturizeNotification forKey:@"NSWindowDidMiniaturizeNotification"]; else NSLog([@"Can't initialize NSWindowDidMiniaturizeNotification with object " stringByAppendingString:[NSWindowDidMiniaturizeNotification description]]);
if ([NSWindowDidMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidMoveNotification forKey:@"NSWindowDidMoveNotification"]; else NSLog([@"Can't initialize NSWindowDidMoveNotification with object " stringByAppendingString:[NSWindowDidMoveNotification description]]);
if ([NSWindowDidResignKeyNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidResignKeyNotification forKey:@"NSWindowDidResignKeyNotification"]; else NSLog([@"Can't initialize NSWindowDidResignKeyNotification with object " stringByAppendingString:[NSWindowDidResignKeyNotification description]]);
if ([NSWindowDidResignMainNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidResignMainNotification forKey:@"NSWindowDidResignMainNotification"]; else NSLog([@"Can't initialize NSWindowDidResignMainNotification with object " stringByAppendingString:[NSWindowDidResignMainNotification description]]);
if ([NSWindowDidResizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidResizeNotification forKey:@"NSWindowDidResizeNotification"]; else NSLog([@"Can't initialize NSWindowDidResizeNotification with object " stringByAppendingString:[NSWindowDidResizeNotification description]]);
if ([NSWindowDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowDidUpdateNotification forKey:@"NSWindowDidUpdateNotification"]; else NSLog([@"Can't initialize NSWindowDidUpdateNotification with object " stringByAppendingString:[NSWindowDidUpdateNotification description]]);
if ([NSWindowServerCommunicationException isKindOfClass:[NSString class]]) [d setObject:NSWindowServerCommunicationException forKey:@"NSWindowServerCommunicationException"]; else NSLog([@"Can't initialize NSWindowServerCommunicationException with object " stringByAppendingString:[NSWindowServerCommunicationException description]]);
if ([NSWindowWillBeginSheetNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillBeginSheetNotification forKey:@"NSWindowWillBeginSheetNotification"]; else NSLog([@"Can't initialize NSWindowWillBeginSheetNotification with object " stringByAppendingString:[NSWindowWillBeginSheetNotification description]]);
if ([NSWindowWillCloseNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillCloseNotification forKey:@"NSWindowWillCloseNotification"]; else NSLog([@"Can't initialize NSWindowWillCloseNotification with object " stringByAppendingString:[NSWindowWillCloseNotification description]]);
if ([NSWindowWillMiniaturizeNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillMiniaturizeNotification forKey:@"NSWindowWillMiniaturizeNotification"]; else NSLog([@"Can't initialize NSWindowWillMiniaturizeNotification with object " stringByAppendingString:[NSWindowWillMiniaturizeNotification description]]);
if ([NSWindowWillMoveNotification isKindOfClass:[NSString class]]) [d setObject:NSWindowWillMoveNotification forKey:@"NSWindowWillMoveNotification"]; else NSLog([@"Can't initialize NSWindowWillMoveNotification with object " stringByAppendingString:[NSWindowWillMoveNotification description]]);
if ([NSWordMLTextDocumentType isKindOfClass:[NSString class]]) [d setObject:NSWordMLTextDocumentType forKey:@"NSWordMLTextDocumentType"]; else NSLog([@"Can't initialize NSWordMLTextDocumentType with object " stringByAppendingString:[NSWordMLTextDocumentType description]]);
if ([NSWordTablesReadException isKindOfClass:[NSString class]]) [d setObject:NSWordTablesReadException forKey:@"NSWordTablesReadException"]; else NSLog([@"Can't initialize NSWordTablesReadException with object " stringByAppendingString:[NSWordTablesReadException description]]);
if ([NSWordTablesWriteException isKindOfClass:[NSString class]]) [d setObject:NSWordTablesWriteException forKey:@"NSWordTablesWriteException"]; else NSLog([@"Can't initialize NSWordTablesWriteException with object " stringByAppendingString:[NSWordTablesWriteException description]]);
if ([NSWorkspaceCompressOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceCompressOperation forKey:@"NSWorkspaceCompressOperation"]; else NSLog([@"Can't initialize NSWorkspaceCompressOperation with object " stringByAppendingString:[NSWorkspaceCompressOperation description]]);
if ([NSWorkspaceCopyOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceCopyOperation forKey:@"NSWorkspaceCopyOperation"]; else NSLog([@"Can't initialize NSWorkspaceCopyOperation with object " stringByAppendingString:[NSWorkspaceCopyOperation description]]);
if ([NSWorkspaceDecompressOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDecompressOperation forKey:@"NSWorkspaceDecompressOperation"]; else NSLog([@"Can't initialize NSWorkspaceDecompressOperation with object " stringByAppendingString:[NSWorkspaceDecompressOperation description]]);
if ([NSWorkspaceDecryptOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDecryptOperation forKey:@"NSWorkspaceDecryptOperation"]; else NSLog([@"Can't initialize NSWorkspaceDecryptOperation with object " stringByAppendingString:[NSWorkspaceDecryptOperation description]]);
if ([NSWorkspaceDestroyOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDestroyOperation forKey:@"NSWorkspaceDestroyOperation"]; else NSLog([@"Can't initialize NSWorkspaceDestroyOperation with object " stringByAppendingString:[NSWorkspaceDestroyOperation description]]);
if ([NSWorkspaceDidLaunchApplicationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidLaunchApplicationNotification forKey:@"NSWorkspaceDidLaunchApplicationNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidLaunchApplicationNotification with object " stringByAppendingString:[NSWorkspaceDidLaunchApplicationNotification description]]);
if ([NSWorkspaceDidMountNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidMountNotification forKey:@"NSWorkspaceDidMountNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidMountNotification with object " stringByAppendingString:[NSWorkspaceDidMountNotification description]]);
if ([NSWorkspaceDidPerformFileOperationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidPerformFileOperationNotification forKey:@"NSWorkspaceDidPerformFileOperationNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidPerformFileOperationNotification with object " stringByAppendingString:[NSWorkspaceDidPerformFileOperationNotification description]]);
if ([NSWorkspaceDidTerminateApplicationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidTerminateApplicationNotification forKey:@"NSWorkspaceDidTerminateApplicationNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidTerminateApplicationNotification with object " stringByAppendingString:[NSWorkspaceDidTerminateApplicationNotification description]]);
if ([NSWorkspaceDidUnmountNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidUnmountNotification forKey:@"NSWorkspaceDidUnmountNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidUnmountNotification with object " stringByAppendingString:[NSWorkspaceDidUnmountNotification description]]);
if ([NSWorkspaceDidWakeNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDidWakeNotification forKey:@"NSWorkspaceDidWakeNotification"]; else NSLog([@"Can't initialize NSWorkspaceDidWakeNotification with object " stringByAppendingString:[NSWorkspaceDidWakeNotification description]]);
if ([NSWorkspaceDuplicateOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceDuplicateOperation forKey:@"NSWorkspaceDuplicateOperation"]; else NSLog([@"Can't initialize NSWorkspaceDuplicateOperation with object " stringByAppendingString:[NSWorkspaceDuplicateOperation description]]);
if ([NSWorkspaceEncryptOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceEncryptOperation forKey:@"NSWorkspaceEncryptOperation"]; else NSLog([@"Can't initialize NSWorkspaceEncryptOperation with object " stringByAppendingString:[NSWorkspaceEncryptOperation description]]);
if ([NSWorkspaceLinkOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceLinkOperation forKey:@"NSWorkspaceLinkOperation"]; else NSLog([@"Can't initialize NSWorkspaceLinkOperation with object " stringByAppendingString:[NSWorkspaceLinkOperation description]]);
if ([NSWorkspaceMoveOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceMoveOperation forKey:@"NSWorkspaceMoveOperation"]; else NSLog([@"Can't initialize NSWorkspaceMoveOperation with object " stringByAppendingString:[NSWorkspaceMoveOperation description]]);
if ([NSWorkspaceRecycleOperation isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceRecycleOperation forKey:@"NSWorkspaceRecycleOperation"]; else NSLog([@"Can't initialize NSWorkspaceRecycleOperation with object " stringByAppendingString:[NSWorkspaceRecycleOperation description]]);
if ([NSWorkspaceSessionDidBecomeActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceSessionDidBecomeActiveNotification forKey:@"NSWorkspaceSessionDidBecomeActiveNotification"]; else NSLog([@"Can't initialize NSWorkspaceSessionDidBecomeActiveNotification with object " stringByAppendingString:[NSWorkspaceSessionDidBecomeActiveNotification description]]);
if ([NSWorkspaceSessionDidResignActiveNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceSessionDidResignActiveNotification forKey:@"NSWorkspaceSessionDidResignActiveNotification"]; else NSLog([@"Can't initialize NSWorkspaceSessionDidResignActiveNotification with object " stringByAppendingString:[NSWorkspaceSessionDidResignActiveNotification description]]);
if ([NSWorkspaceWillLaunchApplicationNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillLaunchApplicationNotification forKey:@"NSWorkspaceWillLaunchApplicationNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillLaunchApplicationNotification with object " stringByAppendingString:[NSWorkspaceWillLaunchApplicationNotification description]]);
if ([NSWorkspaceWillPowerOffNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillPowerOffNotification forKey:@"NSWorkspaceWillPowerOffNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillPowerOffNotification with object " stringByAppendingString:[NSWorkspaceWillPowerOffNotification description]]);
if ([NSWorkspaceWillSleepNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillSleepNotification forKey:@"NSWorkspaceWillSleepNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillSleepNotification with object " stringByAppendingString:[NSWorkspaceWillSleepNotification description]]);
if ([NSWorkspaceWillUnmountNotification isKindOfClass:[NSString class]]) [d setObject:NSWorkspaceWillUnmountNotification forKey:@"NSWorkspaceWillUnmountNotification"]; else NSLog([@"Can't initialize NSWorkspaceWillUnmountNotification with object " stringByAppendingString:[NSWorkspaceWillUnmountNotification description]]);
[d setObject:[Number numberWithDouble:NSAWTEventType] forKey:@"NSAWTEventType"];
[d setObject:[Number numberWithDouble:NSAboveBottom] forKey:@"NSAboveBottom"];
[d setObject:[Number numberWithDouble:NSAboveTop] forKey:@"NSAboveTop"];
[d setObject:[Number numberWithDouble:NSAddTraitFontAction] forKey:@"NSAddTraitFontAction"];
[d setObject:[Number numberWithDouble:NSAdobeCNS1CharacterCollection] forKey:@"NSAdobeCNS1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeGB1CharacterCollection] forKey:@"NSAdobeGB1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeJapan1CharacterCollection] forKey:@"NSAdobeJapan1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeJapan2CharacterCollection] forKey:@"NSAdobeJapan2CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAdobeKorea1CharacterCollection] forKey:@"NSAdobeKorea1CharacterCollection"];
[d setObject:[Number numberWithDouble:NSAlertAlternateReturn] forKey:@"NSAlertAlternateReturn"];
[d setObject:[Number numberWithDouble:NSAlertDefaultReturn] forKey:@"NSAlertDefaultReturn"];
[d setObject:[Number numberWithDouble:NSAlertErrorReturn] forKey:@"NSAlertErrorReturn"];
[d setObject:[Number numberWithDouble:NSAlertFirstButtonReturn] forKey:@"NSAlertFirstButtonReturn"];
[d setObject:[Number numberWithDouble:NSAlertOtherReturn] forKey:@"NSAlertOtherReturn"];
[d setObject:[Number numberWithDouble:NSAlertSecondButtonReturn] forKey:@"NSAlertSecondButtonReturn"];
[d setObject:[Number numberWithDouble:NSAlertThirdButtonReturn] forKey:@"NSAlertThirdButtonReturn"];
[d setObject:[Number numberWithDouble:NSAllScrollerParts] forKey:@"NSAllScrollerParts"];
[d setObject:[Number numberWithDouble:NSAlphaFirstBitmapFormat] forKey:@"NSAlphaFirstBitmapFormat"];
[d setObject:[Number numberWithDouble:NSAlphaNonpremultipliedBitmapFormat] forKey:@"NSAlphaNonpremultipliedBitmapFormat"];
[d setObject:[Number numberWithDouble:NSAlphaShiftKeyMask] forKey:@"NSAlphaShiftKeyMask"];
[d setObject:[Number numberWithDouble:NSAlternateKeyMask] forKey:@"NSAlternateKeyMask"];
[d setObject:[Number numberWithDouble:NSAnimationBlocking] forKey:@"NSAnimationBlocking"];
[d setObject:[Number numberWithDouble:NSAnimationEaseIn] forKey:@"NSAnimationEaseIn"];
[d setObject:[Number numberWithDouble:NSAnimationEaseInOut] forKey:@"NSAnimationEaseInOut"];
[d setObject:[Number numberWithDouble:NSAnimationEaseOut] forKey:@"NSAnimationEaseOut"];
[d setObject:[Number numberWithDouble:NSAnimationEffectDisappearingItemDefault] forKey:@"NSAnimationEffectDisappearingItemDefault"];
[d setObject:[Number numberWithDouble:NSAnimationEffectPoof] forKey:@"NSAnimationEffectPoof"];
[d setObject:[Number numberWithDouble:NSAnimationLinear] forKey:@"NSAnimationLinear"];
[d setObject:[Number numberWithDouble:NSAnimationNonblocking] forKey:@"NSAnimationNonblocking"];
[d setObject:[Number numberWithDouble:NSAnimationNonblockingThreaded] forKey:@"NSAnimationNonblockingThreaded"];
[d setObject:[Number numberWithDouble:NSAnyEventMask] forKey:@"NSAnyEventMask"];
[d setObject:[Number numberWithDouble:NSAnyType] forKey:@"NSAnyType"];
[d setObject:[Number numberWithDouble:NSAppKitDefined] forKey:@"NSAppKitDefined"];
[d setObject:[Number numberWithDouble:NSAppKitDefinedMask] forKey:@"NSAppKitDefinedMask"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_0] forKey:@"NSAppKitVersionNumber10_0"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_1] forKey:@"NSAppKitVersionNumber10_1"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_2] forKey:@"NSAppKitVersionNumber10_2"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_2_3] forKey:@"NSAppKitVersionNumber10_2_3"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3] forKey:@"NSAppKitVersionNumber10_3"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_2] forKey:@"NSAppKitVersionNumber10_3_2"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_3] forKey:@"NSAppKitVersionNumber10_3_3"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_5] forKey:@"NSAppKitVersionNumber10_3_5"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_7] forKey:@"NSAppKitVersionNumber10_3_7"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_3_9] forKey:@"NSAppKitVersionNumber10_3_9"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumber10_4] forKey:@"NSAppKitVersionNumber10_4"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithColumnResizingBrowser] forKey:@"NSAppKitVersionNumberWithColumnResizingBrowser"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithContinuousScrollingBrowser] forKey:@"NSAppKitVersionNumberWithContinuousScrollingBrowser"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithCursorSizeSupport] forKey:@"NSAppKitVersionNumberWithCursorSizeSupport"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithCustomSheetPosition] forKey:@"NSAppKitVersionNumberWithCustomSheetPosition"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithDirectionalTabs] forKey:@"NSAppKitVersionNumberWithDirectionalTabs"];
[d setObject:[Number numberWithDouble:NSAppKitVersionNumberWithPatternColorLeakFix] forKey:@"NSAppKitVersionNumberWithPatternColorLeakFix"];
[d setObject:[Number numberWithDouble:NSApplicationActivatedEventType] forKey:@"NSApplicationActivatedEventType"];
[d setObject:[Number numberWithDouble:NSApplicationDeactivatedEventType] forKey:@"NSApplicationDeactivatedEventType"];
[d setObject:[Number numberWithDouble:NSApplicationDefined] forKey:@"NSApplicationDefined"];
[d setObject:[Number numberWithDouble:NSApplicationDefinedMask] forKey:@"NSApplicationDefinedMask"];
[d setObject:[Number numberWithDouble:NSApplicationDelegateReplyCancel] forKey:@"NSApplicationDelegateReplyCancel"];
[d setObject:[Number numberWithDouble:NSApplicationDelegateReplyFailure] forKey:@"NSApplicationDelegateReplyFailure"];
[d setObject:[Number numberWithDouble:NSApplicationDelegateReplySuccess] forKey:@"NSApplicationDelegateReplySuccess"];
[d setObject:[Number numberWithDouble:NSAscendingPageOrder] forKey:@"NSAscendingPageOrder"];
[d setObject:[Number numberWithDouble:NSAtBottom] forKey:@"NSAtBottom"];
[d setObject:[Number numberWithDouble:NSAtTop] forKey:@"NSAtTop"];
[d setObject:[Number numberWithDouble:NSAttachmentCharacter] forKey:@"NSAttachmentCharacter"];
[d setObject:[Number numberWithDouble:NSAutoPagination] forKey:@"NSAutoPagination"];
[d setObject:[Number numberWithDouble:NSAutosaveOperation] forKey:@"NSAutosaveOperation"];
[d setObject:[Number numberWithDouble:NSBMPFileType] forKey:@"NSBMPFileType"];
[d setObject:[Number numberWithDouble:NSBackTabCharacter] forKey:@"NSBackTabCharacter"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleDark] forKey:@"NSBackgroundStyleDark"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleLight] forKey:@"NSBackgroundStyleLight"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleLowered] forKey:@"NSBackgroundStyleLowered"];
[d setObject:[Number numberWithDouble:NSBackgroundStyleRaised] forKey:@"NSBackgroundStyleRaised"];
[d setObject:[Number numberWithDouble:NSBackgroundTab] forKey:@"NSBackgroundTab"];
[d setObject:[Number numberWithDouble:NSBackingStoreBuffered] forKey:@"NSBackingStoreBuffered"];
[d setObject:[Number numberWithDouble:NSBackingStoreNonretained] forKey:@"NSBackingStoreNonretained"];
[d setObject:[Number numberWithDouble:NSBackingStoreRetained] forKey:@"NSBackingStoreRetained"];
[d setObject:[Number numberWithDouble:NSBackspaceCharacter] forKey:@"NSBackspaceCharacter"];
[d setObject:[Number numberWithDouble:NSBacktabTextMovement] forKey:@"NSBacktabTextMovement"];
[d setObject:[Number numberWithDouble:NSBeginFunctionKey] forKey:@"NSBeginFunctionKey"];
[d setObject:[Number numberWithDouble:NSBelowBottom] forKey:@"NSBelowBottom"];
[d setObject:[Number numberWithDouble:NSBelowTop] forKey:@"NSBelowTop"];
[d setObject:[Number numberWithDouble:NSBevelLineJoinStyle] forKey:@"NSBevelLineJoinStyle"];
[d setObject:[Number numberWithDouble:NSBezelBorder] forKey:@"NSBezelBorder"];
[d setObject:[Number numberWithDouble:NSBlueControlTint] forKey:@"NSBlueControlTint"];
[d setObject:[Number numberWithDouble:NSBoldFontMask] forKey:@"NSBoldFontMask"];
[d setObject:[Number numberWithDouble:NSBorderlessWindowMask] forKey:@"NSBorderlessWindowMask"];
[d setObject:[Number numberWithDouble:NSBottomTabsBezelBorder] forKey:@"NSBottomTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSBoxCustom] forKey:@"NSBoxCustom"];
[d setObject:[Number numberWithDouble:NSBoxOldStyle] forKey:@"NSBoxOldStyle"];
[d setObject:[Number numberWithDouble:NSBoxPrimary] forKey:@"NSBoxPrimary"];
[d setObject:[Number numberWithDouble:NSBoxSecondary] forKey:@"NSBoxSecondary"];
[d setObject:[Number numberWithDouble:NSBoxSeparator] forKey:@"NSBoxSeparator"];
[d setObject:[Number numberWithDouble:NSBreakFunctionKey] forKey:@"NSBreakFunctionKey"];
[d setObject:[Number numberWithDouble:NSBrowserAutoColumnResizing] forKey:@"NSBrowserAutoColumnResizing"];
[d setObject:[Number numberWithDouble:NSBrowserDropAbove] forKey:@"NSBrowserDropAbove"];
[d setObject:[Number numberWithDouble:NSBrowserDropOn] forKey:@"NSBrowserDropOn"];
[d setObject:[Number numberWithDouble:NSBrowserNoColumnResizing] forKey:@"NSBrowserNoColumnResizing"];
[d setObject:[Number numberWithDouble:NSBrowserUserColumnResizing] forKey:@"NSBrowserUserColumnResizing"];
[d setObject:[Number numberWithDouble:NSButtLineCapStyle] forKey:@"NSButtLineCapStyle"];
[d setObject:[Number numberWithDouble:NSCMYKColorSpaceModel] forKey:@"NSCMYKColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSCMYKModeColorPanel] forKey:@"NSCMYKModeColorPanel"];
[d setObject:[Number numberWithDouble:NSCancelButton] forKey:@"NSCancelButton"];
[d setObject:[Number numberWithDouble:NSCancelTextMovement] forKey:@"NSCancelTextMovement"];
[d setObject:[Number numberWithDouble:NSCarriageReturnCharacter] forKey:@"NSCarriageReturnCharacter"];
[d setObject:[Number numberWithDouble:NSCellAllowsMixedState] forKey:@"NSCellAllowsMixedState"];
[d setObject:[Number numberWithDouble:NSCellChangesContents] forKey:@"NSCellChangesContents"];
[d setObject:[Number numberWithDouble:NSCellDisabled] forKey:@"NSCellDisabled"];
[d setObject:[Number numberWithDouble:NSCellEditable] forKey:@"NSCellEditable"];
[d setObject:[Number numberWithDouble:NSCellHasImageHorizontal] forKey:@"NSCellHasImageHorizontal"];
[d setObject:[Number numberWithDouble:NSCellHasImageOnLeftOrBottom] forKey:@"NSCellHasImageOnLeftOrBottom"];
[d setObject:[Number numberWithDouble:NSCellHasOverlappingImage] forKey:@"NSCellHasOverlappingImage"];
[d setObject:[Number numberWithDouble:NSCellHighlighted] forKey:@"NSCellHighlighted"];
[d setObject:[Number numberWithDouble:NSCellHitContentArea] forKey:@"NSCellHitContentArea"];
[d setObject:[Number numberWithDouble:NSCellHitEditableTextArea] forKey:@"NSCellHitEditableTextArea"];
[d setObject:[Number numberWithDouble:NSCellHitNone] forKey:@"NSCellHitNone"];
[d setObject:[Number numberWithDouble:NSCellHitTrackableArea] forKey:@"NSCellHitTrackableArea"];
[d setObject:[Number numberWithDouble:NSCellIsBordered] forKey:@"NSCellIsBordered"];
[d setObject:[Number numberWithDouble:NSCellIsInsetButton] forKey:@"NSCellIsInsetButton"];
[d setObject:[Number numberWithDouble:NSCellLightsByBackground] forKey:@"NSCellLightsByBackground"];
[d setObject:[Number numberWithDouble:NSCellLightsByContents] forKey:@"NSCellLightsByContents"];
[d setObject:[Number numberWithDouble:NSCellLightsByGray] forKey:@"NSCellLightsByGray"];
[d setObject:[Number numberWithDouble:NSCellState] forKey:@"NSCellState"];
[d setObject:[Number numberWithDouble:NSCenterTabStopType] forKey:@"NSCenterTabStopType"];
[d setObject:[Number numberWithDouble:NSCenterTextAlignment] forKey:@"NSCenterTextAlignment"];
[d setObject:[Number numberWithDouble:NSChangeAutosaved] forKey:@"NSChangeAutosaved"];
[d setObject:[Number numberWithDouble:NSChangeBackgroundCell] forKey:@"NSChangeBackgroundCell"];
[d setObject:[Number numberWithDouble:NSChangeBackgroundCellMask] forKey:@"NSChangeBackgroundCellMask"];
[d setObject:[Number numberWithDouble:NSChangeCleared] forKey:@"NSChangeCleared"];
[d setObject:[Number numberWithDouble:NSChangeDone] forKey:@"NSChangeDone"];
[d setObject:[Number numberWithDouble:NSChangeGrayCell] forKey:@"NSChangeGrayCell"];
[d setObject:[Number numberWithDouble:NSChangeGrayCellMask] forKey:@"NSChangeGrayCellMask"];
[d setObject:[Number numberWithDouble:NSChangeReadOtherContents] forKey:@"NSChangeReadOtherContents"];
[d setObject:[Number numberWithDouble:NSChangeRedone] forKey:@"NSChangeRedone"];
[d setObject:[Number numberWithDouble:NSChangeUndone] forKey:@"NSChangeUndone"];
[d setObject:[Number numberWithDouble:NSCircularBezelStyle] forKey:@"NSCircularBezelStyle"];
[d setObject:[Number numberWithDouble:NSCircularSlider] forKey:@"NSCircularSlider"];
[d setObject:[Number numberWithDouble:NSClearControlTint] forKey:@"NSClearControlTint"];
[d setObject:[Number numberWithDouble:NSClearDisplayFunctionKey] forKey:@"NSClearDisplayFunctionKey"];
[d setObject:[Number numberWithDouble:NSClearLineFunctionKey] forKey:@"NSClearLineFunctionKey"];
[d setObject:[Number numberWithDouble:NSClipPagination] forKey:@"NSClipPagination"];
[d setObject:[Number numberWithDouble:NSClockAndCalendarDatePickerStyle] forKey:@"NSClockAndCalendarDatePickerStyle"];
[d setObject:[Number numberWithDouble:NSClosableWindowMask] forKey:@"NSClosableWindowMask"];
[d setObject:[Number numberWithDouble:NSClosePathBezierPathElement] forKey:@"NSClosePathBezierPathElement"];
[d setObject:[Number numberWithDouble:NSColorListModeColorPanel] forKey:@"NSColorListModeColorPanel"];
[d setObject:[Number numberWithDouble:NSColorPanelAllModesMask] forKey:@"NSColorPanelAllModesMask"];
[d setObject:[Number numberWithDouble:NSColorPanelCMYKModeMask] forKey:@"NSColorPanelCMYKModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelColorListModeMask] forKey:@"NSColorPanelColorListModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelCrayonModeMask] forKey:@"NSColorPanelCrayonModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelCustomPaletteModeMask] forKey:@"NSColorPanelCustomPaletteModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelGrayModeMask] forKey:@"NSColorPanelGrayModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelHSBModeMask] forKey:@"NSColorPanelHSBModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelRGBModeMask] forKey:@"NSColorPanelRGBModeMask"];
[d setObject:[Number numberWithDouble:NSColorPanelWheelModeMask] forKey:@"NSColorPanelWheelModeMask"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentAbsoluteColorimetric] forKey:@"NSColorRenderingIntentAbsoluteColorimetric"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentDefault] forKey:@"NSColorRenderingIntentDefault"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentPerceptual] forKey:@"NSColorRenderingIntentPerceptual"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentRelativeColorimetric] forKey:@"NSColorRenderingIntentRelativeColorimetric"];
[d setObject:[Number numberWithDouble:NSColorRenderingIntentSaturation] forKey:@"NSColorRenderingIntentSaturation"];
[d setObject:[Number numberWithDouble:NSCommandKeyMask] forKey:@"NSCommandKeyMask"];
[d setObject:[Number numberWithDouble:NSCompositeClear] forKey:@"NSCompositeClear"];
[d setObject:[Number numberWithDouble:NSCompositeCopy] forKey:@"NSCompositeCopy"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationAtop] forKey:@"NSCompositeDestinationAtop"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationIn] forKey:@"NSCompositeDestinationIn"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationOut] forKey:@"NSCompositeDestinationOut"];
[d setObject:[Number numberWithDouble:NSCompositeDestinationOver] forKey:@"NSCompositeDestinationOver"];
[d setObject:[Number numberWithDouble:NSCompositeHighlight] forKey:@"NSCompositeHighlight"];
[d setObject:[Number numberWithDouble:NSCompositePlusDarker] forKey:@"NSCompositePlusDarker"];
[d setObject:[Number numberWithDouble:NSCompositePlusLighter] forKey:@"NSCompositePlusLighter"];
[d setObject:[Number numberWithDouble:NSCompositeSourceAtop] forKey:@"NSCompositeSourceAtop"];
[d setObject:[Number numberWithDouble:NSCompositeSourceIn] forKey:@"NSCompositeSourceIn"];
[d setObject:[Number numberWithDouble:NSCompositeSourceOut] forKey:@"NSCompositeSourceOut"];
[d setObject:[Number numberWithDouble:NSCompositeSourceOver] forKey:@"NSCompositeSourceOver"];
[d setObject:[Number numberWithDouble:NSCompositeXOR] forKey:@"NSCompositeXOR"];
[d setObject:[Number numberWithDouble:NSCompressedFontMask] forKey:@"NSCompressedFontMask"];
[d setObject:[Number numberWithDouble:NSCondensedFontMask] forKey:@"NSCondensedFontMask"];
[d setObject:[Number numberWithDouble:NSContentsCellMask] forKey:@"NSContentsCellMask"];
[d setObject:[Number numberWithDouble:NSContinuousCapacityLevelIndicatorStyle] forKey:@"NSContinuousCapacityLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSControlGlyph] forKey:@"NSControlGlyph"];
[d setObject:[Number numberWithDouble:NSControlKeyMask] forKey:@"NSControlKeyMask"];
[d setObject:[Number numberWithDouble:NSCrayonModeColorPanel] forKey:@"NSCrayonModeColorPanel"];
[d setObject:[Number numberWithDouble:NSCriticalAlertStyle] forKey:@"NSCriticalAlertStyle"];
[d setObject:[Number numberWithDouble:NSCriticalRequest] forKey:@"NSCriticalRequest"];
[d setObject:[Number numberWithDouble:NSCursorPointingDevice] forKey:@"NSCursorPointingDevice"];
[d setObject:[Number numberWithDouble:NSCursorUpdate] forKey:@"NSCursorUpdate"];
[d setObject:[Number numberWithDouble:NSCursorUpdateMask] forKey:@"NSCursorUpdateMask"];
[d setObject:[Number numberWithDouble:NSCurveToBezierPathElement] forKey:@"NSCurveToBezierPathElement"];
[d setObject:[Number numberWithDouble:NSCustomPaletteModeColorPanel] forKey:@"NSCustomPaletteModeColorPanel"];
[d setObject:[Number numberWithDouble:NSDecimalTabStopType] forKey:@"NSDecimalTabStopType"];
[d setObject:[Number numberWithDouble:NSDefaultControlTint] forKey:@"NSDefaultControlTint"];
[d setObject:[Number numberWithDouble:NSDefaultTokenStyle] forKey:@"NSDefaultTokenStyle"];
[d setObject:[Number numberWithDouble:NSDeleteCharFunctionKey] forKey:@"NSDeleteCharFunctionKey"];
[d setObject:[Number numberWithDouble:NSDeleteCharacter] forKey:@"NSDeleteCharacter"];
[d setObject:[Number numberWithDouble:NSDeleteFunctionKey] forKey:@"NSDeleteFunctionKey"];
[d setObject:[Number numberWithDouble:NSDeleteLineFunctionKey] forKey:@"NSDeleteLineFunctionKey"];
[d setObject:[Number numberWithDouble:NSDescendingPageOrder] forKey:@"NSDescendingPageOrder"];
[d setObject:[Number numberWithDouble:NSDeviceIndependentModifierFlagsMask] forKey:@"NSDeviceIndependentModifierFlagsMask"];
[d setObject:[Number numberWithDouble:NSDeviceNColorSpaceModel] forKey:@"NSDeviceNColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSDirectSelection] forKey:@"NSDirectSelection"];
[d setObject:[Number numberWithDouble:NSDisclosureBezelStyle] forKey:@"NSDisclosureBezelStyle"];
[d setObject:[Number numberWithDouble:NSDiscreteCapacityLevelIndicatorStyle] forKey:@"NSDiscreteCapacityLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSDisplayWindowRunLoopOrdering] forKey:@"NSDisplayWindowRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSDocModalWindowMask] forKey:@"NSDocModalWindowMask"];
[d setObject:[Number numberWithDouble:NSDockWindowLevel] forKey:@"NSDockWindowLevel"];
[d setObject:[Number numberWithDouble:NSDoubleType] forKey:@"NSDoubleType"];
[d setObject:[Number numberWithDouble:NSDownArrowFunctionKey] forKey:@"NSDownArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSDownTextMovement] forKey:@"NSDownTextMovement"];
[d setObject:[Number numberWithDouble:NSDragOperationAll] forKey:@"NSDragOperationAll"];
[d setObject:[Number numberWithDouble:NSDragOperationAll_Obsolete] forKey:@"NSDragOperationAll_Obsolete"];
[d setObject:[Number numberWithDouble:NSDragOperationCopy] forKey:@"NSDragOperationCopy"];
[d setObject:[Number numberWithDouble:NSDragOperationDelete] forKey:@"NSDragOperationDelete"];
[d setObject:[Number numberWithDouble:NSDragOperationEvery] forKey:@"NSDragOperationEvery"];
[d setObject:[Number numberWithDouble:NSDragOperationGeneric] forKey:@"NSDragOperationGeneric"];
[d setObject:[Number numberWithDouble:NSDragOperationLink] forKey:@"NSDragOperationLink"];
[d setObject:[Number numberWithDouble:NSDragOperationMove] forKey:@"NSDragOperationMove"];
[d setObject:[Number numberWithDouble:NSDragOperationNone] forKey:@"NSDragOperationNone"];
[d setObject:[Number numberWithDouble:NSDragOperationPrivate] forKey:@"NSDragOperationPrivate"];
[d setObject:[Number numberWithDouble:NSDrawerClosedState] forKey:@"NSDrawerClosedState"];
[d setObject:[Number numberWithDouble:NSDrawerClosingState] forKey:@"NSDrawerClosingState"];
[d setObject:[Number numberWithDouble:NSDrawerOpenState] forKey:@"NSDrawerOpenState"];
[d setObject:[Number numberWithDouble:NSDrawerOpeningState] forKey:@"NSDrawerOpeningState"];
[d setObject:[Number numberWithDouble:NSEndFunctionKey] forKey:@"NSEndFunctionKey"];
[d setObject:[Number numberWithDouble:NSEnterCharacter] forKey:@"NSEnterCharacter"];
[d setObject:[Number numberWithDouble:NSEraDatePickerElementFlag] forKey:@"NSEraDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSEraserPointingDevice] forKey:@"NSEraserPointingDevice"];
[d setObject:[Number numberWithDouble:NSEvenOddWindingRule] forKey:@"NSEvenOddWindingRule"];
[d setObject:[Number numberWithDouble:NSExclude10_4ElementsIconCreationOption] forKey:@"NSExclude10_4ElementsIconCreationOption"];
[d setObject:[Number numberWithDouble:NSExcludeQuickDrawElementsIconCreationOption] forKey:@"NSExcludeQuickDrawElementsIconCreationOption"];
[d setObject:[Number numberWithDouble:NSExecuteFunctionKey] forKey:@"NSExecuteFunctionKey"];
[d setObject:[Number numberWithDouble:NSExpandedFontMask] forKey:@"NSExpandedFontMask"];
[d setObject:[Number numberWithDouble:NSF10FunctionKey] forKey:@"NSF10FunctionKey"];
[d setObject:[Number numberWithDouble:NSF11FunctionKey] forKey:@"NSF11FunctionKey"];
[d setObject:[Number numberWithDouble:NSF12FunctionKey] forKey:@"NSF12FunctionKey"];
[d setObject:[Number numberWithDouble:NSF13FunctionKey] forKey:@"NSF13FunctionKey"];
[d setObject:[Number numberWithDouble:NSF14FunctionKey] forKey:@"NSF14FunctionKey"];
[d setObject:[Number numberWithDouble:NSF15FunctionKey] forKey:@"NSF15FunctionKey"];
[d setObject:[Number numberWithDouble:NSF16FunctionKey] forKey:@"NSF16FunctionKey"];
[d setObject:[Number numberWithDouble:NSF17FunctionKey] forKey:@"NSF17FunctionKey"];
[d setObject:[Number numberWithDouble:NSF18FunctionKey] forKey:@"NSF18FunctionKey"];
[d setObject:[Number numberWithDouble:NSF19FunctionKey] forKey:@"NSF19FunctionKey"];
[d setObject:[Number numberWithDouble:NSF1FunctionKey] forKey:@"NSF1FunctionKey"];
[d setObject:[Number numberWithDouble:NSF20FunctionKey] forKey:@"NSF20FunctionKey"];
[d setObject:[Number numberWithDouble:NSF21FunctionKey] forKey:@"NSF21FunctionKey"];
[d setObject:[Number numberWithDouble:NSF22FunctionKey] forKey:@"NSF22FunctionKey"];
[d setObject:[Number numberWithDouble:NSF23FunctionKey] forKey:@"NSF23FunctionKey"];
[d setObject:[Number numberWithDouble:NSF24FunctionKey] forKey:@"NSF24FunctionKey"];
[d setObject:[Number numberWithDouble:NSF25FunctionKey] forKey:@"NSF25FunctionKey"];
[d setObject:[Number numberWithDouble:NSF26FunctionKey] forKey:@"NSF26FunctionKey"];
[d setObject:[Number numberWithDouble:NSF27FunctionKey] forKey:@"NSF27FunctionKey"];
[d setObject:[Number numberWithDouble:NSF28FunctionKey] forKey:@"NSF28FunctionKey"];
[d setObject:[Number numberWithDouble:NSF29FunctionKey] forKey:@"NSF29FunctionKey"];
[d setObject:[Number numberWithDouble:NSF2FunctionKey] forKey:@"NSF2FunctionKey"];
[d setObject:[Number numberWithDouble:NSF30FunctionKey] forKey:@"NSF30FunctionKey"];
[d setObject:[Number numberWithDouble:NSF31FunctionKey] forKey:@"NSF31FunctionKey"];
[d setObject:[Number numberWithDouble:NSF32FunctionKey] forKey:@"NSF32FunctionKey"];
[d setObject:[Number numberWithDouble:NSF33FunctionKey] forKey:@"NSF33FunctionKey"];
[d setObject:[Number numberWithDouble:NSF34FunctionKey] forKey:@"NSF34FunctionKey"];
[d setObject:[Number numberWithDouble:NSF35FunctionKey] forKey:@"NSF35FunctionKey"];
[d setObject:[Number numberWithDouble:NSF3FunctionKey] forKey:@"NSF3FunctionKey"];
[d setObject:[Number numberWithDouble:NSF4FunctionKey] forKey:@"NSF4FunctionKey"];
[d setObject:[Number numberWithDouble:NSF5FunctionKey] forKey:@"NSF5FunctionKey"];
[d setObject:[Number numberWithDouble:NSF6FunctionKey] forKey:@"NSF6FunctionKey"];
[d setObject:[Number numberWithDouble:NSF7FunctionKey] forKey:@"NSF7FunctionKey"];
[d setObject:[Number numberWithDouble:NSF8FunctionKey] forKey:@"NSF8FunctionKey"];
[d setObject:[Number numberWithDouble:NSF9FunctionKey] forKey:@"NSF9FunctionKey"];
[d setObject:[Number numberWithDouble:NSFPCurrentField] forKey:@"NSFPCurrentField"];
[d setObject:[Number numberWithDouble:NSFPPreviewButton] forKey:@"NSFPPreviewButton"];
[d setObject:[Number numberWithDouble:NSFPPreviewField] forKey:@"NSFPPreviewField"];
[d setObject:[Number numberWithDouble:NSFPRevertButton] forKey:@"NSFPRevertButton"];
[d setObject:[Number numberWithDouble:NSFPSetButton] forKey:@"NSFPSetButton"];
[d setObject:[Number numberWithDouble:NSFPSizeField] forKey:@"NSFPSizeField"];
[d setObject:[Number numberWithDouble:NSFPSizeTitle] forKey:@"NSFPSizeTitle"];
[d setObject:[Number numberWithDouble:NSFileHandlingPanelCancelButton] forKey:@"NSFileHandlingPanelCancelButton"];
[d setObject:[Number numberWithDouble:NSFileHandlingPanelOKButton] forKey:@"NSFileHandlingPanelOKButton"];
[d setObject:[Number numberWithDouble:NSFindFunctionKey] forKey:@"NSFindFunctionKey"];
[d setObject:[Number numberWithDouble:NSFindPanelActionNext] forKey:@"NSFindPanelActionNext"];
[d setObject:[Number numberWithDouble:NSFindPanelActionPrevious] forKey:@"NSFindPanelActionPrevious"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplace] forKey:@"NSFindPanelActionReplace"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplaceAll] forKey:@"NSFindPanelActionReplaceAll"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplaceAllInSelection] forKey:@"NSFindPanelActionReplaceAllInSelection"];
[d setObject:[Number numberWithDouble:NSFindPanelActionReplaceAndFind] forKey:@"NSFindPanelActionReplaceAndFind"];
[d setObject:[Number numberWithDouble:NSFindPanelActionSelectAll] forKey:@"NSFindPanelActionSelectAll"];
[d setObject:[Number numberWithDouble:NSFindPanelActionSelectAllInSelection] forKey:@"NSFindPanelActionSelectAllInSelection"];
[d setObject:[Number numberWithDouble:NSFindPanelActionSetFindString] forKey:@"NSFindPanelActionSetFindString"];
[d setObject:[Number numberWithDouble:NSFindPanelActionShowFindPanel] forKey:@"NSFindPanelActionShowFindPanel"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeContains] forKey:@"NSFindPanelSubstringMatchTypeContains"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeEndsWith] forKey:@"NSFindPanelSubstringMatchTypeEndsWith"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeFullWord] forKey:@"NSFindPanelSubstringMatchTypeFullWord"];
[d setObject:[Number numberWithDouble:NSFindPanelSubstringMatchTypeStartsWith] forKey:@"NSFindPanelSubstringMatchTypeStartsWith"];
[d setObject:[Number numberWithDouble:NSFitPagination] forKey:@"NSFitPagination"];
[d setObject:[Number numberWithDouble:NSFixedPitchFontMask] forKey:@"NSFixedPitchFontMask"];
[d setObject:[Number numberWithDouble:NSFlagsChanged] forKey:@"NSFlagsChanged"];
[d setObject:[Number numberWithDouble:NSFlagsChangedMask] forKey:@"NSFlagsChangedMask"];
[d setObject:[Number numberWithDouble:NSFloatType] forKey:@"NSFloatType"];
[d setObject:[Number numberWithDouble:NSFloatingPointSamplesBitmapFormat] forKey:@"NSFloatingPointSamplesBitmapFormat"];
[d setObject:[Number numberWithDouble:NSFloatingWindowLevel] forKey:@"NSFloatingWindowLevel"];
[d setObject:[Number numberWithDouble:NSFocusRingAbove] forKey:@"NSFocusRingAbove"];
[d setObject:[Number numberWithDouble:NSFocusRingBelow] forKey:@"NSFocusRingBelow"];
[d setObject:[Number numberWithDouble:NSFocusRingOnly] forKey:@"NSFocusRingOnly"];
[d setObject:[Number numberWithDouble:NSFocusRingTypeDefault] forKey:@"NSFocusRingTypeDefault"];
[d setObject:[Number numberWithDouble:NSFocusRingTypeExterior] forKey:@"NSFocusRingTypeExterior"];
[d setObject:[Number numberWithDouble:NSFocusRingTypeNone] forKey:@"NSFocusRingTypeNone"];
[d setObject:[Number numberWithDouble:NSFontAntialiasedIntegerAdvancementsRenderingMode] forKey:@"NSFontAntialiasedIntegerAdvancementsRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontAntialiasedRenderingMode] forKey:@"NSFontAntialiasedRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontBoldTrait] forKey:@"NSFontBoldTrait"];
[d setObject:[Number numberWithDouble:NSFontClarendonSerifsClass] forKey:@"NSFontClarendonSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontCollectionApplicationOnlyMask] forKey:@"NSFontCollectionApplicationOnlyMask"];
[d setObject:[Number numberWithDouble:NSFontCondensedTrait] forKey:@"NSFontCondensedTrait"];
[d setObject:[Number numberWithDouble:NSFontDefaultRenderingMode] forKey:@"NSFontDefaultRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontExpandedTrait] forKey:@"NSFontExpandedTrait"];
[d setObject:[Number numberWithDouble:NSFontFamilyClassMask] forKey:@"NSFontFamilyClassMask"];
[d setObject:[Number numberWithDouble:NSFontFreeformSerifsClass] forKey:@"NSFontFreeformSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontIntegerAdvancementsRenderingMode] forKey:@"NSFontIntegerAdvancementsRenderingMode"];
[d setObject:[Number numberWithDouble:NSFontItalicTrait] forKey:@"NSFontItalicTrait"];
[d setObject:[Number numberWithDouble:NSFontModernSerifsClass] forKey:@"NSFontModernSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontMonoSpaceTrait] forKey:@"NSFontMonoSpaceTrait"];
[d setObject:[Number numberWithDouble:NSFontOldStyleSerifsClass] forKey:@"NSFontOldStyleSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontOrnamentalsClass] forKey:@"NSFontOrnamentalsClass"];
[d setObject:[Number numberWithDouble:NSFontPanelAllEffectsModeMask] forKey:@"NSFontPanelAllEffectsModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelAllModesMask] forKey:@"NSFontPanelAllModesMask"];
[d setObject:[Number numberWithDouble:NSFontPanelCollectionModeMask] forKey:@"NSFontPanelCollectionModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelDocumentColorEffectModeMask] forKey:@"NSFontPanelDocumentColorEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelFaceModeMask] forKey:@"NSFontPanelFaceModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelShadowEffectModeMask] forKey:@"NSFontPanelShadowEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelSizeModeMask] forKey:@"NSFontPanelSizeModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelStandardModesMask] forKey:@"NSFontPanelStandardModesMask"];
[d setObject:[Number numberWithDouble:NSFontPanelStrikethroughEffectModeMask] forKey:@"NSFontPanelStrikethroughEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelTextColorEffectModeMask] forKey:@"NSFontPanelTextColorEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontPanelUnderlineEffectModeMask] forKey:@"NSFontPanelUnderlineEffectModeMask"];
[d setObject:[Number numberWithDouble:NSFontSansSerifClass] forKey:@"NSFontSansSerifClass"];
[d setObject:[Number numberWithDouble:NSFontScriptsClass] forKey:@"NSFontScriptsClass"];
[d setObject:[Number numberWithDouble:NSFontSlabSerifsClass] forKey:@"NSFontSlabSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontSymbolicClass] forKey:@"NSFontSymbolicClass"];
[d setObject:[Number numberWithDouble:NSFontTransitionalSerifsClass] forKey:@"NSFontTransitionalSerifsClass"];
[d setObject:[Number numberWithDouble:NSFontUIOptimizedTrait] forKey:@"NSFontUIOptimizedTrait"];
[d setObject:[Number numberWithDouble:NSFontUnknownClass] forKey:@"NSFontUnknownClass"];
[d setObject:[Number numberWithDouble:NSFontVerticalTrait] forKey:@"NSFontVerticalTrait"];
[d setObject:[Number numberWithDouble:NSFormFeedCharacter] forKey:@"NSFormFeedCharacter"];
[d setObject:[Number numberWithDouble:NSFunctionKeyMask] forKey:@"NSFunctionKeyMask"];
[d setObject:[Number numberWithDouble:NSGIFFileType] forKey:@"NSGIFFileType"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeBidiLevel] forKey:@"NSGlyphAttributeBidiLevel"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeElastic] forKey:@"NSGlyphAttributeElastic"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeInscribe] forKey:@"NSGlyphAttributeInscribe"];
[d setObject:[Number numberWithDouble:NSGlyphAttributeSoft] forKey:@"NSGlyphAttributeSoft"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeAbove] forKey:@"NSGlyphInscribeAbove"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeBase] forKey:@"NSGlyphInscribeBase"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeBelow] forKey:@"NSGlyphInscribeBelow"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeOverBelow] forKey:@"NSGlyphInscribeOverBelow"];
[d setObject:[Number numberWithDouble:NSGlyphInscribeOverstrike] forKey:@"NSGlyphInscribeOverstrike"];
[d setObject:[Number numberWithDouble:NSGradientConcaveStrong] forKey:@"NSGradientConcaveStrong"];
[d setObject:[Number numberWithDouble:NSGradientConcaveWeak] forKey:@"NSGradientConcaveWeak"];
[d setObject:[Number numberWithDouble:NSGradientConvexStrong] forKey:@"NSGradientConvexStrong"];
[d setObject:[Number numberWithDouble:NSGradientConvexWeak] forKey:@"NSGradientConvexWeak"];
[d setObject:[Number numberWithDouble:NSGradientDrawsAfterEndingLocation] forKey:@"NSGradientDrawsAfterEndingLocation"];
[d setObject:[Number numberWithDouble:NSGradientDrawsBeforeStartingLocation] forKey:@"NSGradientDrawsBeforeStartingLocation"];
[d setObject:[Number numberWithDouble:NSGradientNone] forKey:@"NSGradientNone"];
[d setObject:[Number numberWithDouble:NSGraphiteControlTint] forKey:@"NSGraphiteControlTint"];
[d setObject:[Number numberWithDouble:NSGrayColorSpaceModel] forKey:@"NSGrayColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSGrayModeColorPanel] forKey:@"NSGrayModeColorPanel"];
[d setObject:[Number numberWithDouble:NSGrooveBorder] forKey:@"NSGrooveBorder"];
[d setObject:[Number numberWithDouble:NSHSBModeColorPanel] forKey:@"NSHSBModeColorPanel"];
[d setObject:[Number numberWithDouble:NSHUDWindowMask] forKey:@"NSHUDWindowMask"];
[d setObject:[Number numberWithDouble:NSHeavierFontAction] forKey:@"NSHeavierFontAction"];
[d setObject:[Number numberWithDouble:NSHelpButtonBezelStyle] forKey:@"NSHelpButtonBezelStyle"];
[d setObject:[Number numberWithDouble:NSHelpFunctionKey] forKey:@"NSHelpFunctionKey"];
[d setObject:[Number numberWithDouble:NSHelpKeyMask] forKey:@"NSHelpKeyMask"];
[d setObject:[Number numberWithDouble:NSHighlightModeMatrix] forKey:@"NSHighlightModeMatrix"];
[d setObject:[Number numberWithDouble:NSHomeFunctionKey] forKey:@"NSHomeFunctionKey"];
[d setObject:[Number numberWithDouble:NSHorizontalRuler] forKey:@"NSHorizontalRuler"];
[d setObject:[Number numberWithDouble:NSHourMinuteDatePickerElementFlag] forKey:@"NSHourMinuteDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSHourMinuteSecondDatePickerElementFlag] forKey:@"NSHourMinuteSecondDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSIdentityMappingCharacterCollection] forKey:@"NSIdentityMappingCharacterCollection"];
[d setObject:[Number numberWithDouble:NSIllegalTextMovement] forKey:@"NSIllegalTextMovement"];
[d setObject:[Number numberWithDouble:NSImageAbove] forKey:@"NSImageAbove"];
[d setObject:[Number numberWithDouble:NSImageAlignBottom] forKey:@"NSImageAlignBottom"];
[d setObject:[Number numberWithDouble:NSImageAlignBottomLeft] forKey:@"NSImageAlignBottomLeft"];
[d setObject:[Number numberWithDouble:NSImageAlignBottomRight] forKey:@"NSImageAlignBottomRight"];
[d setObject:[Number numberWithDouble:NSImageAlignCenter] forKey:@"NSImageAlignCenter"];
[d setObject:[Number numberWithDouble:NSImageAlignLeft] forKey:@"NSImageAlignLeft"];
[d setObject:[Number numberWithDouble:NSImageAlignRight] forKey:@"NSImageAlignRight"];
[d setObject:[Number numberWithDouble:NSImageAlignTop] forKey:@"NSImageAlignTop"];
[d setObject:[Number numberWithDouble:NSImageAlignTopLeft] forKey:@"NSImageAlignTopLeft"];
[d setObject:[Number numberWithDouble:NSImageAlignTopRight] forKey:@"NSImageAlignTopRight"];
[d setObject:[Number numberWithDouble:NSImageBelow] forKey:@"NSImageBelow"];
[d setObject:[Number numberWithDouble:NSImageCacheAlways] forKey:@"NSImageCacheAlways"];
[d setObject:[Number numberWithDouble:NSImageCacheBySize] forKey:@"NSImageCacheBySize"];
[d setObject:[Number numberWithDouble:NSImageCacheDefault] forKey:@"NSImageCacheDefault"];
[d setObject:[Number numberWithDouble:NSImageCacheNever] forKey:@"NSImageCacheNever"];
[d setObject:[Number numberWithDouble:NSImageCellType] forKey:@"NSImageCellType"];
[d setObject:[Number numberWithDouble:NSImageFrameButton] forKey:@"NSImageFrameButton"];
[d setObject:[Number numberWithDouble:NSImageFrameGrayBezel] forKey:@"NSImageFrameGrayBezel"];
[d setObject:[Number numberWithDouble:NSImageFrameGroove] forKey:@"NSImageFrameGroove"];
[d setObject:[Number numberWithDouble:NSImageFrameNone] forKey:@"NSImageFrameNone"];
[d setObject:[Number numberWithDouble:NSImageFramePhoto] forKey:@"NSImageFramePhoto"];
[d setObject:[Number numberWithDouble:NSImageInterpolationDefault] forKey:@"NSImageInterpolationDefault"];
[d setObject:[Number numberWithDouble:NSImageInterpolationHigh] forKey:@"NSImageInterpolationHigh"];
[d setObject:[Number numberWithDouble:NSImageInterpolationLow] forKey:@"NSImageInterpolationLow"];
[d setObject:[Number numberWithDouble:NSImageInterpolationNone] forKey:@"NSImageInterpolationNone"];
[d setObject:[Number numberWithDouble:NSImageLeft] forKey:@"NSImageLeft"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusCancelled] forKey:@"NSImageLoadStatusCancelled"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusCompleted] forKey:@"NSImageLoadStatusCompleted"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusInvalidData] forKey:@"NSImageLoadStatusInvalidData"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusReadError] forKey:@"NSImageLoadStatusReadError"];
[d setObject:[Number numberWithDouble:NSImageLoadStatusUnexpectedEOF] forKey:@"NSImageLoadStatusUnexpectedEOF"];
[d setObject:[Number numberWithDouble:NSImageOnly] forKey:@"NSImageOnly"];
[d setObject:[Number numberWithDouble:NSImageOverlaps] forKey:@"NSImageOverlaps"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusCompleted] forKey:@"NSImageRepLoadStatusCompleted"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusInvalidData] forKey:@"NSImageRepLoadStatusInvalidData"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusReadingHeader] forKey:@"NSImageRepLoadStatusReadingHeader"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusUnexpectedEOF] forKey:@"NSImageRepLoadStatusUnexpectedEOF"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusUnknownType] forKey:@"NSImageRepLoadStatusUnknownType"];
[d setObject:[Number numberWithDouble:NSImageRepLoadStatusWillNeedAllData] forKey:@"NSImageRepLoadStatusWillNeedAllData"];
[d setObject:[Number numberWithDouble:NSImageRepMatchesDevice] forKey:@"NSImageRepMatchesDevice"];
[d setObject:[Number numberWithDouble:NSImageRight] forKey:@"NSImageRight"];
[d setObject:[Number numberWithDouble:NSImageScaleAxesIndependently] forKey:@"NSImageScaleAxesIndependently"];
[d setObject:[Number numberWithDouble:NSImageScaleNone] forKey:@"NSImageScaleNone"];
[d setObject:[Number numberWithDouble:NSImageScaleProportionallyDown] forKey:@"NSImageScaleProportionallyDown"];
[d setObject:[Number numberWithDouble:NSImageScaleProportionallyUpOrDown] forKey:@"NSImageScaleProportionallyUpOrDown"];
[d setObject:[Number numberWithDouble:NSIndexedColorSpaceModel] forKey:@"NSIndexedColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSInformationalAlertStyle] forKey:@"NSInformationalAlertStyle"];
[d setObject:[Number numberWithDouble:NSInformationalRequest] forKey:@"NSInformationalRequest"];
[d setObject:[Number numberWithDouble:NSInsertCharFunctionKey] forKey:@"NSInsertCharFunctionKey"];
[d setObject:[Number numberWithDouble:NSInsertFunctionKey] forKey:@"NSInsertFunctionKey"];
[d setObject:[Number numberWithDouble:NSInsertLineFunctionKey] forKey:@"NSInsertLineFunctionKey"];
[d setObject:[Number numberWithDouble:NSIntType] forKey:@"NSIntType"];
[d setObject:[Number numberWithDouble:NSItalicFontMask] forKey:@"NSItalicFontMask"];
[d setObject:[Number numberWithDouble:NSJPEG2000FileType] forKey:@"NSJPEG2000FileType"];
[d setObject:[Number numberWithDouble:NSJPEGFileType] forKey:@"NSJPEGFileType"];
[d setObject:[Number numberWithDouble:NSJustifiedTextAlignment] forKey:@"NSJustifiedTextAlignment"];
[d setObject:[Number numberWithDouble:NSKeyDown] forKey:@"NSKeyDown"];
[d setObject:[Number numberWithDouble:NSKeyDownMask] forKey:@"NSKeyDownMask"];
[d setObject:[Number numberWithDouble:NSKeyUp] forKey:@"NSKeyUp"];
[d setObject:[Number numberWithDouble:NSKeyUpMask] forKey:@"NSKeyUpMask"];
[d setObject:[Number numberWithDouble:NSLABColorSpaceModel] forKey:@"NSLABColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSLandscapeOrientation] forKey:@"NSLandscapeOrientation"];
[d setObject:[Number numberWithDouble:NSLeftArrowFunctionKey] forKey:@"NSLeftArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSLeftMouseDown] forKey:@"NSLeftMouseDown"];
[d setObject:[Number numberWithDouble:NSLeftMouseDownMask] forKey:@"NSLeftMouseDownMask"];
[d setObject:[Number numberWithDouble:NSLeftMouseDragged] forKey:@"NSLeftMouseDragged"];
[d setObject:[Number numberWithDouble:NSLeftMouseDraggedMask] forKey:@"NSLeftMouseDraggedMask"];
[d setObject:[Number numberWithDouble:NSLeftMouseUp] forKey:@"NSLeftMouseUp"];
[d setObject:[Number numberWithDouble:NSLeftMouseUpMask] forKey:@"NSLeftMouseUpMask"];
[d setObject:[Number numberWithDouble:NSLeftTabStopType] forKey:@"NSLeftTabStopType"];
[d setObject:[Number numberWithDouble:NSLeftTabsBezelBorder] forKey:@"NSLeftTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSLeftTextAlignment] forKey:@"NSLeftTextAlignment"];
[d setObject:[Number numberWithDouble:NSLeftTextMovement] forKey:@"NSLeftTextMovement"];
[d setObject:[Number numberWithDouble:NSLighterFontAction] forKey:@"NSLighterFontAction"];
[d setObject:[Number numberWithDouble:NSLineBorder] forKey:@"NSLineBorder"];
[d setObject:[Number numberWithDouble:NSLineBreakByCharWrapping] forKey:@"NSLineBreakByCharWrapping"];
[d setObject:[Number numberWithDouble:NSLineBreakByClipping] forKey:@"NSLineBreakByClipping"];
[d setObject:[Number numberWithDouble:NSLineBreakByTruncatingHead] forKey:@"NSLineBreakByTruncatingHead"];
[d setObject:[Number numberWithDouble:NSLineBreakByTruncatingMiddle] forKey:@"NSLineBreakByTruncatingMiddle"];
[d setObject:[Number numberWithDouble:NSLineBreakByTruncatingTail] forKey:@"NSLineBreakByTruncatingTail"];
[d setObject:[Number numberWithDouble:NSLineBreakByWordWrapping] forKey:@"NSLineBreakByWordWrapping"];
[d setObject:[Number numberWithDouble:NSLineDoesntMove] forKey:@"NSLineDoesntMove"];
[d setObject:[Number numberWithDouble:NSLineMovesDown] forKey:@"NSLineMovesDown"];
[d setObject:[Number numberWithDouble:NSLineMovesLeft] forKey:@"NSLineMovesLeft"];
[d setObject:[Number numberWithDouble:NSLineMovesRight] forKey:@"NSLineMovesRight"];
[d setObject:[Number numberWithDouble:NSLineMovesUp] forKey:@"NSLineMovesUp"];
[d setObject:[Number numberWithDouble:NSLineSeparatorCharacter] forKey:@"NSLineSeparatorCharacter"];
[d setObject:[Number numberWithDouble:NSLineSweepDown] forKey:@"NSLineSweepDown"];
[d setObject:[Number numberWithDouble:NSLineSweepLeft] forKey:@"NSLineSweepLeft"];
[d setObject:[Number numberWithDouble:NSLineSweepRight] forKey:@"NSLineSweepRight"];
[d setObject:[Number numberWithDouble:NSLineSweepUp] forKey:@"NSLineSweepUp"];
[d setObject:[Number numberWithDouble:NSLineToBezierPathElement] forKey:@"NSLineToBezierPathElement"];
[d setObject:[Number numberWithDouble:NSLinearSlider] forKey:@"NSLinearSlider"];
[d setObject:[Number numberWithDouble:NSListModeMatrix] forKey:@"NSListModeMatrix"];
[d setObject:[Number numberWithDouble:NSMacintoshInterfaceStyle] forKey:@"NSMacintoshInterfaceStyle"];
[d setObject:[Number numberWithDouble:NSMainMenuWindowLevel] forKey:@"NSMainMenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSMenuFunctionKey] forKey:@"NSMenuFunctionKey"];
[d setObject:[Number numberWithDouble:NSMiniControlSize] forKey:@"NSMiniControlSize"];
[d setObject:[Number numberWithDouble:NSMiniaturizableWindowMask] forKey:@"NSMiniaturizableWindowMask"];
[d setObject:[Number numberWithDouble:NSMiterLineJoinStyle] forKey:@"NSMiterLineJoinStyle"];
[d setObject:[Number numberWithDouble:NSMixedState] forKey:@"NSMixedState"];
[d setObject:[Number numberWithDouble:NSModalPanelWindowLevel] forKey:@"NSModalPanelWindowLevel"];
[d setObject:[Number numberWithDouble:NSModeSwitchFunctionKey] forKey:@"NSModeSwitchFunctionKey"];
[d setObject:[Number numberWithDouble:NSMomentaryChangeButton] forKey:@"NSMomentaryChangeButton"];
[d setObject:[Number numberWithDouble:NSMomentaryLight] forKey:@"NSMomentaryLight"];
[d setObject:[Number numberWithDouble:NSMomentaryLightButton] forKey:@"NSMomentaryLightButton"];
[d setObject:[Number numberWithDouble:NSMomentaryPushButton] forKey:@"NSMomentaryPushButton"];
[d setObject:[Number numberWithDouble:NSMomentaryPushInButton] forKey:@"NSMomentaryPushInButton"];
[d setObject:[Number numberWithDouble:NSMouseEntered] forKey:@"NSMouseEntered"];
[d setObject:[Number numberWithDouble:NSMouseEnteredMask] forKey:@"NSMouseEnteredMask"];
[d setObject:[Number numberWithDouble:NSMouseEventSubtype] forKey:@"NSMouseEventSubtype"];
[d setObject:[Number numberWithDouble:NSMouseExited] forKey:@"NSMouseExited"];
[d setObject:[Number numberWithDouble:NSMouseExitedMask] forKey:@"NSMouseExitedMask"];
[d setObject:[Number numberWithDouble:NSMouseMoved] forKey:@"NSMouseMoved"];
[d setObject:[Number numberWithDouble:NSMouseMovedMask] forKey:@"NSMouseMovedMask"];
[d setObject:[Number numberWithDouble:NSMoveToBezierPathElement] forKey:@"NSMoveToBezierPathElement"];
[d setObject:[Number numberWithDouble:NSNarrowFontMask] forKey:@"NSNarrowFontMask"];
[d setObject:[Number numberWithDouble:NSNativeShortGlyphPacking] forKey:@"NSNativeShortGlyphPacking"];
[d setObject:[Number numberWithDouble:NSNaturalTextAlignment] forKey:@"NSNaturalTextAlignment"];
[d setObject:[Number numberWithDouble:NSNewlineCharacter] forKey:@"NSNewlineCharacter"];
[d setObject:[Number numberWithDouble:NSNextFunctionKey] forKey:@"NSNextFunctionKey"];
[d setObject:[Number numberWithDouble:NSNextStepInterfaceStyle] forKey:@"NSNextStepInterfaceStyle"];
[d setObject:[Number numberWithDouble:NSNoBorder] forKey:@"NSNoBorder"];
[d setObject:[Number numberWithDouble:NSNoCellMask] forKey:@"NSNoCellMask"];
[d setObject:[Number numberWithDouble:NSNoFontChangeAction] forKey:@"NSNoFontChangeAction"];
[d setObject:[Number numberWithDouble:NSNoImage] forKey:@"NSNoImage"];
[d setObject:[Number numberWithDouble:NSNoInterfaceStyle] forKey:@"NSNoInterfaceStyle"];
[d setObject:[Number numberWithDouble:NSNoModeColorPanel] forKey:@"NSNoModeColorPanel"];
[d setObject:[Number numberWithDouble:NSNoScrollerParts] forKey:@"NSNoScrollerParts"];
[d setObject:[Number numberWithDouble:NSNoTabsBezelBorder] forKey:@"NSNoTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSNoTabsLineBorder] forKey:@"NSNoTabsLineBorder"];
[d setObject:[Number numberWithDouble:NSNoTabsNoBorder] forKey:@"NSNoTabsNoBorder"];
[d setObject:[Number numberWithDouble:NSNoTitle] forKey:@"NSNoTitle"];
[d setObject:[Number numberWithDouble:NSNoUnderlineStyle] forKey:@"NSNoUnderlineStyle"];
[d setObject:[Number numberWithDouble:NSNonStandardCharacterSetFontMask] forKey:@"NSNonStandardCharacterSetFontMask"];
[d setObject:[Number numberWithDouble:NSNonZeroWindingRule] forKey:@"NSNonZeroWindingRule"];
[d setObject:[Number numberWithDouble:NSNonactivatingPanelMask] forKey:@"NSNonactivatingPanelMask"];
[d setObject:[Number numberWithDouble:NSNormalWindowLevel] forKey:@"NSNormalWindowLevel"];
[d setObject:[Number numberWithDouble:NSNullCellType] forKey:@"NSNullCellType"];
[d setObject:[Number numberWithDouble:NSNullGlyph] forKey:@"NSNullGlyph"];
[d setObject:[Number numberWithDouble:NSNumericPadKeyMask] forKey:@"NSNumericPadKeyMask"];
[d setObject:[Number numberWithDouble:NSOKButton] forKey:@"NSOKButton"];
[d setObject:[Number numberWithDouble:NSOPENGL_CURRENT_VERSION] forKey:@"NSOPENGL_CURRENT_VERSION"];
[d setObject:[Number numberWithDouble:NSOffState] forKey:@"NSOffState"];
[d setObject:[Number numberWithDouble:NSOnOffButton] forKey:@"NSOnOffButton"];
[d setObject:[Number numberWithDouble:NSOnState] forKey:@"NSOnState"];
[d setObject:[Number numberWithDouble:NSOnlyScrollerArrows] forKey:@"NSOnlyScrollerArrows"];
[d setObject:[Number numberWithDouble:NSOpenGLCPRasterizationEnable] forKey:@"NSOpenGLCPRasterizationEnable"];
[d setObject:[Number numberWithDouble:NSOpenGLCPStateValidation] forKey:@"NSOpenGLCPStateValidation"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSurfaceOpacity] forKey:@"NSOpenGLCPSurfaceOpacity"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSurfaceOrder] forKey:@"NSOpenGLCPSurfaceOrder"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSwapInterval] forKey:@"NSOpenGLCPSwapInterval"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSwapRectangle] forKey:@"NSOpenGLCPSwapRectangle"];
[d setObject:[Number numberWithDouble:NSOpenGLCPSwapRectangleEnable] forKey:@"NSOpenGLCPSwapRectangleEnable"];
[d setObject:[Number numberWithDouble:NSOpenGLGOClearFormatCache] forKey:@"NSOpenGLGOClearFormatCache"];
[d setObject:[Number numberWithDouble:NSOpenGLGOFormatCacheSize] forKey:@"NSOpenGLGOFormatCacheSize"];
[d setObject:[Number numberWithDouble:NSOpenGLGOResetLibrary] forKey:@"NSOpenGLGOResetLibrary"];
[d setObject:[Number numberWithDouble:NSOpenGLGORetainRenderers] forKey:@"NSOpenGLGORetainRenderers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAccelerated] forKey:@"NSOpenGLPFAAccelerated"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAccumSize] forKey:@"NSOpenGLPFAAccumSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAllRenderers] forKey:@"NSOpenGLPFAAllRenderers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAllowOfflineRenderers] forKey:@"NSOpenGLPFAAllowOfflineRenderers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAlphaSize] forKey:@"NSOpenGLPFAAlphaSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAuxBuffers] forKey:@"NSOpenGLPFAAuxBuffers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAAuxDepthStencil] forKey:@"NSOpenGLPFAAuxDepthStencil"];
[d setObject:[Number numberWithDouble:NSOpenGLPFABackingStore] forKey:@"NSOpenGLPFABackingStore"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAClosestPolicy] forKey:@"NSOpenGLPFAClosestPolicy"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAColorFloat] forKey:@"NSOpenGLPFAColorFloat"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAColorSize] forKey:@"NSOpenGLPFAColorSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFACompliant] forKey:@"NSOpenGLPFACompliant"];
[d setObject:[Number numberWithDouble:NSOpenGLPFADepthSize] forKey:@"NSOpenGLPFADepthSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFADoubleBuffer] forKey:@"NSOpenGLPFADoubleBuffer"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAFullScreen] forKey:@"NSOpenGLPFAFullScreen"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMPSafe] forKey:@"NSOpenGLPFAMPSafe"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMaximumPolicy] forKey:@"NSOpenGLPFAMaximumPolicy"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMinimumPolicy] forKey:@"NSOpenGLPFAMinimumPolicy"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMultiScreen] forKey:@"NSOpenGLPFAMultiScreen"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAMultisample] forKey:@"NSOpenGLPFAMultisample"];
[d setObject:[Number numberWithDouble:NSOpenGLPFANoRecovery] forKey:@"NSOpenGLPFANoRecovery"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAOffScreen] forKey:@"NSOpenGLPFAOffScreen"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAPixelBuffer] forKey:@"NSOpenGLPFAPixelBuffer"];
[d setObject:[Number numberWithDouble:NSOpenGLPFARendererID] forKey:@"NSOpenGLPFARendererID"];
[d setObject:[Number numberWithDouble:NSOpenGLPFARobust] forKey:@"NSOpenGLPFARobust"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASampleAlpha] forKey:@"NSOpenGLPFASampleAlpha"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASampleBuffers] forKey:@"NSOpenGLPFASampleBuffers"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASamples] forKey:@"NSOpenGLPFASamples"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAScreenMask] forKey:@"NSOpenGLPFAScreenMask"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASingleRenderer] forKey:@"NSOpenGLPFASingleRenderer"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAStencilSize] forKey:@"NSOpenGLPFAStencilSize"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAStereo] forKey:@"NSOpenGLPFAStereo"];
[d setObject:[Number numberWithDouble:NSOpenGLPFASupersample] forKey:@"NSOpenGLPFASupersample"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAVirtualScreenCount] forKey:@"NSOpenGLPFAVirtualScreenCount"];
[d setObject:[Number numberWithDouble:NSOpenGLPFAWindow] forKey:@"NSOpenGLPFAWindow"];
[d setObject:[Number numberWithDouble:NSOtherMouseDown] forKey:@"NSOtherMouseDown"];
[d setObject:[Number numberWithDouble:NSOtherMouseDownMask] forKey:@"NSOtherMouseDownMask"];
[d setObject:[Number numberWithDouble:NSOtherMouseDragged] forKey:@"NSOtherMouseDragged"];
[d setObject:[Number numberWithDouble:NSOtherMouseDraggedMask] forKey:@"NSOtherMouseDraggedMask"];
[d setObject:[Number numberWithDouble:NSOtherMouseUp] forKey:@"NSOtherMouseUp"];
[d setObject:[Number numberWithDouble:NSOtherMouseUpMask] forKey:@"NSOtherMouseUpMask"];
[d setObject:[Number numberWithDouble:NSOtherTextMovement] forKey:@"NSOtherTextMovement"];
[d setObject:[Number numberWithDouble:NSOutlineViewDropOnItemIndex] forKey:@"NSOutlineViewDropOnItemIndex"];
[d setObject:[Number numberWithDouble:NSPNGFileType] forKey:@"NSPNGFileType"];
[d setObject:[Number numberWithDouble:NSPageDownFunctionKey] forKey:@"NSPageDownFunctionKey"];
[d setObject:[Number numberWithDouble:NSPageUpFunctionKey] forKey:@"NSPageUpFunctionKey"];
[d setObject:[Number numberWithDouble:NSParagraphSeparatorCharacter] forKey:@"NSParagraphSeparatorCharacter"];
[d setObject:[Number numberWithDouble:NSPathStyleNavigationBar] forKey:@"NSPathStyleNavigationBar"];
[d setObject:[Number numberWithDouble:NSPathStylePopUp] forKey:@"NSPathStylePopUp"];
[d setObject:[Number numberWithDouble:NSPathStyleStandard] forKey:@"NSPathStyleStandard"];
[d setObject:[Number numberWithDouble:NSPatternColorSpaceModel] forKey:@"NSPatternColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSPauseFunctionKey] forKey:@"NSPauseFunctionKey"];
[d setObject:[Number numberWithDouble:NSPenLowerSideMask] forKey:@"NSPenLowerSideMask"];
[d setObject:[Number numberWithDouble:NSPenPointingDevice] forKey:@"NSPenPointingDevice"];
[d setObject:[Number numberWithDouble:NSPenTipMask] forKey:@"NSPenTipMask"];
[d setObject:[Number numberWithDouble:NSPenUpperSideMask] forKey:@"NSPenUpperSideMask"];
[d setObject:[Number numberWithDouble:NSPeriodic] forKey:@"NSPeriodic"];
[d setObject:[Number numberWithDouble:NSPeriodicMask] forKey:@"NSPeriodicMask"];
[d setObject:[Number numberWithDouble:NSPlainTextTokenStyle] forKey:@"NSPlainTextTokenStyle"];
[d setObject:[Number numberWithDouble:NSPopUpArrowAtBottom] forKey:@"NSPopUpArrowAtBottom"];
[d setObject:[Number numberWithDouble:NSPopUpArrowAtCenter] forKey:@"NSPopUpArrowAtCenter"];
[d setObject:[Number numberWithDouble:NSPopUpMenuWindowLevel] forKey:@"NSPopUpMenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSPopUpNoArrow] forKey:@"NSPopUpNoArrow"];
[d setObject:[Number numberWithDouble:NSPortraitOrientation] forKey:@"NSPortraitOrientation"];
[d setObject:[Number numberWithDouble:NSPositiveDoubleType] forKey:@"NSPositiveDoubleType"];
[d setObject:[Number numberWithDouble:NSPositiveFloatType] forKey:@"NSPositiveFloatType"];
[d setObject:[Number numberWithDouble:NSPositiveIntType] forKey:@"NSPositiveIntType"];
[d setObject:[Number numberWithDouble:NSPosterFontMask] forKey:@"NSPosterFontMask"];
[d setObject:[Number numberWithDouble:NSPowerOffEventType] forKey:@"NSPowerOffEventType"];
[d setObject:[Number numberWithDouble:NSPressedTab] forKey:@"NSPressedTab"];
[d setObject:[Number numberWithDouble:NSPrevFunctionKey] forKey:@"NSPrevFunctionKey"];
[d setObject:[Number numberWithDouble:NSPrintFunctionKey] forKey:@"NSPrintFunctionKey"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsCopies] forKey:@"NSPrintPanelShowsCopies"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsOrientation] forKey:@"NSPrintPanelShowsOrientation"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPageRange] forKey:@"NSPrintPanelShowsPageRange"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPageSetupAccessory] forKey:@"NSPrintPanelShowsPageSetupAccessory"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPaperSize] forKey:@"NSPrintPanelShowsPaperSize"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsPreview] forKey:@"NSPrintPanelShowsPreview"];
[d setObject:[Number numberWithDouble:NSPrintPanelShowsScaling] forKey:@"NSPrintPanelShowsScaling"];
[d setObject:[Number numberWithDouble:NSPrintScreenFunctionKey] forKey:@"NSPrintScreenFunctionKey"];
[d setObject:[Number numberWithDouble:NSPrinterTableError] forKey:@"NSPrinterTableError"];
[d setObject:[Number numberWithDouble:NSPrinterTableNotFound] forKey:@"NSPrinterTableNotFound"];
[d setObject:[Number numberWithDouble:NSPrinterTableOK] forKey:@"NSPrinterTableOK"];
[d setObject:[Number numberWithDouble:NSPrintingCancelled] forKey:@"NSPrintingCancelled"];
[d setObject:[Number numberWithDouble:NSPrintingFailure] forKey:@"NSPrintingFailure"];
[d setObject:[Number numberWithDouble:NSPrintingReplyLater] forKey:@"NSPrintingReplyLater"];
[d setObject:[Number numberWithDouble:NSPrintingSuccess] forKey:@"NSPrintingSuccess"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorBarStyle] forKey:@"NSProgressIndicatorBarStyle"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredAquaThickness] forKey:@"NSProgressIndicatorPreferredAquaThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredLargeThickness] forKey:@"NSProgressIndicatorPreferredLargeThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredSmallThickness] forKey:@"NSProgressIndicatorPreferredSmallThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorPreferredThickness] forKey:@"NSProgressIndicatorPreferredThickness"];
[d setObject:[Number numberWithDouble:NSProgressIndicatorSpinningStyle] forKey:@"NSProgressIndicatorSpinningStyle"];
[d setObject:[Number numberWithDouble:NSPushInCell] forKey:@"NSPushInCell"];
[d setObject:[Number numberWithDouble:NSPushInCellMask] forKey:@"NSPushInCellMask"];
[d setObject:[Number numberWithDouble:NSPushOnPushOffButton] forKey:@"NSPushOnPushOffButton"];
[d setObject:[Number numberWithDouble:NSRGBColorSpaceModel] forKey:@"NSRGBColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSRGBModeColorPanel] forKey:@"NSRGBModeColorPanel"];
[d setObject:[Number numberWithDouble:NSRadioButton] forKey:@"NSRadioButton"];
[d setObject:[Number numberWithDouble:NSRadioModeMatrix] forKey:@"NSRadioModeMatrix"];
[d setObject:[Number numberWithDouble:NSRangeDateMode] forKey:@"NSRangeDateMode"];
[d setObject:[Number numberWithDouble:NSRatingLevelIndicatorStyle] forKey:@"NSRatingLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSRecessedBezelStyle] forKey:@"NSRecessedBezelStyle"];
[d setObject:[Number numberWithDouble:NSRedoFunctionKey] forKey:@"NSRedoFunctionKey"];
[d setObject:[Number numberWithDouble:NSRegularControlSize] forKey:@"NSRegularControlSize"];
[d setObject:[Number numberWithDouble:NSRegularSquareBezelStyle] forKey:@"NSRegularSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSRelevancyLevelIndicatorStyle] forKey:@"NSRelevancyLevelIndicatorStyle"];
[d setObject:[Number numberWithDouble:NSRemoveTraitFontAction] forKey:@"NSRemoveTraitFontAction"];
[d setObject:[Number numberWithDouble:NSResetCursorRectsRunLoopOrdering] forKey:@"NSResetCursorRectsRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSResetFunctionKey] forKey:@"NSResetFunctionKey"];
[d setObject:[Number numberWithDouble:NSResizableWindowMask] forKey:@"NSResizableWindowMask"];
[d setObject:[Number numberWithDouble:NSReturnTextMovement] forKey:@"NSReturnTextMovement"];
[d setObject:[Number numberWithDouble:NSRightArrowFunctionKey] forKey:@"NSRightArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSRightMouseDown] forKey:@"NSRightMouseDown"];
[d setObject:[Number numberWithDouble:NSRightMouseDownMask] forKey:@"NSRightMouseDownMask"];
[d setObject:[Number numberWithDouble:NSRightMouseDragged] forKey:@"NSRightMouseDragged"];
[d setObject:[Number numberWithDouble:NSRightMouseDraggedMask] forKey:@"NSRightMouseDraggedMask"];
[d setObject:[Number numberWithDouble:NSRightMouseUp] forKey:@"NSRightMouseUp"];
[d setObject:[Number numberWithDouble:NSRightMouseUpMask] forKey:@"NSRightMouseUpMask"];
[d setObject:[Number numberWithDouble:NSRightTabStopType] forKey:@"NSRightTabStopType"];
[d setObject:[Number numberWithDouble:NSRightTabsBezelBorder] forKey:@"NSRightTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSRightTextAlignment] forKey:@"NSRightTextAlignment"];
[d setObject:[Number numberWithDouble:NSRightTextMovement] forKey:@"NSRightTextMovement"];
[d setObject:[Number numberWithDouble:NSRoundLineCapStyle] forKey:@"NSRoundLineCapStyle"];
[d setObject:[Number numberWithDouble:NSRoundLineJoinStyle] forKey:@"NSRoundLineJoinStyle"];
[d setObject:[Number numberWithDouble:NSRoundRectBezelStyle] forKey:@"NSRoundRectBezelStyle"];
[d setObject:[Number numberWithDouble:NSRoundedBezelStyle] forKey:@"NSRoundedBezelStyle"];
[d setObject:[Number numberWithDouble:NSRoundedDisclosureBezelStyle] forKey:@"NSRoundedDisclosureBezelStyle"];
[d setObject:[Number numberWithDouble:NSRoundedTokenStyle] forKey:@"NSRoundedTokenStyle"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeCompound] forKey:@"NSRuleEditorNestingModeCompound"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeList] forKey:@"NSRuleEditorNestingModeList"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeSimple] forKey:@"NSRuleEditorNestingModeSimple"];
[d setObject:[Number numberWithDouble:NSRuleEditorNestingModeSingle] forKey:@"NSRuleEditorNestingModeSingle"];
[d setObject:[Number numberWithDouble:NSRuleEditorRowTypeCompound] forKey:@"NSRuleEditorRowTypeCompound"];
[d setObject:[Number numberWithDouble:NSRuleEditorRowTypeSimple] forKey:@"NSRuleEditorRowTypeSimple"];
[d setObject:[Number numberWithDouble:NSRunAbortedResponse] forKey:@"NSRunAbortedResponse"];
[d setObject:[Number numberWithDouble:NSRunContinuesResponse] forKey:@"NSRunContinuesResponse"];
[d setObject:[Number numberWithDouble:NSRunStoppedResponse] forKey:@"NSRunStoppedResponse"];
[d setObject:[Number numberWithDouble:NSSaveAsOperation] forKey:@"NSSaveAsOperation"];
[d setObject:[Number numberWithDouble:NSSaveOperation] forKey:@"NSSaveOperation"];
[d setObject:[Number numberWithDouble:NSSaveToOperation] forKey:@"NSSaveToOperation"];
[d setObject:[Number numberWithDouble:NSScaleNone] forKey:@"NSScaleNone"];
[d setObject:[Number numberWithDouble:NSScaleProportionally] forKey:@"NSScaleProportionally"];
[d setObject:[Number numberWithDouble:NSScaleToFit] forKey:@"NSScaleToFit"];
[d setObject:[Number numberWithDouble:NSScreenChangedEventType] forKey:@"NSScreenChangedEventType"];
[d setObject:[Number numberWithDouble:NSScreenSaverWindowLevel] forKey:@"NSScreenSaverWindowLevel"];
[d setObject:[Number numberWithDouble:NSScrollLockFunctionKey] forKey:@"NSScrollLockFunctionKey"];
[d setObject:[Number numberWithDouble:NSScrollWheel] forKey:@"NSScrollWheel"];
[d setObject:[Number numberWithDouble:NSScrollWheelMask] forKey:@"NSScrollWheelMask"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsDefaultSetting] forKey:@"NSScrollerArrowsDefaultSetting"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsMaxEnd] forKey:@"NSScrollerArrowsMaxEnd"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsMinEnd] forKey:@"NSScrollerArrowsMinEnd"];
[d setObject:[Number numberWithDouble:NSScrollerArrowsNone] forKey:@"NSScrollerArrowsNone"];
[d setObject:[Number numberWithDouble:NSScrollerDecrementArrow] forKey:@"NSScrollerDecrementArrow"];
[d setObject:[Number numberWithDouble:NSScrollerDecrementLine] forKey:@"NSScrollerDecrementLine"];
[d setObject:[Number numberWithDouble:NSScrollerDecrementPage] forKey:@"NSScrollerDecrementPage"];
[d setObject:[Number numberWithDouble:NSScrollerIncrementArrow] forKey:@"NSScrollerIncrementArrow"];
[d setObject:[Number numberWithDouble:NSScrollerIncrementLine] forKey:@"NSScrollerIncrementLine"];
[d setObject:[Number numberWithDouble:NSScrollerIncrementPage] forKey:@"NSScrollerIncrementPage"];
[d setObject:[Number numberWithDouble:NSScrollerKnob] forKey:@"NSScrollerKnob"];
[d setObject:[Number numberWithDouble:NSScrollerKnobSlot] forKey:@"NSScrollerKnobSlot"];
[d setObject:[Number numberWithDouble:NSScrollerNoPart] forKey:@"NSScrollerNoPart"];
[d setObject:[Number numberWithDouble:NSSearchFieldClearRecentsMenuItemTag] forKey:@"NSSearchFieldClearRecentsMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSearchFieldNoRecentsMenuItemTag] forKey:@"NSSearchFieldNoRecentsMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSearchFieldRecentsMenuItemTag] forKey:@"NSSearchFieldRecentsMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSearchFieldRecentsTitleMenuItemTag] forKey:@"NSSearchFieldRecentsTitleMenuItemTag"];
[d setObject:[Number numberWithDouble:NSSegmentStyleAutomatic] forKey:@"NSSegmentStyleAutomatic"];
[d setObject:[Number numberWithDouble:NSSegmentStyleCapsule] forKey:@"NSSegmentStyleCapsule"];
[d setObject:[Number numberWithDouble:NSSegmentStyleRoundRect] forKey:@"NSSegmentStyleRoundRect"];
[d setObject:[Number numberWithDouble:NSSegmentStyleRounded] forKey:@"NSSegmentStyleRounded"];
[d setObject:[Number numberWithDouble:NSSegmentStyleSmallSquare] forKey:@"NSSegmentStyleSmallSquare"];
[d setObject:[Number numberWithDouble:NSSegmentStyleTexturedRounded] forKey:@"NSSegmentStyleTexturedRounded"];
[d setObject:[Number numberWithDouble:NSSegmentStyleTexturedSquare] forKey:@"NSSegmentStyleTexturedSquare"];
[d setObject:[Number numberWithDouble:NSSegmentSwitchTrackingMomentary] forKey:@"NSSegmentSwitchTrackingMomentary"];
[d setObject:[Number numberWithDouble:NSSegmentSwitchTrackingSelectAny] forKey:@"NSSegmentSwitchTrackingSelectAny"];
[d setObject:[Number numberWithDouble:NSSegmentSwitchTrackingSelectOne] forKey:@"NSSegmentSwitchTrackingSelectOne"];
[d setObject:[Number numberWithDouble:NSSelectByCharacter] forKey:@"NSSelectByCharacter"];
[d setObject:[Number numberWithDouble:NSSelectByParagraph] forKey:@"NSSelectByParagraph"];
[d setObject:[Number numberWithDouble:NSSelectByWord] forKey:@"NSSelectByWord"];
[d setObject:[Number numberWithDouble:NSSelectFunctionKey] forKey:@"NSSelectFunctionKey"];
[d setObject:[Number numberWithDouble:NSSelectedTab] forKey:@"NSSelectedTab"];
[d setObject:[Number numberWithDouble:NSSelectingNext] forKey:@"NSSelectingNext"];
[d setObject:[Number numberWithDouble:NSSelectingPrevious] forKey:@"NSSelectingPrevious"];
[d setObject:[Number numberWithDouble:NSSelectionAffinityDownstream] forKey:@"NSSelectionAffinityDownstream"];
[d setObject:[Number numberWithDouble:NSSelectionAffinityUpstream] forKey:@"NSSelectionAffinityUpstream"];
[d setObject:[Number numberWithDouble:NSServiceApplicationLaunchFailedError] forKey:@"NSServiceApplicationLaunchFailedError"];
[d setObject:[Number numberWithDouble:NSServiceApplicationNotFoundError] forKey:@"NSServiceApplicationNotFoundError"];
[d setObject:[Number numberWithDouble:NSServiceErrorMaximum] forKey:@"NSServiceErrorMaximum"];
[d setObject:[Number numberWithDouble:NSServiceErrorMinimum] forKey:@"NSServiceErrorMinimum"];
[d setObject:[Number numberWithDouble:NSServiceInvalidPasteboardDataError] forKey:@"NSServiceInvalidPasteboardDataError"];
[d setObject:[Number numberWithDouble:NSServiceMalformedServiceDictionaryError] forKey:@"NSServiceMalformedServiceDictionaryError"];
[d setObject:[Number numberWithDouble:NSServiceMiscellaneousError] forKey:@"NSServiceMiscellaneousError"];
[d setObject:[Number numberWithDouble:NSServiceRequestTimedOutError] forKey:@"NSServiceRequestTimedOutError"];
[d setObject:[Number numberWithDouble:NSShadowlessSquareBezelStyle] forKey:@"NSShadowlessSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSShiftKeyMask] forKey:@"NSShiftKeyMask"];
[d setObject:[Number numberWithDouble:NSShowControlGlyphs] forKey:@"NSShowControlGlyphs"];
[d setObject:[Number numberWithDouble:NSShowInvisibleGlyphs] forKey:@"NSShowInvisibleGlyphs"];
[d setObject:[Number numberWithDouble:NSSingleDateMode] forKey:@"NSSingleDateMode"];
[d setObject:[Number numberWithDouble:NSSingleUnderlineStyle] forKey:@"NSSingleUnderlineStyle"];
[d setObject:[Number numberWithDouble:NSSizeDownFontAction] forKey:@"NSSizeDownFontAction"];
[d setObject:[Number numberWithDouble:NSSizeUpFontAction] forKey:@"NSSizeUpFontAction"];
[d setObject:[Number numberWithDouble:NSSmallCapsFontMask] forKey:@"NSSmallCapsFontMask"];
[d setObject:[Number numberWithDouble:NSSmallControlSize] forKey:@"NSSmallControlSize"];
[d setObject:[Number numberWithDouble:NSSmallIconButtonBezelStyle] forKey:@"NSSmallIconButtonBezelStyle"];
[d setObject:[Number numberWithDouble:NSSmallSquareBezelStyle] forKey:@"NSSmallSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSSpecialPageOrder] forKey:@"NSSpecialPageOrder"];
[d setObject:[Number numberWithDouble:NSSpeechImmediateBoundary] forKey:@"NSSpeechImmediateBoundary"];
[d setObject:[Number numberWithDouble:NSSpeechSentenceBoundary] forKey:@"NSSpeechSentenceBoundary"];
[d setObject:[Number numberWithDouble:NSSpeechWordBoundary] forKey:@"NSSpeechWordBoundary"];
[d setObject:[Number numberWithDouble:NSSpellingStateGrammarFlag] forKey:@"NSSpellingStateGrammarFlag"];
[d setObject:[Number numberWithDouble:NSSpellingStateSpellingFlag] forKey:@"NSSpellingStateSpellingFlag"];
[d setObject:[Number numberWithDouble:NSSplitViewDividerStyleThick] forKey:@"NSSplitViewDividerStyleThick"];
[d setObject:[Number numberWithDouble:NSSplitViewDividerStyleThin] forKey:@"NSSplitViewDividerStyleThin"];
[d setObject:[Number numberWithDouble:NSSquareLineCapStyle] forKey:@"NSSquareLineCapStyle"];
[d setObject:[Number numberWithDouble:NSSquareStatusItemLength] forKey:@"NSSquareStatusItemLength"];
[d setObject:[Number numberWithDouble:NSStatusWindowLevel] forKey:@"NSStatusWindowLevel"];
[d setObject:[Number numberWithDouble:NSStopFunctionKey] forKey:@"NSStopFunctionKey"];
[d setObject:[Number numberWithDouble:NSStringDrawingDisableScreenFontSubstitution] forKey:@"NSStringDrawingDisableScreenFontSubstitution"];
[d setObject:[Number numberWithDouble:NSStringDrawingOneShot] forKey:@"NSStringDrawingOneShot"];
[d setObject:[Number numberWithDouble:NSStringDrawingTruncatesLastVisibleLine] forKey:@"NSStringDrawingTruncatesLastVisibleLine"];
[d setObject:[Number numberWithDouble:NSStringDrawingUsesDeviceMetrics] forKey:@"NSStringDrawingUsesDeviceMetrics"];
[d setObject:[Number numberWithDouble:NSStringDrawingUsesFontLeading] forKey:@"NSStringDrawingUsesFontLeading"];
[d setObject:[Number numberWithDouble:NSStringDrawingUsesLineFragmentOrigin] forKey:@"NSStringDrawingUsesLineFragmentOrigin"];
[d setObject:[Number numberWithDouble:NSSubmenuWindowLevel] forKey:@"NSSubmenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSSwitchButton] forKey:@"NSSwitchButton"];
[d setObject:[Number numberWithDouble:NSSysReqFunctionKey] forKey:@"NSSysReqFunctionKey"];
[d setObject:[Number numberWithDouble:NSSystemDefined] forKey:@"NSSystemDefined"];
[d setObject:[Number numberWithDouble:NSSystemDefinedMask] forKey:@"NSSystemDefinedMask"];
[d setObject:[Number numberWithDouble:NSSystemFunctionKey] forKey:@"NSSystemFunctionKey"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionCCITTFAX3] forKey:@"NSTIFFCompressionCCITTFAX3"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionCCITTFAX4] forKey:@"NSTIFFCompressionCCITTFAX4"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionJPEG] forKey:@"NSTIFFCompressionJPEG"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionLZW] forKey:@"NSTIFFCompressionLZW"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionNEXT] forKey:@"NSTIFFCompressionNEXT"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionNone] forKey:@"NSTIFFCompressionNone"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionOldJPEG] forKey:@"NSTIFFCompressionOldJPEG"];
[d setObject:[Number numberWithDouble:NSTIFFCompressionPackBits] forKey:@"NSTIFFCompressionPackBits"];
[d setObject:[Number numberWithDouble:NSTIFFFileType] forKey:@"NSTIFFFileType"];
[d setObject:[Number numberWithDouble:NSTabCharacter] forKey:@"NSTabCharacter"];
[d setObject:[Number numberWithDouble:NSTabTextMovement] forKey:@"NSTabTextMovement"];
[d setObject:[Number numberWithDouble:NSTableColumnAutoresizingMask] forKey:@"NSTableColumnAutoresizingMask"];
[d setObject:[Number numberWithDouble:NSTableColumnNoResizing] forKey:@"NSTableColumnNoResizing"];
[d setObject:[Number numberWithDouble:NSTableColumnUserResizingMask] forKey:@"NSTableColumnUserResizingMask"];
[d setObject:[Number numberWithDouble:NSTableViewDropAbove] forKey:@"NSTableViewDropAbove"];
[d setObject:[Number numberWithDouble:NSTableViewDropOn] forKey:@"NSTableViewDropOn"];
[d setObject:[Number numberWithDouble:NSTableViewFirstColumnOnlyAutoresizingStyle] forKey:@"NSTableViewFirstColumnOnlyAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewGridNone] forKey:@"NSTableViewGridNone"];
[d setObject:[Number numberWithDouble:NSTableViewLastColumnOnlyAutoresizingStyle] forKey:@"NSTableViewLastColumnOnlyAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewNoColumnAutoresizing] forKey:@"NSTableViewNoColumnAutoresizing"];
[d setObject:[Number numberWithDouble:NSTableViewReverseSequentialColumnAutoresizingStyle] forKey:@"NSTableViewReverseSequentialColumnAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewSelectionHighlightStyleRegular] forKey:@"NSTableViewSelectionHighlightStyleRegular"];
[d setObject:[Number numberWithDouble:NSTableViewSelectionHighlightStyleSourceList] forKey:@"NSTableViewSelectionHighlightStyleSourceList"];
[d setObject:[Number numberWithDouble:NSTableViewSequentialColumnAutoresizingStyle] forKey:@"NSTableViewSequentialColumnAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTableViewSolidHorizontalGridLineMask] forKey:@"NSTableViewSolidHorizontalGridLineMask"];
[d setObject:[Number numberWithDouble:NSTableViewSolidVerticalGridLineMask] forKey:@"NSTableViewSolidVerticalGridLineMask"];
[d setObject:[Number numberWithDouble:NSTableViewUniformColumnAutoresizingStyle] forKey:@"NSTableViewUniformColumnAutoresizingStyle"];
[d setObject:[Number numberWithDouble:NSTabletPoint] forKey:@"NSTabletPoint"];
[d setObject:[Number numberWithDouble:NSTabletPointEventSubtype] forKey:@"NSTabletPointEventSubtype"];
[d setObject:[Number numberWithDouble:NSTabletPointMask] forKey:@"NSTabletPointMask"];
[d setObject:[Number numberWithDouble:NSTabletProximity] forKey:@"NSTabletProximity"];
[d setObject:[Number numberWithDouble:NSTabletProximityEventSubtype] forKey:@"NSTabletProximityEventSubtype"];
[d setObject:[Number numberWithDouble:NSTabletProximityMask] forKey:@"NSTabletProximityMask"];
[d setObject:[Number numberWithDouble:NSTerminateCancel] forKey:@"NSTerminateCancel"];
[d setObject:[Number numberWithDouble:NSTerminateLater] forKey:@"NSTerminateLater"];
[d setObject:[Number numberWithDouble:NSTerminateNow] forKey:@"NSTerminateNow"];
[d setObject:[Number numberWithDouble:NSTextBlockAbsoluteValueType] forKey:@"NSTextBlockAbsoluteValueType"];
[d setObject:[Number numberWithDouble:NSTextBlockBaselineAlignment] forKey:@"NSTextBlockBaselineAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockBorder] forKey:@"NSTextBlockBorder"];
[d setObject:[Number numberWithDouble:NSTextBlockBottomAlignment] forKey:@"NSTextBlockBottomAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockHeight] forKey:@"NSTextBlockHeight"];
[d setObject:[Number numberWithDouble:NSTextBlockMargin] forKey:@"NSTextBlockMargin"];
[d setObject:[Number numberWithDouble:NSTextBlockMaximumHeight] forKey:@"NSTextBlockMaximumHeight"];
[d setObject:[Number numberWithDouble:NSTextBlockMaximumWidth] forKey:@"NSTextBlockMaximumWidth"];
[d setObject:[Number numberWithDouble:NSTextBlockMiddleAlignment] forKey:@"NSTextBlockMiddleAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockMinimumHeight] forKey:@"NSTextBlockMinimumHeight"];
[d setObject:[Number numberWithDouble:NSTextBlockMinimumWidth] forKey:@"NSTextBlockMinimumWidth"];
[d setObject:[Number numberWithDouble:NSTextBlockPadding] forKey:@"NSTextBlockPadding"];
[d setObject:[Number numberWithDouble:NSTextBlockPercentageValueType] forKey:@"NSTextBlockPercentageValueType"];
[d setObject:[Number numberWithDouble:NSTextBlockTopAlignment] forKey:@"NSTextBlockTopAlignment"];
[d setObject:[Number numberWithDouble:NSTextBlockWidth] forKey:@"NSTextBlockWidth"];
[d setObject:[Number numberWithDouble:NSTextCellType] forKey:@"NSTextCellType"];
[d setObject:[Number numberWithDouble:NSTextFieldAndStepperDatePickerStyle] forKey:@"NSTextFieldAndStepperDatePickerStyle"];
[d setObject:[Number numberWithDouble:NSTextFieldDatePickerStyle] forKey:@"NSTextFieldDatePickerStyle"];
[d setObject:[Number numberWithDouble:NSTextFieldRoundedBezel] forKey:@"NSTextFieldRoundedBezel"];
[d setObject:[Number numberWithDouble:NSTextFieldSquareBezel] forKey:@"NSTextFieldSquareBezel"];
[d setObject:[Number numberWithDouble:NSTextListPrependEnclosingMarker] forKey:@"NSTextListPrependEnclosingMarker"];
[d setObject:[Number numberWithDouble:NSTextReadInapplicableDocumentTypeError] forKey:@"NSTextReadInapplicableDocumentTypeError"];
[d setObject:[Number numberWithDouble:NSTextReadWriteErrorMaximum] forKey:@"NSTextReadWriteErrorMaximum"];
[d setObject:[Number numberWithDouble:NSTextReadWriteErrorMinimum] forKey:@"NSTextReadWriteErrorMinimum"];
[d setObject:[Number numberWithDouble:NSTextStorageEditedAttributes] forKey:@"NSTextStorageEditedAttributes"];
[d setObject:[Number numberWithDouble:NSTextStorageEditedCharacters] forKey:@"NSTextStorageEditedCharacters"];
[d setObject:[Number numberWithDouble:NSTextTableAutomaticLayoutAlgorithm] forKey:@"NSTextTableAutomaticLayoutAlgorithm"];
[d setObject:[Number numberWithDouble:NSTextTableFixedLayoutAlgorithm] forKey:@"NSTextTableFixedLayoutAlgorithm"];
[d setObject:[Number numberWithDouble:NSTextWriteInapplicableDocumentTypeError] forKey:@"NSTextWriteInapplicableDocumentTypeError"];
[d setObject:[Number numberWithDouble:NSTexturedBackgroundWindowMask] forKey:@"NSTexturedBackgroundWindowMask"];
[d setObject:[Number numberWithDouble:NSTexturedRoundedBezelStyle] forKey:@"NSTexturedRoundedBezelStyle"];
[d setObject:[Number numberWithDouble:NSTexturedSquareBezelStyle] forKey:@"NSTexturedSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSThickSquareBezelStyle] forKey:@"NSThickSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSThickerSquareBezelStyle] forKey:@"NSThickerSquareBezelStyle"];
[d setObject:[Number numberWithDouble:NSTickMarkAbove] forKey:@"NSTickMarkAbove"];
[d setObject:[Number numberWithDouble:NSTickMarkBelow] forKey:@"NSTickMarkBelow"];
[d setObject:[Number numberWithDouble:NSTickMarkLeft] forKey:@"NSTickMarkLeft"];
[d setObject:[Number numberWithDouble:NSTickMarkRight] forKey:@"NSTickMarkRight"];
[d setObject:[Number numberWithDouble:NSTimeZoneDatePickerElementFlag] forKey:@"NSTimeZoneDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSTitledWindowMask] forKey:@"NSTitledWindowMask"];
[d setObject:[Number numberWithDouble:NSToggleButton] forKey:@"NSToggleButton"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeDefault] forKey:@"NSToolbarDisplayModeDefault"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeIconAndLabel] forKey:@"NSToolbarDisplayModeIconAndLabel"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeIconOnly] forKey:@"NSToolbarDisplayModeIconOnly"];
[d setObject:[Number numberWithDouble:NSToolbarDisplayModeLabelOnly] forKey:@"NSToolbarDisplayModeLabelOnly"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityHigh] forKey:@"NSToolbarItemVisibilityPriorityHigh"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityLow] forKey:@"NSToolbarItemVisibilityPriorityLow"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityStandard] forKey:@"NSToolbarItemVisibilityPriorityStandard"];
[d setObject:[Number numberWithDouble:NSToolbarItemVisibilityPriorityUser] forKey:@"NSToolbarItemVisibilityPriorityUser"];
[d setObject:[Number numberWithDouble:NSToolbarSizeModeDefault] forKey:@"NSToolbarSizeModeDefault"];
[d setObject:[Number numberWithDouble:NSToolbarSizeModeRegular] forKey:@"NSToolbarSizeModeRegular"];
[d setObject:[Number numberWithDouble:NSToolbarSizeModeSmall] forKey:@"NSToolbarSizeModeSmall"];
[d setObject:[Number numberWithDouble:NSTopTabsBezelBorder] forKey:@"NSTopTabsBezelBorder"];
[d setObject:[Number numberWithDouble:NSTornOffMenuWindowLevel] forKey:@"NSTornOffMenuWindowLevel"];
[d setObject:[Number numberWithDouble:NSTrackModeMatrix] forKey:@"NSTrackModeMatrix"];
[d setObject:[Number numberWithDouble:NSTrackingActiveAlways] forKey:@"NSTrackingActiveAlways"];
[d setObject:[Number numberWithDouble:NSTrackingActiveInActiveApp] forKey:@"NSTrackingActiveInActiveApp"];
[d setObject:[Number numberWithDouble:NSTrackingActiveInKeyWindow] forKey:@"NSTrackingActiveInKeyWindow"];
[d setObject:[Number numberWithDouble:NSTrackingActiveWhenFirstResponder] forKey:@"NSTrackingActiveWhenFirstResponder"];
[d setObject:[Number numberWithDouble:NSTrackingAssumeInside] forKey:@"NSTrackingAssumeInside"];
[d setObject:[Number numberWithDouble:NSTrackingCursorUpdate] forKey:@"NSTrackingCursorUpdate"];
[d setObject:[Number numberWithDouble:NSTrackingEnabledDuringMouseDrag] forKey:@"NSTrackingEnabledDuringMouseDrag"];
[d setObject:[Number numberWithDouble:NSTrackingInVisibleRect] forKey:@"NSTrackingInVisibleRect"];
[d setObject:[Number numberWithDouble:NSTrackingMouseEnteredAndExited] forKey:@"NSTrackingMouseEnteredAndExited"];
[d setObject:[Number numberWithDouble:NSTrackingMouseMoved] forKey:@"NSTrackingMouseMoved"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_2] forKey:@"NSTypesetterBehavior_10_2"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_2_WithCompatibility] forKey:@"NSTypesetterBehavior_10_2_WithCompatibility"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_3] forKey:@"NSTypesetterBehavior_10_3"];
[d setObject:[Number numberWithDouble:NSTypesetterBehavior_10_4] forKey:@"NSTypesetterBehavior_10_4"];
[d setObject:[Number numberWithDouble:NSTypesetterContainerBreakAction] forKey:@"NSTypesetterContainerBreakAction"];
[d setObject:[Number numberWithDouble:NSTypesetterHorizontalTabAction] forKey:@"NSTypesetterHorizontalTabAction"];
[d setObject:[Number numberWithDouble:NSTypesetterLatestBehavior] forKey:@"NSTypesetterLatestBehavior"];
[d setObject:[Number numberWithDouble:NSTypesetterLineBreakAction] forKey:@"NSTypesetterLineBreakAction"];
[d setObject:[Number numberWithDouble:NSTypesetterOriginalBehavior] forKey:@"NSTypesetterOriginalBehavior"];
[d setObject:[Number numberWithDouble:NSTypesetterParagraphBreakAction] forKey:@"NSTypesetterParagraphBreakAction"];
[d setObject:[Number numberWithDouble:NSTypesetterWhitespaceAction] forKey:@"NSTypesetterWhitespaceAction"];
[d setObject:[Number numberWithDouble:NSTypesetterZeroAdvancementAction] forKey:@"NSTypesetterZeroAdvancementAction"];
[d setObject:[Number numberWithDouble:NSUnboldFontMask] forKey:@"NSUnboldFontMask"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDash] forKey:@"NSUnderlinePatternDash"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDashDot] forKey:@"NSUnderlinePatternDashDot"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDashDotDot] forKey:@"NSUnderlinePatternDashDotDot"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternDot] forKey:@"NSUnderlinePatternDot"];
[d setObject:[Number numberWithDouble:NSUnderlinePatternSolid] forKey:@"NSUnderlinePatternSolid"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleDouble] forKey:@"NSUnderlineStyleDouble"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleNone] forKey:@"NSUnderlineStyleNone"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleSingle] forKey:@"NSUnderlineStyleSingle"];
[d setObject:[Number numberWithDouble:NSUnderlineStyleThick] forKey:@"NSUnderlineStyleThick"];
[d setObject:[Number numberWithDouble:NSUndoFunctionKey] forKey:@"NSUndoFunctionKey"];
[d setObject:[Number numberWithDouble:NSUnifiedTitleAndToolbarWindowMask] forKey:@"NSUnifiedTitleAndToolbarWindowMask"];
[d setObject:[Number numberWithDouble:NSUnitalicFontMask] forKey:@"NSUnitalicFontMask"];
[d setObject:[Number numberWithDouble:NSUnknownColorSpaceModel] forKey:@"NSUnknownColorSpaceModel"];
[d setObject:[Number numberWithDouble:NSUnknownPageOrder] forKey:@"NSUnknownPageOrder"];
[d setObject:[Number numberWithDouble:NSUnknownPointingDevice] forKey:@"NSUnknownPointingDevice"];
[d setObject:[Number numberWithDouble:NSUnscaledWindowMask] forKey:@"NSUnscaledWindowMask"];
[d setObject:[Number numberWithDouble:NSUpArrowFunctionKey] forKey:@"NSUpArrowFunctionKey"];
[d setObject:[Number numberWithDouble:NSUpTextMovement] forKey:@"NSUpTextMovement"];
[d setObject:[Number numberWithDouble:NSUpdateWindowsRunLoopOrdering] forKey:@"NSUpdateWindowsRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSUserFunctionKey] forKey:@"NSUserFunctionKey"];
[d setObject:[Number numberWithDouble:NSUtilityWindowMask] forKey:@"NSUtilityWindowMask"];
[d setObject:[Number numberWithDouble:NSVariableStatusItemLength] forKey:@"NSVariableStatusItemLength"];
[d setObject:[Number numberWithDouble:NSVerticalRuler] forKey:@"NSVerticalRuler"];
[d setObject:[Number numberWithDouble:NSViaPanelFontAction] forKey:@"NSViaPanelFontAction"];
[d setObject:[Number numberWithDouble:NSViewHeightSizable] forKey:@"NSViewHeightSizable"];
[d setObject:[Number numberWithDouble:NSViewMaxXMargin] forKey:@"NSViewMaxXMargin"];
[d setObject:[Number numberWithDouble:NSViewMaxYMargin] forKey:@"NSViewMaxYMargin"];
[d setObject:[Number numberWithDouble:NSViewMinXMargin] forKey:@"NSViewMinXMargin"];
[d setObject:[Number numberWithDouble:NSViewMinYMargin] forKey:@"NSViewMinYMargin"];
[d setObject:[Number numberWithDouble:NSViewNotSizable] forKey:@"NSViewNotSizable"];
[d setObject:[Number numberWithDouble:NSViewWidthSizable] forKey:@"NSViewWidthSizable"];
[d setObject:[Number numberWithDouble:NSWantsBidiLevels] forKey:@"NSWantsBidiLevels"];
[d setObject:[Number numberWithDouble:NSWarningAlertStyle] forKey:@"NSWarningAlertStyle"];
[d setObject:[Number numberWithDouble:NSWheelModeColorPanel] forKey:@"NSWheelModeColorPanel"];
[d setObject:[Number numberWithDouble:NSWindowAbove] forKey:@"NSWindowAbove"];
[d setObject:[Number numberWithDouble:NSWindowBackingLocationDefault] forKey:@"NSWindowBackingLocationDefault"];
[d setObject:[Number numberWithDouble:NSWindowBackingLocationMainMemory] forKey:@"NSWindowBackingLocationMainMemory"];
[d setObject:[Number numberWithDouble:NSWindowBackingLocationVideoMemory] forKey:@"NSWindowBackingLocationVideoMemory"];
[d setObject:[Number numberWithDouble:NSWindowBelow] forKey:@"NSWindowBelow"];
[d setObject:[Number numberWithDouble:NSWindowCloseButton] forKey:@"NSWindowCloseButton"];
[d setObject:[Number numberWithDouble:NSWindowCollectionBehaviorCanJoinAllSpaces] forKey:@"NSWindowCollectionBehaviorCanJoinAllSpaces"];
[d setObject:[Number numberWithDouble:NSWindowCollectionBehaviorDefault] forKey:@"NSWindowCollectionBehaviorDefault"];
[d setObject:[Number numberWithDouble:NSWindowCollectionBehaviorMoveToActiveSpace] forKey:@"NSWindowCollectionBehaviorMoveToActiveSpace"];
[d setObject:[Number numberWithDouble:NSWindowDocumentIconButton] forKey:@"NSWindowDocumentIconButton"];
[d setObject:[Number numberWithDouble:NSWindowExposedEventType] forKey:@"NSWindowExposedEventType"];
[d setObject:[Number numberWithDouble:NSWindowMiniaturizeButton] forKey:@"NSWindowMiniaturizeButton"];
[d setObject:[Number numberWithDouble:NSWindowMovedEventType] forKey:@"NSWindowMovedEventType"];
[d setObject:[Number numberWithDouble:NSWindowOut] forKey:@"NSWindowOut"];
[d setObject:[Number numberWithDouble:NSWindowSharingNone] forKey:@"NSWindowSharingNone"];
[d setObject:[Number numberWithDouble:NSWindowSharingReadOnly] forKey:@"NSWindowSharingReadOnly"];
[d setObject:[Number numberWithDouble:NSWindowSharingReadWrite] forKey:@"NSWindowSharingReadWrite"];
[d setObject:[Number numberWithDouble:NSWindowToolbarButton] forKey:@"NSWindowToolbarButton"];
[d setObject:[Number numberWithDouble:NSWindowZoomButton] forKey:@"NSWindowZoomButton"];
[d setObject:[Number numberWithDouble:NSWindows95InterfaceStyle] forKey:@"NSWindows95InterfaceStyle"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAllowingClassicStartup] forKey:@"NSWorkspaceLaunchAllowingClassicStartup"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAndHide] forKey:@"NSWorkspaceLaunchAndHide"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAndHideOthers] forKey:@"NSWorkspaceLaunchAndHideOthers"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAndPrint] forKey:@"NSWorkspaceLaunchAndPrint"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchAsync] forKey:@"NSWorkspaceLaunchAsync"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchDefault] forKey:@"NSWorkspaceLaunchDefault"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchInhibitingBackgroundOnly] forKey:@"NSWorkspaceLaunchInhibitingBackgroundOnly"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchNewInstance] forKey:@"NSWorkspaceLaunchNewInstance"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchPreferringClassic] forKey:@"NSWorkspaceLaunchPreferringClassic"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchWithoutActivation] forKey:@"NSWorkspaceLaunchWithoutActivation"];
[d setObject:[Number numberWithDouble:NSWorkspaceLaunchWithoutAddingToRecents] forKey:@"NSWorkspaceLaunchWithoutAddingToRecents"];
[d setObject:[Number numberWithDouble:NSWritingDirectionLeftToRight] forKey:@"NSWritingDirectionLeftToRight"];
[d setObject:[Number numberWithDouble:NSWritingDirectionNatural] forKey:@"NSWritingDirectionNatural"];
[d setObject:[Number numberWithDouble:NSWritingDirectionRightToLeft] forKey:@"NSWritingDirectionRightToLeft"];
[d setObject:[Number numberWithDouble:NSYearMonthDatePickerElementFlag] forKey:@"NSYearMonthDatePickerElementFlag"];
[d setObject:[Number numberWithDouble:NSYearMonthDayDatePickerElementFlag] forKey:@"NSYearMonthDayDatePickerElementFlag"];
[d setObject:AMActionErrorKey forKey:@"AMActionErrorKey"];
[d setObject:AMAutomatorErrorDomain forKey:@"AMAutomatorErrorDomain"];
[d setObject:[Number numberWithDouble:AMActionApplicationResourceError] forKey:@"AMActionApplicationResourceError"];
[d setObject:[Number numberWithDouble:AMActionApplicationVersionResourceError] forKey:@"AMActionApplicationVersionResourceError"];
[d setObject:[Number numberWithDouble:AMActionArchitectureMismatchError] forKey:@"AMActionArchitectureMismatchError"];
[d setObject:[Number numberWithDouble:AMActionExceptionError] forKey:@"AMActionExceptionError"];
[d setObject:[Number numberWithDouble:AMActionExecutionError] forKey:@"AMActionExecutionError"];
[d setObject:[Number numberWithDouble:AMActionFileResourceError] forKey:@"AMActionFileResourceError"];
[d setObject:[Number numberWithDouble:AMActionInitializationError] forKey:@"AMActionInitializationError"];
[d setObject:[Number numberWithDouble:AMActionInsufficientDataError] forKey:@"AMActionInsufficientDataError"];
[d setObject:[Number numberWithDouble:AMActionIsDeprecatedError] forKey:@"AMActionIsDeprecatedError"];
[d setObject:[Number numberWithDouble:AMActionLicenseResourceError] forKey:@"AMActionLicenseResourceError"];
[d setObject:[Number numberWithDouble:AMActionLinkError] forKey:@"AMActionLinkError"];
[d setObject:[Number numberWithDouble:AMActionLoadError] forKey:@"AMActionLoadError"];
[d setObject:[Number numberWithDouble:AMActionNotLoadableError] forKey:@"AMActionNotLoadableError"];
[d setObject:[Number numberWithDouble:AMActionPropertyListInvalidError] forKey:@"AMActionPropertyListInvalidError"];
[d setObject:[Number numberWithDouble:AMActionRequiredActionResourceError] forKey:@"AMActionRequiredActionResourceError"];
[d setObject:[Number numberWithDouble:AMActionRuntimeMismatchError] forKey:@"AMActionRuntimeMismatchError"];
[d setObject:[Number numberWithDouble:AMConversionFailedError] forKey:@"AMConversionFailedError"];
[d setObject:[Number numberWithDouble:AMConversionNoDataError] forKey:@"AMConversionNoDataError"];
[d setObject:[Number numberWithDouble:AMConversionNotPossibleError] forKey:@"AMConversionNotPossibleError"];
[d setObject:[Number numberWithDouble:AMNoSuchActionError] forKey:@"AMNoSuchActionError"];
[d setObject:[Number numberWithDouble:AMUserCanceledError] forKey:@"AMUserCanceledError"];
[d setObject:[Number numberWithDouble:AMWorkflowNewerActionVersionError] forKey:@"AMWorkflowNewerActionVersionError"];
[d setObject:[Number numberWithDouble:AMWorkflowNewerVersionError] forKey:@"AMWorkflowNewerVersionError"];
[d setObject:[Number numberWithDouble:AMWorkflowOlderActionVersionError] forKey:@"AMWorkflowOlderActionVersionError"];
[d setObject:[Number numberWithDouble:AMWorkflowPropertyListInvalidError] forKey:@"AMWorkflowPropertyListInvalidError"];
[d setObject:AMActionErrorKey forKey:@"AMActionErrorKey"];
[d setObject:AMAutomatorErrorDomain forKey:@"AMAutomatorErrorDomain"];
[d setObject:[Number numberWithDouble:AMActionApplicationResourceError] forKey:@"AMActionApplicationResourceError"];
[d setObject:[Number numberWithDouble:AMActionApplicationVersionResourceError] forKey:@"AMActionApplicationVersionResourceError"];
[d setObject:[Number numberWithDouble:AMActionArchitectureMismatchError] forKey:@"AMActionArchitectureMismatchError"];
[d setObject:[Number numberWithDouble:AMActionExceptionError] forKey:@"AMActionExceptionError"];
[d setObject:[Number numberWithDouble:AMActionExecutionError] forKey:@"AMActionExecutionError"];
[d setObject:[Number numberWithDouble:AMActionFileResourceError] forKey:@"AMActionFileResourceError"];
[d setObject:[Number numberWithDouble:AMActionInitializationError] forKey:@"AMActionInitializationError"];
[d setObject:[Number numberWithDouble:AMActionInsufficientDataError] forKey:@"AMActionInsufficientDataError"];
[d setObject:[Number numberWithDouble:AMActionIsDeprecatedError] forKey:@"AMActionIsDeprecatedError"];
[d setObject:[Number numberWithDouble:AMActionLicenseResourceError] forKey:@"AMActionLicenseResourceError"];
[d setObject:[Number numberWithDouble:AMActionLinkError] forKey:@"AMActionLinkError"];
[d setObject:[Number numberWithDouble:AMActionLoadError] forKey:@"AMActionLoadError"];
[d setObject:[Number numberWithDouble:AMActionNotLoadableError] forKey:@"AMActionNotLoadableError"];
[d setObject:[Number numberWithDouble:AMActionPropertyListInvalidError] forKey:@"AMActionPropertyListInvalidError"];
[d setObject:[Number numberWithDouble:AMActionRequiredActionResourceError] forKey:@"AMActionRequiredActionResourceError"];
[d setObject:[Number numberWithDouble:AMActionRuntimeMismatchError] forKey:@"AMActionRuntimeMismatchError"];
[d setObject:[Number numberWithDouble:AMConversionFailedError] forKey:@"AMConversionFailedError"];
[d setObject:[Number numberWithDouble:AMConversionNoDataError] forKey:@"AMConversionNoDataError"];
[d setObject:[Number numberWithDouble:AMConversionNotPossibleError] forKey:@"AMConversionNotPossibleError"];
[d setObject:[Number numberWithDouble:AMNoSuchActionError] forKey:@"AMNoSuchActionError"];
[d setObject:[Number numberWithDouble:AMUserCanceledError] forKey:@"AMUserCanceledError"];
[d setObject:[Number numberWithDouble:AMWorkflowNewerActionVersionError] forKey:@"AMWorkflowNewerActionVersionError"];
[d setObject:[Number numberWithDouble:AMWorkflowNewerVersionError] forKey:@"AMWorkflowNewerVersionError"];
[d setObject:[Number numberWithDouble:AMWorkflowOlderActionVersionError] forKey:@"AMWorkflowOlderActionVersionError"];
[d setObject:[Number numberWithDouble:AMWorkflowPropertyListInvalidError] forKey:@"AMWorkflowPropertyListInvalidError"];
if ([CalAlarmActionDisplay isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionDisplay forKey:@"CalAlarmActionDisplay"]; else NSLog([@"Can't initialize CalAlarmActionDisplay with object " stringByAppendingString:[CalAlarmActionDisplay description]]);
if ([CalAlarmActionEmail isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionEmail forKey:@"CalAlarmActionEmail"]; else NSLog([@"Can't initialize CalAlarmActionEmail with object " stringByAppendingString:[CalAlarmActionEmail description]]);
if ([CalAlarmActionProcedure isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionProcedure forKey:@"CalAlarmActionProcedure"]; else NSLog([@"Can't initialize CalAlarmActionProcedure with object " stringByAppendingString:[CalAlarmActionProcedure description]]);
if ([CalAlarmActionSound isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionSound forKey:@"CalAlarmActionSound"]; else NSLog([@"Can't initialize CalAlarmActionSound with object " stringByAppendingString:[CalAlarmActionSound description]]);
if ([CalAttendeeStatusAccepted isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusAccepted forKey:@"CalAttendeeStatusAccepted"]; else NSLog([@"Can't initialize CalAttendeeStatusAccepted with object " stringByAppendingString:[CalAttendeeStatusAccepted description]]);
if ([CalAttendeeStatusDeclined isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusDeclined forKey:@"CalAttendeeStatusDeclined"]; else NSLog([@"Can't initialize CalAttendeeStatusDeclined with object " stringByAppendingString:[CalAttendeeStatusDeclined description]]);
if ([CalAttendeeStatusNeedsAction isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusNeedsAction forKey:@"CalAttendeeStatusNeedsAction"]; else NSLog([@"Can't initialize CalAttendeeStatusNeedsAction with object " stringByAppendingString:[CalAttendeeStatusNeedsAction description]]);
if ([CalAttendeeStatusTentative isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusTentative forKey:@"CalAttendeeStatusTentative"]; else NSLog([@"Can't initialize CalAttendeeStatusTentative with object " stringByAppendingString:[CalAttendeeStatusTentative description]]);
if ([CalCalendarStoreErrorDomain isKindOfClass:[NSString class]]) [d setObject:CalCalendarStoreErrorDomain forKey:@"CalCalendarStoreErrorDomain"]; else NSLog([@"Can't initialize CalCalendarStoreErrorDomain with object " stringByAppendingString:[CalCalendarStoreErrorDomain description]]);
if ([CalCalendarTypeBirthday isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeBirthday forKey:@"CalCalendarTypeBirthday"]; else NSLog([@"Can't initialize CalCalendarTypeBirthday with object " stringByAppendingString:[CalCalendarTypeBirthday description]]);
if ([CalCalendarTypeCalDAV isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeCalDAV forKey:@"CalCalendarTypeCalDAV"]; else NSLog([@"Can't initialize CalCalendarTypeCalDAV with object " stringByAppendingString:[CalCalendarTypeCalDAV description]]);
if ([CalCalendarTypeIMAP isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeIMAP forKey:@"CalCalendarTypeIMAP"]; else NSLog([@"Can't initialize CalCalendarTypeIMAP with object " stringByAppendingString:[CalCalendarTypeIMAP description]]);
if ([CalCalendarTypeLocal isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeLocal forKey:@"CalCalendarTypeLocal"]; else NSLog([@"Can't initialize CalCalendarTypeLocal with object " stringByAppendingString:[CalCalendarTypeLocal description]]);
if ([CalCalendarTypeSubscription isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeSubscription forKey:@"CalCalendarTypeSubscription"]; else NSLog([@"Can't initialize CalCalendarTypeSubscription with object " stringByAppendingString:[CalCalendarTypeSubscription description]]);
if ([CalCalendarsChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:CalCalendarsChangedExternallyNotification forKey:@"CalCalendarsChangedExternallyNotification"]; else NSLog([@"Can't initialize CalCalendarsChangedExternallyNotification with object " stringByAppendingString:[CalCalendarsChangedExternallyNotification description]]);
if ([CalCalendarsChangedNotification isKindOfClass:[NSString class]]) [d setObject:CalCalendarsChangedNotification forKey:@"CalCalendarsChangedNotification"]; else NSLog([@"Can't initialize CalCalendarsChangedNotification with object " stringByAppendingString:[CalCalendarsChangedNotification description]]);
if ([CalDeletedRecordsKey isKindOfClass:[NSString class]]) [d setObject:CalDeletedRecordsKey forKey:@"CalDeletedRecordsKey"]; else NSLog([@"Can't initialize CalDeletedRecordsKey with object " stringByAppendingString:[CalDeletedRecordsKey description]]);
if ([CalEventsChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:CalEventsChangedExternallyNotification forKey:@"CalEventsChangedExternallyNotification"]; else NSLog([@"Can't initialize CalEventsChangedExternallyNotification with object " stringByAppendingString:[CalEventsChangedExternallyNotification description]]);
if ([CalEventsChangedNotification isKindOfClass:[NSString class]]) [d setObject:CalEventsChangedNotification forKey:@"CalEventsChangedNotification"]; else NSLog([@"Can't initialize CalEventsChangedNotification with object " stringByAppendingString:[CalEventsChangedNotification description]]);
if ([CalInsertedRecordsKey isKindOfClass:[NSString class]]) [d setObject:CalInsertedRecordsKey forKey:@"CalInsertedRecordsKey"]; else NSLog([@"Can't initialize CalInsertedRecordsKey with object " stringByAppendingString:[CalInsertedRecordsKey description]]);
if ([CalSenderProcessIDKey isKindOfClass:[NSString class]]) [d setObject:CalSenderProcessIDKey forKey:@"CalSenderProcessIDKey"]; else NSLog([@"Can't initialize CalSenderProcessIDKey with object " stringByAppendingString:[CalSenderProcessIDKey description]]);
if ([CalTasksChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:CalTasksChangedExternallyNotification forKey:@"CalTasksChangedExternallyNotification"]; else NSLog([@"Can't initialize CalTasksChangedExternallyNotification with object " stringByAppendingString:[CalTasksChangedExternallyNotification description]]);
if ([CalTasksChangedNotification isKindOfClass:[NSString class]]) [d setObject:CalTasksChangedNotification forKey:@"CalTasksChangedNotification"]; else NSLog([@"Can't initialize CalTasksChangedNotification with object " stringByAppendingString:[CalTasksChangedNotification description]]);
if ([CalUpdatedRecordsKey isKindOfClass:[NSString class]]) [d setObject:CalUpdatedRecordsKey forKey:@"CalUpdatedRecordsKey"]; else NSLog([@"Can't initialize CalUpdatedRecordsKey with object " stringByAppendingString:[CalUpdatedRecordsKey description]]);
if ([CalUserUIDKey isKindOfClass:[NSString class]]) [d setObject:CalUserUIDKey forKey:@"CalUserUIDKey"]; else NSLog([@"Can't initialize CalUserUIDKey with object " stringByAppendingString:[CalUserUIDKey description]]);
[d setObject:[Number numberWithDouble:CalCalendarNotEditableError] forKey:@"CalCalendarNotEditableError"];
[d setObject:[Number numberWithDouble:CalCalendarNotInRepository] forKey:@"CalCalendarNotInRepository"];
[d setObject:[Number numberWithDouble:CalCalendarTitleNotUniqueError] forKey:@"CalCalendarTitleNotUniqueError"];
[d setObject:[Number numberWithDouble:CalDateInvalidError] forKey:@"CalDateInvalidError"];
[d setObject:[Number numberWithDouble:CalPriorityHigh] forKey:@"CalPriorityHigh"];
[d setObject:[Number numberWithDouble:CalPriorityLow] forKey:@"CalPriorityLow"];
[d setObject:[Number numberWithDouble:CalPriorityMedium] forKey:@"CalPriorityMedium"];
[d setObject:[Number numberWithDouble:CalPriorityNone] forKey:@"CalPriorityNone"];
[d setObject:[Number numberWithDouble:CalRecurrenceDaily] forKey:@"CalRecurrenceDaily"];
[d setObject:[Number numberWithDouble:CalRecurrenceMonthly] forKey:@"CalRecurrenceMonthly"];
[d setObject:[Number numberWithDouble:CalRecurrenceWeekly] forKey:@"CalRecurrenceWeekly"];
[d setObject:[Number numberWithDouble:CalRecurrenceYearly] forKey:@"CalRecurrenceYearly"];
[d setObject:[Number numberWithDouble:CalSpanAllEvents] forKey:@"CalSpanAllEvents"];
[d setObject:[Number numberWithDouble:CalSpanFutureEvents] forKey:@"CalSpanFutureEvents"];
[d setObject:[Number numberWithDouble:CalSpanThisEvent] forKey:@"CalSpanThisEvent"];
if ([CalAlarmActionDisplay isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionDisplay forKey:@"CalAlarmActionDisplay"]; else NSLog([@"Can't initialize CalAlarmActionDisplay with object " stringByAppendingString:[CalAlarmActionDisplay description]]);
if ([CalAlarmActionEmail isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionEmail forKey:@"CalAlarmActionEmail"]; else NSLog([@"Can't initialize CalAlarmActionEmail with object " stringByAppendingString:[CalAlarmActionEmail description]]);
if ([CalAlarmActionProcedure isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionProcedure forKey:@"CalAlarmActionProcedure"]; else NSLog([@"Can't initialize CalAlarmActionProcedure with object " stringByAppendingString:[CalAlarmActionProcedure description]]);
if ([CalAlarmActionSound isKindOfClass:[NSString class]]) [d setObject:CalAlarmActionSound forKey:@"CalAlarmActionSound"]; else NSLog([@"Can't initialize CalAlarmActionSound with object " stringByAppendingString:[CalAlarmActionSound description]]);
if ([CalAttendeeStatusAccepted isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusAccepted forKey:@"CalAttendeeStatusAccepted"]; else NSLog([@"Can't initialize CalAttendeeStatusAccepted with object " stringByAppendingString:[CalAttendeeStatusAccepted description]]);
if ([CalAttendeeStatusDeclined isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusDeclined forKey:@"CalAttendeeStatusDeclined"]; else NSLog([@"Can't initialize CalAttendeeStatusDeclined with object " stringByAppendingString:[CalAttendeeStatusDeclined description]]);
if ([CalAttendeeStatusNeedsAction isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusNeedsAction forKey:@"CalAttendeeStatusNeedsAction"]; else NSLog([@"Can't initialize CalAttendeeStatusNeedsAction with object " stringByAppendingString:[CalAttendeeStatusNeedsAction description]]);
if ([CalAttendeeStatusTentative isKindOfClass:[NSString class]]) [d setObject:CalAttendeeStatusTentative forKey:@"CalAttendeeStatusTentative"]; else NSLog([@"Can't initialize CalAttendeeStatusTentative with object " stringByAppendingString:[CalAttendeeStatusTentative description]]);
if ([CalCalendarStoreErrorDomain isKindOfClass:[NSString class]]) [d setObject:CalCalendarStoreErrorDomain forKey:@"CalCalendarStoreErrorDomain"]; else NSLog([@"Can't initialize CalCalendarStoreErrorDomain with object " stringByAppendingString:[CalCalendarStoreErrorDomain description]]);
if ([CalCalendarTypeBirthday isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeBirthday forKey:@"CalCalendarTypeBirthday"]; else NSLog([@"Can't initialize CalCalendarTypeBirthday with object " stringByAppendingString:[CalCalendarTypeBirthday description]]);
if ([CalCalendarTypeCalDAV isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeCalDAV forKey:@"CalCalendarTypeCalDAV"]; else NSLog([@"Can't initialize CalCalendarTypeCalDAV with object " stringByAppendingString:[CalCalendarTypeCalDAV description]]);
if ([CalCalendarTypeIMAP isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeIMAP forKey:@"CalCalendarTypeIMAP"]; else NSLog([@"Can't initialize CalCalendarTypeIMAP with object " stringByAppendingString:[CalCalendarTypeIMAP description]]);
if ([CalCalendarTypeLocal isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeLocal forKey:@"CalCalendarTypeLocal"]; else NSLog([@"Can't initialize CalCalendarTypeLocal with object " stringByAppendingString:[CalCalendarTypeLocal description]]);
if ([CalCalendarTypeSubscription isKindOfClass:[NSString class]]) [d setObject:CalCalendarTypeSubscription forKey:@"CalCalendarTypeSubscription"]; else NSLog([@"Can't initialize CalCalendarTypeSubscription with object " stringByAppendingString:[CalCalendarTypeSubscription description]]);
if ([CalCalendarsChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:CalCalendarsChangedExternallyNotification forKey:@"CalCalendarsChangedExternallyNotification"]; else NSLog([@"Can't initialize CalCalendarsChangedExternallyNotification with object " stringByAppendingString:[CalCalendarsChangedExternallyNotification description]]);
if ([CalCalendarsChangedNotification isKindOfClass:[NSString class]]) [d setObject:CalCalendarsChangedNotification forKey:@"CalCalendarsChangedNotification"]; else NSLog([@"Can't initialize CalCalendarsChangedNotification with object " stringByAppendingString:[CalCalendarsChangedNotification description]]);
if ([CalDeletedRecordsKey isKindOfClass:[NSString class]]) [d setObject:CalDeletedRecordsKey forKey:@"CalDeletedRecordsKey"]; else NSLog([@"Can't initialize CalDeletedRecordsKey with object " stringByAppendingString:[CalDeletedRecordsKey description]]);
if ([CalEventsChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:CalEventsChangedExternallyNotification forKey:@"CalEventsChangedExternallyNotification"]; else NSLog([@"Can't initialize CalEventsChangedExternallyNotification with object " stringByAppendingString:[CalEventsChangedExternallyNotification description]]);
if ([CalEventsChangedNotification isKindOfClass:[NSString class]]) [d setObject:CalEventsChangedNotification forKey:@"CalEventsChangedNotification"]; else NSLog([@"Can't initialize CalEventsChangedNotification with object " stringByAppendingString:[CalEventsChangedNotification description]]);
if ([CalInsertedRecordsKey isKindOfClass:[NSString class]]) [d setObject:CalInsertedRecordsKey forKey:@"CalInsertedRecordsKey"]; else NSLog([@"Can't initialize CalInsertedRecordsKey with object " stringByAppendingString:[CalInsertedRecordsKey description]]);
if ([CalSenderProcessIDKey isKindOfClass:[NSString class]]) [d setObject:CalSenderProcessIDKey forKey:@"CalSenderProcessIDKey"]; else NSLog([@"Can't initialize CalSenderProcessIDKey with object " stringByAppendingString:[CalSenderProcessIDKey description]]);
if ([CalTasksChangedExternallyNotification isKindOfClass:[NSString class]]) [d setObject:CalTasksChangedExternallyNotification forKey:@"CalTasksChangedExternallyNotification"]; else NSLog([@"Can't initialize CalTasksChangedExternallyNotification with object " stringByAppendingString:[CalTasksChangedExternallyNotification description]]);
if ([CalTasksChangedNotification isKindOfClass:[NSString class]]) [d setObject:CalTasksChangedNotification forKey:@"CalTasksChangedNotification"]; else NSLog([@"Can't initialize CalTasksChangedNotification with object " stringByAppendingString:[CalTasksChangedNotification description]]);
if ([CalUpdatedRecordsKey isKindOfClass:[NSString class]]) [d setObject:CalUpdatedRecordsKey forKey:@"CalUpdatedRecordsKey"]; else NSLog([@"Can't initialize CalUpdatedRecordsKey with object " stringByAppendingString:[CalUpdatedRecordsKey description]]);
if ([CalUserUIDKey isKindOfClass:[NSString class]]) [d setObject:CalUserUIDKey forKey:@"CalUserUIDKey"]; else NSLog([@"Can't initialize CalUserUIDKey with object " stringByAppendingString:[CalUserUIDKey description]]);
[d setObject:[Number numberWithDouble:CalCalendarNotEditableError] forKey:@"CalCalendarNotEditableError"];
[d setObject:[Number numberWithDouble:CalCalendarNotInRepository] forKey:@"CalCalendarNotInRepository"];
[d setObject:[Number numberWithDouble:CalCalendarTitleNotUniqueError] forKey:@"CalCalendarTitleNotUniqueError"];
[d setObject:[Number numberWithDouble:CalDateInvalidError] forKey:@"CalDateInvalidError"];
[d setObject:[Number numberWithDouble:CalPriorityHigh] forKey:@"CalPriorityHigh"];
[d setObject:[Number numberWithDouble:CalPriorityLow] forKey:@"CalPriorityLow"];
[d setObject:[Number numberWithDouble:CalPriorityMedium] forKey:@"CalPriorityMedium"];
[d setObject:[Number numberWithDouble:CalPriorityNone] forKey:@"CalPriorityNone"];
[d setObject:[Number numberWithDouble:CalRecurrenceDaily] forKey:@"CalRecurrenceDaily"];
[d setObject:[Number numberWithDouble:CalRecurrenceMonthly] forKey:@"CalRecurrenceMonthly"];
[d setObject:[Number numberWithDouble:CalRecurrenceWeekly] forKey:@"CalRecurrenceWeekly"];
[d setObject:[Number numberWithDouble:CalRecurrenceYearly] forKey:@"CalRecurrenceYearly"];
[d setObject:[Number numberWithDouble:CalSpanAllEvents] forKey:@"CalSpanAllEvents"];
[d setObject:[Number numberWithDouble:CalSpanFutureEvents] forKey:@"CalSpanFutureEvents"];
[d setObject:[Number numberWithDouble:CalSpanThisEvent] forKey:@"CalSpanThisEvent"];
[d setObject:[Number numberWithDouble:COREAUDIOTYPES_VERSION] forKey:@"COREAUDIOTYPES_VERSION"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_16BitSourceData] forKey:@"kAppleLosslessFormatFlag_16BitSourceData"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_20BitSourceData] forKey:@"kAppleLosslessFormatFlag_20BitSourceData"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_24BitSourceData] forKey:@"kAppleLosslessFormatFlag_24BitSourceData"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_32BitSourceData] forKey:@"kAppleLosslessFormatFlag_32BitSourceData"];
[d setObject:[Number numberWithDouble:kAudioAggregateDeviceClassID] forKey:@"kAudioAggregateDeviceClassID"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyActiveSubDeviceList] forKey:@"kAudioAggregateDevicePropertyActiveSubDeviceList"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyComposition] forKey:@"kAudioAggregateDevicePropertyComposition"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyFullSubDeviceList] forKey:@"kAudioAggregateDevicePropertyFullSubDeviceList"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyMasterSubDevice] forKey:@"kAudioAggregateDevicePropertyMasterSubDevice"];
[d setObject:[Number numberWithDouble:kAudioBooleanControlClassID] forKey:@"kAudioBooleanControlClassID"];
[d setObject:[Number numberWithDouble:kAudioBooleanControlPropertyValue] forKey:@"kAudioBooleanControlPropertyValue"];
[d setObject:[Number numberWithDouble:kAudioBootChimeVolumeControlClassID] forKey:@"kAudioBootChimeVolumeControlClassID"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_Center] forKey:@"kAudioChannelBit_Center"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_CenterSurround] forKey:@"kAudioChannelBit_CenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LFEScreen] forKey:@"kAudioChannelBit_LFEScreen"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_Left] forKey:@"kAudioChannelBit_Left"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LeftCenter] forKey:@"kAudioChannelBit_LeftCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LeftSurround] forKey:@"kAudioChannelBit_LeftSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LeftSurroundDirect] forKey:@"kAudioChannelBit_LeftSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_Right] forKey:@"kAudioChannelBit_Right"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_RightCenter] forKey:@"kAudioChannelBit_RightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_RightSurround] forKey:@"kAudioChannelBit_RightSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_RightSurroundDirect] forKey:@"kAudioChannelBit_RightSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopBackCenter] forKey:@"kAudioChannelBit_TopBackCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopBackLeft] forKey:@"kAudioChannelBit_TopBackLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopBackRight] forKey:@"kAudioChannelBit_TopBackRight"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopCenterSurround] forKey:@"kAudioChannelBit_TopCenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_VerticalHeightCenter] forKey:@"kAudioChannelBit_VerticalHeightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_VerticalHeightLeft] forKey:@"kAudioChannelBit_VerticalHeightLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_VerticalHeightRight] forKey:@"kAudioChannelBit_VerticalHeightRight"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_Azimuth] forKey:@"kAudioChannelCoordinates_Azimuth"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_BackFront] forKey:@"kAudioChannelCoordinates_BackFront"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_Distance] forKey:@"kAudioChannelCoordinates_Distance"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_DownUp] forKey:@"kAudioChannelCoordinates_DownUp"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_Elevation] forKey:@"kAudioChannelCoordinates_Elevation"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_LeftRight] forKey:@"kAudioChannelCoordinates_LeftRight"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_AllOff] forKey:@"kAudioChannelFlags_AllOff"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_Meters] forKey:@"kAudioChannelFlags_Meters"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_RectangularCoordinates] forKey:@"kAudioChannelFlags_RectangularCoordinates"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_SphericalCoordinates] forKey:@"kAudioChannelFlags_SphericalCoordinates"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_W] forKey:@"kAudioChannelLabel_Ambisonic_W"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_X] forKey:@"kAudioChannelLabel_Ambisonic_X"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_Y] forKey:@"kAudioChannelLabel_Ambisonic_Y"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_Z] forKey:@"kAudioChannelLabel_Ambisonic_Z"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Center] forKey:@"kAudioChannelLabel_Center"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_CenterSurround] forKey:@"kAudioChannelLabel_CenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_CenterSurroundDirect] forKey:@"kAudioChannelLabel_CenterSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_ClickTrack] forKey:@"kAudioChannelLabel_ClickTrack"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_DialogCentricMix] forKey:@"kAudioChannelLabel_DialogCentricMix"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete] forKey:@"kAudioChannelLabel_Discrete"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_0] forKey:@"kAudioChannelLabel_Discrete_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_1] forKey:@"kAudioChannelLabel_Discrete_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_10] forKey:@"kAudioChannelLabel_Discrete_10"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_11] forKey:@"kAudioChannelLabel_Discrete_11"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_12] forKey:@"kAudioChannelLabel_Discrete_12"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_13] forKey:@"kAudioChannelLabel_Discrete_13"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_14] forKey:@"kAudioChannelLabel_Discrete_14"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_15] forKey:@"kAudioChannelLabel_Discrete_15"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_2] forKey:@"kAudioChannelLabel_Discrete_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_3] forKey:@"kAudioChannelLabel_Discrete_3"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_4] forKey:@"kAudioChannelLabel_Discrete_4"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_5] forKey:@"kAudioChannelLabel_Discrete_5"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_6] forKey:@"kAudioChannelLabel_Discrete_6"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_65535] forKey:@"kAudioChannelLabel_Discrete_65535"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_7] forKey:@"kAudioChannelLabel_Discrete_7"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_8] forKey:@"kAudioChannelLabel_Discrete_8"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_9] forKey:@"kAudioChannelLabel_Discrete_9"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_ForeignLanguage] forKey:@"kAudioChannelLabel_ForeignLanguage"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Haptic] forKey:@"kAudioChannelLabel_Haptic"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_HeadphonesLeft] forKey:@"kAudioChannelLabel_HeadphonesLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_HeadphonesRight] forKey:@"kAudioChannelLabel_HeadphonesRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_HearingImpaired] forKey:@"kAudioChannelLabel_HearingImpaired"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LFE2] forKey:@"kAudioChannelLabel_LFE2"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LFEScreen] forKey:@"kAudioChannelLabel_LFEScreen"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Left] forKey:@"kAudioChannelLabel_Left"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftCenter] forKey:@"kAudioChannelLabel_LeftCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftSurround] forKey:@"kAudioChannelLabel_LeftSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftSurroundDirect] forKey:@"kAudioChannelLabel_LeftSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftTotal] forKey:@"kAudioChannelLabel_LeftTotal"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftWide] forKey:@"kAudioChannelLabel_LeftWide"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_MS_Mid] forKey:@"kAudioChannelLabel_MS_Mid"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_MS_Side] forKey:@"kAudioChannelLabel_MS_Side"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Mono] forKey:@"kAudioChannelLabel_Mono"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Narration] forKey:@"kAudioChannelLabel_Narration"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RearSurroundLeft] forKey:@"kAudioChannelLabel_RearSurroundLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RearSurroundRight] forKey:@"kAudioChannelLabel_RearSurroundRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Right] forKey:@"kAudioChannelLabel_Right"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightCenter] forKey:@"kAudioChannelLabel_RightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightSurround] forKey:@"kAudioChannelLabel_RightSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightSurroundDirect] forKey:@"kAudioChannelLabel_RightSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightTotal] forKey:@"kAudioChannelLabel_RightTotal"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightWide] forKey:@"kAudioChannelLabel_RightWide"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopBackCenter] forKey:@"kAudioChannelLabel_TopBackCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopBackLeft] forKey:@"kAudioChannelLabel_TopBackLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopBackRight] forKey:@"kAudioChannelLabel_TopBackRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopCenterSurround] forKey:@"kAudioChannelLabel_TopCenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Unknown] forKey:@"kAudioChannelLabel_Unknown"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Unused] forKey:@"kAudioChannelLabel_Unused"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_UseCoordinates] forKey:@"kAudioChannelLabel_UseCoordinates"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_VerticalHeightCenter] forKey:@"kAudioChannelLabel_VerticalHeightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_VerticalHeightLeft] forKey:@"kAudioChannelLabel_VerticalHeightLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_VerticalHeightRight] forKey:@"kAudioChannelLabel_VerticalHeightRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_XY_X] forKey:@"kAudioChannelLabel_XY_X"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_XY_Y] forKey:@"kAudioChannelLabel_XY_Y"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_3_0] forKey:@"kAudioChannelLayoutTag_AAC_3_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_4_0] forKey:@"kAudioChannelLayoutTag_AAC_4_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_5_0] forKey:@"kAudioChannelLayoutTag_AAC_5_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_5_1] forKey:@"kAudioChannelLayoutTag_AAC_5_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_6_0] forKey:@"kAudioChannelLayoutTag_AAC_6_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_6_1] forKey:@"kAudioChannelLayoutTag_AAC_6_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_7_0] forKey:@"kAudioChannelLayoutTag_AAC_7_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_7_1] forKey:@"kAudioChannelLayoutTag_AAC_7_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_Octagonal] forKey:@"kAudioChannelLayoutTag_AAC_Octagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_Quadraphonic] forKey:@"kAudioChannelLayoutTag_AAC_Quadraphonic"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_1_0_1] forKey:@"kAudioChannelLayoutTag_AC3_1_0_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_2_1_1] forKey:@"kAudioChannelLayoutTag_AC3_2_1_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_0] forKey:@"kAudioChannelLayoutTag_AC3_3_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_0_1] forKey:@"kAudioChannelLayoutTag_AC3_3_0_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_1] forKey:@"kAudioChannelLayoutTag_AC3_3_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_1_1] forKey:@"kAudioChannelLayoutTag_AC3_3_1_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Ambisonic_B_Format] forKey:@"kAudioChannelLayoutTag_Ambisonic_B_Format"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_4] forKey:@"kAudioChannelLayoutTag_AudioUnit_4"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_5] forKey:@"kAudioChannelLayoutTag_AudioUnit_5"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_5_0] forKey:@"kAudioChannelLayoutTag_AudioUnit_5_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_5_1] forKey:@"kAudioChannelLayoutTag_AudioUnit_5_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_6] forKey:@"kAudioChannelLayoutTag_AudioUnit_6"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_6_0] forKey:@"kAudioChannelLayoutTag_AudioUnit_6_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_6_1] forKey:@"kAudioChannelLayoutTag_AudioUnit_6_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_0] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_0_Front] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_0_Front"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_1] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_1_Front] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_1_Front"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_8] forKey:@"kAudioChannelLayoutTag_AudioUnit_8"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Binaural] forKey:@"kAudioChannelLayoutTag_Binaural"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Cube] forKey:@"kAudioChannelLayoutTag_Cube"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_0] forKey:@"kAudioChannelLayoutTag_DVD_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_1] forKey:@"kAudioChannelLayoutTag_DVD_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_10] forKey:@"kAudioChannelLayoutTag_DVD_10"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_11] forKey:@"kAudioChannelLayoutTag_DVD_11"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_12] forKey:@"kAudioChannelLayoutTag_DVD_12"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_13] forKey:@"kAudioChannelLayoutTag_DVD_13"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_14] forKey:@"kAudioChannelLayoutTag_DVD_14"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_15] forKey:@"kAudioChannelLayoutTag_DVD_15"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_16] forKey:@"kAudioChannelLayoutTag_DVD_16"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_17] forKey:@"kAudioChannelLayoutTag_DVD_17"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_18] forKey:@"kAudioChannelLayoutTag_DVD_18"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_19] forKey:@"kAudioChannelLayoutTag_DVD_19"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_2] forKey:@"kAudioChannelLayoutTag_DVD_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_20] forKey:@"kAudioChannelLayoutTag_DVD_20"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_3] forKey:@"kAudioChannelLayoutTag_DVD_3"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_4] forKey:@"kAudioChannelLayoutTag_DVD_4"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_5] forKey:@"kAudioChannelLayoutTag_DVD_5"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_6] forKey:@"kAudioChannelLayoutTag_DVD_6"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_7] forKey:@"kAudioChannelLayoutTag_DVD_7"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_8] forKey:@"kAudioChannelLayoutTag_DVD_8"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_9] forKey:@"kAudioChannelLayoutTag_DVD_9"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DiscreteInOrder] forKey:@"kAudioChannelLayoutTag_DiscreteInOrder"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Emagic_Default_7_1] forKey:@"kAudioChannelLayoutTag_Emagic_Default_7_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Hexagonal] forKey:@"kAudioChannelLayoutTag_Hexagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_1_0] forKey:@"kAudioChannelLayoutTag_ITU_1_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_2_0] forKey:@"kAudioChannelLayoutTag_ITU_2_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_2_1] forKey:@"kAudioChannelLayoutTag_ITU_2_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_2_2] forKey:@"kAudioChannelLayoutTag_ITU_2_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_0] forKey:@"kAudioChannelLayoutTag_ITU_3_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_1] forKey:@"kAudioChannelLayoutTag_ITU_3_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_2] forKey:@"kAudioChannelLayoutTag_ITU_3_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_2_1] forKey:@"kAudioChannelLayoutTag_ITU_3_2_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_4_1] forKey:@"kAudioChannelLayoutTag_ITU_3_4_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_1_0] forKey:@"kAudioChannelLayoutTag_MPEG_1_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_2_0] forKey:@"kAudioChannelLayoutTag_MPEG_2_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_3_0_A] forKey:@"kAudioChannelLayoutTag_MPEG_3_0_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_3_0_B] forKey:@"kAudioChannelLayoutTag_MPEG_3_0_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_4_0_A] forKey:@"kAudioChannelLayoutTag_MPEG_4_0_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_4_0_B] forKey:@"kAudioChannelLayoutTag_MPEG_4_0_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_A] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_B] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_C] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_C"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_D] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_D"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_A] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_B] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_C] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_C"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_D] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_D"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_6_1_A] forKey:@"kAudioChannelLayoutTag_MPEG_6_1_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_7_1_A] forKey:@"kAudioChannelLayoutTag_MPEG_7_1_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_7_1_B] forKey:@"kAudioChannelLayoutTag_MPEG_7_1_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_7_1_C] forKey:@"kAudioChannelLayoutTag_MPEG_7_1_C"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MatrixStereo] forKey:@"kAudioChannelLayoutTag_MatrixStereo"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MidSide] forKey:@"kAudioChannelLayoutTag_MidSide"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Mono] forKey:@"kAudioChannelLayoutTag_Mono"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Octagonal] forKey:@"kAudioChannelLayoutTag_Octagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Pentagonal] forKey:@"kAudioChannelLayoutTag_Pentagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Quadraphonic] forKey:@"kAudioChannelLayoutTag_Quadraphonic"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_SMPTE_DTV] forKey:@"kAudioChannelLayoutTag_SMPTE_DTV"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Stereo] forKey:@"kAudioChannelLayoutTag_Stereo"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_StereoHeadphones] forKey:@"kAudioChannelLayoutTag_StereoHeadphones"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_TMH_10_2_full] forKey:@"kAudioChannelLayoutTag_TMH_10_2_full"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_TMH_10_2_std] forKey:@"kAudioChannelLayoutTag_TMH_10_2_std"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Unknown] forKey:@"kAudioChannelLayoutTag_Unknown"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_UseChannelBitmap] forKey:@"kAudioChannelLayoutTag_UseChannelBitmap"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_UseChannelDescriptions] forKey:@"kAudioChannelLayoutTag_UseChannelDescriptions"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_XY] forKey:@"kAudioChannelLayoutTag_XY"];
[d setObject:[Number numberWithDouble:kAudioClockSourceControlClassID] forKey:@"kAudioClockSourceControlClassID"];
[d setObject:[Number numberWithDouble:kAudioClockSourceControlPropertyItemKind] forKey:@"kAudioClockSourceControlPropertyItemKind"];
[d setObject:[Number numberWithDouble:kAudioControlClassID] forKey:@"kAudioControlClassID"];
[d setObject:[Number numberWithDouble:kAudioControlPropertyElement] forKey:@"kAudioControlPropertyElement"];
[d setObject:[Number numberWithDouble:kAudioControlPropertyScope] forKey:@"kAudioControlPropertyScope"];
[d setObject:[Number numberWithDouble:kAudioControlPropertyVariant] forKey:@"kAudioControlPropertyVariant"];
[d setObject:[Number numberWithDouble:kAudioDataDestinationControlClassID] forKey:@"kAudioDataDestinationControlClassID"];
[d setObject:[Number numberWithDouble:kAudioDataSourceControlClassID] forKey:@"kAudioDataSourceControlClassID"];
[d setObject:[Number numberWithDouble:kAudioDeviceClassID] forKey:@"kAudioDeviceClassID"];
[d setObject:[Number numberWithDouble:kAudioDevicePermissionsError] forKey:@"kAudioDevicePermissionsError"];
[d setObject:[Number numberWithDouble:kAudioDeviceProcessorOverload] forKey:@"kAudioDeviceProcessorOverload"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyActualSampleRate] forKey:@"kAudioDevicePropertyActualSampleRate"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyAvailableNominalSampleRates] forKey:@"kAudioDevicePropertyAvailableNominalSampleRates"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferFrameSize] forKey:@"kAudioDevicePropertyBufferFrameSize"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferFrameSizeRange] forKey:@"kAudioDevicePropertyBufferFrameSizeRange"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferSize] forKey:@"kAudioDevicePropertyBufferSize"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferSizeRange] forKey:@"kAudioDevicePropertyBufferSizeRange"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelCategoryName] forKey:@"kAudioDevicePropertyChannelCategoryName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelCategoryNameCFString] forKey:@"kAudioDevicePropertyChannelCategoryNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelName] forKey:@"kAudioDevicePropertyChannelName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNameCFString] forKey:@"kAudioDevicePropertyChannelNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevel] forKey:@"kAudioDevicePropertyChannelNominalLineLevel"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevelNameForID] forKey:@"kAudioDevicePropertyChannelNominalLineLevelNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString] forKey:@"kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevels] forKey:@"kAudioDevicePropertyChannelNominalLineLevels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNumberName] forKey:@"kAudioDevicePropertyChannelNumberName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNumberNameCFString] forKey:@"kAudioDevicePropertyChannelNumberNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockDomain] forKey:@"kAudioDevicePropertyClockDomain"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSource] forKey:@"kAudioDevicePropertyClockSource"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSourceKindForID] forKey:@"kAudioDevicePropertyClockSourceKindForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSourceNameForID] forKey:@"kAudioDevicePropertyClockSourceNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSourceNameForIDCFString] forKey:@"kAudioDevicePropertyClockSourceNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSources] forKey:@"kAudioDevicePropertyClockSources"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyConfigurationApplication] forKey:@"kAudioDevicePropertyConfigurationApplication"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSource] forKey:@"kAudioDevicePropertyDataSource"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSourceNameForID] forKey:@"kAudioDevicePropertyDataSourceNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSourceNameForIDCFString] forKey:@"kAudioDevicePropertyDataSourceNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSources] forKey:@"kAudioDevicePropertyDataSources"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceCanBeDefaultDevice] forKey:@"kAudioDevicePropertyDeviceCanBeDefaultDevice"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceCanBeDefaultSystemDevice] forKey:@"kAudioDevicePropertyDeviceCanBeDefaultSystemDevice"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceHasChanged] forKey:@"kAudioDevicePropertyDeviceHasChanged"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceIsAlive] forKey:@"kAudioDevicePropertyDeviceIsAlive"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceIsRunning] forKey:@"kAudioDevicePropertyDeviceIsRunning"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceIsRunningSomewhere] forKey:@"kAudioDevicePropertyDeviceIsRunningSomewhere"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceManufacturer] forKey:@"kAudioDevicePropertyDeviceManufacturer"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceManufacturerCFString] forKey:@"kAudioDevicePropertyDeviceManufacturerCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceName] forKey:@"kAudioDevicePropertyDeviceName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceNameCFString] forKey:@"kAudioDevicePropertyDeviceNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceUID] forKey:@"kAudioDevicePropertyDeviceUID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDriverShouldOwniSub] forKey:@"kAudioDevicePropertyDriverShouldOwniSub"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyHogMode] forKey:@"kAudioDevicePropertyHogMode"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIOCycleUsage] forKey:@"kAudioDevicePropertyIOCycleUsage"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIOProcStreamUsage] forKey:@"kAudioDevicePropertyIOProcStreamUsage"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIcon] forKey:@"kAudioDevicePropertyIcon"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIsHidden] forKey:@"kAudioDevicePropertyIsHidden"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyJackIsConnected] forKey:@"kAudioDevicePropertyJackIsConnected"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyLatency] forKey:@"kAudioDevicePropertyLatency"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyModelUID] forKey:@"kAudioDevicePropertyModelUID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyMute] forKey:@"kAudioDevicePropertyMute"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyNominalSampleRate] forKey:@"kAudioDevicePropertyNominalSampleRate"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThru] forKey:@"kAudioDevicePropertyPlayThru"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestination] forKey:@"kAudioDevicePropertyPlayThruDestination"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestinationNameForID] forKey:@"kAudioDevicePropertyPlayThruDestinationNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestinationNameForIDCFString] forKey:@"kAudioDevicePropertyPlayThruDestinationNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestinations] forKey:@"kAudioDevicePropertyPlayThruDestinations"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruSolo] forKey:@"kAudioDevicePropertyPlayThruSolo"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruStereoPan] forKey:@"kAudioDevicePropertyPlayThruStereoPan"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruStereoPanChannels] forKey:@"kAudioDevicePropertyPlayThruStereoPanChannels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeDecibels] forKey:@"kAudioDevicePropertyPlayThruVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeDecibelsToScalar] forKey:@"kAudioDevicePropertyPlayThruVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeRangeDecibels] forKey:@"kAudioDevicePropertyPlayThruVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeScalar] forKey:@"kAudioDevicePropertyPlayThruVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeScalarToDecibels] forKey:@"kAudioDevicePropertyPlayThruVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlugIn] forKey:@"kAudioDevicePropertyPlugIn"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPreferredChannelLayout] forKey:@"kAudioDevicePropertyPreferredChannelLayout"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPreferredChannelsForStereo] forKey:@"kAudioDevicePropertyPreferredChannelsForStereo"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyRegisterBufferList] forKey:@"kAudioDevicePropertyRegisterBufferList"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyRelatedDevices] forKey:@"kAudioDevicePropertyRelatedDevices"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySafetyOffset] forKey:@"kAudioDevicePropertySafetyOffset"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyScopeInput] forKey:@"kAudioDevicePropertyScopeInput"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyScopeOutput] forKey:@"kAudioDevicePropertyScopeOutput"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyScopePlayThrough] forKey:@"kAudioDevicePropertyScopePlayThrough"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySolo] forKey:@"kAudioDevicePropertySolo"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStereoPan] forKey:@"kAudioDevicePropertyStereoPan"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStereoPanChannels] forKey:@"kAudioDevicePropertyStereoPanChannels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamConfiguration] forKey:@"kAudioDevicePropertyStreamConfiguration"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormat] forKey:@"kAudioDevicePropertyStreamFormat"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormatMatch] forKey:@"kAudioDevicePropertyStreamFormatMatch"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormatSupported] forKey:@"kAudioDevicePropertyStreamFormatSupported"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormats] forKey:@"kAudioDevicePropertyStreamFormats"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreams] forKey:@"kAudioDevicePropertyStreams"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubMute] forKey:@"kAudioDevicePropertySubMute"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeDecibels] forKey:@"kAudioDevicePropertySubVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeDecibelsToScalar] forKey:@"kAudioDevicePropertySubVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeRangeDecibels] forKey:@"kAudioDevicePropertySubVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeScalar] forKey:@"kAudioDevicePropertySubVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeScalarToDecibels] forKey:@"kAudioDevicePropertySubVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySupportsMixing] forKey:@"kAudioDevicePropertySupportsMixing"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyTransportType] forKey:@"kAudioDevicePropertyTransportType"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyUsesVariableBufferFrameSizes] forKey:@"kAudioDevicePropertyUsesVariableBufferFrameSizes"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeDecibels] forKey:@"kAudioDevicePropertyVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeDecibelsToScalar] forKey:@"kAudioDevicePropertyVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeRangeDecibels] forKey:@"kAudioDevicePropertyVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeScalar] forKey:@"kAudioDevicePropertyVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeScalarToDecibels] forKey:@"kAudioDevicePropertyVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioDeviceStartTimeDontConsultDeviceFlag] forKey:@"kAudioDeviceStartTimeDontConsultDeviceFlag"];
[d setObject:[Number numberWithDouble:kAudioDeviceStartTimeDontConsultHALFlag] forKey:@"kAudioDeviceStartTimeDontConsultHALFlag"];
[d setObject:[Number numberWithDouble:kAudioDeviceStartTimeIsInputFlag] forKey:@"kAudioDeviceStartTimeIsInputFlag"];
[d setObject:[Number numberWithDouble:kAudioDeviceTransportTypeAggregate] forKey:@"kAudioDeviceTransportTypeAggregate"];
[d setObject:[Number numberWithDouble:kAudioDeviceTransportTypeAutoAggregate] forKey:@"kAudioDeviceTransportTypeAutoAggregate"];
[d setObject:[Number numberWithDouble:kAudioDeviceUnknown] forKey:@"kAudioDeviceUnknown"];
[d setObject:[Number numberWithDouble:kAudioDeviceUnsupportedFormatError] forKey:@"kAudioDeviceUnsupportedFormatError"];
[d setObject:[Number numberWithDouble:kAudioFormat60958AC3] forKey:@"kAudioFormat60958AC3"];
[d setObject:[Number numberWithDouble:kAudioFormatAC3] forKey:@"kAudioFormatAC3"];
[d setObject:[Number numberWithDouble:kAudioFormatALaw] forKey:@"kAudioFormatALaw"];
[d setObject:[Number numberWithDouble:kAudioFormatAMR] forKey:@"kAudioFormatAMR"];
[d setObject:[Number numberWithDouble:kAudioFormatAppleIMA4] forKey:@"kAudioFormatAppleIMA4"];
[d setObject:[Number numberWithDouble:kAudioFormatAppleLossless] forKey:@"kAudioFormatAppleLossless"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsAlignedHigh] forKey:@"kAudioFormatFlagIsAlignedHigh"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsBigEndian] forKey:@"kAudioFormatFlagIsBigEndian"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsFloat] forKey:@"kAudioFormatFlagIsFloat"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsNonInterleaved] forKey:@"kAudioFormatFlagIsNonInterleaved"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsNonMixable] forKey:@"kAudioFormatFlagIsNonMixable"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsPacked] forKey:@"kAudioFormatFlagIsPacked"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsSignedInteger] forKey:@"kAudioFormatFlagIsSignedInteger"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsAreAllClear] forKey:@"kAudioFormatFlagsAreAllClear"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsCanonical] forKey:@"kAudioFormatFlagsCanonical"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsNativeEndian] forKey:@"kAudioFormatFlagsNativeEndian"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsNativeFloatPacked] forKey:@"kAudioFormatFlagsNativeFloatPacked"];
[d setObject:[Number numberWithDouble:kAudioFormatLinearPCM] forKey:@"kAudioFormatLinearPCM"];
[d setObject:[Number numberWithDouble:kAudioFormatMACE3] forKey:@"kAudioFormatMACE3"];
[d setObject:[Number numberWithDouble:kAudioFormatMACE6] forKey:@"kAudioFormatMACE6"];
[d setObject:[Number numberWithDouble:kAudioFormatMIDIStream] forKey:@"kAudioFormatMIDIStream"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC] forKey:@"kAudioFormatMPEG4AAC"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_HE] forKey:@"kAudioFormatMPEG4AAC_HE"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_HE_V2] forKey:@"kAudioFormatMPEG4AAC_HE_V2"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_LD] forKey:@"kAudioFormatMPEG4AAC_LD"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_Spatial] forKey:@"kAudioFormatMPEG4AAC_Spatial"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4CELP] forKey:@"kAudioFormatMPEG4CELP"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4HVXC] forKey:@"kAudioFormatMPEG4HVXC"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4TwinVQ] forKey:@"kAudioFormatMPEG4TwinVQ"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEGLayer1] forKey:@"kAudioFormatMPEGLayer1"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEGLayer2] forKey:@"kAudioFormatMPEGLayer2"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEGLayer3] forKey:@"kAudioFormatMPEGLayer3"];
[d setObject:[Number numberWithDouble:kAudioFormatParameterValueStream] forKey:@"kAudioFormatParameterValueStream"];
[d setObject:[Number numberWithDouble:kAudioFormatQDesign] forKey:@"kAudioFormatQDesign"];
[d setObject:[Number numberWithDouble:kAudioFormatQDesign2] forKey:@"kAudioFormatQDesign2"];
[d setObject:[Number numberWithDouble:kAudioFormatQUALCOMM] forKey:@"kAudioFormatQUALCOMM"];
[d setObject:[Number numberWithDouble:kAudioFormatTimeCode] forKey:@"kAudioFormatTimeCode"];
[d setObject:[Number numberWithDouble:kAudioFormatULaw] forKey:@"kAudioFormatULaw"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadDeviceError] forKey:@"kAudioHardwareBadDeviceError"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadObjectError] forKey:@"kAudioHardwareBadObjectError"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadPropertySizeError] forKey:@"kAudioHardwareBadPropertySizeError"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadStreamError] forKey:@"kAudioHardwareBadStreamError"];
[d setObject:[Number numberWithDouble:kAudioHardwareIllegalOperationError] forKey:@"kAudioHardwareIllegalOperationError"];
[d setObject:[Number numberWithDouble:kAudioHardwareNoError] forKey:@"kAudioHardwareNoError"];
[d setObject:[Number numberWithDouble:kAudioHardwareNotRunningError] forKey:@"kAudioHardwareNotRunningError"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeDecibels] forKey:@"kAudioHardwarePropertyBootChimeVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar] forKey:@"kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeRangeDecibels] forKey:@"kAudioHardwarePropertyBootChimeVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeScalar] forKey:@"kAudioHardwarePropertyBootChimeVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeScalarToDecibels] forKey:@"kAudioHardwarePropertyBootChimeVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDefaultInputDevice] forKey:@"kAudioHardwarePropertyDefaultInputDevice"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDefaultOutputDevice] forKey:@"kAudioHardwarePropertyDefaultOutputDevice"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDefaultSystemOutputDevice] forKey:@"kAudioHardwarePropertyDefaultSystemOutputDevice"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDeviceForUID] forKey:@"kAudioHardwarePropertyDeviceForUID"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDevices] forKey:@"kAudioHardwarePropertyDevices"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyHogModeIsAllowed] forKey:@"kAudioHardwarePropertyHogModeIsAllowed"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyIsInitingOrExiting] forKey:@"kAudioHardwarePropertyIsInitingOrExiting"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyPlugInForBundleID] forKey:@"kAudioHardwarePropertyPlugInForBundleID"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyProcessIsAudible] forKey:@"kAudioHardwarePropertyProcessIsAudible"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyProcessIsMaster] forKey:@"kAudioHardwarePropertyProcessIsMaster"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyRunLoop] forKey:@"kAudioHardwarePropertyRunLoop"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertySleepingIsAllowed] forKey:@"kAudioHardwarePropertySleepingIsAllowed"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyUnloadingIsAllowed] forKey:@"kAudioHardwarePropertyUnloadingIsAllowed"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyUserSessionIsActiveOrHeadless] forKey:@"kAudioHardwarePropertyUserSessionIsActiveOrHeadless"];
[d setObject:[Number numberWithDouble:kAudioHardwareUnknownPropertyError] forKey:@"kAudioHardwareUnknownPropertyError"];
[d setObject:[Number numberWithDouble:kAudioHardwareUnspecifiedError] forKey:@"kAudioHardwareUnspecifiedError"];
[d setObject:[Number numberWithDouble:kAudioHardwareUnsupportedOperationError] forKey:@"kAudioHardwareUnsupportedOperationError"];
[d setObject:[Number numberWithDouble:kAudioISubOwnerControlClassID] forKey:@"kAudioISubOwnerControlClassID"];
[d setObject:[Number numberWithDouble:kAudioJackControlClassID] forKey:@"kAudioJackControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLFEMuteControlClassID] forKey:@"kAudioLFEMuteControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLFEVolumeControlClassID] forKey:@"kAudioLFEVolumeControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLevelControlClassID] forKey:@"kAudioLevelControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyConvertDecibelsToScalar] forKey:@"kAudioLevelControlPropertyConvertDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyConvertScalarToDecibels] forKey:@"kAudioLevelControlPropertyConvertScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyDecibelRange] forKey:@"kAudioLevelControlPropertyDecibelRange"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyDecibelValue] forKey:@"kAudioLevelControlPropertyDecibelValue"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyDecibelsToScalarTransferFunction] forKey:@"kAudioLevelControlPropertyDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyScalarValue] forKey:@"kAudioLevelControlPropertyScalarValue"];
[d setObject:[Number numberWithDouble:kAudioLineLevelControlClassID] forKey:@"kAudioLineLevelControlClassID"];
[d setObject:[Number numberWithDouble:kAudioMuteControlClassID] forKey:@"kAudioMuteControlClassID"];
[d setObject:[Number numberWithDouble:kAudioObjectClassID] forKey:@"kAudioObjectClassID"];
[d setObject:[Number numberWithDouble:kAudioObjectClassIDWildcard] forKey:@"kAudioObjectClassIDWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyClass] forKey:@"kAudioObjectPropertyClass"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyCreator] forKey:@"kAudioObjectPropertyCreator"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementCategoryName] forKey:@"kAudioObjectPropertyElementCategoryName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementMaster] forKey:@"kAudioObjectPropertyElementMaster"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementName] forKey:@"kAudioObjectPropertyElementName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementNumberName] forKey:@"kAudioObjectPropertyElementNumberName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementWildcard] forKey:@"kAudioObjectPropertyElementWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyListenerAdded] forKey:@"kAudioObjectPropertyListenerAdded"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyListenerRemoved] forKey:@"kAudioObjectPropertyListenerRemoved"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyManufacturer] forKey:@"kAudioObjectPropertyManufacturer"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyName] forKey:@"kAudioObjectPropertyName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyOwnedObjects] forKey:@"kAudioObjectPropertyOwnedObjects"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyOwner] forKey:@"kAudioObjectPropertyOwner"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyScopeGlobal] forKey:@"kAudioObjectPropertyScopeGlobal"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyScopeWildcard] forKey:@"kAudioObjectPropertyScopeWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertySelectorWildcard] forKey:@"kAudioObjectPropertySelectorWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectSystemObject] forKey:@"kAudioObjectSystemObject"];
[d setObject:[Number numberWithDouble:kAudioObjectUnknown] forKey:@"kAudioObjectUnknown"];
[d setObject:[Number numberWithDouble:kAudioPlugInClassID] forKey:@"kAudioPlugInClassID"];
[d setObject:[Number numberWithDouble:kAudioPlugInCreateAggregateDevice] forKey:@"kAudioPlugInCreateAggregateDevice"];
[d setObject:[Number numberWithDouble:kAudioPlugInDestroyAggregateDevice] forKey:@"kAudioPlugInDestroyAggregateDevice"];
[d setObject:[Number numberWithDouble:kAudioPlugInPropertyBundleID] forKey:@"kAudioPlugInPropertyBundleID"];
[d setObject:[Number numberWithDouble:kAudioPropertyWildcardChannel] forKey:@"kAudioPropertyWildcardChannel"];
[d setObject:[Number numberWithDouble:kAudioPropertyWildcardPropertyID] forKey:@"kAudioPropertyWildcardPropertyID"];
[d setObject:[Number numberWithDouble:kAudioPropertyWildcardSection] forKey:@"kAudioPropertyWildcardSection"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlClassID] forKey:@"kAudioSelectorControlClassID"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlPropertyAvailableItems] forKey:@"kAudioSelectorControlPropertyAvailableItems"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlPropertyCurrentItem] forKey:@"kAudioSelectorControlPropertyCurrentItem"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlPropertyItemName] forKey:@"kAudioSelectorControlPropertyItemName"];
[d setObject:[Number numberWithDouble:kAudioSoloControlClassID] forKey:@"kAudioSoloControlClassID"];
[d setObject:[Number numberWithDouble:kAudioStereoPanControlClassID] forKey:@"kAudioStereoPanControlClassID"];
[d setObject:[Number numberWithDouble:kAudioStereoPanControlPropertyPanningChannels] forKey:@"kAudioStereoPanControlPropertyPanningChannels"];
[d setObject:[Number numberWithDouble:kAudioStereoPanControlPropertyValue] forKey:@"kAudioStereoPanControlPropertyValue"];
[d setObject:[Number numberWithDouble:kAudioStreamAnyRate] forKey:@"kAudioStreamAnyRate"];
[d setObject:[Number numberWithDouble:kAudioStreamClassID] forKey:@"kAudioStreamClassID"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyAvailablePhysicalFormats] forKey:@"kAudioStreamPropertyAvailablePhysicalFormats"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyAvailableVirtualFormats] forKey:@"kAudioStreamPropertyAvailableVirtualFormats"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyDirection] forKey:@"kAudioStreamPropertyDirection"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyLatency] forKey:@"kAudioStreamPropertyLatency"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyOwningDevice] forKey:@"kAudioStreamPropertyOwningDevice"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormat] forKey:@"kAudioStreamPropertyPhysicalFormat"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormatMatch] forKey:@"kAudioStreamPropertyPhysicalFormatMatch"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormatSupported] forKey:@"kAudioStreamPropertyPhysicalFormatSupported"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormats] forKey:@"kAudioStreamPropertyPhysicalFormats"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyStartingChannel] forKey:@"kAudioStreamPropertyStartingChannel"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyTerminalType] forKey:@"kAudioStreamPropertyTerminalType"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyVirtualFormat] forKey:@"kAudioStreamPropertyVirtualFormat"];
[d setObject:[Number numberWithDouble:kAudioStreamUnknown] forKey:@"kAudioStreamUnknown"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceClassID] forKey:@"kAudioSubDeviceClassID"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationHighQuality] forKey:@"kAudioSubDeviceDriftCompensationHighQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationLowQuality] forKey:@"kAudioSubDeviceDriftCompensationLowQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationMaxQuality] forKey:@"kAudioSubDeviceDriftCompensationMaxQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationMediumQuality] forKey:@"kAudioSubDeviceDriftCompensationMediumQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationMinQuality] forKey:@"kAudioSubDeviceDriftCompensationMinQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDevicePropertyDriftCompensation] forKey:@"kAudioSubDevicePropertyDriftCompensation"];
[d setObject:[Number numberWithDouble:kAudioSubDevicePropertyDriftCompensationQuality] forKey:@"kAudioSubDevicePropertyDriftCompensationQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDevicePropertyExtraLatency] forKey:@"kAudioSubDevicePropertyExtraLatency"];
[d setObject:[Number numberWithDouble:kAudioSystemObjectClassID] forKey:@"kAudioSystemObjectClassID"];
[d setObject:[Number numberWithDouble:kAudioTimeStampHostTimeValid] forKey:@"kAudioTimeStampHostTimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampRateScalarValid] forKey:@"kAudioTimeStampRateScalarValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampSMPTETimeValid] forKey:@"kAudioTimeStampSMPTETimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampSampleHostTimeValid] forKey:@"kAudioTimeStampSampleHostTimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampSampleTimeValid] forKey:@"kAudioTimeStampSampleTimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampWordClockTimeValid] forKey:@"kAudioTimeStampWordClockTimeValid"];
[d setObject:[Number numberWithDouble:kAudioVolumeControlClassID] forKey:@"kAudioVolumeControlClassID"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsAlignedHigh] forKey:@"kLinearPCMFormatFlagIsAlignedHigh"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsBigEndian] forKey:@"kLinearPCMFormatFlagIsBigEndian"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsFloat] forKey:@"kLinearPCMFormatFlagIsFloat"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsNonInterleaved] forKey:@"kLinearPCMFormatFlagIsNonInterleaved"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsNonMixable] forKey:@"kLinearPCMFormatFlagIsNonMixable"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsPacked] forKey:@"kLinearPCMFormatFlagIsPacked"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsSignedInteger] forKey:@"kLinearPCMFormatFlagIsSignedInteger"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagsAreAllClear] forKey:@"kLinearPCMFormatFlagsAreAllClear"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_LC] forKey:@"kMPEG4Object_AAC_LC"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_LTP] forKey:@"kMPEG4Object_AAC_LTP"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_Main] forKey:@"kMPEG4Object_AAC_Main"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_SBR] forKey:@"kMPEG4Object_AAC_SBR"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_SSR] forKey:@"kMPEG4Object_AAC_SSR"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_Scalable] forKey:@"kMPEG4Object_AAC_Scalable"];
[d setObject:[Number numberWithDouble:kMPEG4Object_CELP] forKey:@"kMPEG4Object_CELP"];
[d setObject:[Number numberWithDouble:kMPEG4Object_HVXC] forKey:@"kMPEG4Object_HVXC"];
[d setObject:[Number numberWithDouble:kMPEG4Object_TwinVQ] forKey:@"kMPEG4Object_TwinVQ"];
[d setObject:[Number numberWithDouble:kSMPTETimeRunning] forKey:@"kSMPTETimeRunning"];
[d setObject:[Number numberWithDouble:kSMPTETimeType2398] forKey:@"kSMPTETimeType2398"];
[d setObject:[Number numberWithDouble:kSMPTETimeType24] forKey:@"kSMPTETimeType24"];
[d setObject:[Number numberWithDouble:kSMPTETimeType25] forKey:@"kSMPTETimeType25"];
[d setObject:[Number numberWithDouble:kSMPTETimeType2997] forKey:@"kSMPTETimeType2997"];
[d setObject:[Number numberWithDouble:kSMPTETimeType2997Drop] forKey:@"kSMPTETimeType2997Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeType30] forKey:@"kSMPTETimeType30"];
[d setObject:[Number numberWithDouble:kSMPTETimeType30Drop] forKey:@"kSMPTETimeType30Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeType50] forKey:@"kSMPTETimeType50"];
[d setObject:[Number numberWithDouble:kSMPTETimeType5994] forKey:@"kSMPTETimeType5994"];
[d setObject:[Number numberWithDouble:kSMPTETimeType5994Drop] forKey:@"kSMPTETimeType5994Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeType60] forKey:@"kSMPTETimeType60"];
[d setObject:[Number numberWithDouble:kSMPTETimeType60Drop] forKey:@"kSMPTETimeType60Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeValid] forKey:@"kSMPTETimeValid"];
[d setObject:[Number numberWithDouble:COREAUDIOTYPES_VERSION] forKey:@"COREAUDIOTYPES_VERSION"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_16BitSourceData] forKey:@"kAppleLosslessFormatFlag_16BitSourceData"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_20BitSourceData] forKey:@"kAppleLosslessFormatFlag_20BitSourceData"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_24BitSourceData] forKey:@"kAppleLosslessFormatFlag_24BitSourceData"];
[d setObject:[Number numberWithDouble:kAppleLosslessFormatFlag_32BitSourceData] forKey:@"kAppleLosslessFormatFlag_32BitSourceData"];
[d setObject:[Number numberWithDouble:kAudioAggregateDeviceClassID] forKey:@"kAudioAggregateDeviceClassID"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyActiveSubDeviceList] forKey:@"kAudioAggregateDevicePropertyActiveSubDeviceList"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyComposition] forKey:@"kAudioAggregateDevicePropertyComposition"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyFullSubDeviceList] forKey:@"kAudioAggregateDevicePropertyFullSubDeviceList"];
[d setObject:[Number numberWithDouble:kAudioAggregateDevicePropertyMasterSubDevice] forKey:@"kAudioAggregateDevicePropertyMasterSubDevice"];
[d setObject:[Number numberWithDouble:kAudioBooleanControlClassID] forKey:@"kAudioBooleanControlClassID"];
[d setObject:[Number numberWithDouble:kAudioBooleanControlPropertyValue] forKey:@"kAudioBooleanControlPropertyValue"];
[d setObject:[Number numberWithDouble:kAudioBootChimeVolumeControlClassID] forKey:@"kAudioBootChimeVolumeControlClassID"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_Center] forKey:@"kAudioChannelBit_Center"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_CenterSurround] forKey:@"kAudioChannelBit_CenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LFEScreen] forKey:@"kAudioChannelBit_LFEScreen"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_Left] forKey:@"kAudioChannelBit_Left"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LeftCenter] forKey:@"kAudioChannelBit_LeftCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LeftSurround] forKey:@"kAudioChannelBit_LeftSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_LeftSurroundDirect] forKey:@"kAudioChannelBit_LeftSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_Right] forKey:@"kAudioChannelBit_Right"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_RightCenter] forKey:@"kAudioChannelBit_RightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_RightSurround] forKey:@"kAudioChannelBit_RightSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_RightSurroundDirect] forKey:@"kAudioChannelBit_RightSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopBackCenter] forKey:@"kAudioChannelBit_TopBackCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopBackLeft] forKey:@"kAudioChannelBit_TopBackLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopBackRight] forKey:@"kAudioChannelBit_TopBackRight"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_TopCenterSurround] forKey:@"kAudioChannelBit_TopCenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_VerticalHeightCenter] forKey:@"kAudioChannelBit_VerticalHeightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_VerticalHeightLeft] forKey:@"kAudioChannelBit_VerticalHeightLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelBit_VerticalHeightRight] forKey:@"kAudioChannelBit_VerticalHeightRight"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_Azimuth] forKey:@"kAudioChannelCoordinates_Azimuth"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_BackFront] forKey:@"kAudioChannelCoordinates_BackFront"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_Distance] forKey:@"kAudioChannelCoordinates_Distance"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_DownUp] forKey:@"kAudioChannelCoordinates_DownUp"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_Elevation] forKey:@"kAudioChannelCoordinates_Elevation"];
[d setObject:[Number numberWithDouble:kAudioChannelCoordinates_LeftRight] forKey:@"kAudioChannelCoordinates_LeftRight"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_AllOff] forKey:@"kAudioChannelFlags_AllOff"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_Meters] forKey:@"kAudioChannelFlags_Meters"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_RectangularCoordinates] forKey:@"kAudioChannelFlags_RectangularCoordinates"];
[d setObject:[Number numberWithDouble:kAudioChannelFlags_SphericalCoordinates] forKey:@"kAudioChannelFlags_SphericalCoordinates"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_W] forKey:@"kAudioChannelLabel_Ambisonic_W"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_X] forKey:@"kAudioChannelLabel_Ambisonic_X"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_Y] forKey:@"kAudioChannelLabel_Ambisonic_Y"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Ambisonic_Z] forKey:@"kAudioChannelLabel_Ambisonic_Z"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Center] forKey:@"kAudioChannelLabel_Center"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_CenterSurround] forKey:@"kAudioChannelLabel_CenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_CenterSurroundDirect] forKey:@"kAudioChannelLabel_CenterSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_ClickTrack] forKey:@"kAudioChannelLabel_ClickTrack"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_DialogCentricMix] forKey:@"kAudioChannelLabel_DialogCentricMix"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete] forKey:@"kAudioChannelLabel_Discrete"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_0] forKey:@"kAudioChannelLabel_Discrete_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_1] forKey:@"kAudioChannelLabel_Discrete_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_10] forKey:@"kAudioChannelLabel_Discrete_10"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_11] forKey:@"kAudioChannelLabel_Discrete_11"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_12] forKey:@"kAudioChannelLabel_Discrete_12"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_13] forKey:@"kAudioChannelLabel_Discrete_13"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_14] forKey:@"kAudioChannelLabel_Discrete_14"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_15] forKey:@"kAudioChannelLabel_Discrete_15"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_2] forKey:@"kAudioChannelLabel_Discrete_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_3] forKey:@"kAudioChannelLabel_Discrete_3"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_4] forKey:@"kAudioChannelLabel_Discrete_4"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_5] forKey:@"kAudioChannelLabel_Discrete_5"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_6] forKey:@"kAudioChannelLabel_Discrete_6"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_65535] forKey:@"kAudioChannelLabel_Discrete_65535"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_7] forKey:@"kAudioChannelLabel_Discrete_7"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_8] forKey:@"kAudioChannelLabel_Discrete_8"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Discrete_9] forKey:@"kAudioChannelLabel_Discrete_9"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_ForeignLanguage] forKey:@"kAudioChannelLabel_ForeignLanguage"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Haptic] forKey:@"kAudioChannelLabel_Haptic"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_HeadphonesLeft] forKey:@"kAudioChannelLabel_HeadphonesLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_HeadphonesRight] forKey:@"kAudioChannelLabel_HeadphonesRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_HearingImpaired] forKey:@"kAudioChannelLabel_HearingImpaired"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LFE2] forKey:@"kAudioChannelLabel_LFE2"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LFEScreen] forKey:@"kAudioChannelLabel_LFEScreen"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Left] forKey:@"kAudioChannelLabel_Left"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftCenter] forKey:@"kAudioChannelLabel_LeftCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftSurround] forKey:@"kAudioChannelLabel_LeftSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftSurroundDirect] forKey:@"kAudioChannelLabel_LeftSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftTotal] forKey:@"kAudioChannelLabel_LeftTotal"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_LeftWide] forKey:@"kAudioChannelLabel_LeftWide"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_MS_Mid] forKey:@"kAudioChannelLabel_MS_Mid"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_MS_Side] forKey:@"kAudioChannelLabel_MS_Side"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Mono] forKey:@"kAudioChannelLabel_Mono"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Narration] forKey:@"kAudioChannelLabel_Narration"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RearSurroundLeft] forKey:@"kAudioChannelLabel_RearSurroundLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RearSurroundRight] forKey:@"kAudioChannelLabel_RearSurroundRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Right] forKey:@"kAudioChannelLabel_Right"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightCenter] forKey:@"kAudioChannelLabel_RightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightSurround] forKey:@"kAudioChannelLabel_RightSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightSurroundDirect] forKey:@"kAudioChannelLabel_RightSurroundDirect"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightTotal] forKey:@"kAudioChannelLabel_RightTotal"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_RightWide] forKey:@"kAudioChannelLabel_RightWide"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopBackCenter] forKey:@"kAudioChannelLabel_TopBackCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopBackLeft] forKey:@"kAudioChannelLabel_TopBackLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopBackRight] forKey:@"kAudioChannelLabel_TopBackRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_TopCenterSurround] forKey:@"kAudioChannelLabel_TopCenterSurround"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Unknown] forKey:@"kAudioChannelLabel_Unknown"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_Unused] forKey:@"kAudioChannelLabel_Unused"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_UseCoordinates] forKey:@"kAudioChannelLabel_UseCoordinates"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_VerticalHeightCenter] forKey:@"kAudioChannelLabel_VerticalHeightCenter"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_VerticalHeightLeft] forKey:@"kAudioChannelLabel_VerticalHeightLeft"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_VerticalHeightRight] forKey:@"kAudioChannelLabel_VerticalHeightRight"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_XY_X] forKey:@"kAudioChannelLabel_XY_X"];
[d setObject:[Number numberWithDouble:kAudioChannelLabel_XY_Y] forKey:@"kAudioChannelLabel_XY_Y"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_3_0] forKey:@"kAudioChannelLayoutTag_AAC_3_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_4_0] forKey:@"kAudioChannelLayoutTag_AAC_4_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_5_0] forKey:@"kAudioChannelLayoutTag_AAC_5_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_5_1] forKey:@"kAudioChannelLayoutTag_AAC_5_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_6_0] forKey:@"kAudioChannelLayoutTag_AAC_6_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_6_1] forKey:@"kAudioChannelLayoutTag_AAC_6_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_7_0] forKey:@"kAudioChannelLayoutTag_AAC_7_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_7_1] forKey:@"kAudioChannelLayoutTag_AAC_7_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_Octagonal] forKey:@"kAudioChannelLayoutTag_AAC_Octagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AAC_Quadraphonic] forKey:@"kAudioChannelLayoutTag_AAC_Quadraphonic"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_1_0_1] forKey:@"kAudioChannelLayoutTag_AC3_1_0_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_2_1_1] forKey:@"kAudioChannelLayoutTag_AC3_2_1_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_0] forKey:@"kAudioChannelLayoutTag_AC3_3_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_0_1] forKey:@"kAudioChannelLayoutTag_AC3_3_0_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_1] forKey:@"kAudioChannelLayoutTag_AC3_3_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AC3_3_1_1] forKey:@"kAudioChannelLayoutTag_AC3_3_1_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Ambisonic_B_Format] forKey:@"kAudioChannelLayoutTag_Ambisonic_B_Format"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_4] forKey:@"kAudioChannelLayoutTag_AudioUnit_4"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_5] forKey:@"kAudioChannelLayoutTag_AudioUnit_5"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_5_0] forKey:@"kAudioChannelLayoutTag_AudioUnit_5_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_5_1] forKey:@"kAudioChannelLayoutTag_AudioUnit_5_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_6] forKey:@"kAudioChannelLayoutTag_AudioUnit_6"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_6_0] forKey:@"kAudioChannelLayoutTag_AudioUnit_6_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_6_1] forKey:@"kAudioChannelLayoutTag_AudioUnit_6_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_0] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_0_Front] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_0_Front"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_1] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_7_1_Front] forKey:@"kAudioChannelLayoutTag_AudioUnit_7_1_Front"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_AudioUnit_8] forKey:@"kAudioChannelLayoutTag_AudioUnit_8"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Binaural] forKey:@"kAudioChannelLayoutTag_Binaural"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Cube] forKey:@"kAudioChannelLayoutTag_Cube"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_0] forKey:@"kAudioChannelLayoutTag_DVD_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_1] forKey:@"kAudioChannelLayoutTag_DVD_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_10] forKey:@"kAudioChannelLayoutTag_DVD_10"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_11] forKey:@"kAudioChannelLayoutTag_DVD_11"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_12] forKey:@"kAudioChannelLayoutTag_DVD_12"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_13] forKey:@"kAudioChannelLayoutTag_DVD_13"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_14] forKey:@"kAudioChannelLayoutTag_DVD_14"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_15] forKey:@"kAudioChannelLayoutTag_DVD_15"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_16] forKey:@"kAudioChannelLayoutTag_DVD_16"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_17] forKey:@"kAudioChannelLayoutTag_DVD_17"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_18] forKey:@"kAudioChannelLayoutTag_DVD_18"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_19] forKey:@"kAudioChannelLayoutTag_DVD_19"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_2] forKey:@"kAudioChannelLayoutTag_DVD_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_20] forKey:@"kAudioChannelLayoutTag_DVD_20"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_3] forKey:@"kAudioChannelLayoutTag_DVD_3"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_4] forKey:@"kAudioChannelLayoutTag_DVD_4"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_5] forKey:@"kAudioChannelLayoutTag_DVD_5"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_6] forKey:@"kAudioChannelLayoutTag_DVD_6"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_7] forKey:@"kAudioChannelLayoutTag_DVD_7"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_8] forKey:@"kAudioChannelLayoutTag_DVD_8"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DVD_9] forKey:@"kAudioChannelLayoutTag_DVD_9"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_DiscreteInOrder] forKey:@"kAudioChannelLayoutTag_DiscreteInOrder"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Emagic_Default_7_1] forKey:@"kAudioChannelLayoutTag_Emagic_Default_7_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Hexagonal] forKey:@"kAudioChannelLayoutTag_Hexagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_1_0] forKey:@"kAudioChannelLayoutTag_ITU_1_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_2_0] forKey:@"kAudioChannelLayoutTag_ITU_2_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_2_1] forKey:@"kAudioChannelLayoutTag_ITU_2_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_2_2] forKey:@"kAudioChannelLayoutTag_ITU_2_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_0] forKey:@"kAudioChannelLayoutTag_ITU_3_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_1] forKey:@"kAudioChannelLayoutTag_ITU_3_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_2] forKey:@"kAudioChannelLayoutTag_ITU_3_2"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_2_1] forKey:@"kAudioChannelLayoutTag_ITU_3_2_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_ITU_3_4_1] forKey:@"kAudioChannelLayoutTag_ITU_3_4_1"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_1_0] forKey:@"kAudioChannelLayoutTag_MPEG_1_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_2_0] forKey:@"kAudioChannelLayoutTag_MPEG_2_0"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_3_0_A] forKey:@"kAudioChannelLayoutTag_MPEG_3_0_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_3_0_B] forKey:@"kAudioChannelLayoutTag_MPEG_3_0_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_4_0_A] forKey:@"kAudioChannelLayoutTag_MPEG_4_0_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_4_0_B] forKey:@"kAudioChannelLayoutTag_MPEG_4_0_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_A] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_B] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_C] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_C"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_0_D] forKey:@"kAudioChannelLayoutTag_MPEG_5_0_D"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_A] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_B] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_C] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_C"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_5_1_D] forKey:@"kAudioChannelLayoutTag_MPEG_5_1_D"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_6_1_A] forKey:@"kAudioChannelLayoutTag_MPEG_6_1_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_7_1_A] forKey:@"kAudioChannelLayoutTag_MPEG_7_1_A"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_7_1_B] forKey:@"kAudioChannelLayoutTag_MPEG_7_1_B"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MPEG_7_1_C] forKey:@"kAudioChannelLayoutTag_MPEG_7_1_C"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MatrixStereo] forKey:@"kAudioChannelLayoutTag_MatrixStereo"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_MidSide] forKey:@"kAudioChannelLayoutTag_MidSide"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Mono] forKey:@"kAudioChannelLayoutTag_Mono"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Octagonal] forKey:@"kAudioChannelLayoutTag_Octagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Pentagonal] forKey:@"kAudioChannelLayoutTag_Pentagonal"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Quadraphonic] forKey:@"kAudioChannelLayoutTag_Quadraphonic"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_SMPTE_DTV] forKey:@"kAudioChannelLayoutTag_SMPTE_DTV"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Stereo] forKey:@"kAudioChannelLayoutTag_Stereo"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_StereoHeadphones] forKey:@"kAudioChannelLayoutTag_StereoHeadphones"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_TMH_10_2_full] forKey:@"kAudioChannelLayoutTag_TMH_10_2_full"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_TMH_10_2_std] forKey:@"kAudioChannelLayoutTag_TMH_10_2_std"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_Unknown] forKey:@"kAudioChannelLayoutTag_Unknown"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_UseChannelBitmap] forKey:@"kAudioChannelLayoutTag_UseChannelBitmap"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_UseChannelDescriptions] forKey:@"kAudioChannelLayoutTag_UseChannelDescriptions"];
[d setObject:[Number numberWithDouble:kAudioChannelLayoutTag_XY] forKey:@"kAudioChannelLayoutTag_XY"];
[d setObject:[Number numberWithDouble:kAudioClockSourceControlClassID] forKey:@"kAudioClockSourceControlClassID"];
[d setObject:[Number numberWithDouble:kAudioClockSourceControlPropertyItemKind] forKey:@"kAudioClockSourceControlPropertyItemKind"];
[d setObject:[Number numberWithDouble:kAudioControlClassID] forKey:@"kAudioControlClassID"];
[d setObject:[Number numberWithDouble:kAudioControlPropertyElement] forKey:@"kAudioControlPropertyElement"];
[d setObject:[Number numberWithDouble:kAudioControlPropertyScope] forKey:@"kAudioControlPropertyScope"];
[d setObject:[Number numberWithDouble:kAudioControlPropertyVariant] forKey:@"kAudioControlPropertyVariant"];
[d setObject:[Number numberWithDouble:kAudioDataDestinationControlClassID] forKey:@"kAudioDataDestinationControlClassID"];
[d setObject:[Number numberWithDouble:kAudioDataSourceControlClassID] forKey:@"kAudioDataSourceControlClassID"];
[d setObject:[Number numberWithDouble:kAudioDeviceClassID] forKey:@"kAudioDeviceClassID"];
[d setObject:[Number numberWithDouble:kAudioDevicePermissionsError] forKey:@"kAudioDevicePermissionsError"];
[d setObject:[Number numberWithDouble:kAudioDeviceProcessorOverload] forKey:@"kAudioDeviceProcessorOverload"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyActualSampleRate] forKey:@"kAudioDevicePropertyActualSampleRate"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyAvailableNominalSampleRates] forKey:@"kAudioDevicePropertyAvailableNominalSampleRates"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferFrameSize] forKey:@"kAudioDevicePropertyBufferFrameSize"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferFrameSizeRange] forKey:@"kAudioDevicePropertyBufferFrameSizeRange"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferSize] forKey:@"kAudioDevicePropertyBufferSize"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyBufferSizeRange] forKey:@"kAudioDevicePropertyBufferSizeRange"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelCategoryName] forKey:@"kAudioDevicePropertyChannelCategoryName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelCategoryNameCFString] forKey:@"kAudioDevicePropertyChannelCategoryNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelName] forKey:@"kAudioDevicePropertyChannelName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNameCFString] forKey:@"kAudioDevicePropertyChannelNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevel] forKey:@"kAudioDevicePropertyChannelNominalLineLevel"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevelNameForID] forKey:@"kAudioDevicePropertyChannelNominalLineLevelNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString] forKey:@"kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNominalLineLevels] forKey:@"kAudioDevicePropertyChannelNominalLineLevels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNumberName] forKey:@"kAudioDevicePropertyChannelNumberName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyChannelNumberNameCFString] forKey:@"kAudioDevicePropertyChannelNumberNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockDomain] forKey:@"kAudioDevicePropertyClockDomain"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSource] forKey:@"kAudioDevicePropertyClockSource"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSourceKindForID] forKey:@"kAudioDevicePropertyClockSourceKindForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSourceNameForID] forKey:@"kAudioDevicePropertyClockSourceNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSourceNameForIDCFString] forKey:@"kAudioDevicePropertyClockSourceNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyClockSources] forKey:@"kAudioDevicePropertyClockSources"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyConfigurationApplication] forKey:@"kAudioDevicePropertyConfigurationApplication"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSource] forKey:@"kAudioDevicePropertyDataSource"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSourceNameForID] forKey:@"kAudioDevicePropertyDataSourceNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSourceNameForIDCFString] forKey:@"kAudioDevicePropertyDataSourceNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDataSources] forKey:@"kAudioDevicePropertyDataSources"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceCanBeDefaultDevice] forKey:@"kAudioDevicePropertyDeviceCanBeDefaultDevice"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceCanBeDefaultSystemDevice] forKey:@"kAudioDevicePropertyDeviceCanBeDefaultSystemDevice"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceHasChanged] forKey:@"kAudioDevicePropertyDeviceHasChanged"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceIsAlive] forKey:@"kAudioDevicePropertyDeviceIsAlive"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceIsRunning] forKey:@"kAudioDevicePropertyDeviceIsRunning"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceIsRunningSomewhere] forKey:@"kAudioDevicePropertyDeviceIsRunningSomewhere"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceManufacturer] forKey:@"kAudioDevicePropertyDeviceManufacturer"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceManufacturerCFString] forKey:@"kAudioDevicePropertyDeviceManufacturerCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceName] forKey:@"kAudioDevicePropertyDeviceName"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceNameCFString] forKey:@"kAudioDevicePropertyDeviceNameCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDeviceUID] forKey:@"kAudioDevicePropertyDeviceUID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyDriverShouldOwniSub] forKey:@"kAudioDevicePropertyDriverShouldOwniSub"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyHogMode] forKey:@"kAudioDevicePropertyHogMode"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIOCycleUsage] forKey:@"kAudioDevicePropertyIOCycleUsage"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIOProcStreamUsage] forKey:@"kAudioDevicePropertyIOProcStreamUsage"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIcon] forKey:@"kAudioDevicePropertyIcon"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyIsHidden] forKey:@"kAudioDevicePropertyIsHidden"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyJackIsConnected] forKey:@"kAudioDevicePropertyJackIsConnected"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyLatency] forKey:@"kAudioDevicePropertyLatency"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyModelUID] forKey:@"kAudioDevicePropertyModelUID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyMute] forKey:@"kAudioDevicePropertyMute"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyNominalSampleRate] forKey:@"kAudioDevicePropertyNominalSampleRate"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThru] forKey:@"kAudioDevicePropertyPlayThru"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestination] forKey:@"kAudioDevicePropertyPlayThruDestination"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestinationNameForID] forKey:@"kAudioDevicePropertyPlayThruDestinationNameForID"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestinationNameForIDCFString] forKey:@"kAudioDevicePropertyPlayThruDestinationNameForIDCFString"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruDestinations] forKey:@"kAudioDevicePropertyPlayThruDestinations"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruSolo] forKey:@"kAudioDevicePropertyPlayThruSolo"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruStereoPan] forKey:@"kAudioDevicePropertyPlayThruStereoPan"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruStereoPanChannels] forKey:@"kAudioDevicePropertyPlayThruStereoPanChannels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeDecibels] forKey:@"kAudioDevicePropertyPlayThruVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeDecibelsToScalar] forKey:@"kAudioDevicePropertyPlayThruVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeRangeDecibels] forKey:@"kAudioDevicePropertyPlayThruVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeScalar] forKey:@"kAudioDevicePropertyPlayThruVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlayThruVolumeScalarToDecibels] forKey:@"kAudioDevicePropertyPlayThruVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPlugIn] forKey:@"kAudioDevicePropertyPlugIn"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPreferredChannelLayout] forKey:@"kAudioDevicePropertyPreferredChannelLayout"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyPreferredChannelsForStereo] forKey:@"kAudioDevicePropertyPreferredChannelsForStereo"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyRegisterBufferList] forKey:@"kAudioDevicePropertyRegisterBufferList"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyRelatedDevices] forKey:@"kAudioDevicePropertyRelatedDevices"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySafetyOffset] forKey:@"kAudioDevicePropertySafetyOffset"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyScopeInput] forKey:@"kAudioDevicePropertyScopeInput"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyScopeOutput] forKey:@"kAudioDevicePropertyScopeOutput"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyScopePlayThrough] forKey:@"kAudioDevicePropertyScopePlayThrough"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySolo] forKey:@"kAudioDevicePropertySolo"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStereoPan] forKey:@"kAudioDevicePropertyStereoPan"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStereoPanChannels] forKey:@"kAudioDevicePropertyStereoPanChannels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamConfiguration] forKey:@"kAudioDevicePropertyStreamConfiguration"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormat] forKey:@"kAudioDevicePropertyStreamFormat"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormatMatch] forKey:@"kAudioDevicePropertyStreamFormatMatch"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormatSupported] forKey:@"kAudioDevicePropertyStreamFormatSupported"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreamFormats] forKey:@"kAudioDevicePropertyStreamFormats"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyStreams] forKey:@"kAudioDevicePropertyStreams"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubMute] forKey:@"kAudioDevicePropertySubMute"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeDecibels] forKey:@"kAudioDevicePropertySubVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeDecibelsToScalar] forKey:@"kAudioDevicePropertySubVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeRangeDecibels] forKey:@"kAudioDevicePropertySubVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeScalar] forKey:@"kAudioDevicePropertySubVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySubVolumeScalarToDecibels] forKey:@"kAudioDevicePropertySubVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertySupportsMixing] forKey:@"kAudioDevicePropertySupportsMixing"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyTransportType] forKey:@"kAudioDevicePropertyTransportType"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyUsesVariableBufferFrameSizes] forKey:@"kAudioDevicePropertyUsesVariableBufferFrameSizes"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeDecibels] forKey:@"kAudioDevicePropertyVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeDecibelsToScalar] forKey:@"kAudioDevicePropertyVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeRangeDecibels] forKey:@"kAudioDevicePropertyVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeScalar] forKey:@"kAudioDevicePropertyVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioDevicePropertyVolumeScalarToDecibels] forKey:@"kAudioDevicePropertyVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioDeviceStartTimeDontConsultDeviceFlag] forKey:@"kAudioDeviceStartTimeDontConsultDeviceFlag"];
[d setObject:[Number numberWithDouble:kAudioDeviceStartTimeDontConsultHALFlag] forKey:@"kAudioDeviceStartTimeDontConsultHALFlag"];
[d setObject:[Number numberWithDouble:kAudioDeviceStartTimeIsInputFlag] forKey:@"kAudioDeviceStartTimeIsInputFlag"];
[d setObject:[Number numberWithDouble:kAudioDeviceTransportTypeAggregate] forKey:@"kAudioDeviceTransportTypeAggregate"];
[d setObject:[Number numberWithDouble:kAudioDeviceTransportTypeAutoAggregate] forKey:@"kAudioDeviceTransportTypeAutoAggregate"];
[d setObject:[Number numberWithDouble:kAudioDeviceUnknown] forKey:@"kAudioDeviceUnknown"];
[d setObject:[Number numberWithDouble:kAudioDeviceUnsupportedFormatError] forKey:@"kAudioDeviceUnsupportedFormatError"];
[d setObject:[Number numberWithDouble:kAudioFormat60958AC3] forKey:@"kAudioFormat60958AC3"];
[d setObject:[Number numberWithDouble:kAudioFormatAC3] forKey:@"kAudioFormatAC3"];
[d setObject:[Number numberWithDouble:kAudioFormatALaw] forKey:@"kAudioFormatALaw"];
[d setObject:[Number numberWithDouble:kAudioFormatAMR] forKey:@"kAudioFormatAMR"];
[d setObject:[Number numberWithDouble:kAudioFormatAppleIMA4] forKey:@"kAudioFormatAppleIMA4"];
[d setObject:[Number numberWithDouble:kAudioFormatAppleLossless] forKey:@"kAudioFormatAppleLossless"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsAlignedHigh] forKey:@"kAudioFormatFlagIsAlignedHigh"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsBigEndian] forKey:@"kAudioFormatFlagIsBigEndian"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsFloat] forKey:@"kAudioFormatFlagIsFloat"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsNonInterleaved] forKey:@"kAudioFormatFlagIsNonInterleaved"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsNonMixable] forKey:@"kAudioFormatFlagIsNonMixable"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsPacked] forKey:@"kAudioFormatFlagIsPacked"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagIsSignedInteger] forKey:@"kAudioFormatFlagIsSignedInteger"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsAreAllClear] forKey:@"kAudioFormatFlagsAreAllClear"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsCanonical] forKey:@"kAudioFormatFlagsCanonical"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsNativeEndian] forKey:@"kAudioFormatFlagsNativeEndian"];
[d setObject:[Number numberWithDouble:kAudioFormatFlagsNativeFloatPacked] forKey:@"kAudioFormatFlagsNativeFloatPacked"];
[d setObject:[Number numberWithDouble:kAudioFormatLinearPCM] forKey:@"kAudioFormatLinearPCM"];
[d setObject:[Number numberWithDouble:kAudioFormatMACE3] forKey:@"kAudioFormatMACE3"];
[d setObject:[Number numberWithDouble:kAudioFormatMACE6] forKey:@"kAudioFormatMACE6"];
[d setObject:[Number numberWithDouble:kAudioFormatMIDIStream] forKey:@"kAudioFormatMIDIStream"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC] forKey:@"kAudioFormatMPEG4AAC"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_HE] forKey:@"kAudioFormatMPEG4AAC_HE"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_HE_V2] forKey:@"kAudioFormatMPEG4AAC_HE_V2"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_LD] forKey:@"kAudioFormatMPEG4AAC_LD"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4AAC_Spatial] forKey:@"kAudioFormatMPEG4AAC_Spatial"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4CELP] forKey:@"kAudioFormatMPEG4CELP"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4HVXC] forKey:@"kAudioFormatMPEG4HVXC"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEG4TwinVQ] forKey:@"kAudioFormatMPEG4TwinVQ"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEGLayer1] forKey:@"kAudioFormatMPEGLayer1"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEGLayer2] forKey:@"kAudioFormatMPEGLayer2"];
[d setObject:[Number numberWithDouble:kAudioFormatMPEGLayer3] forKey:@"kAudioFormatMPEGLayer3"];
[d setObject:[Number numberWithDouble:kAudioFormatParameterValueStream] forKey:@"kAudioFormatParameterValueStream"];
[d setObject:[Number numberWithDouble:kAudioFormatQDesign] forKey:@"kAudioFormatQDesign"];
[d setObject:[Number numberWithDouble:kAudioFormatQDesign2] forKey:@"kAudioFormatQDesign2"];
[d setObject:[Number numberWithDouble:kAudioFormatQUALCOMM] forKey:@"kAudioFormatQUALCOMM"];
[d setObject:[Number numberWithDouble:kAudioFormatTimeCode] forKey:@"kAudioFormatTimeCode"];
[d setObject:[Number numberWithDouble:kAudioFormatULaw] forKey:@"kAudioFormatULaw"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadDeviceError] forKey:@"kAudioHardwareBadDeviceError"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadObjectError] forKey:@"kAudioHardwareBadObjectError"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadPropertySizeError] forKey:@"kAudioHardwareBadPropertySizeError"];
[d setObject:[Number numberWithDouble:kAudioHardwareBadStreamError] forKey:@"kAudioHardwareBadStreamError"];
[d setObject:[Number numberWithDouble:kAudioHardwareIllegalOperationError] forKey:@"kAudioHardwareIllegalOperationError"];
[d setObject:[Number numberWithDouble:kAudioHardwareNoError] forKey:@"kAudioHardwareNoError"];
[d setObject:[Number numberWithDouble:kAudioHardwareNotRunningError] forKey:@"kAudioHardwareNotRunningError"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeDecibels] forKey:@"kAudioHardwarePropertyBootChimeVolumeDecibels"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar] forKey:@"kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction] forKey:@"kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeRangeDecibels] forKey:@"kAudioHardwarePropertyBootChimeVolumeRangeDecibels"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeScalar] forKey:@"kAudioHardwarePropertyBootChimeVolumeScalar"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyBootChimeVolumeScalarToDecibels] forKey:@"kAudioHardwarePropertyBootChimeVolumeScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDefaultInputDevice] forKey:@"kAudioHardwarePropertyDefaultInputDevice"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDefaultOutputDevice] forKey:@"kAudioHardwarePropertyDefaultOutputDevice"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDefaultSystemOutputDevice] forKey:@"kAudioHardwarePropertyDefaultSystemOutputDevice"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDeviceForUID] forKey:@"kAudioHardwarePropertyDeviceForUID"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyDevices] forKey:@"kAudioHardwarePropertyDevices"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyHogModeIsAllowed] forKey:@"kAudioHardwarePropertyHogModeIsAllowed"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyIsInitingOrExiting] forKey:@"kAudioHardwarePropertyIsInitingOrExiting"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyPlugInForBundleID] forKey:@"kAudioHardwarePropertyPlugInForBundleID"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyProcessIsAudible] forKey:@"kAudioHardwarePropertyProcessIsAudible"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyProcessIsMaster] forKey:@"kAudioHardwarePropertyProcessIsMaster"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyRunLoop] forKey:@"kAudioHardwarePropertyRunLoop"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertySleepingIsAllowed] forKey:@"kAudioHardwarePropertySleepingIsAllowed"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyUnloadingIsAllowed] forKey:@"kAudioHardwarePropertyUnloadingIsAllowed"];
[d setObject:[Number numberWithDouble:kAudioHardwarePropertyUserSessionIsActiveOrHeadless] forKey:@"kAudioHardwarePropertyUserSessionIsActiveOrHeadless"];
[d setObject:[Number numberWithDouble:kAudioHardwareUnknownPropertyError] forKey:@"kAudioHardwareUnknownPropertyError"];
[d setObject:[Number numberWithDouble:kAudioHardwareUnspecifiedError] forKey:@"kAudioHardwareUnspecifiedError"];
[d setObject:[Number numberWithDouble:kAudioHardwareUnsupportedOperationError] forKey:@"kAudioHardwareUnsupportedOperationError"];
[d setObject:[Number numberWithDouble:kAudioISubOwnerControlClassID] forKey:@"kAudioISubOwnerControlClassID"];
[d setObject:[Number numberWithDouble:kAudioJackControlClassID] forKey:@"kAudioJackControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLFEMuteControlClassID] forKey:@"kAudioLFEMuteControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLFEVolumeControlClassID] forKey:@"kAudioLFEVolumeControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLevelControlClassID] forKey:@"kAudioLevelControlClassID"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyConvertDecibelsToScalar] forKey:@"kAudioLevelControlPropertyConvertDecibelsToScalar"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyConvertScalarToDecibels] forKey:@"kAudioLevelControlPropertyConvertScalarToDecibels"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyDecibelRange] forKey:@"kAudioLevelControlPropertyDecibelRange"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyDecibelValue] forKey:@"kAudioLevelControlPropertyDecibelValue"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyDecibelsToScalarTransferFunction] forKey:@"kAudioLevelControlPropertyDecibelsToScalarTransferFunction"];
[d setObject:[Number numberWithDouble:kAudioLevelControlPropertyScalarValue] forKey:@"kAudioLevelControlPropertyScalarValue"];
[d setObject:[Number numberWithDouble:kAudioLineLevelControlClassID] forKey:@"kAudioLineLevelControlClassID"];
[d setObject:[Number numberWithDouble:kAudioMuteControlClassID] forKey:@"kAudioMuteControlClassID"];
[d setObject:[Number numberWithDouble:kAudioObjectClassID] forKey:@"kAudioObjectClassID"];
[d setObject:[Number numberWithDouble:kAudioObjectClassIDWildcard] forKey:@"kAudioObjectClassIDWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyClass] forKey:@"kAudioObjectPropertyClass"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyCreator] forKey:@"kAudioObjectPropertyCreator"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementCategoryName] forKey:@"kAudioObjectPropertyElementCategoryName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementMaster] forKey:@"kAudioObjectPropertyElementMaster"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementName] forKey:@"kAudioObjectPropertyElementName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementNumberName] forKey:@"kAudioObjectPropertyElementNumberName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyElementWildcard] forKey:@"kAudioObjectPropertyElementWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyListenerAdded] forKey:@"kAudioObjectPropertyListenerAdded"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyListenerRemoved] forKey:@"kAudioObjectPropertyListenerRemoved"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyManufacturer] forKey:@"kAudioObjectPropertyManufacturer"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyName] forKey:@"kAudioObjectPropertyName"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyOwnedObjects] forKey:@"kAudioObjectPropertyOwnedObjects"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyOwner] forKey:@"kAudioObjectPropertyOwner"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyScopeGlobal] forKey:@"kAudioObjectPropertyScopeGlobal"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertyScopeWildcard] forKey:@"kAudioObjectPropertyScopeWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectPropertySelectorWildcard] forKey:@"kAudioObjectPropertySelectorWildcard"];
[d setObject:[Number numberWithDouble:kAudioObjectSystemObject] forKey:@"kAudioObjectSystemObject"];
[d setObject:[Number numberWithDouble:kAudioObjectUnknown] forKey:@"kAudioObjectUnknown"];
[d setObject:[Number numberWithDouble:kAudioPlugInClassID] forKey:@"kAudioPlugInClassID"];
[d setObject:[Number numberWithDouble:kAudioPlugInCreateAggregateDevice] forKey:@"kAudioPlugInCreateAggregateDevice"];
[d setObject:[Number numberWithDouble:kAudioPlugInDestroyAggregateDevice] forKey:@"kAudioPlugInDestroyAggregateDevice"];
[d setObject:[Number numberWithDouble:kAudioPlugInPropertyBundleID] forKey:@"kAudioPlugInPropertyBundleID"];
[d setObject:[Number numberWithDouble:kAudioPropertyWildcardChannel] forKey:@"kAudioPropertyWildcardChannel"];
[d setObject:[Number numberWithDouble:kAudioPropertyWildcardPropertyID] forKey:@"kAudioPropertyWildcardPropertyID"];
[d setObject:[Number numberWithDouble:kAudioPropertyWildcardSection] forKey:@"kAudioPropertyWildcardSection"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlClassID] forKey:@"kAudioSelectorControlClassID"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlPropertyAvailableItems] forKey:@"kAudioSelectorControlPropertyAvailableItems"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlPropertyCurrentItem] forKey:@"kAudioSelectorControlPropertyCurrentItem"];
[d setObject:[Number numberWithDouble:kAudioSelectorControlPropertyItemName] forKey:@"kAudioSelectorControlPropertyItemName"];
[d setObject:[Number numberWithDouble:kAudioSoloControlClassID] forKey:@"kAudioSoloControlClassID"];
[d setObject:[Number numberWithDouble:kAudioStereoPanControlClassID] forKey:@"kAudioStereoPanControlClassID"];
[d setObject:[Number numberWithDouble:kAudioStereoPanControlPropertyPanningChannels] forKey:@"kAudioStereoPanControlPropertyPanningChannels"];
[d setObject:[Number numberWithDouble:kAudioStereoPanControlPropertyValue] forKey:@"kAudioStereoPanControlPropertyValue"];
[d setObject:[Number numberWithDouble:kAudioStreamAnyRate] forKey:@"kAudioStreamAnyRate"];
[d setObject:[Number numberWithDouble:kAudioStreamClassID] forKey:@"kAudioStreamClassID"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyAvailablePhysicalFormats] forKey:@"kAudioStreamPropertyAvailablePhysicalFormats"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyAvailableVirtualFormats] forKey:@"kAudioStreamPropertyAvailableVirtualFormats"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyDirection] forKey:@"kAudioStreamPropertyDirection"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyLatency] forKey:@"kAudioStreamPropertyLatency"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyOwningDevice] forKey:@"kAudioStreamPropertyOwningDevice"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormat] forKey:@"kAudioStreamPropertyPhysicalFormat"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormatMatch] forKey:@"kAudioStreamPropertyPhysicalFormatMatch"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormatSupported] forKey:@"kAudioStreamPropertyPhysicalFormatSupported"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyPhysicalFormats] forKey:@"kAudioStreamPropertyPhysicalFormats"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyStartingChannel] forKey:@"kAudioStreamPropertyStartingChannel"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyTerminalType] forKey:@"kAudioStreamPropertyTerminalType"];
[d setObject:[Number numberWithDouble:kAudioStreamPropertyVirtualFormat] forKey:@"kAudioStreamPropertyVirtualFormat"];
[d setObject:[Number numberWithDouble:kAudioStreamUnknown] forKey:@"kAudioStreamUnknown"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceClassID] forKey:@"kAudioSubDeviceClassID"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationHighQuality] forKey:@"kAudioSubDeviceDriftCompensationHighQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationLowQuality] forKey:@"kAudioSubDeviceDriftCompensationLowQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationMaxQuality] forKey:@"kAudioSubDeviceDriftCompensationMaxQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationMediumQuality] forKey:@"kAudioSubDeviceDriftCompensationMediumQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDeviceDriftCompensationMinQuality] forKey:@"kAudioSubDeviceDriftCompensationMinQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDevicePropertyDriftCompensation] forKey:@"kAudioSubDevicePropertyDriftCompensation"];
[d setObject:[Number numberWithDouble:kAudioSubDevicePropertyDriftCompensationQuality] forKey:@"kAudioSubDevicePropertyDriftCompensationQuality"];
[d setObject:[Number numberWithDouble:kAudioSubDevicePropertyExtraLatency] forKey:@"kAudioSubDevicePropertyExtraLatency"];
[d setObject:[Number numberWithDouble:kAudioSystemObjectClassID] forKey:@"kAudioSystemObjectClassID"];
[d setObject:[Number numberWithDouble:kAudioTimeStampHostTimeValid] forKey:@"kAudioTimeStampHostTimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampRateScalarValid] forKey:@"kAudioTimeStampRateScalarValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampSMPTETimeValid] forKey:@"kAudioTimeStampSMPTETimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampSampleHostTimeValid] forKey:@"kAudioTimeStampSampleHostTimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampSampleTimeValid] forKey:@"kAudioTimeStampSampleTimeValid"];
[d setObject:[Number numberWithDouble:kAudioTimeStampWordClockTimeValid] forKey:@"kAudioTimeStampWordClockTimeValid"];
[d setObject:[Number numberWithDouble:kAudioVolumeControlClassID] forKey:@"kAudioVolumeControlClassID"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsAlignedHigh] forKey:@"kLinearPCMFormatFlagIsAlignedHigh"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsBigEndian] forKey:@"kLinearPCMFormatFlagIsBigEndian"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsFloat] forKey:@"kLinearPCMFormatFlagIsFloat"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsNonInterleaved] forKey:@"kLinearPCMFormatFlagIsNonInterleaved"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsNonMixable] forKey:@"kLinearPCMFormatFlagIsNonMixable"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsPacked] forKey:@"kLinearPCMFormatFlagIsPacked"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagIsSignedInteger] forKey:@"kLinearPCMFormatFlagIsSignedInteger"];
[d setObject:[Number numberWithDouble:kLinearPCMFormatFlagsAreAllClear] forKey:@"kLinearPCMFormatFlagsAreAllClear"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_LC] forKey:@"kMPEG4Object_AAC_LC"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_LTP] forKey:@"kMPEG4Object_AAC_LTP"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_Main] forKey:@"kMPEG4Object_AAC_Main"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_SBR] forKey:@"kMPEG4Object_AAC_SBR"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_SSR] forKey:@"kMPEG4Object_AAC_SSR"];
[d setObject:[Number numberWithDouble:kMPEG4Object_AAC_Scalable] forKey:@"kMPEG4Object_AAC_Scalable"];
[d setObject:[Number numberWithDouble:kMPEG4Object_CELP] forKey:@"kMPEG4Object_CELP"];
[d setObject:[Number numberWithDouble:kMPEG4Object_HVXC] forKey:@"kMPEG4Object_HVXC"];
[d setObject:[Number numberWithDouble:kMPEG4Object_TwinVQ] forKey:@"kMPEG4Object_TwinVQ"];
[d setObject:[Number numberWithDouble:kSMPTETimeRunning] forKey:@"kSMPTETimeRunning"];
[d setObject:[Number numberWithDouble:kSMPTETimeType2398] forKey:@"kSMPTETimeType2398"];
[d setObject:[Number numberWithDouble:kSMPTETimeType24] forKey:@"kSMPTETimeType24"];
[d setObject:[Number numberWithDouble:kSMPTETimeType25] forKey:@"kSMPTETimeType25"];
[d setObject:[Number numberWithDouble:kSMPTETimeType2997] forKey:@"kSMPTETimeType2997"];
[d setObject:[Number numberWithDouble:kSMPTETimeType2997Drop] forKey:@"kSMPTETimeType2997Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeType30] forKey:@"kSMPTETimeType30"];
[d setObject:[Number numberWithDouble:kSMPTETimeType30Drop] forKey:@"kSMPTETimeType30Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeType50] forKey:@"kSMPTETimeType50"];
[d setObject:[Number numberWithDouble:kSMPTETimeType5994] forKey:@"kSMPTETimeType5994"];
[d setObject:[Number numberWithDouble:kSMPTETimeType5994Drop] forKey:@"kSMPTETimeType5994Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeType60] forKey:@"kSMPTETimeType60"];
[d setObject:[Number numberWithDouble:kSMPTETimeType60Drop] forKey:@"kSMPTETimeType60Drop"];
[d setObject:[Number numberWithDouble:kSMPTETimeValid] forKey:@"kSMPTETimeValid"];
[d setObject:[Number numberWithDouble:AUViewParametersDisplayFlag] forKey:@"AUViewParametersDisplayFlag"];
[d setObject:[Number numberWithDouble:AUViewPropertiesDisplayFlag] forKey:@"AUViewPropertiesDisplayFlag"];
[d setObject:[Number numberWithDouble:AUViewTitleDisplayFlag] forKey:@"AUViewTitleDisplayFlag"];
[d setObject:[Number numberWithDouble:AUViewParametersDisplayFlag] forKey:@"AUViewParametersDisplayFlag"];
[d setObject:[Number numberWithDouble:AUViewPropertiesDisplayFlag] forKey:@"AUViewPropertiesDisplayFlag"];
[d setObject:[Number numberWithDouble:AUViewTitleDisplayFlag] forKey:@"AUViewTitleDisplayFlag"];
if ([NSAddedPersistentStoresKey isKindOfClass:[NSString class]]) [d setObject:NSAddedPersistentStoresKey forKey:@"NSAddedPersistentStoresKey"]; else NSLog([@"Can't initialize NSAddedPersistentStoresKey with object " stringByAppendingString:[NSAddedPersistentStoresKey description]]);
if ([NSAffectedObjectsErrorKey isKindOfClass:[NSString class]]) [d setObject:NSAffectedObjectsErrorKey forKey:@"NSAffectedObjectsErrorKey"]; else NSLog([@"Can't initialize NSAffectedObjectsErrorKey with object " stringByAppendingString:[NSAffectedObjectsErrorKey description]]);
if ([NSAffectedStoresErrorKey isKindOfClass:[NSString class]]) [d setObject:NSAffectedStoresErrorKey forKey:@"NSAffectedStoresErrorKey"]; else NSLog([@"Can't initialize NSAffectedStoresErrorKey with object " stringByAppendingString:[NSAffectedStoresErrorKey description]]);
if ([NSBinaryStoreType isKindOfClass:[NSString class]]) [d setObject:NSBinaryStoreType forKey:@"NSBinaryStoreType"]; else NSLog([@"Can't initialize NSBinaryStoreType with object " stringByAppendingString:[NSBinaryStoreType description]]);
[d setObject:[Number numberWithDouble:NSCoreDataVersionNumber] forKey:@"NSCoreDataVersionNumber"];
if ([NSDeletedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSDeletedObjectsKey forKey:@"NSDeletedObjectsKey"]; else NSLog([@"Can't initialize NSDeletedObjectsKey with object " stringByAppendingString:[NSDeletedObjectsKey description]]);
if ([NSDetailedErrorsKey isKindOfClass:[NSString class]]) [d setObject:NSDetailedErrorsKey forKey:@"NSDetailedErrorsKey"]; else NSLog([@"Can't initialize NSDetailedErrorsKey with object " stringByAppendingString:[NSDetailedErrorsKey description]]);
if ([NSErrorMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSErrorMergePolicy forKey:@"NSErrorMergePolicy"]; else NSLog([@"Can't initialize NSErrorMergePolicy with object " stringByAppendingString:[NSErrorMergePolicy description]]);
if ([NSIgnorePersistentStoreVersioningOption isKindOfClass:[NSString class]]) [d setObject:NSIgnorePersistentStoreVersioningOption forKey:@"NSIgnorePersistentStoreVersioningOption"]; else NSLog([@"Can't initialize NSIgnorePersistentStoreVersioningOption with object " stringByAppendingString:[NSIgnorePersistentStoreVersioningOption description]]);
if ([NSInMemoryStoreType isKindOfClass:[NSString class]]) [d setObject:NSInMemoryStoreType forKey:@"NSInMemoryStoreType"]; else NSLog([@"Can't initialize NSInMemoryStoreType with object " stringByAppendingString:[NSInMemoryStoreType description]]);
if ([NSInsertedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSInsertedObjectsKey forKey:@"NSInsertedObjectsKey"]; else NSLog([@"Can't initialize NSInsertedObjectsKey with object " stringByAppendingString:[NSInsertedObjectsKey description]]);
if ([NSInvalidatedAllObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSInvalidatedAllObjectsKey forKey:@"NSInvalidatedAllObjectsKey"]; else NSLog([@"Can't initialize NSInvalidatedAllObjectsKey with object " stringByAppendingString:[NSInvalidatedAllObjectsKey description]]);
if ([NSInvalidatedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSInvalidatedObjectsKey forKey:@"NSInvalidatedObjectsKey"]; else NSLog([@"Can't initialize NSInvalidatedObjectsKey with object " stringByAppendingString:[NSInvalidatedObjectsKey description]]);
if ([NSManagedObjectContextDidSaveNotification isKindOfClass:[NSString class]]) [d setObject:NSManagedObjectContextDidSaveNotification forKey:@"NSManagedObjectContextDidSaveNotification"]; else NSLog([@"Can't initialize NSManagedObjectContextDidSaveNotification with object " stringByAppendingString:[NSManagedObjectContextDidSaveNotification description]]);
if ([NSManagedObjectContextObjectsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSManagedObjectContextObjectsDidChangeNotification forKey:@"NSManagedObjectContextObjectsDidChangeNotification"]; else NSLog([@"Can't initialize NSManagedObjectContextObjectsDidChangeNotification with object " stringByAppendingString:[NSManagedObjectContextObjectsDidChangeNotification description]]);
if ([NSMergeByPropertyObjectTrumpMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSMergeByPropertyObjectTrumpMergePolicy forKey:@"NSMergeByPropertyObjectTrumpMergePolicy"]; else NSLog([@"Can't initialize NSMergeByPropertyObjectTrumpMergePolicy with object " stringByAppendingString:[NSMergeByPropertyObjectTrumpMergePolicy description]]);
if ([NSMergeByPropertyStoreTrumpMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSMergeByPropertyStoreTrumpMergePolicy forKey:@"NSMergeByPropertyStoreTrumpMergePolicy"]; else NSLog([@"Can't initialize NSMergeByPropertyStoreTrumpMergePolicy with object " stringByAppendingString:[NSMergeByPropertyStoreTrumpMergePolicy description]]);
if ([NSMigratePersistentStoresAutomaticallyOption isKindOfClass:[NSString class]]) [d setObject:NSMigratePersistentStoresAutomaticallyOption forKey:@"NSMigratePersistentStoresAutomaticallyOption"]; else NSLog([@"Can't initialize NSMigratePersistentStoresAutomaticallyOption with object " stringByAppendingString:[NSMigratePersistentStoresAutomaticallyOption description]]);
if ([NSMigrationDestinationObjectKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationDestinationObjectKey forKey:@"NSMigrationDestinationObjectKey"]; else NSLog([@"Can't initialize NSMigrationDestinationObjectKey with object " stringByAppendingString:[NSMigrationDestinationObjectKey description]]);
if ([NSMigrationEntityMappingKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationEntityMappingKey forKey:@"NSMigrationEntityMappingKey"]; else NSLog([@"Can't initialize NSMigrationEntityMappingKey with object " stringByAppendingString:[NSMigrationEntityMappingKey description]]);
if ([NSMigrationManagerKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationManagerKey forKey:@"NSMigrationManagerKey"]; else NSLog([@"Can't initialize NSMigrationManagerKey with object " stringByAppendingString:[NSMigrationManagerKey description]]);
if ([NSMigrationPropertyMappingKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationPropertyMappingKey forKey:@"NSMigrationPropertyMappingKey"]; else NSLog([@"Can't initialize NSMigrationPropertyMappingKey with object " stringByAppendingString:[NSMigrationPropertyMappingKey description]]);
if ([NSMigrationSourceObjectKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationSourceObjectKey forKey:@"NSMigrationSourceObjectKey"]; else NSLog([@"Can't initialize NSMigrationSourceObjectKey with object " stringByAppendingString:[NSMigrationSourceObjectKey description]]);
if ([NSOverwriteMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSOverwriteMergePolicy forKey:@"NSOverwriteMergePolicy"]; else NSLog([@"Can't initialize NSOverwriteMergePolicy with object " stringByAppendingString:[NSOverwriteMergePolicy description]]);
if ([NSPersistentStoreCoordinatorStoresDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSPersistentStoreCoordinatorStoresDidChangeNotification forKey:@"NSPersistentStoreCoordinatorStoresDidChangeNotification"]; else NSLog([@"Can't initialize NSPersistentStoreCoordinatorStoresDidChangeNotification with object " stringByAppendingString:[NSPersistentStoreCoordinatorStoresDidChangeNotification description]]);
if ([NSPersistentStoreOSCompatibility isKindOfClass:[NSString class]]) [d setObject:NSPersistentStoreOSCompatibility forKey:@"NSPersistentStoreOSCompatibility"]; else NSLog([@"Can't initialize NSPersistentStoreOSCompatibility with object " stringByAppendingString:[NSPersistentStoreOSCompatibility description]]);
if ([NSPersistentStoreTimeoutOption isKindOfClass:[NSString class]]) [d setObject:NSPersistentStoreTimeoutOption forKey:@"NSPersistentStoreTimeoutOption"]; else NSLog([@"Can't initialize NSPersistentStoreTimeoutOption with object " stringByAppendingString:[NSPersistentStoreTimeoutOption description]]);
if ([NSReadOnlyPersistentStoreOption isKindOfClass:[NSString class]]) [d setObject:NSReadOnlyPersistentStoreOption forKey:@"NSReadOnlyPersistentStoreOption"]; else NSLog([@"Can't initialize NSReadOnlyPersistentStoreOption with object " stringByAppendingString:[NSReadOnlyPersistentStoreOption description]]);
if ([NSRefreshedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSRefreshedObjectsKey forKey:@"NSRefreshedObjectsKey"]; else NSLog([@"Can't initialize NSRefreshedObjectsKey with object " stringByAppendingString:[NSRefreshedObjectsKey description]]);
if ([NSRemovedPersistentStoresKey isKindOfClass:[NSString class]]) [d setObject:NSRemovedPersistentStoresKey forKey:@"NSRemovedPersistentStoresKey"]; else NSLog([@"Can't initialize NSRemovedPersistentStoresKey with object " stringByAppendingString:[NSRemovedPersistentStoresKey description]]);
if ([NSRollbackMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSRollbackMergePolicy forKey:@"NSRollbackMergePolicy"]; else NSLog([@"Can't initialize NSRollbackMergePolicy with object " stringByAppendingString:[NSRollbackMergePolicy description]]);
if ([NSSQLiteErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSSQLiteErrorDomain forKey:@"NSSQLiteErrorDomain"]; else NSLog([@"Can't initialize NSSQLiteErrorDomain with object " stringByAppendingString:[NSSQLiteErrorDomain description]]);
if ([NSSQLitePragmasOption isKindOfClass:[NSString class]]) [d setObject:NSSQLitePragmasOption forKey:@"NSSQLitePragmasOption"]; else NSLog([@"Can't initialize NSSQLitePragmasOption with object " stringByAppendingString:[NSSQLitePragmasOption description]]);
if ([NSSQLiteStoreType isKindOfClass:[NSString class]]) [d setObject:NSSQLiteStoreType forKey:@"NSSQLiteStoreType"]; else NSLog([@"Can't initialize NSSQLiteStoreType with object " stringByAppendingString:[NSSQLiteStoreType description]]);
if ([NSStoreModelVersionHashesKey isKindOfClass:[NSString class]]) [d setObject:NSStoreModelVersionHashesKey forKey:@"NSStoreModelVersionHashesKey"]; else NSLog([@"Can't initialize NSStoreModelVersionHashesKey with object " stringByAppendingString:[NSStoreModelVersionHashesKey description]]);
if ([NSStoreModelVersionIdentifiersKey isKindOfClass:[NSString class]]) [d setObject:NSStoreModelVersionIdentifiersKey forKey:@"NSStoreModelVersionIdentifiersKey"]; else NSLog([@"Can't initialize NSStoreModelVersionIdentifiersKey with object " stringByAppendingString:[NSStoreModelVersionIdentifiersKey description]]);
if ([NSStoreTypeKey isKindOfClass:[NSString class]]) [d setObject:NSStoreTypeKey forKey:@"NSStoreTypeKey"]; else NSLog([@"Can't initialize NSStoreTypeKey with object " stringByAppendingString:[NSStoreTypeKey description]]);
if ([NSStoreUUIDKey isKindOfClass:[NSString class]]) [d setObject:NSStoreUUIDKey forKey:@"NSStoreUUIDKey"]; else NSLog([@"Can't initialize NSStoreUUIDKey with object " stringByAppendingString:[NSStoreUUIDKey description]]);
if ([NSUUIDChangedPersistentStoresKey isKindOfClass:[NSString class]]) [d setObject:NSUUIDChangedPersistentStoresKey forKey:@"NSUUIDChangedPersistentStoresKey"]; else NSLog([@"Can't initialize NSUUIDChangedPersistentStoresKey with object " stringByAppendingString:[NSUUIDChangedPersistentStoresKey description]]);
if ([NSUpdatedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSUpdatedObjectsKey forKey:@"NSUpdatedObjectsKey"]; else NSLog([@"Can't initialize NSUpdatedObjectsKey with object " stringByAppendingString:[NSUpdatedObjectsKey description]]);
if ([NSValidateXMLStoreOption isKindOfClass:[NSString class]]) [d setObject:NSValidateXMLStoreOption forKey:@"NSValidateXMLStoreOption"]; else NSLog([@"Can't initialize NSValidateXMLStoreOption with object " stringByAppendingString:[NSValidateXMLStoreOption description]]);
if ([NSValidationKeyErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationKeyErrorKey forKey:@"NSValidationKeyErrorKey"]; else NSLog([@"Can't initialize NSValidationKeyErrorKey with object " stringByAppendingString:[NSValidationKeyErrorKey description]]);
if ([NSValidationObjectErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationObjectErrorKey forKey:@"NSValidationObjectErrorKey"]; else NSLog([@"Can't initialize NSValidationObjectErrorKey with object " stringByAppendingString:[NSValidationObjectErrorKey description]]);
if ([NSValidationPredicateErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationPredicateErrorKey forKey:@"NSValidationPredicateErrorKey"]; else NSLog([@"Can't initialize NSValidationPredicateErrorKey with object " stringByAppendingString:[NSValidationPredicateErrorKey description]]);
if ([NSValidationValueErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationValueErrorKey forKey:@"NSValidationValueErrorKey"]; else NSLog([@"Can't initialize NSValidationValueErrorKey with object " stringByAppendingString:[NSValidationValueErrorKey description]]);
if ([NSXMLStoreType isKindOfClass:[NSString class]]) [d setObject:NSXMLStoreType forKey:@"NSXMLStoreType"]; else NSLog([@"Can't initialize NSXMLStoreType with object " stringByAppendingString:[NSXMLStoreType description]]);
[d setObject:[Number numberWithDouble:NSAddEntityMappingType] forKey:@"NSAddEntityMappingType"];
[d setObject:[Number numberWithDouble:NSBinaryDataAttributeType] forKey:@"NSBinaryDataAttributeType"];
[d setObject:[Number numberWithDouble:NSBooleanAttributeType] forKey:@"NSBooleanAttributeType"];
[d setObject:[Number numberWithDouble:NSCascadeDeleteRule] forKey:@"NSCascadeDeleteRule"];
[d setObject:[Number numberWithDouble:NSCopyEntityMappingType] forKey:@"NSCopyEntityMappingType"];
[d setObject:[Number numberWithDouble:NSCoreDataError] forKey:@"NSCoreDataError"];
[d setObject:[Number numberWithDouble:NSCoreDataVersionNumber10_4] forKey:@"NSCoreDataVersionNumber10_4"];
[d setObject:[Number numberWithDouble:NSCoreDataVersionNumber10_4_3] forKey:@"NSCoreDataVersionNumber10_4_3"];
[d setObject:[Number numberWithDouble:NSCustomEntityMappingType] forKey:@"NSCustomEntityMappingType"];
[d setObject:[Number numberWithDouble:NSDateAttributeType] forKey:@"NSDateAttributeType"];
[d setObject:[Number numberWithDouble:NSDecimalAttributeType] forKey:@"NSDecimalAttributeType"];
[d setObject:[Number numberWithDouble:NSDenyDeleteRule] forKey:@"NSDenyDeleteRule"];
[d setObject:[Number numberWithDouble:NSDoubleAttributeType] forKey:@"NSDoubleAttributeType"];
[d setObject:[Number numberWithDouble:NSEntityMigrationPolicyError] forKey:@"NSEntityMigrationPolicyError"];
[d setObject:[Number numberWithDouble:NSFetchRequestExpressionType] forKey:@"NSFetchRequestExpressionType"];
[d setObject:[Number numberWithDouble:NSFloatAttributeType] forKey:@"NSFloatAttributeType"];
[d setObject:[Number numberWithDouble:NSInteger16AttributeType] forKey:@"NSInteger16AttributeType"];
[d setObject:[Number numberWithDouble:NSInteger32AttributeType] forKey:@"NSInteger32AttributeType"];
[d setObject:[Number numberWithDouble:NSInteger64AttributeType] forKey:@"NSInteger64AttributeType"];
[d setObject:[Number numberWithDouble:NSManagedObjectContextLockingError] forKey:@"NSManagedObjectContextLockingError"];
[d setObject:[Number numberWithDouble:NSManagedObjectExternalRelationshipError] forKey:@"NSManagedObjectExternalRelationshipError"];
[d setObject:[Number numberWithDouble:NSManagedObjectIDResultType] forKey:@"NSManagedObjectIDResultType"];
[d setObject:[Number numberWithDouble:NSManagedObjectMergeError] forKey:@"NSManagedObjectMergeError"];
[d setObject:[Number numberWithDouble:NSManagedObjectReferentialIntegrityError] forKey:@"NSManagedObjectReferentialIntegrityError"];
[d setObject:[Number numberWithDouble:NSManagedObjectResultType] forKey:@"NSManagedObjectResultType"];
[d setObject:[Number numberWithDouble:NSManagedObjectValidationError] forKey:@"NSManagedObjectValidationError"];
[d setObject:[Number numberWithDouble:NSMigrationCancelledError] forKey:@"NSMigrationCancelledError"];
[d setObject:[Number numberWithDouble:NSMigrationError] forKey:@"NSMigrationError"];
[d setObject:[Number numberWithDouble:NSMigrationManagerDestinationStoreError] forKey:@"NSMigrationManagerDestinationStoreError"];
[d setObject:[Number numberWithDouble:NSMigrationManagerSourceStoreError] forKey:@"NSMigrationManagerSourceStoreError"];
[d setObject:[Number numberWithDouble:NSMigrationMissingMappingModelError] forKey:@"NSMigrationMissingMappingModelError"];
[d setObject:[Number numberWithDouble:NSMigrationMissingSourceModelError] forKey:@"NSMigrationMissingSourceModelError"];
[d setObject:[Number numberWithDouble:NSNoActionDeleteRule] forKey:@"NSNoActionDeleteRule"];
[d setObject:[Number numberWithDouble:NSNullifyDeleteRule] forKey:@"NSNullifyDeleteRule"];
[d setObject:[Number numberWithDouble:NSPersistentStoreCoordinatorLockingError] forKey:@"NSPersistentStoreCoordinatorLockingError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreIncompatibleSchemaError] forKey:@"NSPersistentStoreIncompatibleSchemaError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreIncompatibleVersionHashError] forKey:@"NSPersistentStoreIncompatibleVersionHashError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreIncompleteSaveError] forKey:@"NSPersistentStoreIncompleteSaveError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreInvalidTypeError] forKey:@"NSPersistentStoreInvalidTypeError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreOpenError] forKey:@"NSPersistentStoreOpenError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreOperationError] forKey:@"NSPersistentStoreOperationError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreSaveError] forKey:@"NSPersistentStoreSaveError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreTimeoutError] forKey:@"NSPersistentStoreTimeoutError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreTypeMismatchError] forKey:@"NSPersistentStoreTypeMismatchError"];
[d setObject:[Number numberWithDouble:NSRemoveEntityMappingType] forKey:@"NSRemoveEntityMappingType"];
[d setObject:[Number numberWithDouble:NSSQLiteError] forKey:@"NSSQLiteError"];
[d setObject:[Number numberWithDouble:NSStringAttributeType] forKey:@"NSStringAttributeType"];
[d setObject:[Number numberWithDouble:NSTransformEntityMappingType] forKey:@"NSTransformEntityMappingType"];
[d setObject:[Number numberWithDouble:NSTransformableAttributeType] forKey:@"NSTransformableAttributeType"];
[d setObject:[Number numberWithDouble:NSUndefinedAttributeType] forKey:@"NSUndefinedAttributeType"];
[d setObject:[Number numberWithDouble:NSUndefinedEntityMappingType] forKey:@"NSUndefinedEntityMappingType"];
[d setObject:[Number numberWithDouble:NSValidationDateTooLateError] forKey:@"NSValidationDateTooLateError"];
[d setObject:[Number numberWithDouble:NSValidationDateTooSoonError] forKey:@"NSValidationDateTooSoonError"];
[d setObject:[Number numberWithDouble:NSValidationInvalidDateError] forKey:@"NSValidationInvalidDateError"];
[d setObject:[Number numberWithDouble:NSValidationMissingMandatoryPropertyError] forKey:@"NSValidationMissingMandatoryPropertyError"];
[d setObject:[Number numberWithDouble:NSValidationMultipleErrorsError] forKey:@"NSValidationMultipleErrorsError"];
[d setObject:[Number numberWithDouble:NSValidationNumberTooLargeError] forKey:@"NSValidationNumberTooLargeError"];
[d setObject:[Number numberWithDouble:NSValidationNumberTooSmallError] forKey:@"NSValidationNumberTooSmallError"];
[d setObject:[Number numberWithDouble:NSValidationRelationshipDeniedDeleteError] forKey:@"NSValidationRelationshipDeniedDeleteError"];
[d setObject:[Number numberWithDouble:NSValidationRelationshipExceedsMaximumCountError] forKey:@"NSValidationRelationshipExceedsMaximumCountError"];
[d setObject:[Number numberWithDouble:NSValidationRelationshipLacksMinimumCountError] forKey:@"NSValidationRelationshipLacksMinimumCountError"];
[d setObject:[Number numberWithDouble:NSValidationStringPatternMatchingError] forKey:@"NSValidationStringPatternMatchingError"];
[d setObject:[Number numberWithDouble:NSValidationStringTooLongError] forKey:@"NSValidationStringTooLongError"];
[d setObject:[Number numberWithDouble:NSValidationStringTooShortError] forKey:@"NSValidationStringTooShortError"];
if ([NSAddedPersistentStoresKey isKindOfClass:[NSString class]]) [d setObject:NSAddedPersistentStoresKey forKey:@"NSAddedPersistentStoresKey"]; else NSLog([@"Can't initialize NSAddedPersistentStoresKey with object " stringByAppendingString:[NSAddedPersistentStoresKey description]]);
if ([NSAffectedObjectsErrorKey isKindOfClass:[NSString class]]) [d setObject:NSAffectedObjectsErrorKey forKey:@"NSAffectedObjectsErrorKey"]; else NSLog([@"Can't initialize NSAffectedObjectsErrorKey with object " stringByAppendingString:[NSAffectedObjectsErrorKey description]]);
if ([NSAffectedStoresErrorKey isKindOfClass:[NSString class]]) [d setObject:NSAffectedStoresErrorKey forKey:@"NSAffectedStoresErrorKey"]; else NSLog([@"Can't initialize NSAffectedStoresErrorKey with object " stringByAppendingString:[NSAffectedStoresErrorKey description]]);
if ([NSBinaryStoreType isKindOfClass:[NSString class]]) [d setObject:NSBinaryStoreType forKey:@"NSBinaryStoreType"]; else NSLog([@"Can't initialize NSBinaryStoreType with object " stringByAppendingString:[NSBinaryStoreType description]]);
[d setObject:[Number numberWithDouble:NSCoreDataVersionNumber] forKey:@"NSCoreDataVersionNumber"];
if ([NSDeletedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSDeletedObjectsKey forKey:@"NSDeletedObjectsKey"]; else NSLog([@"Can't initialize NSDeletedObjectsKey with object " stringByAppendingString:[NSDeletedObjectsKey description]]);
if ([NSDetailedErrorsKey isKindOfClass:[NSString class]]) [d setObject:NSDetailedErrorsKey forKey:@"NSDetailedErrorsKey"]; else NSLog([@"Can't initialize NSDetailedErrorsKey with object " stringByAppendingString:[NSDetailedErrorsKey description]]);
if ([NSErrorMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSErrorMergePolicy forKey:@"NSErrorMergePolicy"]; else NSLog([@"Can't initialize NSErrorMergePolicy with object " stringByAppendingString:[NSErrorMergePolicy description]]);
if ([NSIgnorePersistentStoreVersioningOption isKindOfClass:[NSString class]]) [d setObject:NSIgnorePersistentStoreVersioningOption forKey:@"NSIgnorePersistentStoreVersioningOption"]; else NSLog([@"Can't initialize NSIgnorePersistentStoreVersioningOption with object " stringByAppendingString:[NSIgnorePersistentStoreVersioningOption description]]);
if ([NSInMemoryStoreType isKindOfClass:[NSString class]]) [d setObject:NSInMemoryStoreType forKey:@"NSInMemoryStoreType"]; else NSLog([@"Can't initialize NSInMemoryStoreType with object " stringByAppendingString:[NSInMemoryStoreType description]]);
if ([NSInsertedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSInsertedObjectsKey forKey:@"NSInsertedObjectsKey"]; else NSLog([@"Can't initialize NSInsertedObjectsKey with object " stringByAppendingString:[NSInsertedObjectsKey description]]);
if ([NSInvalidatedAllObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSInvalidatedAllObjectsKey forKey:@"NSInvalidatedAllObjectsKey"]; else NSLog([@"Can't initialize NSInvalidatedAllObjectsKey with object " stringByAppendingString:[NSInvalidatedAllObjectsKey description]]);
if ([NSInvalidatedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSInvalidatedObjectsKey forKey:@"NSInvalidatedObjectsKey"]; else NSLog([@"Can't initialize NSInvalidatedObjectsKey with object " stringByAppendingString:[NSInvalidatedObjectsKey description]]);
if ([NSManagedObjectContextDidSaveNotification isKindOfClass:[NSString class]]) [d setObject:NSManagedObjectContextDidSaveNotification forKey:@"NSManagedObjectContextDidSaveNotification"]; else NSLog([@"Can't initialize NSManagedObjectContextDidSaveNotification with object " stringByAppendingString:[NSManagedObjectContextDidSaveNotification description]]);
if ([NSManagedObjectContextObjectsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSManagedObjectContextObjectsDidChangeNotification forKey:@"NSManagedObjectContextObjectsDidChangeNotification"]; else NSLog([@"Can't initialize NSManagedObjectContextObjectsDidChangeNotification with object " stringByAppendingString:[NSManagedObjectContextObjectsDidChangeNotification description]]);
if ([NSMergeByPropertyObjectTrumpMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSMergeByPropertyObjectTrumpMergePolicy forKey:@"NSMergeByPropertyObjectTrumpMergePolicy"]; else NSLog([@"Can't initialize NSMergeByPropertyObjectTrumpMergePolicy with object " stringByAppendingString:[NSMergeByPropertyObjectTrumpMergePolicy description]]);
if ([NSMergeByPropertyStoreTrumpMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSMergeByPropertyStoreTrumpMergePolicy forKey:@"NSMergeByPropertyStoreTrumpMergePolicy"]; else NSLog([@"Can't initialize NSMergeByPropertyStoreTrumpMergePolicy with object " stringByAppendingString:[NSMergeByPropertyStoreTrumpMergePolicy description]]);
if ([NSMigratePersistentStoresAutomaticallyOption isKindOfClass:[NSString class]]) [d setObject:NSMigratePersistentStoresAutomaticallyOption forKey:@"NSMigratePersistentStoresAutomaticallyOption"]; else NSLog([@"Can't initialize NSMigratePersistentStoresAutomaticallyOption with object " stringByAppendingString:[NSMigratePersistentStoresAutomaticallyOption description]]);
if ([NSMigrationDestinationObjectKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationDestinationObjectKey forKey:@"NSMigrationDestinationObjectKey"]; else NSLog([@"Can't initialize NSMigrationDestinationObjectKey with object " stringByAppendingString:[NSMigrationDestinationObjectKey description]]);
if ([NSMigrationEntityMappingKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationEntityMappingKey forKey:@"NSMigrationEntityMappingKey"]; else NSLog([@"Can't initialize NSMigrationEntityMappingKey with object " stringByAppendingString:[NSMigrationEntityMappingKey description]]);
if ([NSMigrationManagerKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationManagerKey forKey:@"NSMigrationManagerKey"]; else NSLog([@"Can't initialize NSMigrationManagerKey with object " stringByAppendingString:[NSMigrationManagerKey description]]);
if ([NSMigrationPropertyMappingKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationPropertyMappingKey forKey:@"NSMigrationPropertyMappingKey"]; else NSLog([@"Can't initialize NSMigrationPropertyMappingKey with object " stringByAppendingString:[NSMigrationPropertyMappingKey description]]);
if ([NSMigrationSourceObjectKey isKindOfClass:[NSString class]]) [d setObject:NSMigrationSourceObjectKey forKey:@"NSMigrationSourceObjectKey"]; else NSLog([@"Can't initialize NSMigrationSourceObjectKey with object " stringByAppendingString:[NSMigrationSourceObjectKey description]]);
if ([NSOverwriteMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSOverwriteMergePolicy forKey:@"NSOverwriteMergePolicy"]; else NSLog([@"Can't initialize NSOverwriteMergePolicy with object " stringByAppendingString:[NSOverwriteMergePolicy description]]);
if ([NSPersistentStoreCoordinatorStoresDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSPersistentStoreCoordinatorStoresDidChangeNotification forKey:@"NSPersistentStoreCoordinatorStoresDidChangeNotification"]; else NSLog([@"Can't initialize NSPersistentStoreCoordinatorStoresDidChangeNotification with object " stringByAppendingString:[NSPersistentStoreCoordinatorStoresDidChangeNotification description]]);
if ([NSPersistentStoreOSCompatibility isKindOfClass:[NSString class]]) [d setObject:NSPersistentStoreOSCompatibility forKey:@"NSPersistentStoreOSCompatibility"]; else NSLog([@"Can't initialize NSPersistentStoreOSCompatibility with object " stringByAppendingString:[NSPersistentStoreOSCompatibility description]]);
if ([NSPersistentStoreTimeoutOption isKindOfClass:[NSString class]]) [d setObject:NSPersistentStoreTimeoutOption forKey:@"NSPersistentStoreTimeoutOption"]; else NSLog([@"Can't initialize NSPersistentStoreTimeoutOption with object " stringByAppendingString:[NSPersistentStoreTimeoutOption description]]);
if ([NSReadOnlyPersistentStoreOption isKindOfClass:[NSString class]]) [d setObject:NSReadOnlyPersistentStoreOption forKey:@"NSReadOnlyPersistentStoreOption"]; else NSLog([@"Can't initialize NSReadOnlyPersistentStoreOption with object " stringByAppendingString:[NSReadOnlyPersistentStoreOption description]]);
if ([NSRefreshedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSRefreshedObjectsKey forKey:@"NSRefreshedObjectsKey"]; else NSLog([@"Can't initialize NSRefreshedObjectsKey with object " stringByAppendingString:[NSRefreshedObjectsKey description]]);
if ([NSRemovedPersistentStoresKey isKindOfClass:[NSString class]]) [d setObject:NSRemovedPersistentStoresKey forKey:@"NSRemovedPersistentStoresKey"]; else NSLog([@"Can't initialize NSRemovedPersistentStoresKey with object " stringByAppendingString:[NSRemovedPersistentStoresKey description]]);
if ([NSRollbackMergePolicy isKindOfClass:[NSString class]]) [d setObject:NSRollbackMergePolicy forKey:@"NSRollbackMergePolicy"]; else NSLog([@"Can't initialize NSRollbackMergePolicy with object " stringByAppendingString:[NSRollbackMergePolicy description]]);
if ([NSSQLiteErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSSQLiteErrorDomain forKey:@"NSSQLiteErrorDomain"]; else NSLog([@"Can't initialize NSSQLiteErrorDomain with object " stringByAppendingString:[NSSQLiteErrorDomain description]]);
if ([NSSQLitePragmasOption isKindOfClass:[NSString class]]) [d setObject:NSSQLitePragmasOption forKey:@"NSSQLitePragmasOption"]; else NSLog([@"Can't initialize NSSQLitePragmasOption with object " stringByAppendingString:[NSSQLitePragmasOption description]]);
if ([NSSQLiteStoreType isKindOfClass:[NSString class]]) [d setObject:NSSQLiteStoreType forKey:@"NSSQLiteStoreType"]; else NSLog([@"Can't initialize NSSQLiteStoreType with object " stringByAppendingString:[NSSQLiteStoreType description]]);
if ([NSStoreModelVersionHashesKey isKindOfClass:[NSString class]]) [d setObject:NSStoreModelVersionHashesKey forKey:@"NSStoreModelVersionHashesKey"]; else NSLog([@"Can't initialize NSStoreModelVersionHashesKey with object " stringByAppendingString:[NSStoreModelVersionHashesKey description]]);
if ([NSStoreModelVersionIdentifiersKey isKindOfClass:[NSString class]]) [d setObject:NSStoreModelVersionIdentifiersKey forKey:@"NSStoreModelVersionIdentifiersKey"]; else NSLog([@"Can't initialize NSStoreModelVersionIdentifiersKey with object " stringByAppendingString:[NSStoreModelVersionIdentifiersKey description]]);
if ([NSStoreTypeKey isKindOfClass:[NSString class]]) [d setObject:NSStoreTypeKey forKey:@"NSStoreTypeKey"]; else NSLog([@"Can't initialize NSStoreTypeKey with object " stringByAppendingString:[NSStoreTypeKey description]]);
if ([NSStoreUUIDKey isKindOfClass:[NSString class]]) [d setObject:NSStoreUUIDKey forKey:@"NSStoreUUIDKey"]; else NSLog([@"Can't initialize NSStoreUUIDKey with object " stringByAppendingString:[NSStoreUUIDKey description]]);
if ([NSUUIDChangedPersistentStoresKey isKindOfClass:[NSString class]]) [d setObject:NSUUIDChangedPersistentStoresKey forKey:@"NSUUIDChangedPersistentStoresKey"]; else NSLog([@"Can't initialize NSUUIDChangedPersistentStoresKey with object " stringByAppendingString:[NSUUIDChangedPersistentStoresKey description]]);
if ([NSUpdatedObjectsKey isKindOfClass:[NSString class]]) [d setObject:NSUpdatedObjectsKey forKey:@"NSUpdatedObjectsKey"]; else NSLog([@"Can't initialize NSUpdatedObjectsKey with object " stringByAppendingString:[NSUpdatedObjectsKey description]]);
if ([NSValidateXMLStoreOption isKindOfClass:[NSString class]]) [d setObject:NSValidateXMLStoreOption forKey:@"NSValidateXMLStoreOption"]; else NSLog([@"Can't initialize NSValidateXMLStoreOption with object " stringByAppendingString:[NSValidateXMLStoreOption description]]);
if ([NSValidationKeyErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationKeyErrorKey forKey:@"NSValidationKeyErrorKey"]; else NSLog([@"Can't initialize NSValidationKeyErrorKey with object " stringByAppendingString:[NSValidationKeyErrorKey description]]);
if ([NSValidationObjectErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationObjectErrorKey forKey:@"NSValidationObjectErrorKey"]; else NSLog([@"Can't initialize NSValidationObjectErrorKey with object " stringByAppendingString:[NSValidationObjectErrorKey description]]);
if ([NSValidationPredicateErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationPredicateErrorKey forKey:@"NSValidationPredicateErrorKey"]; else NSLog([@"Can't initialize NSValidationPredicateErrorKey with object " stringByAppendingString:[NSValidationPredicateErrorKey description]]);
if ([NSValidationValueErrorKey isKindOfClass:[NSString class]]) [d setObject:NSValidationValueErrorKey forKey:@"NSValidationValueErrorKey"]; else NSLog([@"Can't initialize NSValidationValueErrorKey with object " stringByAppendingString:[NSValidationValueErrorKey description]]);
if ([NSXMLStoreType isKindOfClass:[NSString class]]) [d setObject:NSXMLStoreType forKey:@"NSXMLStoreType"]; else NSLog([@"Can't initialize NSXMLStoreType with object " stringByAppendingString:[NSXMLStoreType description]]);
[d setObject:[Number numberWithDouble:NSAddEntityMappingType] forKey:@"NSAddEntityMappingType"];
[d setObject:[Number numberWithDouble:NSBinaryDataAttributeType] forKey:@"NSBinaryDataAttributeType"];
[d setObject:[Number numberWithDouble:NSBooleanAttributeType] forKey:@"NSBooleanAttributeType"];
[d setObject:[Number numberWithDouble:NSCascadeDeleteRule] forKey:@"NSCascadeDeleteRule"];
[d setObject:[Number numberWithDouble:NSCopyEntityMappingType] forKey:@"NSCopyEntityMappingType"];
[d setObject:[Number numberWithDouble:NSCoreDataError] forKey:@"NSCoreDataError"];
[d setObject:[Number numberWithDouble:NSCoreDataVersionNumber10_4] forKey:@"NSCoreDataVersionNumber10_4"];
[d setObject:[Number numberWithDouble:NSCoreDataVersionNumber10_4_3] forKey:@"NSCoreDataVersionNumber10_4_3"];
[d setObject:[Number numberWithDouble:NSCustomEntityMappingType] forKey:@"NSCustomEntityMappingType"];
[d setObject:[Number numberWithDouble:NSDateAttributeType] forKey:@"NSDateAttributeType"];
[d setObject:[Number numberWithDouble:NSDecimalAttributeType] forKey:@"NSDecimalAttributeType"];
[d setObject:[Number numberWithDouble:NSDenyDeleteRule] forKey:@"NSDenyDeleteRule"];
[d setObject:[Number numberWithDouble:NSDoubleAttributeType] forKey:@"NSDoubleAttributeType"];
[d setObject:[Number numberWithDouble:NSEntityMigrationPolicyError] forKey:@"NSEntityMigrationPolicyError"];
[d setObject:[Number numberWithDouble:NSFetchRequestExpressionType] forKey:@"NSFetchRequestExpressionType"];
[d setObject:[Number numberWithDouble:NSFloatAttributeType] forKey:@"NSFloatAttributeType"];
[d setObject:[Number numberWithDouble:NSInteger16AttributeType] forKey:@"NSInteger16AttributeType"];
[d setObject:[Number numberWithDouble:NSInteger32AttributeType] forKey:@"NSInteger32AttributeType"];
[d setObject:[Number numberWithDouble:NSInteger64AttributeType] forKey:@"NSInteger64AttributeType"];
[d setObject:[Number numberWithDouble:NSManagedObjectContextLockingError] forKey:@"NSManagedObjectContextLockingError"];
[d setObject:[Number numberWithDouble:NSManagedObjectExternalRelationshipError] forKey:@"NSManagedObjectExternalRelationshipError"];
[d setObject:[Number numberWithDouble:NSManagedObjectIDResultType] forKey:@"NSManagedObjectIDResultType"];
[d setObject:[Number numberWithDouble:NSManagedObjectMergeError] forKey:@"NSManagedObjectMergeError"];
[d setObject:[Number numberWithDouble:NSManagedObjectReferentialIntegrityError] forKey:@"NSManagedObjectReferentialIntegrityError"];
[d setObject:[Number numberWithDouble:NSManagedObjectResultType] forKey:@"NSManagedObjectResultType"];
[d setObject:[Number numberWithDouble:NSManagedObjectValidationError] forKey:@"NSManagedObjectValidationError"];
[d setObject:[Number numberWithDouble:NSMigrationCancelledError] forKey:@"NSMigrationCancelledError"];
[d setObject:[Number numberWithDouble:NSMigrationError] forKey:@"NSMigrationError"];
[d setObject:[Number numberWithDouble:NSMigrationManagerDestinationStoreError] forKey:@"NSMigrationManagerDestinationStoreError"];
[d setObject:[Number numberWithDouble:NSMigrationManagerSourceStoreError] forKey:@"NSMigrationManagerSourceStoreError"];
[d setObject:[Number numberWithDouble:NSMigrationMissingMappingModelError] forKey:@"NSMigrationMissingMappingModelError"];
[d setObject:[Number numberWithDouble:NSMigrationMissingSourceModelError] forKey:@"NSMigrationMissingSourceModelError"];
[d setObject:[Number numberWithDouble:NSNoActionDeleteRule] forKey:@"NSNoActionDeleteRule"];
[d setObject:[Number numberWithDouble:NSNullifyDeleteRule] forKey:@"NSNullifyDeleteRule"];
[d setObject:[Number numberWithDouble:NSPersistentStoreCoordinatorLockingError] forKey:@"NSPersistentStoreCoordinatorLockingError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreIncompatibleSchemaError] forKey:@"NSPersistentStoreIncompatibleSchemaError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreIncompatibleVersionHashError] forKey:@"NSPersistentStoreIncompatibleVersionHashError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreIncompleteSaveError] forKey:@"NSPersistentStoreIncompleteSaveError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreInvalidTypeError] forKey:@"NSPersistentStoreInvalidTypeError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreOpenError] forKey:@"NSPersistentStoreOpenError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreOperationError] forKey:@"NSPersistentStoreOperationError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreSaveError] forKey:@"NSPersistentStoreSaveError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreTimeoutError] forKey:@"NSPersistentStoreTimeoutError"];
[d setObject:[Number numberWithDouble:NSPersistentStoreTypeMismatchError] forKey:@"NSPersistentStoreTypeMismatchError"];
[d setObject:[Number numberWithDouble:NSRemoveEntityMappingType] forKey:@"NSRemoveEntityMappingType"];
[d setObject:[Number numberWithDouble:NSSQLiteError] forKey:@"NSSQLiteError"];
[d setObject:[Number numberWithDouble:NSStringAttributeType] forKey:@"NSStringAttributeType"];
[d setObject:[Number numberWithDouble:NSTransformEntityMappingType] forKey:@"NSTransformEntityMappingType"];
[d setObject:[Number numberWithDouble:NSTransformableAttributeType] forKey:@"NSTransformableAttributeType"];
[d setObject:[Number numberWithDouble:NSUndefinedAttributeType] forKey:@"NSUndefinedAttributeType"];
[d setObject:[Number numberWithDouble:NSUndefinedEntityMappingType] forKey:@"NSUndefinedEntityMappingType"];
[d setObject:[Number numberWithDouble:NSValidationDateTooLateError] forKey:@"NSValidationDateTooLateError"];
[d setObject:[Number numberWithDouble:NSValidationDateTooSoonError] forKey:@"NSValidationDateTooSoonError"];
[d setObject:[Number numberWithDouble:NSValidationInvalidDateError] forKey:@"NSValidationInvalidDateError"];
[d setObject:[Number numberWithDouble:NSValidationMissingMandatoryPropertyError] forKey:@"NSValidationMissingMandatoryPropertyError"];
[d setObject:[Number numberWithDouble:NSValidationMultipleErrorsError] forKey:@"NSValidationMultipleErrorsError"];
[d setObject:[Number numberWithDouble:NSValidationNumberTooLargeError] forKey:@"NSValidationNumberTooLargeError"];
[d setObject:[Number numberWithDouble:NSValidationNumberTooSmallError] forKey:@"NSValidationNumberTooSmallError"];
[d setObject:[Number numberWithDouble:NSValidationRelationshipDeniedDeleteError] forKey:@"NSValidationRelationshipDeniedDeleteError"];
[d setObject:[Number numberWithDouble:NSValidationRelationshipExceedsMaximumCountError] forKey:@"NSValidationRelationshipExceedsMaximumCountError"];
[d setObject:[Number numberWithDouble:NSValidationRelationshipLacksMinimumCountError] forKey:@"NSValidationRelationshipLacksMinimumCountError"];
[d setObject:[Number numberWithDouble:NSValidationStringPatternMatchingError] forKey:@"NSValidationStringPatternMatchingError"];
[d setObject:[Number numberWithDouble:NSValidationStringTooLongError] forKey:@"NSValidationStringTooLongError"];
[d setObject:[Number numberWithDouble:NSValidationStringTooShortError] forKey:@"NSValidationStringTooShortError"];
[d setObject:[Number numberWithDouble:kCFAbsoluteTimeIntervalSince1904] forKey:@"kCFAbsoluteTimeIntervalSince1904"];
[d setObject:[Number numberWithDouble:kCFAbsoluteTimeIntervalSince1970] forKey:@"kCFAbsoluteTimeIntervalSince1970"];
[d setObject:(NSString *)kCFBuddhistCalendar forKey:@"kCFBuddhistCalendar"];
[d setObject:(NSString *)kCFBundleDevelopmentRegionKey forKey:@"kCFBundleDevelopmentRegionKey"];
[d setObject:(NSString *)kCFBundleExecutableKey forKey:@"kCFBundleExecutableKey"];
[d setObject:(NSString *)kCFBundleIdentifierKey forKey:@"kCFBundleIdentifierKey"];
[d setObject:(NSString *)kCFBundleInfoDictionaryVersionKey forKey:@"kCFBundleInfoDictionaryVersionKey"];
[d setObject:(NSString *)kCFBundleLocalizationsKey forKey:@"kCFBundleLocalizationsKey"];
[d setObject:(NSString *)kCFBundleNameKey forKey:@"kCFBundleNameKey"];
[d setObject:(NSString *)kCFBundleVersionKey forKey:@"kCFBundleVersionKey"];
[d setObject:(NSString *)kCFChineseCalendar forKey:@"kCFChineseCalendar"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber] forKey:@"kCFCoreFoundationVersionNumber"];
[d setObject:(NSString *)kCFDateFormatterAMSymbol forKey:@"kCFDateFormatterAMSymbol"];
[d setObject:(NSString *)kCFDateFormatterCalendar forKey:@"kCFDateFormatterCalendar"];
[d setObject:(NSString *)kCFDateFormatterCalendarName forKey:@"kCFDateFormatterCalendarName"];
[d setObject:(NSString *)kCFDateFormatterDefaultDate forKey:@"kCFDateFormatterDefaultDate"];
[d setObject:(NSString *)kCFDateFormatterDefaultFormat forKey:@"kCFDateFormatterDefaultFormat"];
[d setObject:(NSString *)kCFDateFormatterEraSymbols forKey:@"kCFDateFormatterEraSymbols"];
[d setObject:(NSString *)kCFDateFormatterGregorianStartDate forKey:@"kCFDateFormatterGregorianStartDate"];
[d setObject:(NSString *)kCFDateFormatterIsLenient forKey:@"kCFDateFormatterIsLenient"];
[d setObject:(NSString *)kCFDateFormatterLongEraSymbols forKey:@"kCFDateFormatterLongEraSymbols"];
[d setObject:(NSString *)kCFDateFormatterMonthSymbols forKey:@"kCFDateFormatterMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterPMSymbol forKey:@"kCFDateFormatterPMSymbol"];
[d setObject:(NSString *)kCFDateFormatterQuarterSymbols forKey:@"kCFDateFormatterQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortMonthSymbols forKey:@"kCFDateFormatterShortMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortQuarterSymbols forKey:@"kCFDateFormatterShortQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortStandaloneMonthSymbols forKey:@"kCFDateFormatterShortStandaloneMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortStandaloneQuarterSymbols forKey:@"kCFDateFormatterShortStandaloneQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortStandaloneWeekdaySymbols forKey:@"kCFDateFormatterShortStandaloneWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterShortWeekdaySymbols forKey:@"kCFDateFormatterShortWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterStandaloneMonthSymbols forKey:@"kCFDateFormatterStandaloneMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterStandaloneQuarterSymbols forKey:@"kCFDateFormatterStandaloneQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterStandaloneWeekdaySymbols forKey:@"kCFDateFormatterStandaloneWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterTimeZone forKey:@"kCFDateFormatterTimeZone"];
[d setObject:(NSString *)kCFDateFormatterTwoDigitStartDate forKey:@"kCFDateFormatterTwoDigitStartDate"];
[d setObject:(NSString *)kCFDateFormatterVeryShortMonthSymbols forKey:@"kCFDateFormatterVeryShortMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterVeryShortStandaloneMonthSymbols forKey:@"kCFDateFormatterVeryShortStandaloneMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterVeryShortStandaloneWeekdaySymbols forKey:@"kCFDateFormatterVeryShortStandaloneWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterVeryShortWeekdaySymbols forKey:@"kCFDateFormatterVeryShortWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterWeekdaySymbols forKey:@"kCFDateFormatterWeekdaySymbols"];
[d setObject:(NSString *)kCFErrorDescriptionKey forKey:@"kCFErrorDescriptionKey"];
[d setObject:(NSString *)kCFErrorDomainCocoa forKey:@"kCFErrorDomainCocoa"];
[d setObject:(NSString *)kCFErrorDomainMach forKey:@"kCFErrorDomainMach"];
[d setObject:(NSString *)kCFErrorDomainOSStatus forKey:@"kCFErrorDomainOSStatus"];
[d setObject:(NSString *)kCFErrorDomainPOSIX forKey:@"kCFErrorDomainPOSIX"];
[d setObject:(NSString *)kCFErrorLocalizedDescriptionKey forKey:@"kCFErrorLocalizedDescriptionKey"];
[d setObject:(NSString *)kCFErrorLocalizedFailureReasonKey forKey:@"kCFErrorLocalizedFailureReasonKey"];
[d setObject:(NSString *)kCFErrorLocalizedRecoverySuggestionKey forKey:@"kCFErrorLocalizedRecoverySuggestionKey"];
[d setObject:(NSString *)kCFErrorUnderlyingErrorKey forKey:@"kCFErrorUnderlyingErrorKey"];
[d setObject:(NSString *)kCFGregorianCalendar forKey:@"kCFGregorianCalendar"];
[d setObject:(NSString *)kCFHebrewCalendar forKey:@"kCFHebrewCalendar"];
[d setObject:(NSString *)kCFIslamicCalendar forKey:@"kCFIslamicCalendar"];
[d setObject:(NSString *)kCFIslamicCivilCalendar forKey:@"kCFIslamicCivilCalendar"];
[d setObject:(NSString *)kCFJapaneseCalendar forKey:@"kCFJapaneseCalendar"];
[d setObject:(NSString *)kCFLocaleCalendar forKey:@"kCFLocaleCalendar"];
[d setObject:(NSString *)kCFLocaleCalendarIdentifier forKey:@"kCFLocaleCalendarIdentifier"];
[d setObject:(NSString *)kCFLocaleCollationIdentifier forKey:@"kCFLocaleCollationIdentifier"];
[d setObject:(NSString *)kCFLocaleCountryCode forKey:@"kCFLocaleCountryCode"];
[d setObject:(NSString *)kCFLocaleCurrencyCode forKey:@"kCFLocaleCurrencyCode"];
[d setObject:(NSString *)kCFLocaleCurrencySymbol forKey:@"kCFLocaleCurrencySymbol"];
[d setObject:(NSString *)kCFLocaleCurrentLocaleDidChangeNotification forKey:@"kCFLocaleCurrentLocaleDidChangeNotification"];
[d setObject:(NSString *)kCFLocaleDecimalSeparator forKey:@"kCFLocaleDecimalSeparator"];
[d setObject:(NSString *)kCFLocaleExemplarCharacterSet forKey:@"kCFLocaleExemplarCharacterSet"];
[d setObject:(NSString *)kCFLocaleGroupingSeparator forKey:@"kCFLocaleGroupingSeparator"];
[d setObject:(NSString *)kCFLocaleIdentifier forKey:@"kCFLocaleIdentifier"];
[d setObject:(NSString *)kCFLocaleLanguageCode forKey:@"kCFLocaleLanguageCode"];
[d setObject:(NSString *)kCFLocaleMeasurementSystem forKey:@"kCFLocaleMeasurementSystem"];
[d setObject:(NSString *)kCFLocaleScriptCode forKey:@"kCFLocaleScriptCode"];
[d setObject:(NSString *)kCFLocaleUsesMetricSystem forKey:@"kCFLocaleUsesMetricSystem"];
[d setObject:(NSString *)kCFLocaleVariantCode forKey:@"kCFLocaleVariantCode"];
[d setObject:(NSString *)kCFNumberFormatterAlwaysShowDecimalSeparator forKey:@"kCFNumberFormatterAlwaysShowDecimalSeparator"];
[d setObject:(NSString *)kCFNumberFormatterCurrencyCode forKey:@"kCFNumberFormatterCurrencyCode"];
[d setObject:(NSString *)kCFNumberFormatterCurrencyDecimalSeparator forKey:@"kCFNumberFormatterCurrencyDecimalSeparator"];
[d setObject:(NSString *)kCFNumberFormatterCurrencyGroupingSeparator forKey:@"kCFNumberFormatterCurrencyGroupingSeparator"];
[d setObject:(NSString *)kCFNumberFormatterCurrencySymbol forKey:@"kCFNumberFormatterCurrencySymbol"];
[d setObject:(NSString *)kCFNumberFormatterDecimalSeparator forKey:@"kCFNumberFormatterDecimalSeparator"];
[d setObject:(NSString *)kCFNumberFormatterDefaultFormat forKey:@"kCFNumberFormatterDefaultFormat"];
[d setObject:(NSString *)kCFNumberFormatterExponentSymbol forKey:@"kCFNumberFormatterExponentSymbol"];
[d setObject:(NSString *)kCFNumberFormatterFormatWidth forKey:@"kCFNumberFormatterFormatWidth"];
[d setObject:(NSString *)kCFNumberFormatterGroupingSeparator forKey:@"kCFNumberFormatterGroupingSeparator"];
[d setObject:(NSString *)kCFNumberFormatterGroupingSize forKey:@"kCFNumberFormatterGroupingSize"];
[d setObject:(NSString *)kCFNumberFormatterInfinitySymbol forKey:@"kCFNumberFormatterInfinitySymbol"];
[d setObject:(NSString *)kCFNumberFormatterInternationalCurrencySymbol forKey:@"kCFNumberFormatterInternationalCurrencySymbol"];
[d setObject:(NSString *)kCFNumberFormatterIsLenient forKey:@"kCFNumberFormatterIsLenient"];
[d setObject:(NSString *)kCFNumberFormatterMaxFractionDigits forKey:@"kCFNumberFormatterMaxFractionDigits"];
[d setObject:(NSString *)kCFNumberFormatterMaxIntegerDigits forKey:@"kCFNumberFormatterMaxIntegerDigits"];
[d setObject:(NSString *)kCFNumberFormatterMaxSignificantDigits forKey:@"kCFNumberFormatterMaxSignificantDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinFractionDigits forKey:@"kCFNumberFormatterMinFractionDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinIntegerDigits forKey:@"kCFNumberFormatterMinIntegerDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinSignificantDigits forKey:@"kCFNumberFormatterMinSignificantDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinusSign forKey:@"kCFNumberFormatterMinusSign"];
[d setObject:(NSString *)kCFNumberFormatterMultiplier forKey:@"kCFNumberFormatterMultiplier"];
[d setObject:(NSString *)kCFNumberFormatterNaNSymbol forKey:@"kCFNumberFormatterNaNSymbol"];
[d setObject:(NSString *)kCFNumberFormatterNegativePrefix forKey:@"kCFNumberFormatterNegativePrefix"];
[d setObject:(NSString *)kCFNumberFormatterNegativeSuffix forKey:@"kCFNumberFormatterNegativeSuffix"];
[d setObject:(NSString *)kCFNumberFormatterPaddingCharacter forKey:@"kCFNumberFormatterPaddingCharacter"];
[d setObject:(NSString *)kCFNumberFormatterPaddingPosition forKey:@"kCFNumberFormatterPaddingPosition"];
[d setObject:(NSString *)kCFNumberFormatterPerMillSymbol forKey:@"kCFNumberFormatterPerMillSymbol"];
[d setObject:(NSString *)kCFNumberFormatterPercentSymbol forKey:@"kCFNumberFormatterPercentSymbol"];
[d setObject:(NSString *)kCFNumberFormatterPlusSign forKey:@"kCFNumberFormatterPlusSign"];
[d setObject:(NSString *)kCFNumberFormatterPositivePrefix forKey:@"kCFNumberFormatterPositivePrefix"];
[d setObject:(NSString *)kCFNumberFormatterPositiveSuffix forKey:@"kCFNumberFormatterPositiveSuffix"];
[d setObject:(NSString *)kCFNumberFormatterRoundingIncrement forKey:@"kCFNumberFormatterRoundingIncrement"];
[d setObject:(NSString *)kCFNumberFormatterRoundingMode forKey:@"kCFNumberFormatterRoundingMode"];
[d setObject:(NSString *)kCFNumberFormatterSecondaryGroupingSize forKey:@"kCFNumberFormatterSecondaryGroupingSize"];
[d setObject:(NSString *)kCFNumberFormatterUseGroupingSeparator forKey:@"kCFNumberFormatterUseGroupingSeparator"];
[d setObject:(NSString *)kCFNumberFormatterUseSignificantDigits forKey:@"kCFNumberFormatterUseSignificantDigits"];
[d setObject:(NSString *)kCFNumberFormatterZeroSymbol forKey:@"kCFNumberFormatterZeroSymbol"];
[d setObject:(NSString *)kCFPlugInDynamicRegisterFunctionKey forKey:@"kCFPlugInDynamicRegisterFunctionKey"];
[d setObject:(NSString *)kCFPlugInDynamicRegistrationKey forKey:@"kCFPlugInDynamicRegistrationKey"];
[d setObject:(NSString *)kCFPlugInFactoriesKey forKey:@"kCFPlugInFactoriesKey"];
[d setObject:(NSString *)kCFPlugInTypesKey forKey:@"kCFPlugInTypesKey"];
[d setObject:(NSString *)kCFPlugInUnloadFunctionKey forKey:@"kCFPlugInUnloadFunctionKey"];
[d setObject:(NSString *)kCFPreferencesAnyApplication forKey:@"kCFPreferencesAnyApplication"];
[d setObject:(NSString *)kCFPreferencesAnyHost forKey:@"kCFPreferencesAnyHost"];
[d setObject:(NSString *)kCFPreferencesAnyUser forKey:@"kCFPreferencesAnyUser"];
[d setObject:(NSString *)kCFPreferencesCurrentApplication forKey:@"kCFPreferencesCurrentApplication"];
[d setObject:(NSString *)kCFPreferencesCurrentHost forKey:@"kCFPreferencesCurrentHost"];
[d setObject:(NSString *)kCFPreferencesCurrentUser forKey:@"kCFPreferencesCurrentUser"];
[d setObject:(NSString *)kCFRunLoopCommonModes forKey:@"kCFRunLoopCommonModes"];
[d setObject:(NSString *)kCFRunLoopDefaultMode forKey:@"kCFRunLoopDefaultMode"];
[d setObject:(NSString *)kCFSocketCommandKey forKey:@"kCFSocketCommandKey"];
[d setObject:(NSString *)kCFSocketErrorKey forKey:@"kCFSocketErrorKey"];
[d setObject:(NSString *)kCFSocketNameKey forKey:@"kCFSocketNameKey"];
[d setObject:(NSString *)kCFSocketRegisterCommand forKey:@"kCFSocketRegisterCommand"];
[d setObject:(NSString *)kCFSocketResultKey forKey:@"kCFSocketResultKey"];
[d setObject:(NSString *)kCFSocketRetrieveCommand forKey:@"kCFSocketRetrieveCommand"];
[d setObject:(NSString *)kCFSocketValueKey forKey:@"kCFSocketValueKey"];
[d setObject:(NSString *)kCFStreamPropertyAppendToFile forKey:@"kCFStreamPropertyAppendToFile"];
[d setObject:(NSString *)kCFStreamPropertyDataWritten forKey:@"kCFStreamPropertyDataWritten"];
[d setObject:(NSString *)kCFStreamPropertyFileCurrentOffset forKey:@"kCFStreamPropertyFileCurrentOffset"];
[d setObject:(NSString *)kCFStreamPropertySocketNativeHandle forKey:@"kCFStreamPropertySocketNativeHandle"];
[d setObject:(NSString *)kCFStreamPropertySocketRemoteHostName forKey:@"kCFStreamPropertySocketRemoteHostName"];
[d setObject:(NSString *)kCFStreamPropertySocketRemotePortNumber forKey:@"kCFStreamPropertySocketRemotePortNumber"];
[d setObject:(NSString *)kCFStringTransformFullwidthHalfwidth forKey:@"kCFStringTransformFullwidthHalfwidth"];
[d setObject:(NSString *)kCFStringTransformHiraganaKatakana forKey:@"kCFStringTransformHiraganaKatakana"];
[d setObject:(NSString *)kCFStringTransformLatinArabic forKey:@"kCFStringTransformLatinArabic"];
[d setObject:(NSString *)kCFStringTransformLatinCyrillic forKey:@"kCFStringTransformLatinCyrillic"];
[d setObject:(NSString *)kCFStringTransformLatinGreek forKey:@"kCFStringTransformLatinGreek"];
[d setObject:(NSString *)kCFStringTransformLatinHangul forKey:@"kCFStringTransformLatinHangul"];
[d setObject:(NSString *)kCFStringTransformLatinHebrew forKey:@"kCFStringTransformLatinHebrew"];
[d setObject:(NSString *)kCFStringTransformLatinHiragana forKey:@"kCFStringTransformLatinHiragana"];
[d setObject:(NSString *)kCFStringTransformLatinKatakana forKey:@"kCFStringTransformLatinKatakana"];
[d setObject:(NSString *)kCFStringTransformLatinThai forKey:@"kCFStringTransformLatinThai"];
[d setObject:(NSString *)kCFStringTransformMandarinLatin forKey:@"kCFStringTransformMandarinLatin"];
[d setObject:(NSString *)kCFStringTransformStripCombiningMarks forKey:@"kCFStringTransformStripCombiningMarks"];
[d setObject:(NSString *)kCFStringTransformStripDiacritics forKey:@"kCFStringTransformStripDiacritics"];
[d setObject:(NSString *)kCFStringTransformToLatin forKey:@"kCFStringTransformToLatin"];
[d setObject:(NSString *)kCFStringTransformToUnicodeName forKey:@"kCFStringTransformToUnicodeName"];
[d setObject:(NSString *)kCFStringTransformToXMLHex forKey:@"kCFStringTransformToXMLHex"];
[d setObject:(NSString *)kCFTimeZoneSystemTimeZoneDidChangeNotification forKey:@"kCFTimeZoneSystemTimeZoneDidChangeNotification"];
[d setObject:(NSString *)kCFURLFileDirectoryContents forKey:@"kCFURLFileDirectoryContents"];
[d setObject:(NSString *)kCFURLFileExists forKey:@"kCFURLFileExists"];
[d setObject:(NSString *)kCFURLFileLastModificationTime forKey:@"kCFURLFileLastModificationTime"];
[d setObject:(NSString *)kCFURLFileLength forKey:@"kCFURLFileLength"];
[d setObject:(NSString *)kCFURLFileOwnerID forKey:@"kCFURLFileOwnerID"];
[d setObject:(NSString *)kCFURLFilePOSIXMode forKey:@"kCFURLFilePOSIXMode"];
[d setObject:(NSString *)kCFURLHTTPStatusCode forKey:@"kCFURLHTTPStatusCode"];
[d setObject:(NSString *)kCFURLHTTPStatusLine forKey:@"kCFURLHTTPStatusLine"];
[d setObject:(NSString *)kCFUserNotificationAlertHeaderKey forKey:@"kCFUserNotificationAlertHeaderKey"];
[d setObject:(NSString *)kCFUserNotificationAlertMessageKey forKey:@"kCFUserNotificationAlertMessageKey"];
[d setObject:(NSString *)kCFUserNotificationAlternateButtonTitleKey forKey:@"kCFUserNotificationAlternateButtonTitleKey"];
[d setObject:(NSString *)kCFUserNotificationCheckBoxTitlesKey forKey:@"kCFUserNotificationCheckBoxTitlesKey"];
[d setObject:(NSString *)kCFUserNotificationDefaultButtonTitleKey forKey:@"kCFUserNotificationDefaultButtonTitleKey"];
[d setObject:(NSString *)kCFUserNotificationIconURLKey forKey:@"kCFUserNotificationIconURLKey"];
[d setObject:(NSString *)kCFUserNotificationLocalizationURLKey forKey:@"kCFUserNotificationLocalizationURLKey"];
[d setObject:(NSString *)kCFUserNotificationOtherButtonTitleKey forKey:@"kCFUserNotificationOtherButtonTitleKey"];
[d setObject:(NSString *)kCFUserNotificationPopUpSelectionKey forKey:@"kCFUserNotificationPopUpSelectionKey"];
[d setObject:(NSString *)kCFUserNotificationPopUpTitlesKey forKey:@"kCFUserNotificationPopUpTitlesKey"];
[d setObject:(NSString *)kCFUserNotificationProgressIndicatorValueKey forKey:@"kCFUserNotificationProgressIndicatorValueKey"];
[d setObject:(NSString *)kCFUserNotificationSoundURLKey forKey:@"kCFUserNotificationSoundURLKey"];
[d setObject:(NSString *)kCFUserNotificationTextFieldTitlesKey forKey:@"kCFUserNotificationTextFieldTitlesKey"];
[d setObject:(NSString *)kCFUserNotificationTextFieldValuesKey forKey:@"kCFUserNotificationTextFieldValuesKey"];
[d setObject:(NSString *)kCFXMLTreeErrorDescription forKey:@"kCFXMLTreeErrorDescription"];
[d setObject:(NSString *)kCFXMLTreeErrorLineNumber forKey:@"kCFXMLTreeErrorLineNumber"];
[d setObject:(NSString *)kCFXMLTreeErrorLocation forKey:@"kCFXMLTreeErrorLocation"];
[d setObject:(NSString *)kCFXMLTreeErrorStatusCode forKey:@"kCFXMLTreeErrorStatusCode"];
[d setObject:[Number numberWithDouble:CFByteOrderBigEndian] forKey:@"CFByteOrderBigEndian"];
[d setObject:[Number numberWithDouble:CFByteOrderLittleEndian] forKey:@"CFByteOrderLittleEndian"];
[d setObject:[Number numberWithDouble:CFByteOrderUnknown] forKey:@"CFByteOrderUnknown"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorCoalesce] forKey:@"CFNotificationSuspensionBehaviorCoalesce"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorDeliverImmediately] forKey:@"CFNotificationSuspensionBehaviorDeliverImmediately"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorDrop] forKey:@"CFNotificationSuspensionBehaviorDrop"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorHold] forKey:@"CFNotificationSuspensionBehaviorHold"];
[d setObject:[Number numberWithDouble:CF_USE_OSBYTEORDER_H] forKey:@"CF_USE_OSBYTEORDER_H"];
[d setObject:[Number numberWithDouble:COREFOUNDATION_CFPLUGINCOM_SEPARATE] forKey:@"COREFOUNDATION_CFPLUGINCOM_SEPARATE"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitectureI386] forKey:@"kCFBundleExecutableArchitectureI386"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitecturePPC] forKey:@"kCFBundleExecutableArchitecturePPC"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitecturePPC64] forKey:@"kCFBundleExecutableArchitecturePPC64"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitectureX86_64] forKey:@"kCFBundleExecutableArchitectureX86_64"];
[d setObject:[Number numberWithDouble:kCFCalendarComponentsWrap] forKey:@"kCFCalendarComponentsWrap"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitDay] forKey:@"kCFCalendarUnitDay"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitEra] forKey:@"kCFCalendarUnitEra"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitHour] forKey:@"kCFCalendarUnitHour"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitMinute] forKey:@"kCFCalendarUnitMinute"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitMonth] forKey:@"kCFCalendarUnitMonth"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitSecond] forKey:@"kCFCalendarUnitSecond"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitWeek] forKey:@"kCFCalendarUnitWeek"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitWeekday] forKey:@"kCFCalendarUnitWeekday"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitWeekdayOrdinal] forKey:@"kCFCalendarUnitWeekdayOrdinal"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitYear] forKey:@"kCFCalendarUnitYear"];
[d setObject:[Number numberWithDouble:kCFCharacterSetAlphaNumeric] forKey:@"kCFCharacterSetAlphaNumeric"];
[d setObject:[Number numberWithDouble:kCFCharacterSetCapitalizedLetter] forKey:@"kCFCharacterSetCapitalizedLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetControl] forKey:@"kCFCharacterSetControl"];
[d setObject:[Number numberWithDouble:kCFCharacterSetDecimalDigit] forKey:@"kCFCharacterSetDecimalDigit"];
[d setObject:[Number numberWithDouble:kCFCharacterSetDecomposable] forKey:@"kCFCharacterSetDecomposable"];
[d setObject:[Number numberWithDouble:kCFCharacterSetIllegal] forKey:@"kCFCharacterSetIllegal"];
[d setObject:[Number numberWithDouble:kCFCharacterSetLetter] forKey:@"kCFCharacterSetLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetLowercaseLetter] forKey:@"kCFCharacterSetLowercaseLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetNewline] forKey:@"kCFCharacterSetNewline"];
[d setObject:[Number numberWithDouble:kCFCharacterSetNonBase] forKey:@"kCFCharacterSetNonBase"];
[d setObject:[Number numberWithDouble:kCFCharacterSetPunctuation] forKey:@"kCFCharacterSetPunctuation"];
[d setObject:[Number numberWithDouble:kCFCharacterSetSymbol] forKey:@"kCFCharacterSetSymbol"];
[d setObject:[Number numberWithDouble:kCFCharacterSetUppercaseLetter] forKey:@"kCFCharacterSetUppercaseLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetWhitespace] forKey:@"kCFCharacterSetWhitespace"];
[d setObject:[Number numberWithDouble:kCFCharacterSetWhitespaceAndNewline] forKey:@"kCFCharacterSetWhitespaceAndNewline"];
[d setObject:[Number numberWithDouble:kCFCompareAnchored] forKey:@"kCFCompareAnchored"];
[d setObject:[Number numberWithDouble:kCFCompareBackwards] forKey:@"kCFCompareBackwards"];
[d setObject:[Number numberWithDouble:kCFCompareCaseInsensitive] forKey:@"kCFCompareCaseInsensitive"];
[d setObject:[Number numberWithDouble:kCFCompareDiacriticInsensitive] forKey:@"kCFCompareDiacriticInsensitive"];
[d setObject:[Number numberWithDouble:kCFCompareEqualTo] forKey:@"kCFCompareEqualTo"];
[d setObject:[Number numberWithDouble:kCFCompareForcedOrdering] forKey:@"kCFCompareForcedOrdering"];
[d setObject:[Number numberWithDouble:kCFCompareGreaterThan] forKey:@"kCFCompareGreaterThan"];
[d setObject:[Number numberWithDouble:kCFCompareLessThan] forKey:@"kCFCompareLessThan"];
[d setObject:[Number numberWithDouble:kCFCompareLocalized] forKey:@"kCFCompareLocalized"];
[d setObject:[Number numberWithDouble:kCFCompareNonliteral] forKey:@"kCFCompareNonliteral"];
[d setObject:[Number numberWithDouble:kCFCompareNumerically] forKey:@"kCFCompareNumerically"];
[d setObject:[Number numberWithDouble:kCFCompareWidthInsensitive] forKey:@"kCFCompareWidthInsensitive"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_0] forKey:@"kCFCoreFoundationVersionNumber10_0"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_0_3] forKey:@"kCFCoreFoundationVersionNumber10_0_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1] forKey:@"kCFCoreFoundationVersionNumber10_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_1] forKey:@"kCFCoreFoundationVersionNumber10_1_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_2] forKey:@"kCFCoreFoundationVersionNumber10_1_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_3] forKey:@"kCFCoreFoundationVersionNumber10_1_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_4] forKey:@"kCFCoreFoundationVersionNumber10_1_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2] forKey:@"kCFCoreFoundationVersionNumber10_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_1] forKey:@"kCFCoreFoundationVersionNumber10_2_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_2] forKey:@"kCFCoreFoundationVersionNumber10_2_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_3] forKey:@"kCFCoreFoundationVersionNumber10_2_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_4] forKey:@"kCFCoreFoundationVersionNumber10_2_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_5] forKey:@"kCFCoreFoundationVersionNumber10_2_5"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_6] forKey:@"kCFCoreFoundationVersionNumber10_2_6"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_7] forKey:@"kCFCoreFoundationVersionNumber10_2_7"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_8] forKey:@"kCFCoreFoundationVersionNumber10_2_8"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3] forKey:@"kCFCoreFoundationVersionNumber10_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_1] forKey:@"kCFCoreFoundationVersionNumber10_3_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_2] forKey:@"kCFCoreFoundationVersionNumber10_3_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_3] forKey:@"kCFCoreFoundationVersionNumber10_3_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_4] forKey:@"kCFCoreFoundationVersionNumber10_3_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_5] forKey:@"kCFCoreFoundationVersionNumber10_3_5"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_6] forKey:@"kCFCoreFoundationVersionNumber10_3_6"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_7] forKey:@"kCFCoreFoundationVersionNumber10_3_7"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_8] forKey:@"kCFCoreFoundationVersionNumber10_3_8"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_9] forKey:@"kCFCoreFoundationVersionNumber10_3_9"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4] forKey:@"kCFCoreFoundationVersionNumber10_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_1] forKey:@"kCFCoreFoundationVersionNumber10_4_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_10] forKey:@"kCFCoreFoundationVersionNumber10_4_10"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_11] forKey:@"kCFCoreFoundationVersionNumber10_4_11"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_2] forKey:@"kCFCoreFoundationVersionNumber10_4_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_3] forKey:@"kCFCoreFoundationVersionNumber10_4_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_4_Intel] forKey:@"kCFCoreFoundationVersionNumber10_4_4_Intel"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_4_PowerPC] forKey:@"kCFCoreFoundationVersionNumber10_4_4_PowerPC"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_5_Intel] forKey:@"kCFCoreFoundationVersionNumber10_4_5_Intel"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_5_PowerPC] forKey:@"kCFCoreFoundationVersionNumber10_4_5_PowerPC"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_6_Intel] forKey:@"kCFCoreFoundationVersionNumber10_4_6_Intel"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_6_PowerPC] forKey:@"kCFCoreFoundationVersionNumber10_4_6_PowerPC"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_7] forKey:@"kCFCoreFoundationVersionNumber10_4_7"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_8] forKey:@"kCFCoreFoundationVersionNumber10_4_8"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_9] forKey:@"kCFCoreFoundationVersionNumber10_4_9"];
[d setObject:[Number numberWithDouble:kCFDateFormatterFullStyle] forKey:@"kCFDateFormatterFullStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterLongStyle] forKey:@"kCFDateFormatterLongStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterMediumStyle] forKey:@"kCFDateFormatterMediumStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterNoStyle] forKey:@"kCFDateFormatterNoStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterShortStyle] forKey:@"kCFDateFormatterShortStyle"];
[d setObject:[Number numberWithDouble:kCFFileDescriptorReadCallBack] forKey:@"kCFFileDescriptorReadCallBack"];
[d setObject:[Number numberWithDouble:kCFFileDescriptorWriteCallBack] forKey:@"kCFFileDescriptorWriteCallBack"];
[d setObject:[Number numberWithDouble:kCFGregorianAllUnits] forKey:@"kCFGregorianAllUnits"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsDays] forKey:@"kCFGregorianUnitsDays"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsHours] forKey:@"kCFGregorianUnitsHours"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsMinutes] forKey:@"kCFGregorianUnitsMinutes"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsMonths] forKey:@"kCFGregorianUnitsMonths"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsSeconds] forKey:@"kCFGregorianUnitsSeconds"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsYears] forKey:@"kCFGregorianUnitsYears"];
[d setObject:[Number numberWithDouble:kCFMessagePortIsInvalid] forKey:@"kCFMessagePortIsInvalid"];
[d setObject:[Number numberWithDouble:kCFMessagePortReceiveTimeout] forKey:@"kCFMessagePortReceiveTimeout"];
[d setObject:[Number numberWithDouble:kCFMessagePortSendTimeout] forKey:@"kCFMessagePortSendTimeout"];
[d setObject:[Number numberWithDouble:kCFMessagePortSuccess] forKey:@"kCFMessagePortSuccess"];
[d setObject:[Number numberWithDouble:kCFMessagePortTransportError] forKey:@"kCFMessagePortTransportError"];
[d setObject:[Number numberWithDouble:kCFNotFound] forKey:@"kCFNotFound"];
[d setObject:[Number numberWithDouble:kCFNotificationDeliverImmediately] forKey:@"kCFNotificationDeliverImmediately"];
[d setObject:[Number numberWithDouble:kCFNotificationPostToAllSessions] forKey:@"kCFNotificationPostToAllSessions"];
[d setObject:[Number numberWithDouble:kCFNumberCFIndexType] forKey:@"kCFNumberCFIndexType"];
[d setObject:[Number numberWithDouble:kCFNumberCGFloatType] forKey:@"kCFNumberCGFloatType"];
[d setObject:[Number numberWithDouble:kCFNumberCharType] forKey:@"kCFNumberCharType"];
[d setObject:[Number numberWithDouble:kCFNumberDoubleType] forKey:@"kCFNumberDoubleType"];
[d setObject:[Number numberWithDouble:kCFNumberFloat32Type] forKey:@"kCFNumberFloat32Type"];
[d setObject:[Number numberWithDouble:kCFNumberFloat64Type] forKey:@"kCFNumberFloat64Type"];
[d setObject:[Number numberWithDouble:kCFNumberFloatType] forKey:@"kCFNumberFloatType"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterCurrencyStyle] forKey:@"kCFNumberFormatterCurrencyStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterDecimalStyle] forKey:@"kCFNumberFormatterDecimalStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterNoStyle] forKey:@"kCFNumberFormatterNoStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadAfterPrefix] forKey:@"kCFNumberFormatterPadAfterPrefix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadAfterSuffix] forKey:@"kCFNumberFormatterPadAfterSuffix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadBeforePrefix] forKey:@"kCFNumberFormatterPadBeforePrefix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadBeforeSuffix] forKey:@"kCFNumberFormatterPadBeforeSuffix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterParseIntegersOnly] forKey:@"kCFNumberFormatterParseIntegersOnly"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPercentStyle] forKey:@"kCFNumberFormatterPercentStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundCeiling] forKey:@"kCFNumberFormatterRoundCeiling"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundDown] forKey:@"kCFNumberFormatterRoundDown"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundFloor] forKey:@"kCFNumberFormatterRoundFloor"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundHalfDown] forKey:@"kCFNumberFormatterRoundHalfDown"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundHalfEven] forKey:@"kCFNumberFormatterRoundHalfEven"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundHalfUp] forKey:@"kCFNumberFormatterRoundHalfUp"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundUp] forKey:@"kCFNumberFormatterRoundUp"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterScientificStyle] forKey:@"kCFNumberFormatterScientificStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterSpellOutStyle] forKey:@"kCFNumberFormatterSpellOutStyle"];
[d setObject:[Number numberWithDouble:kCFNumberIntType] forKey:@"kCFNumberIntType"];
[d setObject:[Number numberWithDouble:kCFNumberLongLongType] forKey:@"kCFNumberLongLongType"];
[d setObject:[Number numberWithDouble:kCFNumberLongType] forKey:@"kCFNumberLongType"];
[d setObject:[Number numberWithDouble:kCFNumberMaxType] forKey:@"kCFNumberMaxType"];
[d setObject:[Number numberWithDouble:kCFNumberNSIntegerType] forKey:@"kCFNumberNSIntegerType"];
[d setObject:[Number numberWithDouble:kCFNumberSInt16Type] forKey:@"kCFNumberSInt16Type"];
[d setObject:[Number numberWithDouble:kCFNumberSInt32Type] forKey:@"kCFNumberSInt32Type"];
[d setObject:[Number numberWithDouble:kCFNumberSInt64Type] forKey:@"kCFNumberSInt64Type"];
[d setObject:[Number numberWithDouble:kCFNumberSInt8Type] forKey:@"kCFNumberSInt8Type"];
[d setObject:[Number numberWithDouble:kCFNumberShortType] forKey:@"kCFNumberShortType"];
[d setObject:[Number numberWithDouble:kCFPropertyListBinaryFormat_v1_0] forKey:@"kCFPropertyListBinaryFormat_v1_0"];
[d setObject:[Number numberWithDouble:kCFPropertyListImmutable] forKey:@"kCFPropertyListImmutable"];
[d setObject:[Number numberWithDouble:kCFPropertyListMutableContainers] forKey:@"kCFPropertyListMutableContainers"];
[d setObject:[Number numberWithDouble:kCFPropertyListMutableContainersAndLeaves] forKey:@"kCFPropertyListMutableContainersAndLeaves"];
[d setObject:[Number numberWithDouble:kCFPropertyListOpenStepFormat] forKey:@"kCFPropertyListOpenStepFormat"];
[d setObject:[Number numberWithDouble:kCFPropertyListXMLFormat_v1_0] forKey:@"kCFPropertyListXMLFormat_v1_0"];
[d setObject:[Number numberWithDouble:kCFRunLoopAfterWaiting] forKey:@"kCFRunLoopAfterWaiting"];
[d setObject:[Number numberWithDouble:kCFRunLoopAllActivities] forKey:@"kCFRunLoopAllActivities"];
[d setObject:[Number numberWithDouble:kCFRunLoopBeforeSources] forKey:@"kCFRunLoopBeforeSources"];
[d setObject:[Number numberWithDouble:kCFRunLoopBeforeTimers] forKey:@"kCFRunLoopBeforeTimers"];
[d setObject:[Number numberWithDouble:kCFRunLoopBeforeWaiting] forKey:@"kCFRunLoopBeforeWaiting"];
[d setObject:[Number numberWithDouble:kCFRunLoopEntry] forKey:@"kCFRunLoopEntry"];
[d setObject:[Number numberWithDouble:kCFRunLoopExit] forKey:@"kCFRunLoopExit"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunFinished] forKey:@"kCFRunLoopRunFinished"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunHandledSource] forKey:@"kCFRunLoopRunHandledSource"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunStopped] forKey:@"kCFRunLoopRunStopped"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunTimedOut] forKey:@"kCFRunLoopRunTimedOut"];
[d setObject:[Number numberWithDouble:kCFSocketAcceptCallBack] forKey:@"kCFSocketAcceptCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableAcceptCallBack] forKey:@"kCFSocketAutomaticallyReenableAcceptCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableDataCallBack] forKey:@"kCFSocketAutomaticallyReenableDataCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableReadCallBack] forKey:@"kCFSocketAutomaticallyReenableReadCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableWriteCallBack] forKey:@"kCFSocketAutomaticallyReenableWriteCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketCloseOnInvalidate] forKey:@"kCFSocketCloseOnInvalidate"];
[d setObject:[Number numberWithDouble:kCFSocketConnectCallBack] forKey:@"kCFSocketConnectCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketDataCallBack] forKey:@"kCFSocketDataCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketError] forKey:@"kCFSocketError"];
[d setObject:[Number numberWithDouble:kCFSocketNoCallBack] forKey:@"kCFSocketNoCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketReadCallBack] forKey:@"kCFSocketReadCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketSuccess] forKey:@"kCFSocketSuccess"];
[d setObject:[Number numberWithDouble:kCFSocketTimeout] forKey:@"kCFSocketTimeout"];
[d setObject:[Number numberWithDouble:kCFSocketWriteCallBack] forKey:@"kCFSocketWriteCallBack"];
[d setObject:[Number numberWithDouble:kCFStreamErrorDomainCustom] forKey:@"kCFStreamErrorDomainCustom"];
[d setObject:[Number numberWithDouble:kCFStreamErrorDomainMacOSStatus] forKey:@"kCFStreamErrorDomainMacOSStatus"];
[d setObject:[Number numberWithDouble:kCFStreamErrorDomainPOSIX] forKey:@"kCFStreamErrorDomainPOSIX"];
[d setObject:[Number numberWithDouble:kCFStreamEventCanAcceptBytes] forKey:@"kCFStreamEventCanAcceptBytes"];
[d setObject:[Number numberWithDouble:kCFStreamEventEndEncountered] forKey:@"kCFStreamEventEndEncountered"];
[d setObject:[Number numberWithDouble:kCFStreamEventErrorOccurred] forKey:@"kCFStreamEventErrorOccurred"];
[d setObject:[Number numberWithDouble:kCFStreamEventHasBytesAvailable] forKey:@"kCFStreamEventHasBytesAvailable"];
[d setObject:[Number numberWithDouble:kCFStreamEventNone] forKey:@"kCFStreamEventNone"];
[d setObject:[Number numberWithDouble:kCFStreamEventOpenCompleted] forKey:@"kCFStreamEventOpenCompleted"];
[d setObject:[Number numberWithDouble:kCFStreamStatusAtEnd] forKey:@"kCFStreamStatusAtEnd"];
[d setObject:[Number numberWithDouble:kCFStreamStatusClosed] forKey:@"kCFStreamStatusClosed"];
[d setObject:[Number numberWithDouble:kCFStreamStatusError] forKey:@"kCFStreamStatusError"];
[d setObject:[Number numberWithDouble:kCFStreamStatusNotOpen] forKey:@"kCFStreamStatusNotOpen"];
[d setObject:[Number numberWithDouble:kCFStreamStatusOpen] forKey:@"kCFStreamStatusOpen"];
[d setObject:[Number numberWithDouble:kCFStreamStatusOpening] forKey:@"kCFStreamStatusOpening"];
[d setObject:[Number numberWithDouble:kCFStreamStatusReading] forKey:@"kCFStreamStatusReading"];
[d setObject:[Number numberWithDouble:kCFStreamStatusWriting] forKey:@"kCFStreamStatusWriting"];
[d setObject:[Number numberWithDouble:kCFStringEncodingANSEL] forKey:@"kCFStringEncodingANSEL"];
[d setObject:[Number numberWithDouble:kCFStringEncodingASCII] forKey:@"kCFStringEncodingASCII"];
[d setObject:[Number numberWithDouble:kCFStringEncodingBig5] forKey:@"kCFStringEncodingBig5"];
[d setObject:[Number numberWithDouble:kCFStringEncodingBig5_E] forKey:@"kCFStringEncodingBig5_E"];
[d setObject:[Number numberWithDouble:kCFStringEncodingBig5_HKSCS_1999] forKey:@"kCFStringEncodingBig5_HKSCS_1999"];
[d setObject:[Number numberWithDouble:kCFStringEncodingCNS_11643_92_P1] forKey:@"kCFStringEncodingCNS_11643_92_P1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingCNS_11643_92_P2] forKey:@"kCFStringEncodingCNS_11643_92_P2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingCNS_11643_92_P3] forKey:@"kCFStringEncodingCNS_11643_92_P3"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSArabic] forKey:@"kCFStringEncodingDOSArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSBalticRim] forKey:@"kCFStringEncodingDOSBalticRim"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSCanadianFrench] forKey:@"kCFStringEncodingDOSCanadianFrench"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSChineseSimplif] forKey:@"kCFStringEncodingDOSChineseSimplif"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSChineseTrad] forKey:@"kCFStringEncodingDOSChineseTrad"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSCyrillic] forKey:@"kCFStringEncodingDOSCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSGreek] forKey:@"kCFStringEncodingDOSGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSGreek1] forKey:@"kCFStringEncodingDOSGreek1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSGreek2] forKey:@"kCFStringEncodingDOSGreek2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSHebrew] forKey:@"kCFStringEncodingDOSHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSIcelandic] forKey:@"kCFStringEncodingDOSIcelandic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSJapanese] forKey:@"kCFStringEncodingDOSJapanese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSKorean] forKey:@"kCFStringEncodingDOSKorean"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSLatin1] forKey:@"kCFStringEncodingDOSLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSLatin2] forKey:@"kCFStringEncodingDOSLatin2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSLatinUS] forKey:@"kCFStringEncodingDOSLatinUS"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSNordic] forKey:@"kCFStringEncodingDOSNordic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSPortuguese] forKey:@"kCFStringEncodingDOSPortuguese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSRussian] forKey:@"kCFStringEncodingDOSRussian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSThai] forKey:@"kCFStringEncodingDOSThai"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSTurkish] forKey:@"kCFStringEncodingDOSTurkish"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEBCDIC_CP037] forKey:@"kCFStringEncodingEBCDIC_CP037"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEBCDIC_US] forKey:@"kCFStringEncodingEBCDIC_US"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_CN] forKey:@"kCFStringEncodingEUC_CN"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_JP] forKey:@"kCFStringEncodingEUC_JP"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_KR] forKey:@"kCFStringEncodingEUC_KR"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_TW] forKey:@"kCFStringEncodingEUC_TW"];
[d setObject:[Number numberWithDouble:kCFStringEncodingGBK_95] forKey:@"kCFStringEncodingGBK_95"];
[d setObject:[Number numberWithDouble:kCFStringEncodingGB_18030_2000] forKey:@"kCFStringEncodingGB_18030_2000"];
[d setObject:[Number numberWithDouble:kCFStringEncodingGB_2312_80] forKey:@"kCFStringEncodingGB_2312_80"];
[d setObject:[Number numberWithDouble:kCFStringEncodingHZ_GB_2312] forKey:@"kCFStringEncodingHZ_GB_2312"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin1] forKey:@"kCFStringEncodingISOLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin10] forKey:@"kCFStringEncodingISOLatin10"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin2] forKey:@"kCFStringEncodingISOLatin2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin3] forKey:@"kCFStringEncodingISOLatin3"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin4] forKey:@"kCFStringEncodingISOLatin4"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin5] forKey:@"kCFStringEncodingISOLatin5"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin6] forKey:@"kCFStringEncodingISOLatin6"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin7] forKey:@"kCFStringEncodingISOLatin7"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin8] forKey:@"kCFStringEncodingISOLatin8"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin9] forKey:@"kCFStringEncodingISOLatin9"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinArabic] forKey:@"kCFStringEncodingISOLatinArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinCyrillic] forKey:@"kCFStringEncodingISOLatinCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinGreek] forKey:@"kCFStringEncodingISOLatinGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinHebrew] forKey:@"kCFStringEncodingISOLatinHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinThai] forKey:@"kCFStringEncodingISOLatinThai"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_CN] forKey:@"kCFStringEncodingISO_2022_CN"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_CN_EXT] forKey:@"kCFStringEncodingISO_2022_CN_EXT"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP] forKey:@"kCFStringEncodingISO_2022_JP"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP_1] forKey:@"kCFStringEncodingISO_2022_JP_1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP_2] forKey:@"kCFStringEncodingISO_2022_JP_2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP_3] forKey:@"kCFStringEncodingISO_2022_JP_3"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_KR] forKey:@"kCFStringEncodingISO_2022_KR"];
[d setObject:[Number numberWithDouble:kCFStringEncodingInvalidId] forKey:@"kCFStringEncodingInvalidId"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_C6226_78] forKey:@"kCFStringEncodingJIS_C6226_78"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0201_76] forKey:@"kCFStringEncodingJIS_X0201_76"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0208_83] forKey:@"kCFStringEncodingJIS_X0208_83"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0208_90] forKey:@"kCFStringEncodingJIS_X0208_90"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0212_90] forKey:@"kCFStringEncodingJIS_X0212_90"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKOI8_R] forKey:@"kCFStringEncodingKOI8_R"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKOI8_U] forKey:@"kCFStringEncodingKOI8_U"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKSC_5601_87] forKey:@"kCFStringEncodingKSC_5601_87"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKSC_5601_92_Johab] forKey:@"kCFStringEncodingKSC_5601_92_Johab"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacArabic] forKey:@"kCFStringEncodingMacArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacArmenian] forKey:@"kCFStringEncodingMacArmenian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacBengali] forKey:@"kCFStringEncodingMacBengali"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacBurmese] forKey:@"kCFStringEncodingMacBurmese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCeltic] forKey:@"kCFStringEncodingMacCeltic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCentralEurRoman] forKey:@"kCFStringEncodingMacCentralEurRoman"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacChineseSimp] forKey:@"kCFStringEncodingMacChineseSimp"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacChineseTrad] forKey:@"kCFStringEncodingMacChineseTrad"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCroatian] forKey:@"kCFStringEncodingMacCroatian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCyrillic] forKey:@"kCFStringEncodingMacCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacDevanagari] forKey:@"kCFStringEncodingMacDevanagari"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacDingbats] forKey:@"kCFStringEncodingMacDingbats"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacEthiopic] forKey:@"kCFStringEncodingMacEthiopic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacExtArabic] forKey:@"kCFStringEncodingMacExtArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacFarsi] forKey:@"kCFStringEncodingMacFarsi"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGaelic] forKey:@"kCFStringEncodingMacGaelic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGeorgian] forKey:@"kCFStringEncodingMacGeorgian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGreek] forKey:@"kCFStringEncodingMacGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGujarati] forKey:@"kCFStringEncodingMacGujarati"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGurmukhi] forKey:@"kCFStringEncodingMacGurmukhi"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacHFS] forKey:@"kCFStringEncodingMacHFS"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacHebrew] forKey:@"kCFStringEncodingMacHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacIcelandic] forKey:@"kCFStringEncodingMacIcelandic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacInuit] forKey:@"kCFStringEncodingMacInuit"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacJapanese] forKey:@"kCFStringEncodingMacJapanese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacKannada] forKey:@"kCFStringEncodingMacKannada"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacKhmer] forKey:@"kCFStringEncodingMacKhmer"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacKorean] forKey:@"kCFStringEncodingMacKorean"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacLaotian] forKey:@"kCFStringEncodingMacLaotian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacMalayalam] forKey:@"kCFStringEncodingMacMalayalam"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacMongolian] forKey:@"kCFStringEncodingMacMongolian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacOriya] forKey:@"kCFStringEncodingMacOriya"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacRoman] forKey:@"kCFStringEncodingMacRoman"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacRomanLatin1] forKey:@"kCFStringEncodingMacRomanLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacRomanian] forKey:@"kCFStringEncodingMacRomanian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacSinhalese] forKey:@"kCFStringEncodingMacSinhalese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacSymbol] forKey:@"kCFStringEncodingMacSymbol"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTamil] forKey:@"kCFStringEncodingMacTamil"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTelugu] forKey:@"kCFStringEncodingMacTelugu"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacThai] forKey:@"kCFStringEncodingMacThai"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTibetan] forKey:@"kCFStringEncodingMacTibetan"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTurkish] forKey:@"kCFStringEncodingMacTurkish"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacUkrainian] forKey:@"kCFStringEncodingMacUkrainian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacVT100] forKey:@"kCFStringEncodingMacVT100"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacVietnamese] forKey:@"kCFStringEncodingMacVietnamese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingNextStepJapanese] forKey:@"kCFStringEncodingNextStepJapanese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingNextStepLatin] forKey:@"kCFStringEncodingNextStepLatin"];
[d setObject:[Number numberWithDouble:kCFStringEncodingNonLossyASCII] forKey:@"kCFStringEncodingNonLossyASCII"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS] forKey:@"kCFStringEncodingShiftJIS"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS_X0213] forKey:@"kCFStringEncodingShiftJIS_X0213"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS_X0213_00] forKey:@"kCFStringEncodingShiftJIS_X0213_00"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS_X0213_MenKuTen] forKey:@"kCFStringEncodingShiftJIS_X0213_MenKuTen"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF16] forKey:@"kCFStringEncodingUTF16"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF16BE] forKey:@"kCFStringEncodingUTF16BE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF16LE] forKey:@"kCFStringEncodingUTF16LE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF32] forKey:@"kCFStringEncodingUTF32"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF32BE] forKey:@"kCFStringEncodingUTF32BE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF32LE] forKey:@"kCFStringEncodingUTF32LE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF8] forKey:@"kCFStringEncodingUTF8"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUnicode] forKey:@"kCFStringEncodingUnicode"];
[d setObject:[Number numberWithDouble:kCFStringEncodingVISCII] forKey:@"kCFStringEncodingVISCII"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsArabic] forKey:@"kCFStringEncodingWindowsArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsBalticRim] forKey:@"kCFStringEncodingWindowsBalticRim"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsCyrillic] forKey:@"kCFStringEncodingWindowsCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsGreek] forKey:@"kCFStringEncodingWindowsGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsHebrew] forKey:@"kCFStringEncodingWindowsHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsKoreanJohab] forKey:@"kCFStringEncodingWindowsKoreanJohab"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsLatin1] forKey:@"kCFStringEncodingWindowsLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsLatin2] forKey:@"kCFStringEncodingWindowsLatin2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsLatin5] forKey:@"kCFStringEncodingWindowsLatin5"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsVietnamese] forKey:@"kCFStringEncodingWindowsVietnamese"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormC] forKey:@"kCFStringNormalizationFormC"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormD] forKey:@"kCFStringNormalizationFormD"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormKC] forKey:@"kCFStringNormalizationFormKC"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormKD] forKey:@"kCFStringNormalizationFormKD"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerAttributeLanguage] forKey:@"kCFStringTokenizerAttributeLanguage"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerAttributeLatinTranscription] forKey:@"kCFStringTokenizerAttributeLatinTranscription"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasDerivedSubTokensMask] forKey:@"kCFStringTokenizerTokenHasDerivedSubTokensMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasHasNumbersMask] forKey:@"kCFStringTokenizerTokenHasHasNumbersMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasNonLettersMask] forKey:@"kCFStringTokenizerTokenHasNonLettersMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasSubTokensMask] forKey:@"kCFStringTokenizerTokenHasSubTokensMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenIsCJWordMask] forKey:@"kCFStringTokenizerTokenIsCJWordMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenNone] forKey:@"kCFStringTokenizerTokenNone"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenNormal] forKey:@"kCFStringTokenizerTokenNormal"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitLineBreak] forKey:@"kCFStringTokenizerUnitLineBreak"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitParagraph] forKey:@"kCFStringTokenizerUnitParagraph"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitSentence] forKey:@"kCFStringTokenizerUnitSentence"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitWord] forKey:@"kCFStringTokenizerUnitWord"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitWordBoundary] forKey:@"kCFStringTokenizerUnitWordBoundary"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleDaylightSaving] forKey:@"kCFTimeZoneNameStyleDaylightSaving"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleShortDaylightSaving] forKey:@"kCFTimeZoneNameStyleShortDaylightSaving"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleShortStandard] forKey:@"kCFTimeZoneNameStyleShortStandard"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleStandard] forKey:@"kCFTimeZoneNameStyleStandard"];
[d setObject:[Number numberWithDouble:kCFURLComponentFragment] forKey:@"kCFURLComponentFragment"];
[d setObject:[Number numberWithDouble:kCFURLComponentHost] forKey:@"kCFURLComponentHost"];
[d setObject:[Number numberWithDouble:kCFURLComponentNetLocation] forKey:@"kCFURLComponentNetLocation"];
[d setObject:[Number numberWithDouble:kCFURLComponentParameterString] forKey:@"kCFURLComponentParameterString"];
[d setObject:[Number numberWithDouble:kCFURLComponentPassword] forKey:@"kCFURLComponentPassword"];
[d setObject:[Number numberWithDouble:kCFURLComponentPath] forKey:@"kCFURLComponentPath"];
[d setObject:[Number numberWithDouble:kCFURLComponentPort] forKey:@"kCFURLComponentPort"];
[d setObject:[Number numberWithDouble:kCFURLComponentQuery] forKey:@"kCFURLComponentQuery"];
[d setObject:[Number numberWithDouble:kCFURLComponentResourceSpecifier] forKey:@"kCFURLComponentResourceSpecifier"];
[d setObject:[Number numberWithDouble:kCFURLComponentScheme] forKey:@"kCFURLComponentScheme"];
[d setObject:[Number numberWithDouble:kCFURLComponentUser] forKey:@"kCFURLComponentUser"];
[d setObject:[Number numberWithDouble:kCFURLComponentUserInfo] forKey:@"kCFURLComponentUserInfo"];
[d setObject:[Number numberWithDouble:kCFURLHFSPathStyle] forKey:@"kCFURLHFSPathStyle"];
[d setObject:[Number numberWithDouble:kCFURLImproperArgumentsError] forKey:@"kCFURLImproperArgumentsError"];
[d setObject:[Number numberWithDouble:kCFURLPOSIXPathStyle] forKey:@"kCFURLPOSIXPathStyle"];
[d setObject:[Number numberWithDouble:kCFURLPropertyKeyUnavailableError] forKey:@"kCFURLPropertyKeyUnavailableError"];
[d setObject:[Number numberWithDouble:kCFURLRemoteHostUnavailableError] forKey:@"kCFURLRemoteHostUnavailableError"];
[d setObject:[Number numberWithDouble:kCFURLResourceAccessViolationError] forKey:@"kCFURLResourceAccessViolationError"];
[d setObject:[Number numberWithDouble:kCFURLResourceNotFoundError] forKey:@"kCFURLResourceNotFoundError"];
[d setObject:[Number numberWithDouble:kCFURLTimeoutError] forKey:@"kCFURLTimeoutError"];
[d setObject:[Number numberWithDouble:kCFURLUnknownError] forKey:@"kCFURLUnknownError"];
[d setObject:[Number numberWithDouble:kCFURLUnknownPropertyKeyError] forKey:@"kCFURLUnknownPropertyKeyError"];
[d setObject:[Number numberWithDouble:kCFURLUnknownSchemeError] forKey:@"kCFURLUnknownSchemeError"];
[d setObject:[Number numberWithDouble:kCFURLWindowsPathStyle] forKey:@"kCFURLWindowsPathStyle"];
[d setObject:[Number numberWithDouble:kCFUserNotificationAlternateResponse] forKey:@"kCFUserNotificationAlternateResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationCancelResponse] forKey:@"kCFUserNotificationCancelResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationCautionAlertLevel] forKey:@"kCFUserNotificationCautionAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationDefaultResponse] forKey:@"kCFUserNotificationDefaultResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationNoDefaultButtonFlag] forKey:@"kCFUserNotificationNoDefaultButtonFlag"];
[d setObject:[Number numberWithDouble:kCFUserNotificationNoteAlertLevel] forKey:@"kCFUserNotificationNoteAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationOtherResponse] forKey:@"kCFUserNotificationOtherResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationPlainAlertLevel] forKey:@"kCFUserNotificationPlainAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationStopAlertLevel] forKey:@"kCFUserNotificationStopAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationUseRadioButtonsFlag] forKey:@"kCFUserNotificationUseRadioButtonsFlag"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeCharacter] forKey:@"kCFXMLEntityTypeCharacter"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeParameter] forKey:@"kCFXMLEntityTypeParameter"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeParsedExternal] forKey:@"kCFXMLEntityTypeParsedExternal"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeParsedInternal] forKey:@"kCFXMLEntityTypeParsedInternal"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeUnparsed] forKey:@"kCFXMLEntityTypeUnparsed"];
[d setObject:[Number numberWithDouble:kCFXMLErrorElementlessDocument] forKey:@"kCFXMLErrorElementlessDocument"];
[d setObject:[Number numberWithDouble:kCFXMLErrorEncodingConversionFailure] forKey:@"kCFXMLErrorEncodingConversionFailure"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedCDSect] forKey:@"kCFXMLErrorMalformedCDSect"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedCharacterReference] forKey:@"kCFXMLErrorMalformedCharacterReference"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedCloseTag] forKey:@"kCFXMLErrorMalformedCloseTag"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedComment] forKey:@"kCFXMLErrorMalformedComment"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedDTD] forKey:@"kCFXMLErrorMalformedDTD"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedDocument] forKey:@"kCFXMLErrorMalformedDocument"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedName] forKey:@"kCFXMLErrorMalformedName"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedParsedCharacterData] forKey:@"kCFXMLErrorMalformedParsedCharacterData"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedProcessingInstruction] forKey:@"kCFXMLErrorMalformedProcessingInstruction"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedStartTag] forKey:@"kCFXMLErrorMalformedStartTag"];
[d setObject:[Number numberWithDouble:kCFXMLErrorNoData] forKey:@"kCFXMLErrorNoData"];
[d setObject:[Number numberWithDouble:kCFXMLErrorUnexpectedEOF] forKey:@"kCFXMLErrorUnexpectedEOF"];
[d setObject:[Number numberWithDouble:kCFXMLErrorUnknownEncoding] forKey:@"kCFXMLErrorUnknownEncoding"];
[d setObject:[Number numberWithDouble:kCFXMLNodeCurrentVersion] forKey:@"kCFXMLNodeCurrentVersion"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeAttribute] forKey:@"kCFXMLNodeTypeAttribute"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeAttributeListDeclaration] forKey:@"kCFXMLNodeTypeAttributeListDeclaration"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeCDATASection] forKey:@"kCFXMLNodeTypeCDATASection"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeComment] forKey:@"kCFXMLNodeTypeComment"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeDocument] forKey:@"kCFXMLNodeTypeDocument"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeDocumentFragment] forKey:@"kCFXMLNodeTypeDocumentFragment"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeDocumentType] forKey:@"kCFXMLNodeTypeDocumentType"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeElement] forKey:@"kCFXMLNodeTypeElement"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeElementTypeDeclaration] forKey:@"kCFXMLNodeTypeElementTypeDeclaration"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeEntity] forKey:@"kCFXMLNodeTypeEntity"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeEntityReference] forKey:@"kCFXMLNodeTypeEntityReference"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeNotation] forKey:@"kCFXMLNodeTypeNotation"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeProcessingInstruction] forKey:@"kCFXMLNodeTypeProcessingInstruction"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeText] forKey:@"kCFXMLNodeTypeText"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeWhitespace] forKey:@"kCFXMLNodeTypeWhitespace"];
[d setObject:[Number numberWithDouble:kCFXMLParserAddImpliedAttributes] forKey:@"kCFXMLParserAddImpliedAttributes"];
[d setObject:[Number numberWithDouble:kCFXMLParserAllOptions] forKey:@"kCFXMLParserAllOptions"];
[d setObject:[Number numberWithDouble:kCFXMLParserNoOptions] forKey:@"kCFXMLParserNoOptions"];
[d setObject:[Number numberWithDouble:kCFXMLParserReplacePhysicalEntities] forKey:@"kCFXMLParserReplacePhysicalEntities"];
[d setObject:[Number numberWithDouble:kCFXMLParserResolveExternalEntities] forKey:@"kCFXMLParserResolveExternalEntities"];
[d setObject:[Number numberWithDouble:kCFXMLParserSkipMetaData] forKey:@"kCFXMLParserSkipMetaData"];
[d setObject:[Number numberWithDouble:kCFXMLParserSkipWhitespace] forKey:@"kCFXMLParserSkipWhitespace"];
[d setObject:[Number numberWithDouble:kCFXMLParserValidateDocument] forKey:@"kCFXMLParserValidateDocument"];
[d setObject:[Number numberWithDouble:kCFXMLStatusParseInProgress] forKey:@"kCFXMLStatusParseInProgress"];
[d setObject:[Number numberWithDouble:kCFXMLStatusParseNotBegun] forKey:@"kCFXMLStatusParseNotBegun"];
[d setObject:[Number numberWithDouble:kCFXMLStatusParseSuccessful] forKey:@"kCFXMLStatusParseSuccessful"];
[d setObject:[Number numberWithDouble:kCFAbsoluteTimeIntervalSince1904] forKey:@"kCFAbsoluteTimeIntervalSince1904"];
[d setObject:[Number numberWithDouble:kCFAbsoluteTimeIntervalSince1970] forKey:@"kCFAbsoluteTimeIntervalSince1970"];
[d setObject:(NSString *)kCFBuddhistCalendar forKey:@"kCFBuddhistCalendar"];
[d setObject:(NSString *)kCFBundleDevelopmentRegionKey forKey:@"kCFBundleDevelopmentRegionKey"];
[d setObject:(NSString *)kCFBundleExecutableKey forKey:@"kCFBundleExecutableKey"];
[d setObject:(NSString *)kCFBundleIdentifierKey forKey:@"kCFBundleIdentifierKey"];
[d setObject:(NSString *)kCFBundleInfoDictionaryVersionKey forKey:@"kCFBundleInfoDictionaryVersionKey"];
[d setObject:(NSString *)kCFBundleLocalizationsKey forKey:@"kCFBundleLocalizationsKey"];
[d setObject:(NSString *)kCFBundleNameKey forKey:@"kCFBundleNameKey"];
[d setObject:(NSString *)kCFBundleVersionKey forKey:@"kCFBundleVersionKey"];
[d setObject:(NSString *)kCFChineseCalendar forKey:@"kCFChineseCalendar"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber] forKey:@"kCFCoreFoundationVersionNumber"];
[d setObject:(NSString *)kCFDateFormatterAMSymbol forKey:@"kCFDateFormatterAMSymbol"];
[d setObject:(NSString *)kCFDateFormatterCalendar forKey:@"kCFDateFormatterCalendar"];
[d setObject:(NSString *)kCFDateFormatterCalendarName forKey:@"kCFDateFormatterCalendarName"];
[d setObject:(NSString *)kCFDateFormatterDefaultDate forKey:@"kCFDateFormatterDefaultDate"];
[d setObject:(NSString *)kCFDateFormatterDefaultFormat forKey:@"kCFDateFormatterDefaultFormat"];
[d setObject:(NSString *)kCFDateFormatterEraSymbols forKey:@"kCFDateFormatterEraSymbols"];
[d setObject:(NSString *)kCFDateFormatterGregorianStartDate forKey:@"kCFDateFormatterGregorianStartDate"];
[d setObject:(NSString *)kCFDateFormatterIsLenient forKey:@"kCFDateFormatterIsLenient"];
[d setObject:(NSString *)kCFDateFormatterLongEraSymbols forKey:@"kCFDateFormatterLongEraSymbols"];
[d setObject:(NSString *)kCFDateFormatterMonthSymbols forKey:@"kCFDateFormatterMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterPMSymbol forKey:@"kCFDateFormatterPMSymbol"];
[d setObject:(NSString *)kCFDateFormatterQuarterSymbols forKey:@"kCFDateFormatterQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortMonthSymbols forKey:@"kCFDateFormatterShortMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortQuarterSymbols forKey:@"kCFDateFormatterShortQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortStandaloneMonthSymbols forKey:@"kCFDateFormatterShortStandaloneMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortStandaloneQuarterSymbols forKey:@"kCFDateFormatterShortStandaloneQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterShortStandaloneWeekdaySymbols forKey:@"kCFDateFormatterShortStandaloneWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterShortWeekdaySymbols forKey:@"kCFDateFormatterShortWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterStandaloneMonthSymbols forKey:@"kCFDateFormatterStandaloneMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterStandaloneQuarterSymbols forKey:@"kCFDateFormatterStandaloneQuarterSymbols"];
[d setObject:(NSString *)kCFDateFormatterStandaloneWeekdaySymbols forKey:@"kCFDateFormatterStandaloneWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterTimeZone forKey:@"kCFDateFormatterTimeZone"];
[d setObject:(NSString *)kCFDateFormatterTwoDigitStartDate forKey:@"kCFDateFormatterTwoDigitStartDate"];
[d setObject:(NSString *)kCFDateFormatterVeryShortMonthSymbols forKey:@"kCFDateFormatterVeryShortMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterVeryShortStandaloneMonthSymbols forKey:@"kCFDateFormatterVeryShortStandaloneMonthSymbols"];
[d setObject:(NSString *)kCFDateFormatterVeryShortStandaloneWeekdaySymbols forKey:@"kCFDateFormatterVeryShortStandaloneWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterVeryShortWeekdaySymbols forKey:@"kCFDateFormatterVeryShortWeekdaySymbols"];
[d setObject:(NSString *)kCFDateFormatterWeekdaySymbols forKey:@"kCFDateFormatterWeekdaySymbols"];
[d setObject:(NSString *)kCFErrorDescriptionKey forKey:@"kCFErrorDescriptionKey"];
[d setObject:(NSString *)kCFErrorDomainCocoa forKey:@"kCFErrorDomainCocoa"];
[d setObject:(NSString *)kCFErrorDomainMach forKey:@"kCFErrorDomainMach"];
[d setObject:(NSString *)kCFErrorDomainOSStatus forKey:@"kCFErrorDomainOSStatus"];
[d setObject:(NSString *)kCFErrorDomainPOSIX forKey:@"kCFErrorDomainPOSIX"];
[d setObject:(NSString *)kCFErrorLocalizedDescriptionKey forKey:@"kCFErrorLocalizedDescriptionKey"];
[d setObject:(NSString *)kCFErrorLocalizedFailureReasonKey forKey:@"kCFErrorLocalizedFailureReasonKey"];
[d setObject:(NSString *)kCFErrorLocalizedRecoverySuggestionKey forKey:@"kCFErrorLocalizedRecoverySuggestionKey"];
[d setObject:(NSString *)kCFErrorUnderlyingErrorKey forKey:@"kCFErrorUnderlyingErrorKey"];
[d setObject:(NSString *)kCFGregorianCalendar forKey:@"kCFGregorianCalendar"];
[d setObject:(NSString *)kCFHebrewCalendar forKey:@"kCFHebrewCalendar"];
[d setObject:(NSString *)kCFIslamicCalendar forKey:@"kCFIslamicCalendar"];
[d setObject:(NSString *)kCFIslamicCivilCalendar forKey:@"kCFIslamicCivilCalendar"];
[d setObject:(NSString *)kCFJapaneseCalendar forKey:@"kCFJapaneseCalendar"];
[d setObject:(NSString *)kCFLocaleCalendar forKey:@"kCFLocaleCalendar"];
[d setObject:(NSString *)kCFLocaleCalendarIdentifier forKey:@"kCFLocaleCalendarIdentifier"];
[d setObject:(NSString *)kCFLocaleCollationIdentifier forKey:@"kCFLocaleCollationIdentifier"];
[d setObject:(NSString *)kCFLocaleCountryCode forKey:@"kCFLocaleCountryCode"];
[d setObject:(NSString *)kCFLocaleCurrencyCode forKey:@"kCFLocaleCurrencyCode"];
[d setObject:(NSString *)kCFLocaleCurrencySymbol forKey:@"kCFLocaleCurrencySymbol"];
[d setObject:(NSString *)kCFLocaleCurrentLocaleDidChangeNotification forKey:@"kCFLocaleCurrentLocaleDidChangeNotification"];
[d setObject:(NSString *)kCFLocaleDecimalSeparator forKey:@"kCFLocaleDecimalSeparator"];
[d setObject:(NSString *)kCFLocaleExemplarCharacterSet forKey:@"kCFLocaleExemplarCharacterSet"];
[d setObject:(NSString *)kCFLocaleGroupingSeparator forKey:@"kCFLocaleGroupingSeparator"];
[d setObject:(NSString *)kCFLocaleIdentifier forKey:@"kCFLocaleIdentifier"];
[d setObject:(NSString *)kCFLocaleLanguageCode forKey:@"kCFLocaleLanguageCode"];
[d setObject:(NSString *)kCFLocaleMeasurementSystem forKey:@"kCFLocaleMeasurementSystem"];
[d setObject:(NSString *)kCFLocaleScriptCode forKey:@"kCFLocaleScriptCode"];
[d setObject:(NSString *)kCFLocaleUsesMetricSystem forKey:@"kCFLocaleUsesMetricSystem"];
[d setObject:(NSString *)kCFLocaleVariantCode forKey:@"kCFLocaleVariantCode"];
[d setObject:(NSString *)kCFNumberFormatterAlwaysShowDecimalSeparator forKey:@"kCFNumberFormatterAlwaysShowDecimalSeparator"];
[d setObject:(NSString *)kCFNumberFormatterCurrencyCode forKey:@"kCFNumberFormatterCurrencyCode"];
[d setObject:(NSString *)kCFNumberFormatterCurrencyDecimalSeparator forKey:@"kCFNumberFormatterCurrencyDecimalSeparator"];
[d setObject:(NSString *)kCFNumberFormatterCurrencyGroupingSeparator forKey:@"kCFNumberFormatterCurrencyGroupingSeparator"];
[d setObject:(NSString *)kCFNumberFormatterCurrencySymbol forKey:@"kCFNumberFormatterCurrencySymbol"];
[d setObject:(NSString *)kCFNumberFormatterDecimalSeparator forKey:@"kCFNumberFormatterDecimalSeparator"];
[d setObject:(NSString *)kCFNumberFormatterDefaultFormat forKey:@"kCFNumberFormatterDefaultFormat"];
[d setObject:(NSString *)kCFNumberFormatterExponentSymbol forKey:@"kCFNumberFormatterExponentSymbol"];
[d setObject:(NSString *)kCFNumberFormatterFormatWidth forKey:@"kCFNumberFormatterFormatWidth"];
[d setObject:(NSString *)kCFNumberFormatterGroupingSeparator forKey:@"kCFNumberFormatterGroupingSeparator"];
[d setObject:(NSString *)kCFNumberFormatterGroupingSize forKey:@"kCFNumberFormatterGroupingSize"];
[d setObject:(NSString *)kCFNumberFormatterInfinitySymbol forKey:@"kCFNumberFormatterInfinitySymbol"];
[d setObject:(NSString *)kCFNumberFormatterInternationalCurrencySymbol forKey:@"kCFNumberFormatterInternationalCurrencySymbol"];
[d setObject:(NSString *)kCFNumberFormatterIsLenient forKey:@"kCFNumberFormatterIsLenient"];
[d setObject:(NSString *)kCFNumberFormatterMaxFractionDigits forKey:@"kCFNumberFormatterMaxFractionDigits"];
[d setObject:(NSString *)kCFNumberFormatterMaxIntegerDigits forKey:@"kCFNumberFormatterMaxIntegerDigits"];
[d setObject:(NSString *)kCFNumberFormatterMaxSignificantDigits forKey:@"kCFNumberFormatterMaxSignificantDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinFractionDigits forKey:@"kCFNumberFormatterMinFractionDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinIntegerDigits forKey:@"kCFNumberFormatterMinIntegerDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinSignificantDigits forKey:@"kCFNumberFormatterMinSignificantDigits"];
[d setObject:(NSString *)kCFNumberFormatterMinusSign forKey:@"kCFNumberFormatterMinusSign"];
[d setObject:(NSString *)kCFNumberFormatterMultiplier forKey:@"kCFNumberFormatterMultiplier"];
[d setObject:(NSString *)kCFNumberFormatterNaNSymbol forKey:@"kCFNumberFormatterNaNSymbol"];
[d setObject:(NSString *)kCFNumberFormatterNegativePrefix forKey:@"kCFNumberFormatterNegativePrefix"];
[d setObject:(NSString *)kCFNumberFormatterNegativeSuffix forKey:@"kCFNumberFormatterNegativeSuffix"];
[d setObject:(NSString *)kCFNumberFormatterPaddingCharacter forKey:@"kCFNumberFormatterPaddingCharacter"];
[d setObject:(NSString *)kCFNumberFormatterPaddingPosition forKey:@"kCFNumberFormatterPaddingPosition"];
[d setObject:(NSString *)kCFNumberFormatterPerMillSymbol forKey:@"kCFNumberFormatterPerMillSymbol"];
[d setObject:(NSString *)kCFNumberFormatterPercentSymbol forKey:@"kCFNumberFormatterPercentSymbol"];
[d setObject:(NSString *)kCFNumberFormatterPlusSign forKey:@"kCFNumberFormatterPlusSign"];
[d setObject:(NSString *)kCFNumberFormatterPositivePrefix forKey:@"kCFNumberFormatterPositivePrefix"];
[d setObject:(NSString *)kCFNumberFormatterPositiveSuffix forKey:@"kCFNumberFormatterPositiveSuffix"];
[d setObject:(NSString *)kCFNumberFormatterRoundingIncrement forKey:@"kCFNumberFormatterRoundingIncrement"];
[d setObject:(NSString *)kCFNumberFormatterRoundingMode forKey:@"kCFNumberFormatterRoundingMode"];
[d setObject:(NSString *)kCFNumberFormatterSecondaryGroupingSize forKey:@"kCFNumberFormatterSecondaryGroupingSize"];
[d setObject:(NSString *)kCFNumberFormatterUseGroupingSeparator forKey:@"kCFNumberFormatterUseGroupingSeparator"];
[d setObject:(NSString *)kCFNumberFormatterUseSignificantDigits forKey:@"kCFNumberFormatterUseSignificantDigits"];
[d setObject:(NSString *)kCFNumberFormatterZeroSymbol forKey:@"kCFNumberFormatterZeroSymbol"];
[d setObject:(NSString *)kCFPlugInDynamicRegisterFunctionKey forKey:@"kCFPlugInDynamicRegisterFunctionKey"];
[d setObject:(NSString *)kCFPlugInDynamicRegistrationKey forKey:@"kCFPlugInDynamicRegistrationKey"];
[d setObject:(NSString *)kCFPlugInFactoriesKey forKey:@"kCFPlugInFactoriesKey"];
[d setObject:(NSString *)kCFPlugInTypesKey forKey:@"kCFPlugInTypesKey"];
[d setObject:(NSString *)kCFPlugInUnloadFunctionKey forKey:@"kCFPlugInUnloadFunctionKey"];
[d setObject:(NSString *)kCFPreferencesAnyApplication forKey:@"kCFPreferencesAnyApplication"];
[d setObject:(NSString *)kCFPreferencesAnyHost forKey:@"kCFPreferencesAnyHost"];
[d setObject:(NSString *)kCFPreferencesAnyUser forKey:@"kCFPreferencesAnyUser"];
[d setObject:(NSString *)kCFPreferencesCurrentApplication forKey:@"kCFPreferencesCurrentApplication"];
[d setObject:(NSString *)kCFPreferencesCurrentHost forKey:@"kCFPreferencesCurrentHost"];
[d setObject:(NSString *)kCFPreferencesCurrentUser forKey:@"kCFPreferencesCurrentUser"];
[d setObject:(NSString *)kCFRunLoopCommonModes forKey:@"kCFRunLoopCommonModes"];
[d setObject:(NSString *)kCFRunLoopDefaultMode forKey:@"kCFRunLoopDefaultMode"];
[d setObject:(NSString *)kCFSocketCommandKey forKey:@"kCFSocketCommandKey"];
[d setObject:(NSString *)kCFSocketErrorKey forKey:@"kCFSocketErrorKey"];
[d setObject:(NSString *)kCFSocketNameKey forKey:@"kCFSocketNameKey"];
[d setObject:(NSString *)kCFSocketRegisterCommand forKey:@"kCFSocketRegisterCommand"];
[d setObject:(NSString *)kCFSocketResultKey forKey:@"kCFSocketResultKey"];
[d setObject:(NSString *)kCFSocketRetrieveCommand forKey:@"kCFSocketRetrieveCommand"];
[d setObject:(NSString *)kCFSocketValueKey forKey:@"kCFSocketValueKey"];
[d setObject:(NSString *)kCFStreamPropertyAppendToFile forKey:@"kCFStreamPropertyAppendToFile"];
[d setObject:(NSString *)kCFStreamPropertyDataWritten forKey:@"kCFStreamPropertyDataWritten"];
[d setObject:(NSString *)kCFStreamPropertyFileCurrentOffset forKey:@"kCFStreamPropertyFileCurrentOffset"];
[d setObject:(NSString *)kCFStreamPropertySocketNativeHandle forKey:@"kCFStreamPropertySocketNativeHandle"];
[d setObject:(NSString *)kCFStreamPropertySocketRemoteHostName forKey:@"kCFStreamPropertySocketRemoteHostName"];
[d setObject:(NSString *)kCFStreamPropertySocketRemotePortNumber forKey:@"kCFStreamPropertySocketRemotePortNumber"];
[d setObject:(NSString *)kCFStringTransformFullwidthHalfwidth forKey:@"kCFStringTransformFullwidthHalfwidth"];
[d setObject:(NSString *)kCFStringTransformHiraganaKatakana forKey:@"kCFStringTransformHiraganaKatakana"];
[d setObject:(NSString *)kCFStringTransformLatinArabic forKey:@"kCFStringTransformLatinArabic"];
[d setObject:(NSString *)kCFStringTransformLatinCyrillic forKey:@"kCFStringTransformLatinCyrillic"];
[d setObject:(NSString *)kCFStringTransformLatinGreek forKey:@"kCFStringTransformLatinGreek"];
[d setObject:(NSString *)kCFStringTransformLatinHangul forKey:@"kCFStringTransformLatinHangul"];
[d setObject:(NSString *)kCFStringTransformLatinHebrew forKey:@"kCFStringTransformLatinHebrew"];
[d setObject:(NSString *)kCFStringTransformLatinHiragana forKey:@"kCFStringTransformLatinHiragana"];
[d setObject:(NSString *)kCFStringTransformLatinKatakana forKey:@"kCFStringTransformLatinKatakana"];
[d setObject:(NSString *)kCFStringTransformLatinThai forKey:@"kCFStringTransformLatinThai"];
[d setObject:(NSString *)kCFStringTransformMandarinLatin forKey:@"kCFStringTransformMandarinLatin"];
[d setObject:(NSString *)kCFStringTransformStripCombiningMarks forKey:@"kCFStringTransformStripCombiningMarks"];
[d setObject:(NSString *)kCFStringTransformStripDiacritics forKey:@"kCFStringTransformStripDiacritics"];
[d setObject:(NSString *)kCFStringTransformToLatin forKey:@"kCFStringTransformToLatin"];
[d setObject:(NSString *)kCFStringTransformToUnicodeName forKey:@"kCFStringTransformToUnicodeName"];
[d setObject:(NSString *)kCFStringTransformToXMLHex forKey:@"kCFStringTransformToXMLHex"];
[d setObject:(NSString *)kCFTimeZoneSystemTimeZoneDidChangeNotification forKey:@"kCFTimeZoneSystemTimeZoneDidChangeNotification"];
[d setObject:(NSString *)kCFURLFileDirectoryContents forKey:@"kCFURLFileDirectoryContents"];
[d setObject:(NSString *)kCFURLFileExists forKey:@"kCFURLFileExists"];
[d setObject:(NSString *)kCFURLFileLastModificationTime forKey:@"kCFURLFileLastModificationTime"];
[d setObject:(NSString *)kCFURLFileLength forKey:@"kCFURLFileLength"];
[d setObject:(NSString *)kCFURLFileOwnerID forKey:@"kCFURLFileOwnerID"];
[d setObject:(NSString *)kCFURLFilePOSIXMode forKey:@"kCFURLFilePOSIXMode"];
[d setObject:(NSString *)kCFURLHTTPStatusCode forKey:@"kCFURLHTTPStatusCode"];
[d setObject:(NSString *)kCFURLHTTPStatusLine forKey:@"kCFURLHTTPStatusLine"];
[d setObject:(NSString *)kCFUserNotificationAlertHeaderKey forKey:@"kCFUserNotificationAlertHeaderKey"];
[d setObject:(NSString *)kCFUserNotificationAlertMessageKey forKey:@"kCFUserNotificationAlertMessageKey"];
[d setObject:(NSString *)kCFUserNotificationAlternateButtonTitleKey forKey:@"kCFUserNotificationAlternateButtonTitleKey"];
[d setObject:(NSString *)kCFUserNotificationCheckBoxTitlesKey forKey:@"kCFUserNotificationCheckBoxTitlesKey"];
[d setObject:(NSString *)kCFUserNotificationDefaultButtonTitleKey forKey:@"kCFUserNotificationDefaultButtonTitleKey"];
[d setObject:(NSString *)kCFUserNotificationIconURLKey forKey:@"kCFUserNotificationIconURLKey"];
[d setObject:(NSString *)kCFUserNotificationLocalizationURLKey forKey:@"kCFUserNotificationLocalizationURLKey"];
[d setObject:(NSString *)kCFUserNotificationOtherButtonTitleKey forKey:@"kCFUserNotificationOtherButtonTitleKey"];
[d setObject:(NSString *)kCFUserNotificationPopUpSelectionKey forKey:@"kCFUserNotificationPopUpSelectionKey"];
[d setObject:(NSString *)kCFUserNotificationPopUpTitlesKey forKey:@"kCFUserNotificationPopUpTitlesKey"];
[d setObject:(NSString *)kCFUserNotificationProgressIndicatorValueKey forKey:@"kCFUserNotificationProgressIndicatorValueKey"];
[d setObject:(NSString *)kCFUserNotificationSoundURLKey forKey:@"kCFUserNotificationSoundURLKey"];
[d setObject:(NSString *)kCFUserNotificationTextFieldTitlesKey forKey:@"kCFUserNotificationTextFieldTitlesKey"];
[d setObject:(NSString *)kCFUserNotificationTextFieldValuesKey forKey:@"kCFUserNotificationTextFieldValuesKey"];
[d setObject:(NSString *)kCFXMLTreeErrorDescription forKey:@"kCFXMLTreeErrorDescription"];
[d setObject:(NSString *)kCFXMLTreeErrorLineNumber forKey:@"kCFXMLTreeErrorLineNumber"];
[d setObject:(NSString *)kCFXMLTreeErrorLocation forKey:@"kCFXMLTreeErrorLocation"];
[d setObject:(NSString *)kCFXMLTreeErrorStatusCode forKey:@"kCFXMLTreeErrorStatusCode"];
[d setObject:[Number numberWithDouble:CFByteOrderBigEndian] forKey:@"CFByteOrderBigEndian"];
[d setObject:[Number numberWithDouble:CFByteOrderLittleEndian] forKey:@"CFByteOrderLittleEndian"];
[d setObject:[Number numberWithDouble:CFByteOrderUnknown] forKey:@"CFByteOrderUnknown"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorCoalesce] forKey:@"CFNotificationSuspensionBehaviorCoalesce"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorDeliverImmediately] forKey:@"CFNotificationSuspensionBehaviorDeliverImmediately"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorDrop] forKey:@"CFNotificationSuspensionBehaviorDrop"];
[d setObject:[Number numberWithDouble:CFNotificationSuspensionBehaviorHold] forKey:@"CFNotificationSuspensionBehaviorHold"];
[d setObject:[Number numberWithDouble:CF_USE_OSBYTEORDER_H] forKey:@"CF_USE_OSBYTEORDER_H"];
[d setObject:[Number numberWithDouble:COREFOUNDATION_CFPLUGINCOM_SEPARATE] forKey:@"COREFOUNDATION_CFPLUGINCOM_SEPARATE"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitectureI386] forKey:@"kCFBundleExecutableArchitectureI386"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitecturePPC] forKey:@"kCFBundleExecutableArchitecturePPC"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitecturePPC64] forKey:@"kCFBundleExecutableArchitecturePPC64"];
[d setObject:[Number numberWithDouble:kCFBundleExecutableArchitectureX86_64] forKey:@"kCFBundleExecutableArchitectureX86_64"];
[d setObject:[Number numberWithDouble:kCFCalendarComponentsWrap] forKey:@"kCFCalendarComponentsWrap"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitDay] forKey:@"kCFCalendarUnitDay"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitEra] forKey:@"kCFCalendarUnitEra"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitHour] forKey:@"kCFCalendarUnitHour"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitMinute] forKey:@"kCFCalendarUnitMinute"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitMonth] forKey:@"kCFCalendarUnitMonth"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitSecond] forKey:@"kCFCalendarUnitSecond"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitWeek] forKey:@"kCFCalendarUnitWeek"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitWeekday] forKey:@"kCFCalendarUnitWeekday"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitWeekdayOrdinal] forKey:@"kCFCalendarUnitWeekdayOrdinal"];
[d setObject:[Number numberWithDouble:kCFCalendarUnitYear] forKey:@"kCFCalendarUnitYear"];
[d setObject:[Number numberWithDouble:kCFCharacterSetAlphaNumeric] forKey:@"kCFCharacterSetAlphaNumeric"];
[d setObject:[Number numberWithDouble:kCFCharacterSetCapitalizedLetter] forKey:@"kCFCharacterSetCapitalizedLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetControl] forKey:@"kCFCharacterSetControl"];
[d setObject:[Number numberWithDouble:kCFCharacterSetDecimalDigit] forKey:@"kCFCharacterSetDecimalDigit"];
[d setObject:[Number numberWithDouble:kCFCharacterSetDecomposable] forKey:@"kCFCharacterSetDecomposable"];
[d setObject:[Number numberWithDouble:kCFCharacterSetIllegal] forKey:@"kCFCharacterSetIllegal"];
[d setObject:[Number numberWithDouble:kCFCharacterSetLetter] forKey:@"kCFCharacterSetLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetLowercaseLetter] forKey:@"kCFCharacterSetLowercaseLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetNewline] forKey:@"kCFCharacterSetNewline"];
[d setObject:[Number numberWithDouble:kCFCharacterSetNonBase] forKey:@"kCFCharacterSetNonBase"];
[d setObject:[Number numberWithDouble:kCFCharacterSetPunctuation] forKey:@"kCFCharacterSetPunctuation"];
[d setObject:[Number numberWithDouble:kCFCharacterSetSymbol] forKey:@"kCFCharacterSetSymbol"];
[d setObject:[Number numberWithDouble:kCFCharacterSetUppercaseLetter] forKey:@"kCFCharacterSetUppercaseLetter"];
[d setObject:[Number numberWithDouble:kCFCharacterSetWhitespace] forKey:@"kCFCharacterSetWhitespace"];
[d setObject:[Number numberWithDouble:kCFCharacterSetWhitespaceAndNewline] forKey:@"kCFCharacterSetWhitespaceAndNewline"];
[d setObject:[Number numberWithDouble:kCFCompareAnchored] forKey:@"kCFCompareAnchored"];
[d setObject:[Number numberWithDouble:kCFCompareBackwards] forKey:@"kCFCompareBackwards"];
[d setObject:[Number numberWithDouble:kCFCompareCaseInsensitive] forKey:@"kCFCompareCaseInsensitive"];
[d setObject:[Number numberWithDouble:kCFCompareDiacriticInsensitive] forKey:@"kCFCompareDiacriticInsensitive"];
[d setObject:[Number numberWithDouble:kCFCompareEqualTo] forKey:@"kCFCompareEqualTo"];
[d setObject:[Number numberWithDouble:kCFCompareForcedOrdering] forKey:@"kCFCompareForcedOrdering"];
[d setObject:[Number numberWithDouble:kCFCompareGreaterThan] forKey:@"kCFCompareGreaterThan"];
[d setObject:[Number numberWithDouble:kCFCompareLessThan] forKey:@"kCFCompareLessThan"];
[d setObject:[Number numberWithDouble:kCFCompareLocalized] forKey:@"kCFCompareLocalized"];
[d setObject:[Number numberWithDouble:kCFCompareNonliteral] forKey:@"kCFCompareNonliteral"];
[d setObject:[Number numberWithDouble:kCFCompareNumerically] forKey:@"kCFCompareNumerically"];
[d setObject:[Number numberWithDouble:kCFCompareWidthInsensitive] forKey:@"kCFCompareWidthInsensitive"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_0] forKey:@"kCFCoreFoundationVersionNumber10_0"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_0_3] forKey:@"kCFCoreFoundationVersionNumber10_0_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1] forKey:@"kCFCoreFoundationVersionNumber10_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_1] forKey:@"kCFCoreFoundationVersionNumber10_1_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_2] forKey:@"kCFCoreFoundationVersionNumber10_1_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_3] forKey:@"kCFCoreFoundationVersionNumber10_1_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_1_4] forKey:@"kCFCoreFoundationVersionNumber10_1_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2] forKey:@"kCFCoreFoundationVersionNumber10_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_1] forKey:@"kCFCoreFoundationVersionNumber10_2_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_2] forKey:@"kCFCoreFoundationVersionNumber10_2_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_3] forKey:@"kCFCoreFoundationVersionNumber10_2_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_4] forKey:@"kCFCoreFoundationVersionNumber10_2_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_5] forKey:@"kCFCoreFoundationVersionNumber10_2_5"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_6] forKey:@"kCFCoreFoundationVersionNumber10_2_6"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_7] forKey:@"kCFCoreFoundationVersionNumber10_2_7"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_2_8] forKey:@"kCFCoreFoundationVersionNumber10_2_8"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3] forKey:@"kCFCoreFoundationVersionNumber10_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_1] forKey:@"kCFCoreFoundationVersionNumber10_3_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_2] forKey:@"kCFCoreFoundationVersionNumber10_3_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_3] forKey:@"kCFCoreFoundationVersionNumber10_3_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_4] forKey:@"kCFCoreFoundationVersionNumber10_3_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_5] forKey:@"kCFCoreFoundationVersionNumber10_3_5"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_6] forKey:@"kCFCoreFoundationVersionNumber10_3_6"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_7] forKey:@"kCFCoreFoundationVersionNumber10_3_7"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_8] forKey:@"kCFCoreFoundationVersionNumber10_3_8"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_3_9] forKey:@"kCFCoreFoundationVersionNumber10_3_9"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4] forKey:@"kCFCoreFoundationVersionNumber10_4"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_1] forKey:@"kCFCoreFoundationVersionNumber10_4_1"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_10] forKey:@"kCFCoreFoundationVersionNumber10_4_10"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_11] forKey:@"kCFCoreFoundationVersionNumber10_4_11"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_2] forKey:@"kCFCoreFoundationVersionNumber10_4_2"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_3] forKey:@"kCFCoreFoundationVersionNumber10_4_3"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_4_Intel] forKey:@"kCFCoreFoundationVersionNumber10_4_4_Intel"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_4_PowerPC] forKey:@"kCFCoreFoundationVersionNumber10_4_4_PowerPC"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_5_Intel] forKey:@"kCFCoreFoundationVersionNumber10_4_5_Intel"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_5_PowerPC] forKey:@"kCFCoreFoundationVersionNumber10_4_5_PowerPC"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_6_Intel] forKey:@"kCFCoreFoundationVersionNumber10_4_6_Intel"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_6_PowerPC] forKey:@"kCFCoreFoundationVersionNumber10_4_6_PowerPC"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_7] forKey:@"kCFCoreFoundationVersionNumber10_4_7"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_8] forKey:@"kCFCoreFoundationVersionNumber10_4_8"];
[d setObject:[Number numberWithDouble:kCFCoreFoundationVersionNumber10_4_9] forKey:@"kCFCoreFoundationVersionNumber10_4_9"];
[d setObject:[Number numberWithDouble:kCFDateFormatterFullStyle] forKey:@"kCFDateFormatterFullStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterLongStyle] forKey:@"kCFDateFormatterLongStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterMediumStyle] forKey:@"kCFDateFormatterMediumStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterNoStyle] forKey:@"kCFDateFormatterNoStyle"];
[d setObject:[Number numberWithDouble:kCFDateFormatterShortStyle] forKey:@"kCFDateFormatterShortStyle"];
[d setObject:[Number numberWithDouble:kCFFileDescriptorReadCallBack] forKey:@"kCFFileDescriptorReadCallBack"];
[d setObject:[Number numberWithDouble:kCFFileDescriptorWriteCallBack] forKey:@"kCFFileDescriptorWriteCallBack"];
[d setObject:[Number numberWithDouble:kCFGregorianAllUnits] forKey:@"kCFGregorianAllUnits"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsDays] forKey:@"kCFGregorianUnitsDays"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsHours] forKey:@"kCFGregorianUnitsHours"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsMinutes] forKey:@"kCFGregorianUnitsMinutes"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsMonths] forKey:@"kCFGregorianUnitsMonths"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsSeconds] forKey:@"kCFGregorianUnitsSeconds"];
[d setObject:[Number numberWithDouble:kCFGregorianUnitsYears] forKey:@"kCFGregorianUnitsYears"];
[d setObject:[Number numberWithDouble:kCFMessagePortIsInvalid] forKey:@"kCFMessagePortIsInvalid"];
[d setObject:[Number numberWithDouble:kCFMessagePortReceiveTimeout] forKey:@"kCFMessagePortReceiveTimeout"];
[d setObject:[Number numberWithDouble:kCFMessagePortSendTimeout] forKey:@"kCFMessagePortSendTimeout"];
[d setObject:[Number numberWithDouble:kCFMessagePortSuccess] forKey:@"kCFMessagePortSuccess"];
[d setObject:[Number numberWithDouble:kCFMessagePortTransportError] forKey:@"kCFMessagePortTransportError"];
[d setObject:[Number numberWithDouble:kCFNotFound] forKey:@"kCFNotFound"];
[d setObject:[Number numberWithDouble:kCFNotificationDeliverImmediately] forKey:@"kCFNotificationDeliverImmediately"];
[d setObject:[Number numberWithDouble:kCFNotificationPostToAllSessions] forKey:@"kCFNotificationPostToAllSessions"];
[d setObject:[Number numberWithDouble:kCFNumberCFIndexType] forKey:@"kCFNumberCFIndexType"];
[d setObject:[Number numberWithDouble:kCFNumberCGFloatType] forKey:@"kCFNumberCGFloatType"];
[d setObject:[Number numberWithDouble:kCFNumberCharType] forKey:@"kCFNumberCharType"];
[d setObject:[Number numberWithDouble:kCFNumberDoubleType] forKey:@"kCFNumberDoubleType"];
[d setObject:[Number numberWithDouble:kCFNumberFloat32Type] forKey:@"kCFNumberFloat32Type"];
[d setObject:[Number numberWithDouble:kCFNumberFloat64Type] forKey:@"kCFNumberFloat64Type"];
[d setObject:[Number numberWithDouble:kCFNumberFloatType] forKey:@"kCFNumberFloatType"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterCurrencyStyle] forKey:@"kCFNumberFormatterCurrencyStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterDecimalStyle] forKey:@"kCFNumberFormatterDecimalStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterNoStyle] forKey:@"kCFNumberFormatterNoStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadAfterPrefix] forKey:@"kCFNumberFormatterPadAfterPrefix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadAfterSuffix] forKey:@"kCFNumberFormatterPadAfterSuffix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadBeforePrefix] forKey:@"kCFNumberFormatterPadBeforePrefix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPadBeforeSuffix] forKey:@"kCFNumberFormatterPadBeforeSuffix"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterParseIntegersOnly] forKey:@"kCFNumberFormatterParseIntegersOnly"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterPercentStyle] forKey:@"kCFNumberFormatterPercentStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundCeiling] forKey:@"kCFNumberFormatterRoundCeiling"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundDown] forKey:@"kCFNumberFormatterRoundDown"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundFloor] forKey:@"kCFNumberFormatterRoundFloor"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundHalfDown] forKey:@"kCFNumberFormatterRoundHalfDown"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundHalfEven] forKey:@"kCFNumberFormatterRoundHalfEven"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundHalfUp] forKey:@"kCFNumberFormatterRoundHalfUp"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterRoundUp] forKey:@"kCFNumberFormatterRoundUp"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterScientificStyle] forKey:@"kCFNumberFormatterScientificStyle"];
[d setObject:[Number numberWithDouble:kCFNumberFormatterSpellOutStyle] forKey:@"kCFNumberFormatterSpellOutStyle"];
[d setObject:[Number numberWithDouble:kCFNumberIntType] forKey:@"kCFNumberIntType"];
[d setObject:[Number numberWithDouble:kCFNumberLongLongType] forKey:@"kCFNumberLongLongType"];
[d setObject:[Number numberWithDouble:kCFNumberLongType] forKey:@"kCFNumberLongType"];
[d setObject:[Number numberWithDouble:kCFNumberMaxType] forKey:@"kCFNumberMaxType"];
[d setObject:[Number numberWithDouble:kCFNumberNSIntegerType] forKey:@"kCFNumberNSIntegerType"];
[d setObject:[Number numberWithDouble:kCFNumberSInt16Type] forKey:@"kCFNumberSInt16Type"];
[d setObject:[Number numberWithDouble:kCFNumberSInt32Type] forKey:@"kCFNumberSInt32Type"];
[d setObject:[Number numberWithDouble:kCFNumberSInt64Type] forKey:@"kCFNumberSInt64Type"];
[d setObject:[Number numberWithDouble:kCFNumberSInt8Type] forKey:@"kCFNumberSInt8Type"];
[d setObject:[Number numberWithDouble:kCFNumberShortType] forKey:@"kCFNumberShortType"];
[d setObject:[Number numberWithDouble:kCFPropertyListBinaryFormat_v1_0] forKey:@"kCFPropertyListBinaryFormat_v1_0"];
[d setObject:[Number numberWithDouble:kCFPropertyListImmutable] forKey:@"kCFPropertyListImmutable"];
[d setObject:[Number numberWithDouble:kCFPropertyListMutableContainers] forKey:@"kCFPropertyListMutableContainers"];
[d setObject:[Number numberWithDouble:kCFPropertyListMutableContainersAndLeaves] forKey:@"kCFPropertyListMutableContainersAndLeaves"];
[d setObject:[Number numberWithDouble:kCFPropertyListOpenStepFormat] forKey:@"kCFPropertyListOpenStepFormat"];
[d setObject:[Number numberWithDouble:kCFPropertyListXMLFormat_v1_0] forKey:@"kCFPropertyListXMLFormat_v1_0"];
[d setObject:[Number numberWithDouble:kCFRunLoopAfterWaiting] forKey:@"kCFRunLoopAfterWaiting"];
[d setObject:[Number numberWithDouble:kCFRunLoopAllActivities] forKey:@"kCFRunLoopAllActivities"];
[d setObject:[Number numberWithDouble:kCFRunLoopBeforeSources] forKey:@"kCFRunLoopBeforeSources"];
[d setObject:[Number numberWithDouble:kCFRunLoopBeforeTimers] forKey:@"kCFRunLoopBeforeTimers"];
[d setObject:[Number numberWithDouble:kCFRunLoopBeforeWaiting] forKey:@"kCFRunLoopBeforeWaiting"];
[d setObject:[Number numberWithDouble:kCFRunLoopEntry] forKey:@"kCFRunLoopEntry"];
[d setObject:[Number numberWithDouble:kCFRunLoopExit] forKey:@"kCFRunLoopExit"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunFinished] forKey:@"kCFRunLoopRunFinished"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunHandledSource] forKey:@"kCFRunLoopRunHandledSource"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunStopped] forKey:@"kCFRunLoopRunStopped"];
[d setObject:[Number numberWithDouble:kCFRunLoopRunTimedOut] forKey:@"kCFRunLoopRunTimedOut"];
[d setObject:[Number numberWithDouble:kCFSocketAcceptCallBack] forKey:@"kCFSocketAcceptCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableAcceptCallBack] forKey:@"kCFSocketAutomaticallyReenableAcceptCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableDataCallBack] forKey:@"kCFSocketAutomaticallyReenableDataCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableReadCallBack] forKey:@"kCFSocketAutomaticallyReenableReadCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketAutomaticallyReenableWriteCallBack] forKey:@"kCFSocketAutomaticallyReenableWriteCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketCloseOnInvalidate] forKey:@"kCFSocketCloseOnInvalidate"];
[d setObject:[Number numberWithDouble:kCFSocketConnectCallBack] forKey:@"kCFSocketConnectCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketDataCallBack] forKey:@"kCFSocketDataCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketError] forKey:@"kCFSocketError"];
[d setObject:[Number numberWithDouble:kCFSocketNoCallBack] forKey:@"kCFSocketNoCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketReadCallBack] forKey:@"kCFSocketReadCallBack"];
[d setObject:[Number numberWithDouble:kCFSocketSuccess] forKey:@"kCFSocketSuccess"];
[d setObject:[Number numberWithDouble:kCFSocketTimeout] forKey:@"kCFSocketTimeout"];
[d setObject:[Number numberWithDouble:kCFSocketWriteCallBack] forKey:@"kCFSocketWriteCallBack"];
[d setObject:[Number numberWithDouble:kCFStreamErrorDomainCustom] forKey:@"kCFStreamErrorDomainCustom"];
[d setObject:[Number numberWithDouble:kCFStreamErrorDomainMacOSStatus] forKey:@"kCFStreamErrorDomainMacOSStatus"];
[d setObject:[Number numberWithDouble:kCFStreamErrorDomainPOSIX] forKey:@"kCFStreamErrorDomainPOSIX"];
[d setObject:[Number numberWithDouble:kCFStreamEventCanAcceptBytes] forKey:@"kCFStreamEventCanAcceptBytes"];
[d setObject:[Number numberWithDouble:kCFStreamEventEndEncountered] forKey:@"kCFStreamEventEndEncountered"];
[d setObject:[Number numberWithDouble:kCFStreamEventErrorOccurred] forKey:@"kCFStreamEventErrorOccurred"];
[d setObject:[Number numberWithDouble:kCFStreamEventHasBytesAvailable] forKey:@"kCFStreamEventHasBytesAvailable"];
[d setObject:[Number numberWithDouble:kCFStreamEventNone] forKey:@"kCFStreamEventNone"];
[d setObject:[Number numberWithDouble:kCFStreamEventOpenCompleted] forKey:@"kCFStreamEventOpenCompleted"];
[d setObject:[Number numberWithDouble:kCFStreamStatusAtEnd] forKey:@"kCFStreamStatusAtEnd"];
[d setObject:[Number numberWithDouble:kCFStreamStatusClosed] forKey:@"kCFStreamStatusClosed"];
[d setObject:[Number numberWithDouble:kCFStreamStatusError] forKey:@"kCFStreamStatusError"];
[d setObject:[Number numberWithDouble:kCFStreamStatusNotOpen] forKey:@"kCFStreamStatusNotOpen"];
[d setObject:[Number numberWithDouble:kCFStreamStatusOpen] forKey:@"kCFStreamStatusOpen"];
[d setObject:[Number numberWithDouble:kCFStreamStatusOpening] forKey:@"kCFStreamStatusOpening"];
[d setObject:[Number numberWithDouble:kCFStreamStatusReading] forKey:@"kCFStreamStatusReading"];
[d setObject:[Number numberWithDouble:kCFStreamStatusWriting] forKey:@"kCFStreamStatusWriting"];
[d setObject:[Number numberWithDouble:kCFStringEncodingANSEL] forKey:@"kCFStringEncodingANSEL"];
[d setObject:[Number numberWithDouble:kCFStringEncodingASCII] forKey:@"kCFStringEncodingASCII"];
[d setObject:[Number numberWithDouble:kCFStringEncodingBig5] forKey:@"kCFStringEncodingBig5"];
[d setObject:[Number numberWithDouble:kCFStringEncodingBig5_E] forKey:@"kCFStringEncodingBig5_E"];
[d setObject:[Number numberWithDouble:kCFStringEncodingBig5_HKSCS_1999] forKey:@"kCFStringEncodingBig5_HKSCS_1999"];
[d setObject:[Number numberWithDouble:kCFStringEncodingCNS_11643_92_P1] forKey:@"kCFStringEncodingCNS_11643_92_P1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingCNS_11643_92_P2] forKey:@"kCFStringEncodingCNS_11643_92_P2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingCNS_11643_92_P3] forKey:@"kCFStringEncodingCNS_11643_92_P3"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSArabic] forKey:@"kCFStringEncodingDOSArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSBalticRim] forKey:@"kCFStringEncodingDOSBalticRim"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSCanadianFrench] forKey:@"kCFStringEncodingDOSCanadianFrench"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSChineseSimplif] forKey:@"kCFStringEncodingDOSChineseSimplif"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSChineseTrad] forKey:@"kCFStringEncodingDOSChineseTrad"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSCyrillic] forKey:@"kCFStringEncodingDOSCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSGreek] forKey:@"kCFStringEncodingDOSGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSGreek1] forKey:@"kCFStringEncodingDOSGreek1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSGreek2] forKey:@"kCFStringEncodingDOSGreek2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSHebrew] forKey:@"kCFStringEncodingDOSHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSIcelandic] forKey:@"kCFStringEncodingDOSIcelandic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSJapanese] forKey:@"kCFStringEncodingDOSJapanese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSKorean] forKey:@"kCFStringEncodingDOSKorean"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSLatin1] forKey:@"kCFStringEncodingDOSLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSLatin2] forKey:@"kCFStringEncodingDOSLatin2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSLatinUS] forKey:@"kCFStringEncodingDOSLatinUS"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSNordic] forKey:@"kCFStringEncodingDOSNordic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSPortuguese] forKey:@"kCFStringEncodingDOSPortuguese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSRussian] forKey:@"kCFStringEncodingDOSRussian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSThai] forKey:@"kCFStringEncodingDOSThai"];
[d setObject:[Number numberWithDouble:kCFStringEncodingDOSTurkish] forKey:@"kCFStringEncodingDOSTurkish"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEBCDIC_CP037] forKey:@"kCFStringEncodingEBCDIC_CP037"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEBCDIC_US] forKey:@"kCFStringEncodingEBCDIC_US"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_CN] forKey:@"kCFStringEncodingEUC_CN"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_JP] forKey:@"kCFStringEncodingEUC_JP"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_KR] forKey:@"kCFStringEncodingEUC_KR"];
[d setObject:[Number numberWithDouble:kCFStringEncodingEUC_TW] forKey:@"kCFStringEncodingEUC_TW"];
[d setObject:[Number numberWithDouble:kCFStringEncodingGBK_95] forKey:@"kCFStringEncodingGBK_95"];
[d setObject:[Number numberWithDouble:kCFStringEncodingGB_18030_2000] forKey:@"kCFStringEncodingGB_18030_2000"];
[d setObject:[Number numberWithDouble:kCFStringEncodingGB_2312_80] forKey:@"kCFStringEncodingGB_2312_80"];
[d setObject:[Number numberWithDouble:kCFStringEncodingHZ_GB_2312] forKey:@"kCFStringEncodingHZ_GB_2312"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin1] forKey:@"kCFStringEncodingISOLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin10] forKey:@"kCFStringEncodingISOLatin10"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin2] forKey:@"kCFStringEncodingISOLatin2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin3] forKey:@"kCFStringEncodingISOLatin3"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin4] forKey:@"kCFStringEncodingISOLatin4"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin5] forKey:@"kCFStringEncodingISOLatin5"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin6] forKey:@"kCFStringEncodingISOLatin6"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin7] forKey:@"kCFStringEncodingISOLatin7"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin8] forKey:@"kCFStringEncodingISOLatin8"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatin9] forKey:@"kCFStringEncodingISOLatin9"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinArabic] forKey:@"kCFStringEncodingISOLatinArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinCyrillic] forKey:@"kCFStringEncodingISOLatinCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinGreek] forKey:@"kCFStringEncodingISOLatinGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinHebrew] forKey:@"kCFStringEncodingISOLatinHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISOLatinThai] forKey:@"kCFStringEncodingISOLatinThai"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_CN] forKey:@"kCFStringEncodingISO_2022_CN"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_CN_EXT] forKey:@"kCFStringEncodingISO_2022_CN_EXT"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP] forKey:@"kCFStringEncodingISO_2022_JP"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP_1] forKey:@"kCFStringEncodingISO_2022_JP_1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP_2] forKey:@"kCFStringEncodingISO_2022_JP_2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_JP_3] forKey:@"kCFStringEncodingISO_2022_JP_3"];
[d setObject:[Number numberWithDouble:kCFStringEncodingISO_2022_KR] forKey:@"kCFStringEncodingISO_2022_KR"];
[d setObject:[Number numberWithDouble:kCFStringEncodingInvalidId] forKey:@"kCFStringEncodingInvalidId"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_C6226_78] forKey:@"kCFStringEncodingJIS_C6226_78"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0201_76] forKey:@"kCFStringEncodingJIS_X0201_76"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0208_83] forKey:@"kCFStringEncodingJIS_X0208_83"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0208_90] forKey:@"kCFStringEncodingJIS_X0208_90"];
[d setObject:[Number numberWithDouble:kCFStringEncodingJIS_X0212_90] forKey:@"kCFStringEncodingJIS_X0212_90"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKOI8_R] forKey:@"kCFStringEncodingKOI8_R"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKOI8_U] forKey:@"kCFStringEncodingKOI8_U"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKSC_5601_87] forKey:@"kCFStringEncodingKSC_5601_87"];
[d setObject:[Number numberWithDouble:kCFStringEncodingKSC_5601_92_Johab] forKey:@"kCFStringEncodingKSC_5601_92_Johab"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacArabic] forKey:@"kCFStringEncodingMacArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacArmenian] forKey:@"kCFStringEncodingMacArmenian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacBengali] forKey:@"kCFStringEncodingMacBengali"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacBurmese] forKey:@"kCFStringEncodingMacBurmese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCeltic] forKey:@"kCFStringEncodingMacCeltic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCentralEurRoman] forKey:@"kCFStringEncodingMacCentralEurRoman"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacChineseSimp] forKey:@"kCFStringEncodingMacChineseSimp"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacChineseTrad] forKey:@"kCFStringEncodingMacChineseTrad"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCroatian] forKey:@"kCFStringEncodingMacCroatian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacCyrillic] forKey:@"kCFStringEncodingMacCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacDevanagari] forKey:@"kCFStringEncodingMacDevanagari"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacDingbats] forKey:@"kCFStringEncodingMacDingbats"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacEthiopic] forKey:@"kCFStringEncodingMacEthiopic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacExtArabic] forKey:@"kCFStringEncodingMacExtArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacFarsi] forKey:@"kCFStringEncodingMacFarsi"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGaelic] forKey:@"kCFStringEncodingMacGaelic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGeorgian] forKey:@"kCFStringEncodingMacGeorgian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGreek] forKey:@"kCFStringEncodingMacGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGujarati] forKey:@"kCFStringEncodingMacGujarati"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacGurmukhi] forKey:@"kCFStringEncodingMacGurmukhi"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacHFS] forKey:@"kCFStringEncodingMacHFS"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacHebrew] forKey:@"kCFStringEncodingMacHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacIcelandic] forKey:@"kCFStringEncodingMacIcelandic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacInuit] forKey:@"kCFStringEncodingMacInuit"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacJapanese] forKey:@"kCFStringEncodingMacJapanese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacKannada] forKey:@"kCFStringEncodingMacKannada"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacKhmer] forKey:@"kCFStringEncodingMacKhmer"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacKorean] forKey:@"kCFStringEncodingMacKorean"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacLaotian] forKey:@"kCFStringEncodingMacLaotian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacMalayalam] forKey:@"kCFStringEncodingMacMalayalam"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacMongolian] forKey:@"kCFStringEncodingMacMongolian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacOriya] forKey:@"kCFStringEncodingMacOriya"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacRoman] forKey:@"kCFStringEncodingMacRoman"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacRomanLatin1] forKey:@"kCFStringEncodingMacRomanLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacRomanian] forKey:@"kCFStringEncodingMacRomanian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacSinhalese] forKey:@"kCFStringEncodingMacSinhalese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacSymbol] forKey:@"kCFStringEncodingMacSymbol"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTamil] forKey:@"kCFStringEncodingMacTamil"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTelugu] forKey:@"kCFStringEncodingMacTelugu"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacThai] forKey:@"kCFStringEncodingMacThai"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTibetan] forKey:@"kCFStringEncodingMacTibetan"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacTurkish] forKey:@"kCFStringEncodingMacTurkish"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacUkrainian] forKey:@"kCFStringEncodingMacUkrainian"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacVT100] forKey:@"kCFStringEncodingMacVT100"];
[d setObject:[Number numberWithDouble:kCFStringEncodingMacVietnamese] forKey:@"kCFStringEncodingMacVietnamese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingNextStepJapanese] forKey:@"kCFStringEncodingNextStepJapanese"];
[d setObject:[Number numberWithDouble:kCFStringEncodingNextStepLatin] forKey:@"kCFStringEncodingNextStepLatin"];
[d setObject:[Number numberWithDouble:kCFStringEncodingNonLossyASCII] forKey:@"kCFStringEncodingNonLossyASCII"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS] forKey:@"kCFStringEncodingShiftJIS"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS_X0213] forKey:@"kCFStringEncodingShiftJIS_X0213"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS_X0213_00] forKey:@"kCFStringEncodingShiftJIS_X0213_00"];
[d setObject:[Number numberWithDouble:kCFStringEncodingShiftJIS_X0213_MenKuTen] forKey:@"kCFStringEncodingShiftJIS_X0213_MenKuTen"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF16] forKey:@"kCFStringEncodingUTF16"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF16BE] forKey:@"kCFStringEncodingUTF16BE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF16LE] forKey:@"kCFStringEncodingUTF16LE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF32] forKey:@"kCFStringEncodingUTF32"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF32BE] forKey:@"kCFStringEncodingUTF32BE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF32LE] forKey:@"kCFStringEncodingUTF32LE"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUTF8] forKey:@"kCFStringEncodingUTF8"];
[d setObject:[Number numberWithDouble:kCFStringEncodingUnicode] forKey:@"kCFStringEncodingUnicode"];
[d setObject:[Number numberWithDouble:kCFStringEncodingVISCII] forKey:@"kCFStringEncodingVISCII"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsArabic] forKey:@"kCFStringEncodingWindowsArabic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsBalticRim] forKey:@"kCFStringEncodingWindowsBalticRim"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsCyrillic] forKey:@"kCFStringEncodingWindowsCyrillic"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsGreek] forKey:@"kCFStringEncodingWindowsGreek"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsHebrew] forKey:@"kCFStringEncodingWindowsHebrew"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsKoreanJohab] forKey:@"kCFStringEncodingWindowsKoreanJohab"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsLatin1] forKey:@"kCFStringEncodingWindowsLatin1"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsLatin2] forKey:@"kCFStringEncodingWindowsLatin2"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsLatin5] forKey:@"kCFStringEncodingWindowsLatin5"];
[d setObject:[Number numberWithDouble:kCFStringEncodingWindowsVietnamese] forKey:@"kCFStringEncodingWindowsVietnamese"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormC] forKey:@"kCFStringNormalizationFormC"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormD] forKey:@"kCFStringNormalizationFormD"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormKC] forKey:@"kCFStringNormalizationFormKC"];
[d setObject:[Number numberWithDouble:kCFStringNormalizationFormKD] forKey:@"kCFStringNormalizationFormKD"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerAttributeLanguage] forKey:@"kCFStringTokenizerAttributeLanguage"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerAttributeLatinTranscription] forKey:@"kCFStringTokenizerAttributeLatinTranscription"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasDerivedSubTokensMask] forKey:@"kCFStringTokenizerTokenHasDerivedSubTokensMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasHasNumbersMask] forKey:@"kCFStringTokenizerTokenHasHasNumbersMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasNonLettersMask] forKey:@"kCFStringTokenizerTokenHasNonLettersMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenHasSubTokensMask] forKey:@"kCFStringTokenizerTokenHasSubTokensMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenIsCJWordMask] forKey:@"kCFStringTokenizerTokenIsCJWordMask"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenNone] forKey:@"kCFStringTokenizerTokenNone"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerTokenNormal] forKey:@"kCFStringTokenizerTokenNormal"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitLineBreak] forKey:@"kCFStringTokenizerUnitLineBreak"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitParagraph] forKey:@"kCFStringTokenizerUnitParagraph"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitSentence] forKey:@"kCFStringTokenizerUnitSentence"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitWord] forKey:@"kCFStringTokenizerUnitWord"];
[d setObject:[Number numberWithDouble:kCFStringTokenizerUnitWordBoundary] forKey:@"kCFStringTokenizerUnitWordBoundary"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleDaylightSaving] forKey:@"kCFTimeZoneNameStyleDaylightSaving"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleShortDaylightSaving] forKey:@"kCFTimeZoneNameStyleShortDaylightSaving"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleShortStandard] forKey:@"kCFTimeZoneNameStyleShortStandard"];
[d setObject:[Number numberWithDouble:kCFTimeZoneNameStyleStandard] forKey:@"kCFTimeZoneNameStyleStandard"];
[d setObject:[Number numberWithDouble:kCFURLComponentFragment] forKey:@"kCFURLComponentFragment"];
[d setObject:[Number numberWithDouble:kCFURLComponentHost] forKey:@"kCFURLComponentHost"];
[d setObject:[Number numberWithDouble:kCFURLComponentNetLocation] forKey:@"kCFURLComponentNetLocation"];
[d setObject:[Number numberWithDouble:kCFURLComponentParameterString] forKey:@"kCFURLComponentParameterString"];
[d setObject:[Number numberWithDouble:kCFURLComponentPassword] forKey:@"kCFURLComponentPassword"];
[d setObject:[Number numberWithDouble:kCFURLComponentPath] forKey:@"kCFURLComponentPath"];
[d setObject:[Number numberWithDouble:kCFURLComponentPort] forKey:@"kCFURLComponentPort"];
[d setObject:[Number numberWithDouble:kCFURLComponentQuery] forKey:@"kCFURLComponentQuery"];
[d setObject:[Number numberWithDouble:kCFURLComponentResourceSpecifier] forKey:@"kCFURLComponentResourceSpecifier"];
[d setObject:[Number numberWithDouble:kCFURLComponentScheme] forKey:@"kCFURLComponentScheme"];
[d setObject:[Number numberWithDouble:kCFURLComponentUser] forKey:@"kCFURLComponentUser"];
[d setObject:[Number numberWithDouble:kCFURLComponentUserInfo] forKey:@"kCFURLComponentUserInfo"];
[d setObject:[Number numberWithDouble:kCFURLHFSPathStyle] forKey:@"kCFURLHFSPathStyle"];
[d setObject:[Number numberWithDouble:kCFURLImproperArgumentsError] forKey:@"kCFURLImproperArgumentsError"];
[d setObject:[Number numberWithDouble:kCFURLPOSIXPathStyle] forKey:@"kCFURLPOSIXPathStyle"];
[d setObject:[Number numberWithDouble:kCFURLPropertyKeyUnavailableError] forKey:@"kCFURLPropertyKeyUnavailableError"];
[d setObject:[Number numberWithDouble:kCFURLRemoteHostUnavailableError] forKey:@"kCFURLRemoteHostUnavailableError"];
[d setObject:[Number numberWithDouble:kCFURLResourceAccessViolationError] forKey:@"kCFURLResourceAccessViolationError"];
[d setObject:[Number numberWithDouble:kCFURLResourceNotFoundError] forKey:@"kCFURLResourceNotFoundError"];
[d setObject:[Number numberWithDouble:kCFURLTimeoutError] forKey:@"kCFURLTimeoutError"];
[d setObject:[Number numberWithDouble:kCFURLUnknownError] forKey:@"kCFURLUnknownError"];
[d setObject:[Number numberWithDouble:kCFURLUnknownPropertyKeyError] forKey:@"kCFURLUnknownPropertyKeyError"];
[d setObject:[Number numberWithDouble:kCFURLUnknownSchemeError] forKey:@"kCFURLUnknownSchemeError"];
[d setObject:[Number numberWithDouble:kCFURLWindowsPathStyle] forKey:@"kCFURLWindowsPathStyle"];
[d setObject:[Number numberWithDouble:kCFUserNotificationAlternateResponse] forKey:@"kCFUserNotificationAlternateResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationCancelResponse] forKey:@"kCFUserNotificationCancelResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationCautionAlertLevel] forKey:@"kCFUserNotificationCautionAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationDefaultResponse] forKey:@"kCFUserNotificationDefaultResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationNoDefaultButtonFlag] forKey:@"kCFUserNotificationNoDefaultButtonFlag"];
[d setObject:[Number numberWithDouble:kCFUserNotificationNoteAlertLevel] forKey:@"kCFUserNotificationNoteAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationOtherResponse] forKey:@"kCFUserNotificationOtherResponse"];
[d setObject:[Number numberWithDouble:kCFUserNotificationPlainAlertLevel] forKey:@"kCFUserNotificationPlainAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationStopAlertLevel] forKey:@"kCFUserNotificationStopAlertLevel"];
[d setObject:[Number numberWithDouble:kCFUserNotificationUseRadioButtonsFlag] forKey:@"kCFUserNotificationUseRadioButtonsFlag"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeCharacter] forKey:@"kCFXMLEntityTypeCharacter"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeParameter] forKey:@"kCFXMLEntityTypeParameter"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeParsedExternal] forKey:@"kCFXMLEntityTypeParsedExternal"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeParsedInternal] forKey:@"kCFXMLEntityTypeParsedInternal"];
[d setObject:[Number numberWithDouble:kCFXMLEntityTypeUnparsed] forKey:@"kCFXMLEntityTypeUnparsed"];
[d setObject:[Number numberWithDouble:kCFXMLErrorElementlessDocument] forKey:@"kCFXMLErrorElementlessDocument"];
[d setObject:[Number numberWithDouble:kCFXMLErrorEncodingConversionFailure] forKey:@"kCFXMLErrorEncodingConversionFailure"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedCDSect] forKey:@"kCFXMLErrorMalformedCDSect"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedCharacterReference] forKey:@"kCFXMLErrorMalformedCharacterReference"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedCloseTag] forKey:@"kCFXMLErrorMalformedCloseTag"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedComment] forKey:@"kCFXMLErrorMalformedComment"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedDTD] forKey:@"kCFXMLErrorMalformedDTD"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedDocument] forKey:@"kCFXMLErrorMalformedDocument"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedName] forKey:@"kCFXMLErrorMalformedName"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedParsedCharacterData] forKey:@"kCFXMLErrorMalformedParsedCharacterData"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedProcessingInstruction] forKey:@"kCFXMLErrorMalformedProcessingInstruction"];
[d setObject:[Number numberWithDouble:kCFXMLErrorMalformedStartTag] forKey:@"kCFXMLErrorMalformedStartTag"];
[d setObject:[Number numberWithDouble:kCFXMLErrorNoData] forKey:@"kCFXMLErrorNoData"];
[d setObject:[Number numberWithDouble:kCFXMLErrorUnexpectedEOF] forKey:@"kCFXMLErrorUnexpectedEOF"];
[d setObject:[Number numberWithDouble:kCFXMLErrorUnknownEncoding] forKey:@"kCFXMLErrorUnknownEncoding"];
[d setObject:[Number numberWithDouble:kCFXMLNodeCurrentVersion] forKey:@"kCFXMLNodeCurrentVersion"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeAttribute] forKey:@"kCFXMLNodeTypeAttribute"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeAttributeListDeclaration] forKey:@"kCFXMLNodeTypeAttributeListDeclaration"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeCDATASection] forKey:@"kCFXMLNodeTypeCDATASection"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeComment] forKey:@"kCFXMLNodeTypeComment"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeDocument] forKey:@"kCFXMLNodeTypeDocument"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeDocumentFragment] forKey:@"kCFXMLNodeTypeDocumentFragment"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeDocumentType] forKey:@"kCFXMLNodeTypeDocumentType"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeElement] forKey:@"kCFXMLNodeTypeElement"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeElementTypeDeclaration] forKey:@"kCFXMLNodeTypeElementTypeDeclaration"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeEntity] forKey:@"kCFXMLNodeTypeEntity"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeEntityReference] forKey:@"kCFXMLNodeTypeEntityReference"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeNotation] forKey:@"kCFXMLNodeTypeNotation"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeProcessingInstruction] forKey:@"kCFXMLNodeTypeProcessingInstruction"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeText] forKey:@"kCFXMLNodeTypeText"];
[d setObject:[Number numberWithDouble:kCFXMLNodeTypeWhitespace] forKey:@"kCFXMLNodeTypeWhitespace"];
[d setObject:[Number numberWithDouble:kCFXMLParserAddImpliedAttributes] forKey:@"kCFXMLParserAddImpliedAttributes"];
[d setObject:[Number numberWithDouble:kCFXMLParserAllOptions] forKey:@"kCFXMLParserAllOptions"];
[d setObject:[Number numberWithDouble:kCFXMLParserNoOptions] forKey:@"kCFXMLParserNoOptions"];
[d setObject:[Number numberWithDouble:kCFXMLParserReplacePhysicalEntities] forKey:@"kCFXMLParserReplacePhysicalEntities"];
[d setObject:[Number numberWithDouble:kCFXMLParserResolveExternalEntities] forKey:@"kCFXMLParserResolveExternalEntities"];
[d setObject:[Number numberWithDouble:kCFXMLParserSkipMetaData] forKey:@"kCFXMLParserSkipMetaData"];
[d setObject:[Number numberWithDouble:kCFXMLParserSkipWhitespace] forKey:@"kCFXMLParserSkipWhitespace"];
[d setObject:[Number numberWithDouble:kCFXMLParserValidateDocument] forKey:@"kCFXMLParserValidateDocument"];
[d setObject:[Number numberWithDouble:kCFXMLStatusParseInProgress] forKey:@"kCFXMLStatusParseInProgress"];
[d setObject:[Number numberWithDouble:kCFXMLStatusParseNotBegun] forKey:@"kCFXMLStatusParseNotBegun"];
[d setObject:[Number numberWithDouble:kCFXMLStatusParseSuccessful] forKey:@"kCFXMLStatusParseSuccessful"];
[d setObject:(NSString *)kCVBufferMovieTimeKey forKey:@"kCVBufferMovieTimeKey"];
[d setObject:(NSString *)kCVBufferNonPropagatedAttachmentsKey forKey:@"kCVBufferNonPropagatedAttachmentsKey"];
[d setObject:(NSString *)kCVBufferPropagatedAttachmentsKey forKey:@"kCVBufferPropagatedAttachmentsKey"];
[d setObject:(NSString *)kCVBufferTimeScaleKey forKey:@"kCVBufferTimeScaleKey"];
[d setObject:(NSString *)kCVBufferTimeValueKey forKey:@"kCVBufferTimeValueKey"];
[d setObject:(NSString *)kCVImageBufferCGColorSpaceKey forKey:@"kCVImageBufferCGColorSpaceKey"];
[d setObject:(NSString *)kCVImageBufferChromaLocationBottomFieldKey forKey:@"kCVImageBufferChromaLocationBottomFieldKey"];
[d setObject:(NSString *)kCVImageBufferChromaLocationTopFieldKey forKey:@"kCVImageBufferChromaLocationTopFieldKey"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Bottom forKey:@"kCVImageBufferChromaLocation_Bottom"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_BottomLeft forKey:@"kCVImageBufferChromaLocation_BottomLeft"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Center forKey:@"kCVImageBufferChromaLocation_Center"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_DV420 forKey:@"kCVImageBufferChromaLocation_DV420"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Left forKey:@"kCVImageBufferChromaLocation_Left"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Top forKey:@"kCVImageBufferChromaLocation_Top"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_TopLeft forKey:@"kCVImageBufferChromaLocation_TopLeft"];
[d setObject:(NSString *)kCVImageBufferChromaSubsamplingKey forKey:@"kCVImageBufferChromaSubsamplingKey"];
[d setObject:(NSString *)kCVImageBufferChromaSubsampling_411 forKey:@"kCVImageBufferChromaSubsampling_411"];
[d setObject:(NSString *)kCVImageBufferChromaSubsampling_420 forKey:@"kCVImageBufferChromaSubsampling_420"];
[d setObject:(NSString *)kCVImageBufferChromaSubsampling_422 forKey:@"kCVImageBufferChromaSubsampling_422"];
[d setObject:(NSString *)kCVImageBufferCleanApertureHeightKey forKey:@"kCVImageBufferCleanApertureHeightKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureHorizontalOffsetKey forKey:@"kCVImageBufferCleanApertureHorizontalOffsetKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureKey forKey:@"kCVImageBufferCleanApertureKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureVerticalOffsetKey forKey:@"kCVImageBufferCleanApertureVerticalOffsetKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureWidthKey forKey:@"kCVImageBufferCleanApertureWidthKey"];
[d setObject:(NSString *)kCVImageBufferColorPrimariesKey forKey:@"kCVImageBufferColorPrimariesKey"];
[d setObject:(NSString *)kCVImageBufferColorPrimaries_EBU_3213 forKey:@"kCVImageBufferColorPrimaries_EBU_3213"];
[d setObject:(NSString *)kCVImageBufferColorPrimaries_ITU_R_709_2 forKey:@"kCVImageBufferColorPrimaries_ITU_R_709_2"];
[d setObject:(NSString *)kCVImageBufferColorPrimaries_SMPTE_C forKey:@"kCVImageBufferColorPrimaries_SMPTE_C"];
[d setObject:(NSString *)kCVImageBufferDisplayDimensionsKey forKey:@"kCVImageBufferDisplayDimensionsKey"];
[d setObject:(NSString *)kCVImageBufferDisplayHeightKey forKey:@"kCVImageBufferDisplayHeightKey"];
[d setObject:(NSString *)kCVImageBufferDisplayWidthKey forKey:@"kCVImageBufferDisplayWidthKey"];
[d setObject:(NSString *)kCVImageBufferFieldCountKey forKey:@"kCVImageBufferFieldCountKey"];
[d setObject:(NSString *)kCVImageBufferFieldDetailKey forKey:@"kCVImageBufferFieldDetailKey"];
[d setObject:(NSString *)kCVImageBufferFieldDetailSpatialFirstLineEarly forKey:@"kCVImageBufferFieldDetailSpatialFirstLineEarly"];
[d setObject:(NSString *)kCVImageBufferFieldDetailSpatialFirstLineLate forKey:@"kCVImageBufferFieldDetailSpatialFirstLineLate"];
[d setObject:(NSString *)kCVImageBufferFieldDetailTemporalBottomFirst forKey:@"kCVImageBufferFieldDetailTemporalBottomFirst"];
[d setObject:(NSString *)kCVImageBufferFieldDetailTemporalTopFirst forKey:@"kCVImageBufferFieldDetailTemporalTopFirst"];
[d setObject:(NSString *)kCVImageBufferGammaLevelKey forKey:@"kCVImageBufferGammaLevelKey"];
[d setObject:(NSString *)kCVImageBufferPixelAspectRatioHorizontalSpacingKey forKey:@"kCVImageBufferPixelAspectRatioHorizontalSpacingKey"];
[d setObject:(NSString *)kCVImageBufferPixelAspectRatioKey forKey:@"kCVImageBufferPixelAspectRatioKey"];
[d setObject:(NSString *)kCVImageBufferPixelAspectRatioVerticalSpacingKey forKey:@"kCVImageBufferPixelAspectRatioVerticalSpacingKey"];
[d setObject:(NSString *)kCVImageBufferPreferredCleanApertureKey forKey:@"kCVImageBufferPreferredCleanApertureKey"];
[d setObject:(NSString *)kCVImageBufferTransferFunctionKey forKey:@"kCVImageBufferTransferFunctionKey"];
[d setObject:(NSString *)kCVImageBufferTransferFunction_EBU_3213 forKey:@"kCVImageBufferTransferFunction_EBU_3213"];
[d setObject:(NSString *)kCVImageBufferTransferFunction_ITU_R_709_2 forKey:@"kCVImageBufferTransferFunction_ITU_R_709_2"];
[d setObject:(NSString *)kCVImageBufferTransferFunction_SMPTE_C forKey:@"kCVImageBufferTransferFunction_SMPTE_C"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrixKey forKey:@"kCVImageBufferYCbCrMatrixKey"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrix_ITU_R_601_4 forKey:@"kCVImageBufferYCbCrMatrix_ITU_R_601_4"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrix_ITU_R_709_2 forKey:@"kCVImageBufferYCbCrMatrix_ITU_R_709_2"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrix_SMPTE_240M_1995 forKey:@"kCVImageBufferYCbCrMatrix_SMPTE_240M_1995"];
[d setObject:(NSString *)kCVOpenGLBufferHeight forKey:@"kCVOpenGLBufferHeight"];
[d setObject:(NSString *)kCVOpenGLBufferInternalFormat forKey:@"kCVOpenGLBufferInternalFormat"];
[d setObject:(NSString *)kCVOpenGLBufferMaximumMipmapLevel forKey:@"kCVOpenGLBufferMaximumMipmapLevel"];
[d setObject:(NSString *)kCVOpenGLBufferPoolMaximumBufferAgeKey forKey:@"kCVOpenGLBufferPoolMaximumBufferAgeKey"];
[d setObject:(NSString *)kCVOpenGLBufferPoolMinimumBufferCountKey forKey:@"kCVOpenGLBufferPoolMinimumBufferCountKey"];
[d setObject:(NSString *)kCVOpenGLBufferTarget forKey:@"kCVOpenGLBufferTarget"];
[d setObject:(NSString *)kCVOpenGLBufferWidth forKey:@"kCVOpenGLBufferWidth"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeAutomatic forKey:@"kCVOpenGLTextureCacheChromaSamplingModeAutomatic"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeBestPerformance forKey:@"kCVOpenGLTextureCacheChromaSamplingModeBestPerformance"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeHighestQuality forKey:@"kCVOpenGLTextureCacheChromaSamplingModeHighestQuality"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeKey forKey:@"kCVOpenGLTextureCacheChromaSamplingModeKey"];
[d setObject:(NSString *)kCVPixelBufferBytesPerRowAlignmentKey forKey:@"kCVPixelBufferBytesPerRowAlignmentKey"];
[d setObject:(NSString *)kCVPixelBufferCGBitmapContextCompatibilityKey forKey:@"kCVPixelBufferCGBitmapContextCompatibilityKey"];
[d setObject:(NSString *)kCVPixelBufferCGImageCompatibilityKey forKey:@"kCVPixelBufferCGImageCompatibilityKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsBottomKey forKey:@"kCVPixelBufferExtendedPixelsBottomKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsLeftKey forKey:@"kCVPixelBufferExtendedPixelsLeftKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsRightKey forKey:@"kCVPixelBufferExtendedPixelsRightKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsTopKey forKey:@"kCVPixelBufferExtendedPixelsTopKey"];
[d setObject:(NSString *)kCVPixelBufferHeightKey forKey:@"kCVPixelBufferHeightKey"];
[d setObject:(NSString *)kCVPixelBufferMemoryAllocatorKey forKey:@"kCVPixelBufferMemoryAllocatorKey"];
[d setObject:(NSString *)kCVPixelBufferOpenGLCompatibilityKey forKey:@"kCVPixelBufferOpenGLCompatibilityKey"];
[d setObject:(NSString *)kCVPixelBufferPixelFormatTypeKey forKey:@"kCVPixelBufferPixelFormatTypeKey"];
[d setObject:(NSString *)kCVPixelBufferPoolMaximumBufferAgeKey forKey:@"kCVPixelBufferPoolMaximumBufferAgeKey"];
[d setObject:(NSString *)kCVPixelBufferPoolMinimumBufferCountKey forKey:@"kCVPixelBufferPoolMinimumBufferCountKey"];
[d setObject:(NSString *)kCVPixelBufferWidthKey forKey:@"kCVPixelBufferWidthKey"];
[d setObject:(NSString *)kCVPixelFormatBitsPerBlock forKey:@"kCVPixelFormatBitsPerBlock"];
[d setObject:(NSString *)kCVPixelFormatBlockHeight forKey:@"kCVPixelFormatBlockHeight"];
[d setObject:(NSString *)kCVPixelFormatBlockHorizontalAlignment forKey:@"kCVPixelFormatBlockHorizontalAlignment"];
[d setObject:(NSString *)kCVPixelFormatBlockVerticalAlignment forKey:@"kCVPixelFormatBlockVerticalAlignment"];
[d setObject:(NSString *)kCVPixelFormatBlockWidth forKey:@"kCVPixelFormatBlockWidth"];
[d setObject:(NSString *)kCVPixelFormatCGBitmapContextCompatibility forKey:@"kCVPixelFormatCGBitmapContextCompatibility"];
[d setObject:(NSString *)kCVPixelFormatCGBitmapInfo forKey:@"kCVPixelFormatCGBitmapInfo"];
[d setObject:(NSString *)kCVPixelFormatCGImageCompatibility forKey:@"kCVPixelFormatCGImageCompatibility"];
[d setObject:(NSString *)kCVPixelFormatCodecType forKey:@"kCVPixelFormatCodecType"];
[d setObject:(NSString *)kCVPixelFormatConstant forKey:@"kCVPixelFormatConstant"];
[d setObject:(NSString *)kCVPixelFormatFillExtendedPixelsCallback forKey:@"kCVPixelFormatFillExtendedPixelsCallback"];
[d setObject:(NSString *)kCVPixelFormatFourCC forKey:@"kCVPixelFormatFourCC"];
[d setObject:(NSString *)kCVPixelFormatHorizontalSubsampling forKey:@"kCVPixelFormatHorizontalSubsampling"];
[d setObject:(NSString *)kCVPixelFormatName forKey:@"kCVPixelFormatName"];
[d setObject:(NSString *)kCVPixelFormatOpenGLCompatibility forKey:@"kCVPixelFormatOpenGLCompatibility"];
[d setObject:(NSString *)kCVPixelFormatOpenGLFormat forKey:@"kCVPixelFormatOpenGLFormat"];
[d setObject:(NSString *)kCVPixelFormatOpenGLInternalFormat forKey:@"kCVPixelFormatOpenGLInternalFormat"];
[d setObject:(NSString *)kCVPixelFormatOpenGLType forKey:@"kCVPixelFormatOpenGLType"];
[d setObject:(NSString *)kCVPixelFormatPlanes forKey:@"kCVPixelFormatPlanes"];
[d setObject:(NSString *)kCVPixelFormatQDCompatibility forKey:@"kCVPixelFormatQDCompatibility"];
[d setObject:(NSString *)kCVPixelFormatVerticalSubsampling forKey:@"kCVPixelFormatVerticalSubsampling"];
[d setObject:[Number numberWithDouble:kCVAttachmentMode_ShouldNotPropagate] forKey:@"kCVAttachmentMode_ShouldNotPropagate"];
[d setObject:[Number numberWithDouble:kCVAttachmentMode_ShouldPropagate] forKey:@"kCVAttachmentMode_ShouldPropagate"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16BE555] forKey:@"kCVPixelFormatType_16BE555"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16BE565] forKey:@"kCVPixelFormatType_16BE565"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16Gray] forKey:@"kCVPixelFormatType_16Gray"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16LE555] forKey:@"kCVPixelFormatType_16LE555"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16LE5551] forKey:@"kCVPixelFormatType_16LE5551"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16LE565] forKey:@"kCVPixelFormatType_16LE565"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_1IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_1IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_1Monochrome] forKey:@"kCVPixelFormatType_1Monochrome"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_24BGR] forKey:@"kCVPixelFormatType_24BGR"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_24RGB] forKey:@"kCVPixelFormatType_24RGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_2Indexed] forKey:@"kCVPixelFormatType_2Indexed"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_2IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_2IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32ABGR] forKey:@"kCVPixelFormatType_32ABGR"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32ARGB] forKey:@"kCVPixelFormatType_32ARGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32AlphaGray] forKey:@"kCVPixelFormatType_32AlphaGray"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32BGRA] forKey:@"kCVPixelFormatType_32BGRA"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32RGBA] forKey:@"kCVPixelFormatType_32RGBA"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_420YpCbCr8Planar] forKey:@"kCVPixelFormatType_420YpCbCr8Planar"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_422YpCbCr10] forKey:@"kCVPixelFormatType_422YpCbCr10"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_422YpCbCr16] forKey:@"kCVPixelFormatType_422YpCbCr16"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_422YpCbCr8] forKey:@"kCVPixelFormatType_422YpCbCr8"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4444YpCbCrA8] forKey:@"kCVPixelFormatType_4444YpCbCrA8"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4444YpCbCrA8R] forKey:@"kCVPixelFormatType_4444YpCbCrA8R"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_444YpCbCr10] forKey:@"kCVPixelFormatType_444YpCbCr10"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_444YpCbCr8] forKey:@"kCVPixelFormatType_444YpCbCr8"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_48RGB] forKey:@"kCVPixelFormatType_48RGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4Indexed] forKey:@"kCVPixelFormatType_4Indexed"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_4IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_64ARGB] forKey:@"kCVPixelFormatType_64ARGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_8Indexed] forKey:@"kCVPixelFormatType_8Indexed"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_8IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_8IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVReturnAllocationFailed] forKey:@"kCVReturnAllocationFailed"];
[d setObject:[Number numberWithDouble:kCVReturnDisplayLinkAlreadyRunning] forKey:@"kCVReturnDisplayLinkAlreadyRunning"];
[d setObject:[Number numberWithDouble:kCVReturnDisplayLinkCallbacksNotSet] forKey:@"kCVReturnDisplayLinkCallbacksNotSet"];
[d setObject:[Number numberWithDouble:kCVReturnDisplayLinkNotRunning] forKey:@"kCVReturnDisplayLinkNotRunning"];
[d setObject:[Number numberWithDouble:kCVReturnError] forKey:@"kCVReturnError"];
[d setObject:[Number numberWithDouble:kCVReturnFirst] forKey:@"kCVReturnFirst"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidArgument] forKey:@"kCVReturnInvalidArgument"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidDisplay] forKey:@"kCVReturnInvalidDisplay"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidPixelBufferAttributes] forKey:@"kCVReturnInvalidPixelBufferAttributes"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidPixelFormat] forKey:@"kCVReturnInvalidPixelFormat"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidPoolAttributes] forKey:@"kCVReturnInvalidPoolAttributes"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidSize] forKey:@"kCVReturnInvalidSize"];
[d setObject:[Number numberWithDouble:kCVReturnLast] forKey:@"kCVReturnLast"];
[d setObject:[Number numberWithDouble:kCVReturnPixelBufferNotOpenGLCompatible] forKey:@"kCVReturnPixelBufferNotOpenGLCompatible"];
[d setObject:[Number numberWithDouble:kCVReturnPoolAllocationFailed] forKey:@"kCVReturnPoolAllocationFailed"];
[d setObject:[Number numberWithDouble:kCVReturnSuccess] forKey:@"kCVReturnSuccess"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeRunning] forKey:@"kCVSMPTETimeRunning"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType24] forKey:@"kCVSMPTETimeType24"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType25] forKey:@"kCVSMPTETimeType25"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType2997] forKey:@"kCVSMPTETimeType2997"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType2997Drop] forKey:@"kCVSMPTETimeType2997Drop"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType30] forKey:@"kCVSMPTETimeType30"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType30Drop] forKey:@"kCVSMPTETimeType30Drop"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType5994] forKey:@"kCVSMPTETimeType5994"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType60] forKey:@"kCVSMPTETimeType60"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeValid] forKey:@"kCVSMPTETimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeIsIndefinite] forKey:@"kCVTimeIsIndefinite"];
[d setObject:[Number numberWithDouble:kCVTimeStampBottomField] forKey:@"kCVTimeStampBottomField"];
[d setObject:[Number numberWithDouble:kCVTimeStampHostTimeValid] forKey:@"kCVTimeStampHostTimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampIsInterlaced] forKey:@"kCVTimeStampIsInterlaced"];
[d setObject:[Number numberWithDouble:kCVTimeStampRateScalarValid] forKey:@"kCVTimeStampRateScalarValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampSMPTETimeValid] forKey:@"kCVTimeStampSMPTETimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampTopField] forKey:@"kCVTimeStampTopField"];
[d setObject:[Number numberWithDouble:kCVTimeStampVideoHostTimeValid] forKey:@"kCVTimeStampVideoHostTimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampVideoRefreshPeriodValid] forKey:@"kCVTimeStampVideoRefreshPeriodValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampVideoTimeValid] forKey:@"kCVTimeStampVideoTimeValid"];
[d setObject:(NSString *)kCVBufferMovieTimeKey forKey:@"kCVBufferMovieTimeKey"];
[d setObject:(NSString *)kCVBufferNonPropagatedAttachmentsKey forKey:@"kCVBufferNonPropagatedAttachmentsKey"];
[d setObject:(NSString *)kCVBufferPropagatedAttachmentsKey forKey:@"kCVBufferPropagatedAttachmentsKey"];
[d setObject:(NSString *)kCVBufferTimeScaleKey forKey:@"kCVBufferTimeScaleKey"];
[d setObject:(NSString *)kCVBufferTimeValueKey forKey:@"kCVBufferTimeValueKey"];
[d setObject:(NSString *)kCVImageBufferCGColorSpaceKey forKey:@"kCVImageBufferCGColorSpaceKey"];
[d setObject:(NSString *)kCVImageBufferChromaLocationBottomFieldKey forKey:@"kCVImageBufferChromaLocationBottomFieldKey"];
[d setObject:(NSString *)kCVImageBufferChromaLocationTopFieldKey forKey:@"kCVImageBufferChromaLocationTopFieldKey"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Bottom forKey:@"kCVImageBufferChromaLocation_Bottom"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_BottomLeft forKey:@"kCVImageBufferChromaLocation_BottomLeft"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Center forKey:@"kCVImageBufferChromaLocation_Center"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_DV420 forKey:@"kCVImageBufferChromaLocation_DV420"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Left forKey:@"kCVImageBufferChromaLocation_Left"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_Top forKey:@"kCVImageBufferChromaLocation_Top"];
[d setObject:(NSString *)kCVImageBufferChromaLocation_TopLeft forKey:@"kCVImageBufferChromaLocation_TopLeft"];
[d setObject:(NSString *)kCVImageBufferChromaSubsamplingKey forKey:@"kCVImageBufferChromaSubsamplingKey"];
[d setObject:(NSString *)kCVImageBufferChromaSubsampling_411 forKey:@"kCVImageBufferChromaSubsampling_411"];
[d setObject:(NSString *)kCVImageBufferChromaSubsampling_420 forKey:@"kCVImageBufferChromaSubsampling_420"];
[d setObject:(NSString *)kCVImageBufferChromaSubsampling_422 forKey:@"kCVImageBufferChromaSubsampling_422"];
[d setObject:(NSString *)kCVImageBufferCleanApertureHeightKey forKey:@"kCVImageBufferCleanApertureHeightKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureHorizontalOffsetKey forKey:@"kCVImageBufferCleanApertureHorizontalOffsetKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureKey forKey:@"kCVImageBufferCleanApertureKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureVerticalOffsetKey forKey:@"kCVImageBufferCleanApertureVerticalOffsetKey"];
[d setObject:(NSString *)kCVImageBufferCleanApertureWidthKey forKey:@"kCVImageBufferCleanApertureWidthKey"];
[d setObject:(NSString *)kCVImageBufferColorPrimariesKey forKey:@"kCVImageBufferColorPrimariesKey"];
[d setObject:(NSString *)kCVImageBufferColorPrimaries_EBU_3213 forKey:@"kCVImageBufferColorPrimaries_EBU_3213"];
[d setObject:(NSString *)kCVImageBufferColorPrimaries_ITU_R_709_2 forKey:@"kCVImageBufferColorPrimaries_ITU_R_709_2"];
[d setObject:(NSString *)kCVImageBufferColorPrimaries_SMPTE_C forKey:@"kCVImageBufferColorPrimaries_SMPTE_C"];
[d setObject:(NSString *)kCVImageBufferDisplayDimensionsKey forKey:@"kCVImageBufferDisplayDimensionsKey"];
[d setObject:(NSString *)kCVImageBufferDisplayHeightKey forKey:@"kCVImageBufferDisplayHeightKey"];
[d setObject:(NSString *)kCVImageBufferDisplayWidthKey forKey:@"kCVImageBufferDisplayWidthKey"];
[d setObject:(NSString *)kCVImageBufferFieldCountKey forKey:@"kCVImageBufferFieldCountKey"];
[d setObject:(NSString *)kCVImageBufferFieldDetailKey forKey:@"kCVImageBufferFieldDetailKey"];
[d setObject:(NSString *)kCVImageBufferFieldDetailSpatialFirstLineEarly forKey:@"kCVImageBufferFieldDetailSpatialFirstLineEarly"];
[d setObject:(NSString *)kCVImageBufferFieldDetailSpatialFirstLineLate forKey:@"kCVImageBufferFieldDetailSpatialFirstLineLate"];
[d setObject:(NSString *)kCVImageBufferFieldDetailTemporalBottomFirst forKey:@"kCVImageBufferFieldDetailTemporalBottomFirst"];
[d setObject:(NSString *)kCVImageBufferFieldDetailTemporalTopFirst forKey:@"kCVImageBufferFieldDetailTemporalTopFirst"];
[d setObject:(NSString *)kCVImageBufferGammaLevelKey forKey:@"kCVImageBufferGammaLevelKey"];
[d setObject:(NSString *)kCVImageBufferPixelAspectRatioHorizontalSpacingKey forKey:@"kCVImageBufferPixelAspectRatioHorizontalSpacingKey"];
[d setObject:(NSString *)kCVImageBufferPixelAspectRatioKey forKey:@"kCVImageBufferPixelAspectRatioKey"];
[d setObject:(NSString *)kCVImageBufferPixelAspectRatioVerticalSpacingKey forKey:@"kCVImageBufferPixelAspectRatioVerticalSpacingKey"];
[d setObject:(NSString *)kCVImageBufferPreferredCleanApertureKey forKey:@"kCVImageBufferPreferredCleanApertureKey"];
[d setObject:(NSString *)kCVImageBufferTransferFunctionKey forKey:@"kCVImageBufferTransferFunctionKey"];
[d setObject:(NSString *)kCVImageBufferTransferFunction_EBU_3213 forKey:@"kCVImageBufferTransferFunction_EBU_3213"];
[d setObject:(NSString *)kCVImageBufferTransferFunction_ITU_R_709_2 forKey:@"kCVImageBufferTransferFunction_ITU_R_709_2"];
[d setObject:(NSString *)kCVImageBufferTransferFunction_SMPTE_C forKey:@"kCVImageBufferTransferFunction_SMPTE_C"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrixKey forKey:@"kCVImageBufferYCbCrMatrixKey"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrix_ITU_R_601_4 forKey:@"kCVImageBufferYCbCrMatrix_ITU_R_601_4"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrix_ITU_R_709_2 forKey:@"kCVImageBufferYCbCrMatrix_ITU_R_709_2"];
[d setObject:(NSString *)kCVImageBufferYCbCrMatrix_SMPTE_240M_1995 forKey:@"kCVImageBufferYCbCrMatrix_SMPTE_240M_1995"];
[d setObject:(NSString *)kCVOpenGLBufferHeight forKey:@"kCVOpenGLBufferHeight"];
[d setObject:(NSString *)kCVOpenGLBufferInternalFormat forKey:@"kCVOpenGLBufferInternalFormat"];
[d setObject:(NSString *)kCVOpenGLBufferMaximumMipmapLevel forKey:@"kCVOpenGLBufferMaximumMipmapLevel"];
[d setObject:(NSString *)kCVOpenGLBufferPoolMaximumBufferAgeKey forKey:@"kCVOpenGLBufferPoolMaximumBufferAgeKey"];
[d setObject:(NSString *)kCVOpenGLBufferPoolMinimumBufferCountKey forKey:@"kCVOpenGLBufferPoolMinimumBufferCountKey"];
[d setObject:(NSString *)kCVOpenGLBufferTarget forKey:@"kCVOpenGLBufferTarget"];
[d setObject:(NSString *)kCVOpenGLBufferWidth forKey:@"kCVOpenGLBufferWidth"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeAutomatic forKey:@"kCVOpenGLTextureCacheChromaSamplingModeAutomatic"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeBestPerformance forKey:@"kCVOpenGLTextureCacheChromaSamplingModeBestPerformance"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeHighestQuality forKey:@"kCVOpenGLTextureCacheChromaSamplingModeHighestQuality"];
[d setObject:(NSString *)kCVOpenGLTextureCacheChromaSamplingModeKey forKey:@"kCVOpenGLTextureCacheChromaSamplingModeKey"];
[d setObject:(NSString *)kCVPixelBufferBytesPerRowAlignmentKey forKey:@"kCVPixelBufferBytesPerRowAlignmentKey"];
[d setObject:(NSString *)kCVPixelBufferCGBitmapContextCompatibilityKey forKey:@"kCVPixelBufferCGBitmapContextCompatibilityKey"];
[d setObject:(NSString *)kCVPixelBufferCGImageCompatibilityKey forKey:@"kCVPixelBufferCGImageCompatibilityKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsBottomKey forKey:@"kCVPixelBufferExtendedPixelsBottomKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsLeftKey forKey:@"kCVPixelBufferExtendedPixelsLeftKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsRightKey forKey:@"kCVPixelBufferExtendedPixelsRightKey"];
[d setObject:(NSString *)kCVPixelBufferExtendedPixelsTopKey forKey:@"kCVPixelBufferExtendedPixelsTopKey"];
[d setObject:(NSString *)kCVPixelBufferHeightKey forKey:@"kCVPixelBufferHeightKey"];
[d setObject:(NSString *)kCVPixelBufferMemoryAllocatorKey forKey:@"kCVPixelBufferMemoryAllocatorKey"];
[d setObject:(NSString *)kCVPixelBufferOpenGLCompatibilityKey forKey:@"kCVPixelBufferOpenGLCompatibilityKey"];
[d setObject:(NSString *)kCVPixelBufferPixelFormatTypeKey forKey:@"kCVPixelBufferPixelFormatTypeKey"];
[d setObject:(NSString *)kCVPixelBufferPoolMaximumBufferAgeKey forKey:@"kCVPixelBufferPoolMaximumBufferAgeKey"];
[d setObject:(NSString *)kCVPixelBufferPoolMinimumBufferCountKey forKey:@"kCVPixelBufferPoolMinimumBufferCountKey"];
[d setObject:(NSString *)kCVPixelBufferWidthKey forKey:@"kCVPixelBufferWidthKey"];
[d setObject:(NSString *)kCVPixelFormatBitsPerBlock forKey:@"kCVPixelFormatBitsPerBlock"];
[d setObject:(NSString *)kCVPixelFormatBlockHeight forKey:@"kCVPixelFormatBlockHeight"];
[d setObject:(NSString *)kCVPixelFormatBlockHorizontalAlignment forKey:@"kCVPixelFormatBlockHorizontalAlignment"];
[d setObject:(NSString *)kCVPixelFormatBlockVerticalAlignment forKey:@"kCVPixelFormatBlockVerticalAlignment"];
[d setObject:(NSString *)kCVPixelFormatBlockWidth forKey:@"kCVPixelFormatBlockWidth"];
[d setObject:(NSString *)kCVPixelFormatCGBitmapContextCompatibility forKey:@"kCVPixelFormatCGBitmapContextCompatibility"];
[d setObject:(NSString *)kCVPixelFormatCGBitmapInfo forKey:@"kCVPixelFormatCGBitmapInfo"];
[d setObject:(NSString *)kCVPixelFormatCGImageCompatibility forKey:@"kCVPixelFormatCGImageCompatibility"];
[d setObject:(NSString *)kCVPixelFormatCodecType forKey:@"kCVPixelFormatCodecType"];
[d setObject:(NSString *)kCVPixelFormatConstant forKey:@"kCVPixelFormatConstant"];
[d setObject:(NSString *)kCVPixelFormatFillExtendedPixelsCallback forKey:@"kCVPixelFormatFillExtendedPixelsCallback"];
[d setObject:(NSString *)kCVPixelFormatFourCC forKey:@"kCVPixelFormatFourCC"];
[d setObject:(NSString *)kCVPixelFormatHorizontalSubsampling forKey:@"kCVPixelFormatHorizontalSubsampling"];
[d setObject:(NSString *)kCVPixelFormatName forKey:@"kCVPixelFormatName"];
[d setObject:(NSString *)kCVPixelFormatOpenGLCompatibility forKey:@"kCVPixelFormatOpenGLCompatibility"];
[d setObject:(NSString *)kCVPixelFormatOpenGLFormat forKey:@"kCVPixelFormatOpenGLFormat"];
[d setObject:(NSString *)kCVPixelFormatOpenGLInternalFormat forKey:@"kCVPixelFormatOpenGLInternalFormat"];
[d setObject:(NSString *)kCVPixelFormatOpenGLType forKey:@"kCVPixelFormatOpenGLType"];
[d setObject:(NSString *)kCVPixelFormatPlanes forKey:@"kCVPixelFormatPlanes"];
[d setObject:(NSString *)kCVPixelFormatQDCompatibility forKey:@"kCVPixelFormatQDCompatibility"];
[d setObject:(NSString *)kCVPixelFormatVerticalSubsampling forKey:@"kCVPixelFormatVerticalSubsampling"];
[d setObject:[Number numberWithDouble:kCVAttachmentMode_ShouldNotPropagate] forKey:@"kCVAttachmentMode_ShouldNotPropagate"];
[d setObject:[Number numberWithDouble:kCVAttachmentMode_ShouldPropagate] forKey:@"kCVAttachmentMode_ShouldPropagate"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16BE555] forKey:@"kCVPixelFormatType_16BE555"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16BE565] forKey:@"kCVPixelFormatType_16BE565"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16Gray] forKey:@"kCVPixelFormatType_16Gray"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16LE555] forKey:@"kCVPixelFormatType_16LE555"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16LE5551] forKey:@"kCVPixelFormatType_16LE5551"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_16LE565] forKey:@"kCVPixelFormatType_16LE565"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_1IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_1IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_1Monochrome] forKey:@"kCVPixelFormatType_1Monochrome"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_24BGR] forKey:@"kCVPixelFormatType_24BGR"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_24RGB] forKey:@"kCVPixelFormatType_24RGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_2Indexed] forKey:@"kCVPixelFormatType_2Indexed"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_2IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_2IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32ABGR] forKey:@"kCVPixelFormatType_32ABGR"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32ARGB] forKey:@"kCVPixelFormatType_32ARGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32AlphaGray] forKey:@"kCVPixelFormatType_32AlphaGray"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32BGRA] forKey:@"kCVPixelFormatType_32BGRA"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_32RGBA] forKey:@"kCVPixelFormatType_32RGBA"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_420YpCbCr8Planar] forKey:@"kCVPixelFormatType_420YpCbCr8Planar"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_422YpCbCr10] forKey:@"kCVPixelFormatType_422YpCbCr10"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_422YpCbCr16] forKey:@"kCVPixelFormatType_422YpCbCr16"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_422YpCbCr8] forKey:@"kCVPixelFormatType_422YpCbCr8"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4444YpCbCrA8] forKey:@"kCVPixelFormatType_4444YpCbCrA8"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4444YpCbCrA8R] forKey:@"kCVPixelFormatType_4444YpCbCrA8R"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_444YpCbCr10] forKey:@"kCVPixelFormatType_444YpCbCr10"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_444YpCbCr8] forKey:@"kCVPixelFormatType_444YpCbCr8"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_48RGB] forKey:@"kCVPixelFormatType_48RGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4Indexed] forKey:@"kCVPixelFormatType_4Indexed"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_4IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_4IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_64ARGB] forKey:@"kCVPixelFormatType_64ARGB"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_8Indexed] forKey:@"kCVPixelFormatType_8Indexed"];
[d setObject:[Number numberWithDouble:kCVPixelFormatType_8IndexedGray_WhiteIsZero] forKey:@"kCVPixelFormatType_8IndexedGray_WhiteIsZero"];
[d setObject:[Number numberWithDouble:kCVReturnAllocationFailed] forKey:@"kCVReturnAllocationFailed"];
[d setObject:[Number numberWithDouble:kCVReturnDisplayLinkAlreadyRunning] forKey:@"kCVReturnDisplayLinkAlreadyRunning"];
[d setObject:[Number numberWithDouble:kCVReturnDisplayLinkCallbacksNotSet] forKey:@"kCVReturnDisplayLinkCallbacksNotSet"];
[d setObject:[Number numberWithDouble:kCVReturnDisplayLinkNotRunning] forKey:@"kCVReturnDisplayLinkNotRunning"];
[d setObject:[Number numberWithDouble:kCVReturnError] forKey:@"kCVReturnError"];
[d setObject:[Number numberWithDouble:kCVReturnFirst] forKey:@"kCVReturnFirst"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidArgument] forKey:@"kCVReturnInvalidArgument"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidDisplay] forKey:@"kCVReturnInvalidDisplay"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidPixelBufferAttributes] forKey:@"kCVReturnInvalidPixelBufferAttributes"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidPixelFormat] forKey:@"kCVReturnInvalidPixelFormat"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidPoolAttributes] forKey:@"kCVReturnInvalidPoolAttributes"];
[d setObject:[Number numberWithDouble:kCVReturnInvalidSize] forKey:@"kCVReturnInvalidSize"];
[d setObject:[Number numberWithDouble:kCVReturnLast] forKey:@"kCVReturnLast"];
[d setObject:[Number numberWithDouble:kCVReturnPixelBufferNotOpenGLCompatible] forKey:@"kCVReturnPixelBufferNotOpenGLCompatible"];
[d setObject:[Number numberWithDouble:kCVReturnPoolAllocationFailed] forKey:@"kCVReturnPoolAllocationFailed"];
[d setObject:[Number numberWithDouble:kCVReturnSuccess] forKey:@"kCVReturnSuccess"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeRunning] forKey:@"kCVSMPTETimeRunning"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType24] forKey:@"kCVSMPTETimeType24"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType25] forKey:@"kCVSMPTETimeType25"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType2997] forKey:@"kCVSMPTETimeType2997"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType2997Drop] forKey:@"kCVSMPTETimeType2997Drop"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType30] forKey:@"kCVSMPTETimeType30"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType30Drop] forKey:@"kCVSMPTETimeType30Drop"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType5994] forKey:@"kCVSMPTETimeType5994"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeType60] forKey:@"kCVSMPTETimeType60"];
[d setObject:[Number numberWithDouble:kCVSMPTETimeValid] forKey:@"kCVSMPTETimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeIsIndefinite] forKey:@"kCVTimeIsIndefinite"];
[d setObject:[Number numberWithDouble:kCVTimeStampBottomField] forKey:@"kCVTimeStampBottomField"];
[d setObject:[Number numberWithDouble:kCVTimeStampHostTimeValid] forKey:@"kCVTimeStampHostTimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampIsInterlaced] forKey:@"kCVTimeStampIsInterlaced"];
[d setObject:[Number numberWithDouble:kCVTimeStampRateScalarValid] forKey:@"kCVTimeStampRateScalarValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampSMPTETimeValid] forKey:@"kCVTimeStampSMPTETimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampTopField] forKey:@"kCVTimeStampTopField"];
[d setObject:[Number numberWithDouble:kCVTimeStampVideoHostTimeValid] forKey:@"kCVTimeStampVideoHostTimeValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampVideoRefreshPeriodValid] forKey:@"kCVTimeStampVideoRefreshPeriodValid"];
[d setObject:[Number numberWithDouble:kCVTimeStampVideoTimeValid] forKey:@"kCVTimeStampVideoTimeValid"];
if ([DRAbstractFile isKindOfClass:[NSString class]]) [d setObject:DRAbstractFile forKey:@"DRAbstractFile"]; else NSLog([@"Can't initialize DRAbstractFile with object " stringByAppendingString:[DRAbstractFile description]]);
if ([DRAccessDate isKindOfClass:[NSString class]]) [d setObject:DRAccessDate forKey:@"DRAccessDate"]; else NSLog([@"Can't initialize DRAccessDate with object " stringByAppendingString:[DRAccessDate description]]);
if ([DRAllFilesystems isKindOfClass:[NSString class]]) [d setObject:DRAllFilesystems forKey:@"DRAllFilesystems"]; else NSLog([@"Can't initialize DRAllFilesystems with object " stringByAppendingString:[DRAllFilesystems description]]);
if ([DRApplicationIdentifier isKindOfClass:[NSString class]]) [d setObject:DRApplicationIdentifier forKey:@"DRApplicationIdentifier"]; else NSLog([@"Can't initialize DRApplicationIdentifier with object " stringByAppendingString:[DRApplicationIdentifier description]]);
if ([DRAttributeModificationDate isKindOfClass:[NSString class]]) [d setObject:DRAttributeModificationDate forKey:@"DRAttributeModificationDate"]; else NSLog([@"Can't initialize DRAttributeModificationDate with object " stringByAppendingString:[DRAttributeModificationDate description]]);
if ([DRAudioFourChannelKey isKindOfClass:[NSString class]]) [d setObject:DRAudioFourChannelKey forKey:@"DRAudioFourChannelKey"]; else NSLog([@"Can't initialize DRAudioFourChannelKey with object " stringByAppendingString:[DRAudioFourChannelKey description]]);
if ([DRAudioPreEmphasisKey isKindOfClass:[NSString class]]) [d setObject:DRAudioPreEmphasisKey forKey:@"DRAudioPreEmphasisKey"]; else NSLog([@"Can't initialize DRAudioPreEmphasisKey with object " stringByAppendingString:[DRAudioPreEmphasisKey description]]);
if ([DRBackupDate isKindOfClass:[NSString class]]) [d setObject:DRBackupDate forKey:@"DRBackupDate"]; else NSLog([@"Can't initialize DRBackupDate with object " stringByAppendingString:[DRBackupDate description]]);
if ([DRBibliographicFile isKindOfClass:[NSString class]]) [d setObject:DRBibliographicFile forKey:@"DRBibliographicFile"]; else NSLog([@"Can't initialize DRBibliographicFile with object " stringByAppendingString:[DRBibliographicFile description]]);
if ([DRBlockSize isKindOfClass:[NSString class]]) [d setObject:DRBlockSize forKey:@"DRBlockSize"]; else NSLog([@"Can't initialize DRBlockSize with object " stringByAppendingString:[DRBlockSize description]]);
if ([DRBlockSizeKey isKindOfClass:[NSString class]]) [d setObject:DRBlockSizeKey forKey:@"DRBlockSizeKey"]; else NSLog([@"Can't initialize DRBlockSizeKey with object " stringByAppendingString:[DRBlockSizeKey description]]);
if ([DRBlockTypeKey isKindOfClass:[NSString class]]) [d setObject:DRBlockTypeKey forKey:@"DRBlockTypeKey"]; else NSLog([@"Can't initialize DRBlockTypeKey with object " stringByAppendingString:[DRBlockTypeKey description]]);
if ([DRBurnAppendableKey isKindOfClass:[NSString class]]) [d setObject:DRBurnAppendableKey forKey:@"DRBurnAppendableKey"]; else NSLog([@"Can't initialize DRBurnAppendableKey with object " stringByAppendingString:[DRBurnAppendableKey description]]);
if ([DRBurnCompletionActionEject isKindOfClass:[NSString class]]) [d setObject:DRBurnCompletionActionEject forKey:@"DRBurnCompletionActionEject"]; else NSLog([@"Can't initialize DRBurnCompletionActionEject with object " stringByAppendingString:[DRBurnCompletionActionEject description]]);
if ([DRBurnCompletionActionKey isKindOfClass:[NSString class]]) [d setObject:DRBurnCompletionActionKey forKey:@"DRBurnCompletionActionKey"]; else NSLog([@"Can't initialize DRBurnCompletionActionKey with object " stringByAppendingString:[DRBurnCompletionActionKey description]]);
if ([DRBurnCompletionActionMount isKindOfClass:[NSString class]]) [d setObject:DRBurnCompletionActionMount forKey:@"DRBurnCompletionActionMount"]; else NSLog([@"Can't initialize DRBurnCompletionActionMount with object " stringByAppendingString:[DRBurnCompletionActionMount description]]);
if ([DRBurnDoubleLayerL0DataZoneBlocksKey isKindOfClass:[NSString class]]) [d setObject:DRBurnDoubleLayerL0DataZoneBlocksKey forKey:@"DRBurnDoubleLayerL0DataZoneBlocksKey"]; else NSLog([@"Can't initialize DRBurnDoubleLayerL0DataZoneBlocksKey with object " stringByAppendingString:[DRBurnDoubleLayerL0DataZoneBlocksKey description]]);
if ([DRBurnFailureActionEject isKindOfClass:[NSString class]]) [d setObject:DRBurnFailureActionEject forKey:@"DRBurnFailureActionEject"]; else NSLog([@"Can't initialize DRBurnFailureActionEject with object " stringByAppendingString:[DRBurnFailureActionEject description]]);
if ([DRBurnFailureActionKey isKindOfClass:[NSString class]]) [d setObject:DRBurnFailureActionKey forKey:@"DRBurnFailureActionKey"]; else NSLog([@"Can't initialize DRBurnFailureActionKey with object " stringByAppendingString:[DRBurnFailureActionKey description]]);
if ([DRBurnFailureActionNone isKindOfClass:[NSString class]]) [d setObject:DRBurnFailureActionNone forKey:@"DRBurnFailureActionNone"]; else NSLog([@"Can't initialize DRBurnFailureActionNone with object " stringByAppendingString:[DRBurnFailureActionNone description]]);
if ([DRBurnOverwriteDiscKey isKindOfClass:[NSString class]]) [d setObject:DRBurnOverwriteDiscKey forKey:@"DRBurnOverwriteDiscKey"]; else NSLog([@"Can't initialize DRBurnOverwriteDiscKey with object " stringByAppendingString:[DRBurnOverwriteDiscKey description]]);
if ([DRBurnRequestedSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRBurnRequestedSpeedKey forKey:@"DRBurnRequestedSpeedKey"]; else NSLog([@"Can't initialize DRBurnRequestedSpeedKey with object " stringByAppendingString:[DRBurnRequestedSpeedKey description]]);
if ([DRBurnStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:DRBurnStatusChangedNotification forKey:@"DRBurnStatusChangedNotification"]; else NSLog([@"Can't initialize DRBurnStatusChangedNotification with object " stringByAppendingString:[DRBurnStatusChangedNotification description]]);
if ([DRBurnStrategyBDDAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyBDDAO forKey:@"DRBurnStrategyBDDAO"]; else NSLog([@"Can't initialize DRBurnStrategyBDDAO with object " stringByAppendingString:[DRBurnStrategyBDDAO description]]);
if ([DRBurnStrategyCDSAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyCDSAO forKey:@"DRBurnStrategyCDSAO"]; else NSLog([@"Can't initialize DRBurnStrategyCDSAO with object " stringByAppendingString:[DRBurnStrategyCDSAO description]]);
if ([DRBurnStrategyCDTAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyCDTAO forKey:@"DRBurnStrategyCDTAO"]; else NSLog([@"Can't initialize DRBurnStrategyCDTAO with object " stringByAppendingString:[DRBurnStrategyCDTAO description]]);
if ([DRBurnStrategyDVDDAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyDVDDAO forKey:@"DRBurnStrategyDVDDAO"]; else NSLog([@"Can't initialize DRBurnStrategyDVDDAO with object " stringByAppendingString:[DRBurnStrategyDVDDAO description]]);
if ([DRBurnStrategyIsRequiredKey isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyIsRequiredKey forKey:@"DRBurnStrategyIsRequiredKey"]; else NSLog([@"Can't initialize DRBurnStrategyIsRequiredKey with object " stringByAppendingString:[DRBurnStrategyIsRequiredKey description]]);
if ([DRBurnStrategyKey isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyKey forKey:@"DRBurnStrategyKey"]; else NSLog([@"Can't initialize DRBurnStrategyKey with object " stringByAppendingString:[DRBurnStrategyKey description]]);
if ([DRBurnTestingKey isKindOfClass:[NSString class]]) [d setObject:DRBurnTestingKey forKey:@"DRBurnTestingKey"]; else NSLog([@"Can't initialize DRBurnTestingKey with object " stringByAppendingString:[DRBurnTestingKey description]]);
if ([DRBurnUnderrunProtectionKey isKindOfClass:[NSString class]]) [d setObject:DRBurnUnderrunProtectionKey forKey:@"DRBurnUnderrunProtectionKey"]; else NSLog([@"Can't initialize DRBurnUnderrunProtectionKey with object " stringByAppendingString:[DRBurnUnderrunProtectionKey description]]);
if ([DRBurnVerifyDiscKey isKindOfClass:[NSString class]]) [d setObject:DRBurnVerifyDiscKey forKey:@"DRBurnVerifyDiscKey"]; else NSLog([@"Can't initialize DRBurnVerifyDiscKey with object " stringByAppendingString:[DRBurnVerifyDiscKey description]]);
if ([DRCDTextArrangerKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextArrangerKey forKey:@"DRCDTextArrangerKey"]; else NSLog([@"Can't initialize DRCDTextArrangerKey with object " stringByAppendingString:[DRCDTextArrangerKey description]]);
if ([DRCDTextCharacterCodeKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCharacterCodeKey forKey:@"DRCDTextCharacterCodeKey"]; else NSLog([@"Can't initialize DRCDTextCharacterCodeKey with object " stringByAppendingString:[DRCDTextCharacterCodeKey description]]);
if ([DRCDTextClosedKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextClosedKey forKey:@"DRCDTextClosedKey"]; else NSLog([@"Can't initialize DRCDTextClosedKey with object " stringByAppendingString:[DRCDTextClosedKey description]]);
if ([DRCDTextComposerKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextComposerKey forKey:@"DRCDTextComposerKey"]; else NSLog([@"Can't initialize DRCDTextComposerKey with object " stringByAppendingString:[DRCDTextComposerKey description]]);
if ([DRCDTextCopyrightAssertedForNamesKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCopyrightAssertedForNamesKey forKey:@"DRCDTextCopyrightAssertedForNamesKey"]; else NSLog([@"Can't initialize DRCDTextCopyrightAssertedForNamesKey with object " stringByAppendingString:[DRCDTextCopyrightAssertedForNamesKey description]]);
if ([DRCDTextCopyrightAssertedForSpecialMessagesKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCopyrightAssertedForSpecialMessagesKey forKey:@"DRCDTextCopyrightAssertedForSpecialMessagesKey"]; else NSLog([@"Can't initialize DRCDTextCopyrightAssertedForSpecialMessagesKey with object " stringByAppendingString:[DRCDTextCopyrightAssertedForSpecialMessagesKey description]]);
if ([DRCDTextCopyrightAssertedForTitlesKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCopyrightAssertedForTitlesKey forKey:@"DRCDTextCopyrightAssertedForTitlesKey"]; else NSLog([@"Can't initialize DRCDTextCopyrightAssertedForTitlesKey with object " stringByAppendingString:[DRCDTextCopyrightAssertedForTitlesKey description]]);
if ([DRCDTextDiscIdentKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextDiscIdentKey forKey:@"DRCDTextDiscIdentKey"]; else NSLog([@"Can't initialize DRCDTextDiscIdentKey with object " stringByAppendingString:[DRCDTextDiscIdentKey description]]);
if ([DRCDTextGenreCodeKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextGenreCodeKey forKey:@"DRCDTextGenreCodeKey"]; else NSLog([@"Can't initialize DRCDTextGenreCodeKey with object " stringByAppendingString:[DRCDTextGenreCodeKey description]]);
if ([DRCDTextGenreKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextGenreKey forKey:@"DRCDTextGenreKey"]; else NSLog([@"Can't initialize DRCDTextGenreKey with object " stringByAppendingString:[DRCDTextGenreKey description]]);
if ([DRCDTextKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextKey forKey:@"DRCDTextKey"]; else NSLog([@"Can't initialize DRCDTextKey with object " stringByAppendingString:[DRCDTextKey description]]);
if ([DRCDTextLanguageKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextLanguageKey forKey:@"DRCDTextLanguageKey"]; else NSLog([@"Can't initialize DRCDTextLanguageKey with object " stringByAppendingString:[DRCDTextLanguageKey description]]);
if ([DRCDTextMCNISRCKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextMCNISRCKey forKey:@"DRCDTextMCNISRCKey"]; else NSLog([@"Can't initialize DRCDTextMCNISRCKey with object " stringByAppendingString:[DRCDTextMCNISRCKey description]]);
if ([DRCDTextNSStringEncodingKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextNSStringEncodingKey forKey:@"DRCDTextNSStringEncodingKey"]; else NSLog([@"Can't initialize DRCDTextNSStringEncodingKey with object " stringByAppendingString:[DRCDTextNSStringEncodingKey description]]);
if ([DRCDTextPerformerKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextPerformerKey forKey:@"DRCDTextPerformerKey"]; else NSLog([@"Can't initialize DRCDTextPerformerKey with object " stringByAppendingString:[DRCDTextPerformerKey description]]);
if ([DRCDTextSizeKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextSizeKey forKey:@"DRCDTextSizeKey"]; else NSLog([@"Can't initialize DRCDTextSizeKey with object " stringByAppendingString:[DRCDTextSizeKey description]]);
if ([DRCDTextSongwriterKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextSongwriterKey forKey:@"DRCDTextSongwriterKey"]; else NSLog([@"Can't initialize DRCDTextSongwriterKey with object " stringByAppendingString:[DRCDTextSongwriterKey description]]);
if ([DRCDTextSpecialMessageKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextSpecialMessageKey forKey:@"DRCDTextSpecialMessageKey"]; else NSLog([@"Can't initialize DRCDTextSpecialMessageKey with object " stringByAppendingString:[DRCDTextSpecialMessageKey description]]);
if ([DRCDTextTOC2Key isKindOfClass:[NSString class]]) [d setObject:DRCDTextTOC2Key forKey:@"DRCDTextTOC2Key"]; else NSLog([@"Can't initialize DRCDTextTOC2Key with object " stringByAppendingString:[DRCDTextTOC2Key description]]);
if ([DRCDTextTOCKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextTOCKey forKey:@"DRCDTextTOCKey"]; else NSLog([@"Can't initialize DRCDTextTOCKey with object " stringByAppendingString:[DRCDTextTOCKey description]]);
if ([DRCDTextTitleKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextTitleKey forKey:@"DRCDTextTitleKey"]; else NSLog([@"Can't initialize DRCDTextTitleKey with object " stringByAppendingString:[DRCDTextTitleKey description]]);
if ([DRContentModificationDate isKindOfClass:[NSString class]]) [d setObject:DRContentModificationDate forKey:@"DRContentModificationDate"]; else NSLog([@"Can't initialize DRContentModificationDate with object " stringByAppendingString:[DRContentModificationDate description]]);
if ([DRCopyrightFile isKindOfClass:[NSString class]]) [d setObject:DRCopyrightFile forKey:@"DRCopyrightFile"]; else NSLog([@"Can't initialize DRCopyrightFile with object " stringByAppendingString:[DRCopyrightFile description]]);
if ([DRCreationDate isKindOfClass:[NSString class]]) [d setObject:DRCreationDate forKey:@"DRCreationDate"]; else NSLog([@"Can't initialize DRCreationDate with object " stringByAppendingString:[DRCreationDate description]]);
if ([DRDVDCopyrightInfoKey isKindOfClass:[NSString class]]) [d setObject:DRDVDCopyrightInfoKey forKey:@"DRDVDCopyrightInfoKey"]; else NSLog([@"Can't initialize DRDVDCopyrightInfoKey with object " stringByAppendingString:[DRDVDCopyrightInfoKey description]]);
if ([DRDVDTimestampKey isKindOfClass:[NSString class]]) [d setObject:DRDVDTimestampKey forKey:@"DRDVDTimestampKey"]; else NSLog([@"Can't initialize DRDVDTimestampKey with object " stringByAppendingString:[DRDVDTimestampKey description]]);
if ([DRDataFormKey isKindOfClass:[NSString class]]) [d setObject:DRDataFormKey forKey:@"DRDataFormKey"]; else NSLog([@"Can't initialize DRDataFormKey with object " stringByAppendingString:[DRDataFormKey description]]);
if ([DRDataPreparer isKindOfClass:[NSString class]]) [d setObject:DRDataPreparer forKey:@"DRDataPreparer"]; else NSLog([@"Can't initialize DRDataPreparer with object " stringByAppendingString:[DRDataPreparer description]]);
if ([DRDefaultDate isKindOfClass:[NSString class]]) [d setObject:DRDefaultDate forKey:@"DRDefaultDate"]; else NSLog([@"Can't initialize DRDefaultDate with object " stringByAppendingString:[DRDefaultDate description]]);
if ([DRDeviceAppearedNotification isKindOfClass:[NSString class]]) [d setObject:DRDeviceAppearedNotification forKey:@"DRDeviceAppearedNotification"]; else NSLog([@"Can't initialize DRDeviceAppearedNotification with object " stringByAppendingString:[DRDeviceAppearedNotification description]]);
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedBD1x] forKey:@"DRDeviceBurnSpeedBD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedCD1x] forKey:@"DRDeviceBurnSpeedCD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedDVD1x] forKey:@"DRDeviceBurnSpeedDVD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedHDDVD1x] forKey:@"DRDeviceBurnSpeedHDDVD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedMax] forKey:@"DRDeviceBurnSpeedMax"];
if ([DRDeviceBurnSpeedsKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceBurnSpeedsKey forKey:@"DRDeviceBurnSpeedsKey"]; else NSLog([@"Can't initialize DRDeviceBurnSpeedsKey with object " stringByAppendingString:[DRDeviceBurnSpeedsKey description]]);
if ([DRDeviceCanTestWriteCDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanTestWriteCDKey forKey:@"DRDeviceCanTestWriteCDKey"]; else NSLog([@"Can't initialize DRDeviceCanTestWriteCDKey with object " stringByAppendingString:[DRDeviceCanTestWriteCDKey description]]);
if ([DRDeviceCanTestWriteDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanTestWriteDVDKey forKey:@"DRDeviceCanTestWriteDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanTestWriteDVDKey with object " stringByAppendingString:[DRDeviceCanTestWriteDVDKey description]]);
if ([DRDeviceCanUnderrunProtectCDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanUnderrunProtectCDKey forKey:@"DRDeviceCanUnderrunProtectCDKey"]; else NSLog([@"Can't initialize DRDeviceCanUnderrunProtectCDKey with object " stringByAppendingString:[DRDeviceCanUnderrunProtectCDKey description]]);
if ([DRDeviceCanUnderrunProtectDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanUnderrunProtectDVDKey forKey:@"DRDeviceCanUnderrunProtectDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanUnderrunProtectDVDKey with object " stringByAppendingString:[DRDeviceCanUnderrunProtectDVDKey description]]);
if ([DRDeviceCanWriteBDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteBDKey forKey:@"DRDeviceCanWriteBDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteBDKey with object " stringByAppendingString:[DRDeviceCanWriteBDKey description]]);
if ([DRDeviceCanWriteBDREKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteBDREKey forKey:@"DRDeviceCanWriteBDREKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteBDREKey with object " stringByAppendingString:[DRDeviceCanWriteBDREKey description]]);
if ([DRDeviceCanWriteBDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteBDRKey forKey:@"DRDeviceCanWriteBDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteBDRKey with object " stringByAppendingString:[DRDeviceCanWriteBDRKey description]]);
if ([DRDeviceCanWriteCDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDKey forKey:@"DRDeviceCanWriteCDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDKey with object " stringByAppendingString:[DRDeviceCanWriteCDKey description]]);
if ([DRDeviceCanWriteCDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDRKey forKey:@"DRDeviceCanWriteCDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDRKey with object " stringByAppendingString:[DRDeviceCanWriteCDRKey description]]);
if ([DRDeviceCanWriteCDRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDRWKey forKey:@"DRDeviceCanWriteCDRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDRWKey with object " stringByAppendingString:[DRDeviceCanWriteCDRWKey description]]);
if ([DRDeviceCanWriteCDRawKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDRawKey forKey:@"DRDeviceCanWriteCDRawKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDRawKey with object " stringByAppendingString:[DRDeviceCanWriteCDRawKey description]]);
if ([DRDeviceCanWriteCDSAOKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDSAOKey forKey:@"DRDeviceCanWriteCDSAOKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDSAOKey with object " stringByAppendingString:[DRDeviceCanWriteCDSAOKey description]]);
if ([DRDeviceCanWriteCDTAOKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDTAOKey forKey:@"DRDeviceCanWriteCDTAOKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDTAOKey with object " stringByAppendingString:[DRDeviceCanWriteCDTAOKey description]]);
if ([DRDeviceCanWriteCDTextKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDTextKey forKey:@"DRDeviceCanWriteCDTextKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDTextKey with object " stringByAppendingString:[DRDeviceCanWriteCDTextKey description]]);
if ([DRDeviceCanWriteDVDDAOKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDDAOKey forKey:@"DRDeviceCanWriteDVDDAOKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDDAOKey with object " stringByAppendingString:[DRDeviceCanWriteDVDDAOKey description]]);
if ([DRDeviceCanWriteDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDKey forKey:@"DRDeviceCanWriteDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDKey with object " stringByAppendingString:[DRDeviceCanWriteDVDKey description]]);
if ([DRDeviceCanWriteDVDPlusRDoubleLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRDoubleLayerKey forKey:@"DRDeviceCanWriteDVDPlusRDoubleLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRDoubleLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRDoubleLayerKey description]]);
if ([DRDeviceCanWriteDVDPlusRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRKey forKey:@"DRDeviceCanWriteDVDPlusRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRKey description]]);
if ([DRDeviceCanWriteDVDPlusRWDoubleLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRWDoubleLayerKey forKey:@"DRDeviceCanWriteDVDPlusRWDoubleLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRWDoubleLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRWDoubleLayerKey description]]);
if ([DRDeviceCanWriteDVDPlusRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRWKey forKey:@"DRDeviceCanWriteDVDPlusRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRWKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRWKey description]]);
if ([DRDeviceCanWriteDVDRAMKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRAMKey forKey:@"DRDeviceCanWriteDVDRAMKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRAMKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRAMKey description]]);
if ([DRDeviceCanWriteDVDRDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRDualLayerKey forKey:@"DRDeviceCanWriteDVDRDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRDualLayerKey description]]);
if ([DRDeviceCanWriteDVDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRKey forKey:@"DRDeviceCanWriteDVDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRKey description]]);
if ([DRDeviceCanWriteDVDRWDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRWDualLayerKey forKey:@"DRDeviceCanWriteDVDRWDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRWDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRWDualLayerKey description]]);
if ([DRDeviceCanWriteDVDRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRWKey forKey:@"DRDeviceCanWriteDVDRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRWKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRWKey description]]);
if ([DRDeviceCanWriteHDDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDKey forKey:@"DRDeviceCanWriteHDDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDKey description]]);
if ([DRDeviceCanWriteHDDVDRAMKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRAMKey forKey:@"DRDeviceCanWriteHDDVDRAMKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRAMKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRAMKey description]]);
if ([DRDeviceCanWriteHDDVDRDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRDualLayerKey forKey:@"DRDeviceCanWriteHDDVDRDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRDualLayerKey description]]);
if ([DRDeviceCanWriteHDDVDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRKey forKey:@"DRDeviceCanWriteHDDVDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRKey description]]);
if ([DRDeviceCanWriteHDDVDRWDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRWDualLayerKey forKey:@"DRDeviceCanWriteHDDVDRWDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRWDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRWDualLayerKey description]]);
if ([DRDeviceCanWriteHDDVDRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRWKey forKey:@"DRDeviceCanWriteHDDVDRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRWKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRWKey description]]);
if ([DRDeviceCanWriteISRCKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteISRCKey forKey:@"DRDeviceCanWriteISRCKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteISRCKey with object " stringByAppendingString:[DRDeviceCanWriteISRCKey description]]);
if ([DRDeviceCanWriteIndexPointsKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteIndexPointsKey forKey:@"DRDeviceCanWriteIndexPointsKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteIndexPointsKey with object " stringByAppendingString:[DRDeviceCanWriteIndexPointsKey description]]);
if ([DRDeviceCanWriteKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteKey forKey:@"DRDeviceCanWriteKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteKey with object " stringByAppendingString:[DRDeviceCanWriteKey description]]);
if ([DRDeviceCurrentWriteSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCurrentWriteSpeedKey forKey:@"DRDeviceCurrentWriteSpeedKey"]; else NSLog([@"Can't initialize DRDeviceCurrentWriteSpeedKey with object " stringByAppendingString:[DRDeviceCurrentWriteSpeedKey description]]);
if ([DRDeviceDisappearedNotification isKindOfClass:[NSString class]]) [d setObject:DRDeviceDisappearedNotification forKey:@"DRDeviceDisappearedNotification"]; else NSLog([@"Can't initialize DRDeviceDisappearedNotification with object " stringByAppendingString:[DRDeviceDisappearedNotification description]]);
if ([DRDeviceFirmwareRevisionKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceFirmwareRevisionKey forKey:@"DRDeviceFirmwareRevisionKey"]; else NSLog([@"Can't initialize DRDeviceFirmwareRevisionKey with object " stringByAppendingString:[DRDeviceFirmwareRevisionKey description]]);
if ([DRDeviceIORegistryEntryPathKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceIORegistryEntryPathKey forKey:@"DRDeviceIORegistryEntryPathKey"]; else NSLog([@"Can't initialize DRDeviceIORegistryEntryPathKey with object " stringByAppendingString:[DRDeviceIORegistryEntryPathKey description]]);
if ([DRDeviceIsBusyKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceIsBusyKey forKey:@"DRDeviceIsBusyKey"]; else NSLog([@"Can't initialize DRDeviceIsBusyKey with object " stringByAppendingString:[DRDeviceIsBusyKey description]]);
if ([DRDeviceIsTrayOpenKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceIsTrayOpenKey forKey:@"DRDeviceIsTrayOpenKey"]; else NSLog([@"Can't initialize DRDeviceIsTrayOpenKey with object " stringByAppendingString:[DRDeviceIsTrayOpenKey description]]);
if ([DRDeviceLoadingMechanismCanEjectKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceLoadingMechanismCanEjectKey forKey:@"DRDeviceLoadingMechanismCanEjectKey"]; else NSLog([@"Can't initialize DRDeviceLoadingMechanismCanEjectKey with object " stringByAppendingString:[DRDeviceLoadingMechanismCanEjectKey description]]);
if ([DRDeviceLoadingMechanismCanInjectKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceLoadingMechanismCanInjectKey forKey:@"DRDeviceLoadingMechanismCanInjectKey"]; else NSLog([@"Can't initialize DRDeviceLoadingMechanismCanInjectKey with object " stringByAppendingString:[DRDeviceLoadingMechanismCanInjectKey description]]);
if ([DRDeviceLoadingMechanismCanOpenKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceLoadingMechanismCanOpenKey forKey:@"DRDeviceLoadingMechanismCanOpenKey"]; else NSLog([@"Can't initialize DRDeviceLoadingMechanismCanOpenKey with object " stringByAppendingString:[DRDeviceLoadingMechanismCanOpenKey description]]);
if ([DRDeviceMaximumWriteSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMaximumWriteSpeedKey forKey:@"DRDeviceMaximumWriteSpeedKey"]; else NSLog([@"Can't initialize DRDeviceMaximumWriteSpeedKey with object " stringByAppendingString:[DRDeviceMaximumWriteSpeedKey description]]);
if ([DRDeviceMediaBSDNameKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBSDNameKey forKey:@"DRDeviceMediaBSDNameKey"]; else NSLog([@"Can't initialize DRDeviceMediaBSDNameKey with object " stringByAppendingString:[DRDeviceMediaBSDNameKey description]]);
if ([DRDeviceMediaBlocksFreeKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBlocksFreeKey forKey:@"DRDeviceMediaBlocksFreeKey"]; else NSLog([@"Can't initialize DRDeviceMediaBlocksFreeKey with object " stringByAppendingString:[DRDeviceMediaBlocksFreeKey description]]);
if ([DRDeviceMediaBlocksOverwritableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBlocksOverwritableKey forKey:@"DRDeviceMediaBlocksOverwritableKey"]; else NSLog([@"Can't initialize DRDeviceMediaBlocksOverwritableKey with object " stringByAppendingString:[DRDeviceMediaBlocksOverwritableKey description]]);
if ([DRDeviceMediaBlocksUsedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBlocksUsedKey forKey:@"DRDeviceMediaBlocksUsedKey"]; else NSLog([@"Can't initialize DRDeviceMediaBlocksUsedKey with object " stringByAppendingString:[DRDeviceMediaBlocksUsedKey description]]);
if ([DRDeviceMediaClassBD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassBD forKey:@"DRDeviceMediaClassBD"]; else NSLog([@"Can't initialize DRDeviceMediaClassBD with object " stringByAppendingString:[DRDeviceMediaClassBD description]]);
if ([DRDeviceMediaClassCD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassCD forKey:@"DRDeviceMediaClassCD"]; else NSLog([@"Can't initialize DRDeviceMediaClassCD with object " stringByAppendingString:[DRDeviceMediaClassCD description]]);
if ([DRDeviceMediaClassDVD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassDVD forKey:@"DRDeviceMediaClassDVD"]; else NSLog([@"Can't initialize DRDeviceMediaClassDVD with object " stringByAppendingString:[DRDeviceMediaClassDVD description]]);
if ([DRDeviceMediaClassHDDVD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassHDDVD forKey:@"DRDeviceMediaClassHDDVD"]; else NSLog([@"Can't initialize DRDeviceMediaClassHDDVD with object " stringByAppendingString:[DRDeviceMediaClassHDDVD description]]);
if ([DRDeviceMediaClassKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassKey forKey:@"DRDeviceMediaClassKey"]; else NSLog([@"Can't initialize DRDeviceMediaClassKey with object " stringByAppendingString:[DRDeviceMediaClassKey description]]);
if ([DRDeviceMediaClassUnknown isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassUnknown forKey:@"DRDeviceMediaClassUnknown"]; else NSLog([@"Can't initialize DRDeviceMediaClassUnknown with object " stringByAppendingString:[DRDeviceMediaClassUnknown description]]);
if ([DRDeviceMediaDoubleLayerL0DataZoneBlocksKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaDoubleLayerL0DataZoneBlocksKey forKey:@"DRDeviceMediaDoubleLayerL0DataZoneBlocksKey"]; else NSLog([@"Can't initialize DRDeviceMediaDoubleLayerL0DataZoneBlocksKey with object " stringByAppendingString:[DRDeviceMediaDoubleLayerL0DataZoneBlocksKey description]]);
if ([DRDeviceMediaFreeSpaceKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaFreeSpaceKey forKey:@"DRDeviceMediaFreeSpaceKey"]; else NSLog([@"Can't initialize DRDeviceMediaFreeSpaceKey with object " stringByAppendingString:[DRDeviceMediaFreeSpaceKey description]]);
if ([DRDeviceMediaInfoKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaInfoKey forKey:@"DRDeviceMediaInfoKey"]; else NSLog([@"Can't initialize DRDeviceMediaInfoKey with object " stringByAppendingString:[DRDeviceMediaInfoKey description]]);
if ([DRDeviceMediaIsAppendableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsAppendableKey forKey:@"DRDeviceMediaIsAppendableKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsAppendableKey with object " stringByAppendingString:[DRDeviceMediaIsAppendableKey description]]);
if ([DRDeviceMediaIsBlankKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsBlankKey forKey:@"DRDeviceMediaIsBlankKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsBlankKey with object " stringByAppendingString:[DRDeviceMediaIsBlankKey description]]);
if ([DRDeviceMediaIsErasableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsErasableKey forKey:@"DRDeviceMediaIsErasableKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsErasableKey with object " stringByAppendingString:[DRDeviceMediaIsErasableKey description]]);
if ([DRDeviceMediaIsOverwritableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsOverwritableKey forKey:@"DRDeviceMediaIsOverwritableKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsOverwritableKey with object " stringByAppendingString:[DRDeviceMediaIsOverwritableKey description]]);
if ([DRDeviceMediaIsReservedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsReservedKey forKey:@"DRDeviceMediaIsReservedKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsReservedKey with object " stringByAppendingString:[DRDeviceMediaIsReservedKey description]]);
if ([DRDeviceMediaOverwritableSpaceKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaOverwritableSpaceKey forKey:@"DRDeviceMediaOverwritableSpaceKey"]; else NSLog([@"Can't initialize DRDeviceMediaOverwritableSpaceKey with object " stringByAppendingString:[DRDeviceMediaOverwritableSpaceKey description]]);
if ([DRDeviceMediaSessionCountKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaSessionCountKey forKey:@"DRDeviceMediaSessionCountKey"]; else NSLog([@"Can't initialize DRDeviceMediaSessionCountKey with object " stringByAppendingString:[DRDeviceMediaSessionCountKey description]]);
if ([DRDeviceMediaStateInTransition isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateInTransition forKey:@"DRDeviceMediaStateInTransition"]; else NSLog([@"Can't initialize DRDeviceMediaStateInTransition with object " stringByAppendingString:[DRDeviceMediaStateInTransition description]]);
if ([DRDeviceMediaStateKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateKey forKey:@"DRDeviceMediaStateKey"]; else NSLog([@"Can't initialize DRDeviceMediaStateKey with object " stringByAppendingString:[DRDeviceMediaStateKey description]]);
if ([DRDeviceMediaStateMediaPresent isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateMediaPresent forKey:@"DRDeviceMediaStateMediaPresent"]; else NSLog([@"Can't initialize DRDeviceMediaStateMediaPresent with object " stringByAppendingString:[DRDeviceMediaStateMediaPresent description]]);
if ([DRDeviceMediaStateNone isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateNone forKey:@"DRDeviceMediaStateNone"]; else NSLog([@"Can't initialize DRDeviceMediaStateNone with object " stringByAppendingString:[DRDeviceMediaStateNone description]]);
if ([DRDeviceMediaTrackCountKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTrackCountKey forKey:@"DRDeviceMediaTrackCountKey"]; else NSLog([@"Can't initialize DRDeviceMediaTrackCountKey with object " stringByAppendingString:[DRDeviceMediaTrackCountKey description]]);
if ([DRDeviceMediaTypeBDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeBDR forKey:@"DRDeviceMediaTypeBDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeBDR with object " stringByAppendingString:[DRDeviceMediaTypeBDR description]]);
if ([DRDeviceMediaTypeBDRE isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeBDRE forKey:@"DRDeviceMediaTypeBDRE"]; else NSLog([@"Can't initialize DRDeviceMediaTypeBDRE with object " stringByAppendingString:[DRDeviceMediaTypeBDRE description]]);
if ([DRDeviceMediaTypeBDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeBDROM forKey:@"DRDeviceMediaTypeBDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeBDROM with object " stringByAppendingString:[DRDeviceMediaTypeBDROM description]]);
if ([DRDeviceMediaTypeCDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeCDR forKey:@"DRDeviceMediaTypeCDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeCDR with object " stringByAppendingString:[DRDeviceMediaTypeCDR description]]);
if ([DRDeviceMediaTypeCDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeCDROM forKey:@"DRDeviceMediaTypeCDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeCDROM with object " stringByAppendingString:[DRDeviceMediaTypeCDROM description]]);
if ([DRDeviceMediaTypeCDRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeCDRW forKey:@"DRDeviceMediaTypeCDRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeCDRW with object " stringByAppendingString:[DRDeviceMediaTypeCDRW description]]);
if ([DRDeviceMediaTypeDVDPlusR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusR forKey:@"DRDeviceMediaTypeDVDPlusR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusR with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusR description]]);
if ([DRDeviceMediaTypeDVDPlusRDoubleLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusRDoubleLayer forKey:@"DRDeviceMediaTypeDVDPlusRDoubleLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusRDoubleLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusRDoubleLayer description]]);
if ([DRDeviceMediaTypeDVDPlusRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusRW forKey:@"DRDeviceMediaTypeDVDPlusRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusRW with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusRW description]]);
if ([DRDeviceMediaTypeDVDPlusRWDoubleLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusRWDoubleLayer forKey:@"DRDeviceMediaTypeDVDPlusRWDoubleLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusRWDoubleLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusRWDoubleLayer description]]);
if ([DRDeviceMediaTypeDVDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDR forKey:@"DRDeviceMediaTypeDVDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDR with object " stringByAppendingString:[DRDeviceMediaTypeDVDR description]]);
if ([DRDeviceMediaTypeDVDRAM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRAM forKey:@"DRDeviceMediaTypeDVDRAM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRAM with object " stringByAppendingString:[DRDeviceMediaTypeDVDRAM description]]);
if ([DRDeviceMediaTypeDVDRDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRDualLayer forKey:@"DRDeviceMediaTypeDVDRDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDRDualLayer description]]);
if ([DRDeviceMediaTypeDVDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDROM forKey:@"DRDeviceMediaTypeDVDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDROM with object " stringByAppendingString:[DRDeviceMediaTypeDVDROM description]]);
if ([DRDeviceMediaTypeDVDRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRW forKey:@"DRDeviceMediaTypeDVDRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRW with object " stringByAppendingString:[DRDeviceMediaTypeDVDRW description]]);
if ([DRDeviceMediaTypeDVDRWDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRWDualLayer forKey:@"DRDeviceMediaTypeDVDRWDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRWDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDRWDualLayer description]]);
if ([DRDeviceMediaTypeHDDVDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDR forKey:@"DRDeviceMediaTypeHDDVDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDR with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDR description]]);
if ([DRDeviceMediaTypeHDDVDRAM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRAM forKey:@"DRDeviceMediaTypeHDDVDRAM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRAM with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRAM description]]);
if ([DRDeviceMediaTypeHDDVDRDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRDualLayer forKey:@"DRDeviceMediaTypeHDDVDRDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRDualLayer description]]);
if ([DRDeviceMediaTypeHDDVDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDROM forKey:@"DRDeviceMediaTypeHDDVDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDROM with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDROM description]]);
if ([DRDeviceMediaTypeHDDVDRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRW forKey:@"DRDeviceMediaTypeHDDVDRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRW with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRW description]]);
if ([DRDeviceMediaTypeHDDVDRWDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRWDualLayer forKey:@"DRDeviceMediaTypeHDDVDRWDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRWDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRWDualLayer description]]);
if ([DRDeviceMediaTypeKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeKey forKey:@"DRDeviceMediaTypeKey"]; else NSLog([@"Can't initialize DRDeviceMediaTypeKey with object " stringByAppendingString:[DRDeviceMediaTypeKey description]]);
if ([DRDeviceMediaTypeUnknown isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeUnknown forKey:@"DRDeviceMediaTypeUnknown"]; else NSLog([@"Can't initialize DRDeviceMediaTypeUnknown with object " stringByAppendingString:[DRDeviceMediaTypeUnknown description]]);
if ([DRDeviceMediaUsedSpaceKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaUsedSpaceKey forKey:@"DRDeviceMediaUsedSpaceKey"]; else NSLog([@"Can't initialize DRDeviceMediaUsedSpaceKey with object " stringByAppendingString:[DRDeviceMediaUsedSpaceKey description]]);
if ([DRDevicePhysicalInterconnectATAPI isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectATAPI forKey:@"DRDevicePhysicalInterconnectATAPI"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectATAPI with object " stringByAppendingString:[DRDevicePhysicalInterconnectATAPI description]]);
if ([DRDevicePhysicalInterconnectFibreChannel isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectFibreChannel forKey:@"DRDevicePhysicalInterconnectFibreChannel"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectFibreChannel with object " stringByAppendingString:[DRDevicePhysicalInterconnectFibreChannel description]]);
if ([DRDevicePhysicalInterconnectFireWire isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectFireWire forKey:@"DRDevicePhysicalInterconnectFireWire"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectFireWire with object " stringByAppendingString:[DRDevicePhysicalInterconnectFireWire description]]);
if ([DRDevicePhysicalInterconnectKey isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectKey forKey:@"DRDevicePhysicalInterconnectKey"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectKey with object " stringByAppendingString:[DRDevicePhysicalInterconnectKey description]]);
if ([DRDevicePhysicalInterconnectLocationExternal isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationExternal forKey:@"DRDevicePhysicalInterconnectLocationExternal"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationExternal with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationExternal description]]);
if ([DRDevicePhysicalInterconnectLocationInternal isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationInternal forKey:@"DRDevicePhysicalInterconnectLocationInternal"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationInternal with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationInternal description]]);
if ([DRDevicePhysicalInterconnectLocationKey isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationKey forKey:@"DRDevicePhysicalInterconnectLocationKey"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationKey with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationKey description]]);
if ([DRDevicePhysicalInterconnectLocationUnknown isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationUnknown forKey:@"DRDevicePhysicalInterconnectLocationUnknown"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationUnknown with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationUnknown description]]);
if ([DRDevicePhysicalInterconnectSCSI isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectSCSI forKey:@"DRDevicePhysicalInterconnectSCSI"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectSCSI with object " stringByAppendingString:[DRDevicePhysicalInterconnectSCSI description]]);
if ([DRDevicePhysicalInterconnectUSB isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectUSB forKey:@"DRDevicePhysicalInterconnectUSB"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectUSB with object " stringByAppendingString:[DRDevicePhysicalInterconnectUSB description]]);
if ([DRDeviceProductNameKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceProductNameKey forKey:@"DRDeviceProductNameKey"]; else NSLog([@"Can't initialize DRDeviceProductNameKey with object " stringByAppendingString:[DRDeviceProductNameKey description]]);
if ([DRDeviceStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:DRDeviceStatusChangedNotification forKey:@"DRDeviceStatusChangedNotification"]; else NSLog([@"Can't initialize DRDeviceStatusChangedNotification with object " stringByAppendingString:[DRDeviceStatusChangedNotification description]]);
if ([DRDeviceSupportLevelAppleShipping isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelAppleShipping forKey:@"DRDeviceSupportLevelAppleShipping"]; else NSLog([@"Can't initialize DRDeviceSupportLevelAppleShipping with object " stringByAppendingString:[DRDeviceSupportLevelAppleShipping description]]);
if ([DRDeviceSupportLevelAppleSupported isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelAppleSupported forKey:@"DRDeviceSupportLevelAppleSupported"]; else NSLog([@"Can't initialize DRDeviceSupportLevelAppleSupported with object " stringByAppendingString:[DRDeviceSupportLevelAppleSupported description]]);
if ([DRDeviceSupportLevelKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelKey forKey:@"DRDeviceSupportLevelKey"]; else NSLog([@"Can't initialize DRDeviceSupportLevelKey with object " stringByAppendingString:[DRDeviceSupportLevelKey description]]);
if ([DRDeviceSupportLevelNone isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelNone forKey:@"DRDeviceSupportLevelNone"]; else NSLog([@"Can't initialize DRDeviceSupportLevelNone with object " stringByAppendingString:[DRDeviceSupportLevelNone description]]);
if ([DRDeviceSupportLevelUnsupported isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelUnsupported forKey:@"DRDeviceSupportLevelUnsupported"]; else NSLog([@"Can't initialize DRDeviceSupportLevelUnsupported with object " stringByAppendingString:[DRDeviceSupportLevelUnsupported description]]);
if ([DRDeviceSupportLevelVendorSupported isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelVendorSupported forKey:@"DRDeviceSupportLevelVendorSupported"]; else NSLog([@"Can't initialize DRDeviceSupportLevelVendorSupported with object " stringByAppendingString:[DRDeviceSupportLevelVendorSupported description]]);
if ([DRDeviceTrackInfoKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceTrackInfoKey forKey:@"DRDeviceTrackInfoKey"]; else NSLog([@"Can't initialize DRDeviceTrackInfoKey with object " stringByAppendingString:[DRDeviceTrackInfoKey description]]);
if ([DRDeviceTrackRefsKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceTrackRefsKey forKey:@"DRDeviceTrackRefsKey"]; else NSLog([@"Can't initialize DRDeviceTrackRefsKey with object " stringByAppendingString:[DRDeviceTrackRefsKey description]]);
if ([DRDeviceVendorNameKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceVendorNameKey forKey:@"DRDeviceVendorNameKey"]; else NSLog([@"Can't initialize DRDeviceVendorNameKey with object " stringByAppendingString:[DRDeviceVendorNameKey description]]);
if ([DRDeviceWriteBufferSizeKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceWriteBufferSizeKey forKey:@"DRDeviceWriteBufferSizeKey"]; else NSLog([@"Can't initialize DRDeviceWriteBufferSizeKey with object " stringByAppendingString:[DRDeviceWriteBufferSizeKey description]]);
if ([DRDeviceWriteCapabilitiesKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceWriteCapabilitiesKey forKey:@"DRDeviceWriteCapabilitiesKey"]; else NSLog([@"Can't initialize DRDeviceWriteCapabilitiesKey with object " stringByAppendingString:[DRDeviceWriteCapabilitiesKey description]]);
if ([DREffectiveDate isKindOfClass:[NSString class]]) [d setObject:DREffectiveDate forKey:@"DREffectiveDate"]; else NSLog([@"Can't initialize DREffectiveDate with object " stringByAppendingString:[DREffectiveDate description]]);
if ([DREraseStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:DREraseStatusChangedNotification forKey:@"DREraseStatusChangedNotification"]; else NSLog([@"Can't initialize DREraseStatusChangedNotification with object " stringByAppendingString:[DREraseStatusChangedNotification description]]);
if ([DREraseTypeComplete isKindOfClass:[NSString class]]) [d setObject:DREraseTypeComplete forKey:@"DREraseTypeComplete"]; else NSLog([@"Can't initialize DREraseTypeComplete with object " stringByAppendingString:[DREraseTypeComplete description]]);
if ([DREraseTypeKey isKindOfClass:[NSString class]]) [d setObject:DREraseTypeKey forKey:@"DREraseTypeKey"]; else NSLog([@"Can't initialize DREraseTypeKey with object " stringByAppendingString:[DREraseTypeKey description]]);
if ([DREraseTypeQuick isKindOfClass:[NSString class]]) [d setObject:DREraseTypeQuick forKey:@"DREraseTypeQuick"]; else NSLog([@"Can't initialize DREraseTypeQuick with object " stringByAppendingString:[DREraseTypeQuick description]]);
if ([DRErrorStatusAdditionalSenseStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusAdditionalSenseStringKey forKey:@"DRErrorStatusAdditionalSenseStringKey"]; else NSLog([@"Can't initialize DRErrorStatusAdditionalSenseStringKey with object " stringByAppendingString:[DRErrorStatusAdditionalSenseStringKey description]]);
if ([DRErrorStatusErrorInfoStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusErrorInfoStringKey forKey:@"DRErrorStatusErrorInfoStringKey"]; else NSLog([@"Can't initialize DRErrorStatusErrorInfoStringKey with object " stringByAppendingString:[DRErrorStatusErrorInfoStringKey description]]);
if ([DRErrorStatusErrorKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusErrorKey forKey:@"DRErrorStatusErrorKey"]; else NSLog([@"Can't initialize DRErrorStatusErrorKey with object " stringByAppendingString:[DRErrorStatusErrorKey description]]);
if ([DRErrorStatusErrorStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusErrorStringKey forKey:@"DRErrorStatusErrorStringKey"]; else NSLog([@"Can't initialize DRErrorStatusErrorStringKey with object " stringByAppendingString:[DRErrorStatusErrorStringKey description]]);
if ([DRErrorStatusKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusKey forKey:@"DRErrorStatusKey"]; else NSLog([@"Can't initialize DRErrorStatusKey with object " stringByAppendingString:[DRErrorStatusKey description]]);
if ([DRErrorStatusSenseCodeStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusSenseCodeStringKey forKey:@"DRErrorStatusSenseCodeStringKey"]; else NSLog([@"Can't initialize DRErrorStatusSenseCodeStringKey with object " stringByAppendingString:[DRErrorStatusSenseCodeStringKey description]]);
if ([DRErrorStatusSenseKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusSenseKey forKey:@"DRErrorStatusSenseKey"]; else NSLog([@"Can't initialize DRErrorStatusSenseKey with object " stringByAppendingString:[DRErrorStatusSenseKey description]]);
if ([DRExpirationDate isKindOfClass:[NSString class]]) [d setObject:DRExpirationDate forKey:@"DRExpirationDate"]; else NSLog([@"Can't initialize DRExpirationDate with object " stringByAppendingString:[DRExpirationDate description]]);
if ([DRFreeBlocksKey isKindOfClass:[NSString class]]) [d setObject:DRFreeBlocksKey forKey:@"DRFreeBlocksKey"]; else NSLog([@"Can't initialize DRFreeBlocksKey with object " stringByAppendingString:[DRFreeBlocksKey description]]);
if ([DRHFSPlus isKindOfClass:[NSString class]]) [d setObject:DRHFSPlus forKey:@"DRHFSPlus"]; else NSLog([@"Can't initialize DRHFSPlus with object " stringByAppendingString:[DRHFSPlus description]]);
if ([DRHFSPlusCatalogNodeID isKindOfClass:[NSString class]]) [d setObject:DRHFSPlusCatalogNodeID forKey:@"DRHFSPlusCatalogNodeID"]; else NSLog([@"Can't initialize DRHFSPlusCatalogNodeID with object " stringByAppendingString:[DRHFSPlusCatalogNodeID description]]);
if ([DRHFSPlusTextEncodingHint isKindOfClass:[NSString class]]) [d setObject:DRHFSPlusTextEncodingHint forKey:@"DRHFSPlusTextEncodingHint"]; else NSLog([@"Can't initialize DRHFSPlusTextEncodingHint with object " stringByAppendingString:[DRHFSPlusTextEncodingHint description]]);
if ([DRISO9660 isKindOfClass:[NSString class]]) [d setObject:DRISO9660 forKey:@"DRISO9660"]; else NSLog([@"Can't initialize DRISO9660 with object " stringByAppendingString:[DRISO9660 description]]);
if ([DRISO9660LevelOne isKindOfClass:[NSString class]]) [d setObject:DRISO9660LevelOne forKey:@"DRISO9660LevelOne"]; else NSLog([@"Can't initialize DRISO9660LevelOne with object " stringByAppendingString:[DRISO9660LevelOne description]]);
if ([DRISO9660LevelTwo isKindOfClass:[NSString class]]) [d setObject:DRISO9660LevelTwo forKey:@"DRISO9660LevelTwo"]; else NSLog([@"Can't initialize DRISO9660LevelTwo with object " stringByAppendingString:[DRISO9660LevelTwo description]]);
if ([DRISO9660VersionNumber isKindOfClass:[NSString class]]) [d setObject:DRISO9660VersionNumber forKey:@"DRISO9660VersionNumber"]; else NSLog([@"Can't initialize DRISO9660VersionNumber with object " stringByAppendingString:[DRISO9660VersionNumber description]]);
if ([DRISOLevel isKindOfClass:[NSString class]]) [d setObject:DRISOLevel forKey:@"DRISOLevel"]; else NSLog([@"Can't initialize DRISOLevel with object " stringByAppendingString:[DRISOLevel description]]);
if ([DRISOMacExtensions isKindOfClass:[NSString class]]) [d setObject:DRISOMacExtensions forKey:@"DRISOMacExtensions"]; else NSLog([@"Can't initialize DRISOMacExtensions with object " stringByAppendingString:[DRISOMacExtensions description]]);
if ([DRISORockRidgeExtensions isKindOfClass:[NSString class]]) [d setObject:DRISORockRidgeExtensions forKey:@"DRISORockRidgeExtensions"]; else NSLog([@"Can't initialize DRISORockRidgeExtensions with object " stringByAppendingString:[DRISORockRidgeExtensions description]]);
if ([DRIndexPointsKey isKindOfClass:[NSString class]]) [d setObject:DRIndexPointsKey forKey:@"DRIndexPointsKey"]; else NSLog([@"Can't initialize DRIndexPointsKey with object " stringByAppendingString:[DRIndexPointsKey description]]);
if ([DRInvisible isKindOfClass:[NSString class]]) [d setObject:DRInvisible forKey:@"DRInvisible"]; else NSLog([@"Can't initialize DRInvisible with object " stringByAppendingString:[DRInvisible description]]);
if ([DRJoliet isKindOfClass:[NSString class]]) [d setObject:DRJoliet forKey:@"DRJoliet"]; else NSLog([@"Can't initialize DRJoliet with object " stringByAppendingString:[DRJoliet description]]);
if ([DRLinkTypeFinderAlias isKindOfClass:[NSString class]]) [d setObject:DRLinkTypeFinderAlias forKey:@"DRLinkTypeFinderAlias"]; else NSLog([@"Can't initialize DRLinkTypeFinderAlias with object " stringByAppendingString:[DRLinkTypeFinderAlias description]]);
if ([DRLinkTypeHardLink isKindOfClass:[NSString class]]) [d setObject:DRLinkTypeHardLink forKey:@"DRLinkTypeHardLink"]; else NSLog([@"Can't initialize DRLinkTypeHardLink with object " stringByAppendingString:[DRLinkTypeHardLink description]]);
if ([DRLinkTypeSymbolicLink isKindOfClass:[NSString class]]) [d setObject:DRLinkTypeSymbolicLink forKey:@"DRLinkTypeSymbolicLink"]; else NSLog([@"Can't initialize DRLinkTypeSymbolicLink with object " stringByAppendingString:[DRLinkTypeSymbolicLink description]]);
if ([DRMacExtendedFinderFlags isKindOfClass:[NSString class]]) [d setObject:DRMacExtendedFinderFlags forKey:@"DRMacExtendedFinderFlags"]; else NSLog([@"Can't initialize DRMacExtendedFinderFlags with object " stringByAppendingString:[DRMacExtendedFinderFlags description]]);
if ([DRMacFileCreator isKindOfClass:[NSString class]]) [d setObject:DRMacFileCreator forKey:@"DRMacFileCreator"]; else NSLog([@"Can't initialize DRMacFileCreator with object " stringByAppendingString:[DRMacFileCreator description]]);
if ([DRMacFileType isKindOfClass:[NSString class]]) [d setObject:DRMacFileType forKey:@"DRMacFileType"]; else NSLog([@"Can't initialize DRMacFileType with object " stringByAppendingString:[DRMacFileType description]]);
if ([DRMacFinderFlags isKindOfClass:[NSString class]]) [d setObject:DRMacFinderFlags forKey:@"DRMacFinderFlags"]; else NSLog([@"Can't initialize DRMacFinderFlags with object " stringByAppendingString:[DRMacFinderFlags description]]);
if ([DRMacFinderHideExtension isKindOfClass:[NSString class]]) [d setObject:DRMacFinderHideExtension forKey:@"DRMacFinderHideExtension"]; else NSLog([@"Can't initialize DRMacFinderHideExtension with object " stringByAppendingString:[DRMacFinderHideExtension description]]);
if ([DRMacIconLocation isKindOfClass:[NSString class]]) [d setObject:DRMacIconLocation forKey:@"DRMacIconLocation"]; else NSLog([@"Can't initialize DRMacIconLocation with object " stringByAppendingString:[DRMacIconLocation description]]);
if ([DRMacScrollPosition isKindOfClass:[NSString class]]) [d setObject:DRMacScrollPosition forKey:@"DRMacScrollPosition"]; else NSLog([@"Can't initialize DRMacScrollPosition with object " stringByAppendingString:[DRMacScrollPosition description]]);
if ([DRMacWindowBounds isKindOfClass:[NSString class]]) [d setObject:DRMacWindowBounds forKey:@"DRMacWindowBounds"]; else NSLog([@"Can't initialize DRMacWindowBounds with object " stringByAppendingString:[DRMacWindowBounds description]]);
if ([DRMacWindowView isKindOfClass:[NSString class]]) [d setObject:DRMacWindowView forKey:@"DRMacWindowView"]; else NSLog([@"Can't initialize DRMacWindowView with object " stringByAppendingString:[DRMacWindowView description]]);
if ([DRMaxBurnSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRMaxBurnSpeedKey forKey:@"DRMaxBurnSpeedKey"]; else NSLog([@"Can't initialize DRMaxBurnSpeedKey with object " stringByAppendingString:[DRMaxBurnSpeedKey description]]);
if ([DRMediaCatalogNumberKey isKindOfClass:[NSString class]]) [d setObject:DRMediaCatalogNumberKey forKey:@"DRMediaCatalogNumberKey"]; else NSLog([@"Can't initialize DRMediaCatalogNumberKey with object " stringByAppendingString:[DRMediaCatalogNumberKey description]]);
if ([DRNextWritableAddressKey isKindOfClass:[NSString class]]) [d setObject:DRNextWritableAddressKey forKey:@"DRNextWritableAddressKey"]; else NSLog([@"Can't initialize DRNextWritableAddressKey with object " stringByAppendingString:[DRNextWritableAddressKey description]]);
if ([DRPosixFileMode isKindOfClass:[NSString class]]) [d setObject:DRPosixFileMode forKey:@"DRPosixFileMode"]; else NSLog([@"Can't initialize DRPosixFileMode with object " stringByAppendingString:[DRPosixFileMode description]]);
if ([DRPosixGID isKindOfClass:[NSString class]]) [d setObject:DRPosixGID forKey:@"DRPosixGID"]; else NSLog([@"Can't initialize DRPosixGID with object " stringByAppendingString:[DRPosixGID description]]);
if ([DRPosixUID isKindOfClass:[NSString class]]) [d setObject:DRPosixUID forKey:@"DRPosixUID"]; else NSLog([@"Can't initialize DRPosixUID with object " stringByAppendingString:[DRPosixUID description]]);
if ([DRPreGapIsRequiredKey isKindOfClass:[NSString class]]) [d setObject:DRPreGapIsRequiredKey forKey:@"DRPreGapIsRequiredKey"]; else NSLog([@"Can't initialize DRPreGapIsRequiredKey with object " stringByAppendingString:[DRPreGapIsRequiredKey description]]);
if ([DRPreGapLengthKey isKindOfClass:[NSString class]]) [d setObject:DRPreGapLengthKey forKey:@"DRPreGapLengthKey"]; else NSLog([@"Can't initialize DRPreGapLengthKey with object " stringByAppendingString:[DRPreGapLengthKey description]]);
if ([DRPublisher isKindOfClass:[NSString class]]) [d setObject:DRPublisher forKey:@"DRPublisher"]; else NSLog([@"Can't initialize DRPublisher with object " stringByAppendingString:[DRPublisher description]]);
if ([DRRecordingDate isKindOfClass:[NSString class]]) [d setObject:DRRecordingDate forKey:@"DRRecordingDate"]; else NSLog([@"Can't initialize DRRecordingDate with object " stringByAppendingString:[DRRecordingDate description]]);
if ([DRSCMSCopyrightFree isKindOfClass:[NSString class]]) [d setObject:DRSCMSCopyrightFree forKey:@"DRSCMSCopyrightFree"]; else NSLog([@"Can't initialize DRSCMSCopyrightFree with object " stringByAppendingString:[DRSCMSCopyrightFree description]]);
if ([DRSCMSCopyrightProtectedCopy isKindOfClass:[NSString class]]) [d setObject:DRSCMSCopyrightProtectedCopy forKey:@"DRSCMSCopyrightProtectedCopy"]; else NSLog([@"Can't initialize DRSCMSCopyrightProtectedCopy with object " stringByAppendingString:[DRSCMSCopyrightProtectedCopy description]]);
if ([DRSCMSCopyrightProtectedOriginal isKindOfClass:[NSString class]]) [d setObject:DRSCMSCopyrightProtectedOriginal forKey:@"DRSCMSCopyrightProtectedOriginal"]; else NSLog([@"Can't initialize DRSCMSCopyrightProtectedOriginal with object " stringByAppendingString:[DRSCMSCopyrightProtectedOriginal description]]);
if ([DRSerialCopyManagementStateKey isKindOfClass:[NSString class]]) [d setObject:DRSerialCopyManagementStateKey forKey:@"DRSerialCopyManagementStateKey"]; else NSLog([@"Can't initialize DRSerialCopyManagementStateKey with object " stringByAppendingString:[DRSerialCopyManagementStateKey description]]);
if ([DRSessionFormatKey isKindOfClass:[NSString class]]) [d setObject:DRSessionFormatKey forKey:@"DRSessionFormatKey"]; else NSLog([@"Can't initialize DRSessionFormatKey with object " stringByAppendingString:[DRSessionFormatKey description]]);
if ([DRSessionNumberKey isKindOfClass:[NSString class]]) [d setObject:DRSessionNumberKey forKey:@"DRSessionNumberKey"]; else NSLog([@"Can't initialize DRSessionNumberKey with object " stringByAppendingString:[DRSessionNumberKey description]]);
if ([DRStatusCurrentSessionKey isKindOfClass:[NSString class]]) [d setObject:DRStatusCurrentSessionKey forKey:@"DRStatusCurrentSessionKey"]; else NSLog([@"Can't initialize DRStatusCurrentSessionKey with object " stringByAppendingString:[DRStatusCurrentSessionKey description]]);
if ([DRStatusCurrentSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRStatusCurrentSpeedKey forKey:@"DRStatusCurrentSpeedKey"]; else NSLog([@"Can't initialize DRStatusCurrentSpeedKey with object " stringByAppendingString:[DRStatusCurrentSpeedKey description]]);
if ([DRStatusCurrentTrackKey isKindOfClass:[NSString class]]) [d setObject:DRStatusCurrentTrackKey forKey:@"DRStatusCurrentTrackKey"]; else NSLog([@"Can't initialize DRStatusCurrentTrackKey with object " stringByAppendingString:[DRStatusCurrentTrackKey description]]);
if ([DRStatusEraseTypeKey isKindOfClass:[NSString class]]) [d setObject:DRStatusEraseTypeKey forKey:@"DRStatusEraseTypeKey"]; else NSLog([@"Can't initialize DRStatusEraseTypeKey with object " stringByAppendingString:[DRStatusEraseTypeKey description]]);
if ([DRStatusPercentCompleteKey isKindOfClass:[NSString class]]) [d setObject:DRStatusPercentCompleteKey forKey:@"DRStatusPercentCompleteKey"]; else NSLog([@"Can't initialize DRStatusPercentCompleteKey with object " stringByAppendingString:[DRStatusPercentCompleteKey description]]);
if ([DRStatusProgressCurrentKPS isKindOfClass:[NSString class]]) [d setObject:DRStatusProgressCurrentKPS forKey:@"DRStatusProgressCurrentKPS"]; else NSLog([@"Can't initialize DRStatusProgressCurrentKPS with object " stringByAppendingString:[DRStatusProgressCurrentKPS description]]);
if ([DRStatusProgressCurrentXFactor isKindOfClass:[NSString class]]) [d setObject:DRStatusProgressCurrentXFactor forKey:@"DRStatusProgressCurrentXFactor"]; else NSLog([@"Can't initialize DRStatusProgressCurrentXFactor with object " stringByAppendingString:[DRStatusProgressCurrentXFactor description]]);
if ([DRStatusProgressInfoKey isKindOfClass:[NSString class]]) [d setObject:DRStatusProgressInfoKey forKey:@"DRStatusProgressInfoKey"]; else NSLog([@"Can't initialize DRStatusProgressInfoKey with object " stringByAppendingString:[DRStatusProgressInfoKey description]]);
if ([DRStatusStateDone isKindOfClass:[NSString class]]) [d setObject:DRStatusStateDone forKey:@"DRStatusStateDone"]; else NSLog([@"Can't initialize DRStatusStateDone with object " stringByAppendingString:[DRStatusStateDone description]]);
if ([DRStatusStateErasing isKindOfClass:[NSString class]]) [d setObject:DRStatusStateErasing forKey:@"DRStatusStateErasing"]; else NSLog([@"Can't initialize DRStatusStateErasing with object " stringByAppendingString:[DRStatusStateErasing description]]);
if ([DRStatusStateFailed isKindOfClass:[NSString class]]) [d setObject:DRStatusStateFailed forKey:@"DRStatusStateFailed"]; else NSLog([@"Can't initialize DRStatusStateFailed with object " stringByAppendingString:[DRStatusStateFailed description]]);
if ([DRStatusStateFinishing isKindOfClass:[NSString class]]) [d setObject:DRStatusStateFinishing forKey:@"DRStatusStateFinishing"]; else NSLog([@"Can't initialize DRStatusStateFinishing with object " stringByAppendingString:[DRStatusStateFinishing description]]);
if ([DRStatusStateKey isKindOfClass:[NSString class]]) [d setObject:DRStatusStateKey forKey:@"DRStatusStateKey"]; else NSLog([@"Can't initialize DRStatusStateKey with object " stringByAppendingString:[DRStatusStateKey description]]);
if ([DRStatusStateNone isKindOfClass:[NSString class]]) [d setObject:DRStatusStateNone forKey:@"DRStatusStateNone"]; else NSLog([@"Can't initialize DRStatusStateNone with object " stringByAppendingString:[DRStatusStateNone description]]);
if ([DRStatusStatePreparing isKindOfClass:[NSString class]]) [d setObject:DRStatusStatePreparing forKey:@"DRStatusStatePreparing"]; else NSLog([@"Can't initialize DRStatusStatePreparing with object " stringByAppendingString:[DRStatusStatePreparing description]]);
if ([DRStatusStateSessionClose isKindOfClass:[NSString class]]) [d setObject:DRStatusStateSessionClose forKey:@"DRStatusStateSessionClose"]; else NSLog([@"Can't initialize DRStatusStateSessionClose with object " stringByAppendingString:[DRStatusStateSessionClose description]]);
if ([DRStatusStateSessionOpen isKindOfClass:[NSString class]]) [d setObject:DRStatusStateSessionOpen forKey:@"DRStatusStateSessionOpen"]; else NSLog([@"Can't initialize DRStatusStateSessionOpen with object " stringByAppendingString:[DRStatusStateSessionOpen description]]);
if ([DRStatusStateTrackClose isKindOfClass:[NSString class]]) [d setObject:DRStatusStateTrackClose forKey:@"DRStatusStateTrackClose"]; else NSLog([@"Can't initialize DRStatusStateTrackClose with object " stringByAppendingString:[DRStatusStateTrackClose description]]);
if ([DRStatusStateTrackOpen isKindOfClass:[NSString class]]) [d setObject:DRStatusStateTrackOpen forKey:@"DRStatusStateTrackOpen"]; else NSLog([@"Can't initialize DRStatusStateTrackOpen with object " stringByAppendingString:[DRStatusStateTrackOpen description]]);
if ([DRStatusStateTrackWrite isKindOfClass:[NSString class]]) [d setObject:DRStatusStateTrackWrite forKey:@"DRStatusStateTrackWrite"]; else NSLog([@"Can't initialize DRStatusStateTrackWrite with object " stringByAppendingString:[DRStatusStateTrackWrite description]]);
if ([DRStatusStateVerifying isKindOfClass:[NSString class]]) [d setObject:DRStatusStateVerifying forKey:@"DRStatusStateVerifying"]; else NSLog([@"Can't initialize DRStatusStateVerifying with object " stringByAppendingString:[DRStatusStateVerifying description]]);
if ([DRStatusTotalSessionsKey isKindOfClass:[NSString class]]) [d setObject:DRStatusTotalSessionsKey forKey:@"DRStatusTotalSessionsKey"]; else NSLog([@"Can't initialize DRStatusTotalSessionsKey with object " stringByAppendingString:[DRStatusTotalSessionsKey description]]);
if ([DRStatusTotalTracksKey isKindOfClass:[NSString class]]) [d setObject:DRStatusTotalTracksKey forKey:@"DRStatusTotalTracksKey"]; else NSLog([@"Can't initialize DRStatusTotalTracksKey with object " stringByAppendingString:[DRStatusTotalTracksKey description]]);
if ([DRSubchannelDataFormKey isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormKey forKey:@"DRSubchannelDataFormKey"]; else NSLog([@"Can't initialize DRSubchannelDataFormKey with object " stringByAppendingString:[DRSubchannelDataFormKey description]]);
if ([DRSubchannelDataFormNone isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormNone forKey:@"DRSubchannelDataFormNone"]; else NSLog([@"Can't initialize DRSubchannelDataFormNone with object " stringByAppendingString:[DRSubchannelDataFormNone description]]);
if ([DRSubchannelDataFormPack isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormPack forKey:@"DRSubchannelDataFormPack"]; else NSLog([@"Can't initialize DRSubchannelDataFormPack with object " stringByAppendingString:[DRSubchannelDataFormPack description]]);
if ([DRSubchannelDataFormRaw isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormRaw forKey:@"DRSubchannelDataFormRaw"]; else NSLog([@"Can't initialize DRSubchannelDataFormRaw with object " stringByAppendingString:[DRSubchannelDataFormRaw description]]);
if ([DRSuppressMacSpecificFiles isKindOfClass:[NSString class]]) [d setObject:DRSuppressMacSpecificFiles forKey:@"DRSuppressMacSpecificFiles"]; else NSLog([@"Can't initialize DRSuppressMacSpecificFiles with object " stringByAppendingString:[DRSuppressMacSpecificFiles description]]);
if ([DRSynchronousBehaviorKey isKindOfClass:[NSString class]]) [d setObject:DRSynchronousBehaviorKey forKey:@"DRSynchronousBehaviorKey"]; else NSLog([@"Can't initialize DRSynchronousBehaviorKey with object " stringByAppendingString:[DRSynchronousBehaviorKey description]]);
if ([DRSystemIdentifier isKindOfClass:[NSString class]]) [d setObject:DRSystemIdentifier forKey:@"DRSystemIdentifier"]; else NSLog([@"Can't initialize DRSystemIdentifier with object " stringByAppendingString:[DRSystemIdentifier description]]);
if ([DRTrackISRCKey isKindOfClass:[NSString class]]) [d setObject:DRTrackISRCKey forKey:@"DRTrackISRCKey"]; else NSLog([@"Can't initialize DRTrackISRCKey with object " stringByAppendingString:[DRTrackISRCKey description]]);
if ([DRTrackIsEmptyKey isKindOfClass:[NSString class]]) [d setObject:DRTrackIsEmptyKey forKey:@"DRTrackIsEmptyKey"]; else NSLog([@"Can't initialize DRTrackIsEmptyKey with object " stringByAppendingString:[DRTrackIsEmptyKey description]]);
if ([DRTrackLengthKey isKindOfClass:[NSString class]]) [d setObject:DRTrackLengthKey forKey:@"DRTrackLengthKey"]; else NSLog([@"Can't initialize DRTrackLengthKey with object " stringByAppendingString:[DRTrackLengthKey description]]);
if ([DRTrackModeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackModeKey forKey:@"DRTrackModeKey"]; else NSLog([@"Can't initialize DRTrackModeKey with object " stringByAppendingString:[DRTrackModeKey description]]);
if ([DRTrackNumberKey isKindOfClass:[NSString class]]) [d setObject:DRTrackNumberKey forKey:@"DRTrackNumberKey"]; else NSLog([@"Can't initialize DRTrackNumberKey with object " stringByAppendingString:[DRTrackNumberKey description]]);
if ([DRTrackPacketSizeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketSizeKey forKey:@"DRTrackPacketSizeKey"]; else NSLog([@"Can't initialize DRTrackPacketSizeKey with object " stringByAppendingString:[DRTrackPacketSizeKey description]]);
if ([DRTrackPacketTypeFixed isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketTypeFixed forKey:@"DRTrackPacketTypeFixed"]; else NSLog([@"Can't initialize DRTrackPacketTypeFixed with object " stringByAppendingString:[DRTrackPacketTypeFixed description]]);
if ([DRTrackPacketTypeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketTypeKey forKey:@"DRTrackPacketTypeKey"]; else NSLog([@"Can't initialize DRTrackPacketTypeKey with object " stringByAppendingString:[DRTrackPacketTypeKey description]]);
if ([DRTrackPacketTypeVariable isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketTypeVariable forKey:@"DRTrackPacketTypeVariable"]; else NSLog([@"Can't initialize DRTrackPacketTypeVariable with object " stringByAppendingString:[DRTrackPacketTypeVariable description]]);
if ([DRTrackStartAddressKey isKindOfClass:[NSString class]]) [d setObject:DRTrackStartAddressKey forKey:@"DRTrackStartAddressKey"]; else NSLog([@"Can't initialize DRTrackStartAddressKey with object " stringByAppendingString:[DRTrackStartAddressKey description]]);
if ([DRTrackTypeClosed isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeClosed forKey:@"DRTrackTypeClosed"]; else NSLog([@"Can't initialize DRTrackTypeClosed with object " stringByAppendingString:[DRTrackTypeClosed description]]);
if ([DRTrackTypeIncomplete isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeIncomplete forKey:@"DRTrackTypeIncomplete"]; else NSLog([@"Can't initialize DRTrackTypeIncomplete with object " stringByAppendingString:[DRTrackTypeIncomplete description]]);
if ([DRTrackTypeInvisible isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeInvisible forKey:@"DRTrackTypeInvisible"]; else NSLog([@"Can't initialize DRTrackTypeInvisible with object " stringByAppendingString:[DRTrackTypeInvisible description]]);
if ([DRTrackTypeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeKey forKey:@"DRTrackTypeKey"]; else NSLog([@"Can't initialize DRTrackTypeKey with object " stringByAppendingString:[DRTrackTypeKey description]]);
if ([DRTrackTypeReserved isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeReserved forKey:@"DRTrackTypeReserved"]; else NSLog([@"Can't initialize DRTrackTypeReserved with object " stringByAppendingString:[DRTrackTypeReserved description]]);
if ([DRUDF isKindOfClass:[NSString class]]) [d setObject:DRUDF forKey:@"DRUDF"]; else NSLog([@"Can't initialize DRUDF with object " stringByAppendingString:[DRUDF description]]);
if ([DRUDFApplicationIdentifierSuffix isKindOfClass:[NSString class]]) [d setObject:DRUDFApplicationIdentifierSuffix forKey:@"DRUDFApplicationIdentifierSuffix"]; else NSLog([@"Can't initialize DRUDFApplicationIdentifierSuffix with object " stringByAppendingString:[DRUDFApplicationIdentifierSuffix description]]);
if ([DRUDFExtendedFilePermissions isKindOfClass:[NSString class]]) [d setObject:DRUDFExtendedFilePermissions forKey:@"DRUDFExtendedFilePermissions"]; else NSLog([@"Can't initialize DRUDFExtendedFilePermissions with object " stringByAppendingString:[DRUDFExtendedFilePermissions description]]);
if ([DRUDFInterchangeLevel isKindOfClass:[NSString class]]) [d setObject:DRUDFInterchangeLevel forKey:@"DRUDFInterchangeLevel"]; else NSLog([@"Can't initialize DRUDFInterchangeLevel with object " stringByAppendingString:[DRUDFInterchangeLevel description]]);
if ([DRUDFMaxInterchangeLevel isKindOfClass:[NSString class]]) [d setObject:DRUDFMaxInterchangeLevel forKey:@"DRUDFMaxInterchangeLevel"]; else NSLog([@"Can't initialize DRUDFMaxInterchangeLevel with object " stringByAppendingString:[DRUDFMaxInterchangeLevel description]]);
if ([DRUDFMaxVolumeSequenceNumber isKindOfClass:[NSString class]]) [d setObject:DRUDFMaxVolumeSequenceNumber forKey:@"DRUDFMaxVolumeSequenceNumber"]; else NSLog([@"Can't initialize DRUDFMaxVolumeSequenceNumber with object " stringByAppendingString:[DRUDFMaxVolumeSequenceNumber description]]);
if ([DRUDFPrimaryVolumeDescriptorNumber isKindOfClass:[NSString class]]) [d setObject:DRUDFPrimaryVolumeDescriptorNumber forKey:@"DRUDFPrimaryVolumeDescriptorNumber"]; else NSLog([@"Can't initialize DRUDFPrimaryVolumeDescriptorNumber with object " stringByAppendingString:[DRUDFPrimaryVolumeDescriptorNumber description]]);
if ([DRUDFRealTimeFile isKindOfClass:[NSString class]]) [d setObject:DRUDFRealTimeFile forKey:@"DRUDFRealTimeFile"]; else NSLog([@"Can't initialize DRUDFRealTimeFile with object " stringByAppendingString:[DRUDFRealTimeFile description]]);
if ([DRUDFVersion102 isKindOfClass:[NSString class]]) [d setObject:DRUDFVersion102 forKey:@"DRUDFVersion102"]; else NSLog([@"Can't initialize DRUDFVersion102 with object " stringByAppendingString:[DRUDFVersion102 description]]);
if ([DRUDFVersion150 isKindOfClass:[NSString class]]) [d setObject:DRUDFVersion150 forKey:@"DRUDFVersion150"]; else NSLog([@"Can't initialize DRUDFVersion150 with object " stringByAppendingString:[DRUDFVersion150 description]]);
if ([DRUDFVolumeSequenceNumber isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSequenceNumber forKey:@"DRUDFVolumeSequenceNumber"]; else NSLog([@"Can't initialize DRUDFVolumeSequenceNumber with object " stringByAppendingString:[DRUDFVolumeSequenceNumber description]]);
if ([DRUDFVolumeSetIdentifier isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSetIdentifier forKey:@"DRUDFVolumeSetIdentifier"]; else NSLog([@"Can't initialize DRUDFVolumeSetIdentifier with object " stringByAppendingString:[DRUDFVolumeSetIdentifier description]]);
if ([DRUDFVolumeSetImplementationUse isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSetImplementationUse forKey:@"DRUDFVolumeSetImplementationUse"]; else NSLog([@"Can't initialize DRUDFVolumeSetImplementationUse with object " stringByAppendingString:[DRUDFVolumeSetImplementationUse description]]);
if ([DRUDFVolumeSetTimestamp isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSetTimestamp forKey:@"DRUDFVolumeSetTimestamp"]; else NSLog([@"Can't initialize DRUDFVolumeSetTimestamp with object " stringByAppendingString:[DRUDFVolumeSetTimestamp description]]);
if ([DRUDFWriteVersion isKindOfClass:[NSString class]]) [d setObject:DRUDFWriteVersion forKey:@"DRUDFWriteVersion"]; else NSLog([@"Can't initialize DRUDFWriteVersion with object " stringByAppendingString:[DRUDFWriteVersion description]]);
if ([DRVerificationTypeChecksum isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeChecksum forKey:@"DRVerificationTypeChecksum"]; else NSLog([@"Can't initialize DRVerificationTypeChecksum with object " stringByAppendingString:[DRVerificationTypeChecksum description]]);
if ([DRVerificationTypeKey isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeKey forKey:@"DRVerificationTypeKey"]; else NSLog([@"Can't initialize DRVerificationTypeKey with object " stringByAppendingString:[DRVerificationTypeKey description]]);
if ([DRVerificationTypeNone isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeNone forKey:@"DRVerificationTypeNone"]; else NSLog([@"Can't initialize DRVerificationTypeNone with object " stringByAppendingString:[DRVerificationTypeNone description]]);
if ([DRVerificationTypeProduceAgain isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeProduceAgain forKey:@"DRVerificationTypeProduceAgain"]; else NSLog([@"Can't initialize DRVerificationTypeProduceAgain with object " stringByAppendingString:[DRVerificationTypeProduceAgain description]]);
if ([DRVerificationTypeReceiveData isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeReceiveData forKey:@"DRVerificationTypeReceiveData"]; else NSLog([@"Can't initialize DRVerificationTypeReceiveData with object " stringByAppendingString:[DRVerificationTypeReceiveData description]]);
if ([DRVolumeCheckedDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeCheckedDate forKey:@"DRVolumeCheckedDate"]; else NSLog([@"Can't initialize DRVolumeCheckedDate with object " stringByAppendingString:[DRVolumeCheckedDate description]]);
if ([DRVolumeCreationDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeCreationDate forKey:@"DRVolumeCreationDate"]; else NSLog([@"Can't initialize DRVolumeCreationDate with object " stringByAppendingString:[DRVolumeCreationDate description]]);
if ([DRVolumeEffectiveDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeEffectiveDate forKey:@"DRVolumeEffectiveDate"]; else NSLog([@"Can't initialize DRVolumeEffectiveDate with object " stringByAppendingString:[DRVolumeEffectiveDate description]]);
if ([DRVolumeExpirationDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeExpirationDate forKey:@"DRVolumeExpirationDate"]; else NSLog([@"Can't initialize DRVolumeExpirationDate with object " stringByAppendingString:[DRVolumeExpirationDate description]]);
if ([DRVolumeModificationDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeModificationDate forKey:@"DRVolumeModificationDate"]; else NSLog([@"Can't initialize DRVolumeModificationDate with object " stringByAppendingString:[DRVolumeModificationDate description]]);
if ([DRVolumeSet isKindOfClass:[NSString class]]) [d setObject:DRVolumeSet forKey:@"DRVolumeSet"]; else NSLog([@"Can't initialize DRVolumeSet with object " stringByAppendingString:[DRVolumeSet description]]);
[d setObject:(NSString *)kDRAbstractFile forKey:@"kDRAbstractFile"];
[d setObject:(NSString *)kDRAccessDate forKey:@"kDRAccessDate"];
[d setObject:(NSString *)kDRAllFilesystems forKey:@"kDRAllFilesystems"];
[d setObject:(NSString *)kDRApplicationIdentifier forKey:@"kDRApplicationIdentifier"];
[d setObject:(NSString *)kDRAttributeModificationDate forKey:@"kDRAttributeModificationDate"];
[d setObject:(NSString *)kDRAudioFourChannelKey forKey:@"kDRAudioFourChannelKey"];
[d setObject:(NSString *)kDRAudioPreEmphasisKey forKey:@"kDRAudioPreEmphasisKey"];
[d setObject:(NSString *)kDRBackupDate forKey:@"kDRBackupDate"];
[d setObject:(NSString *)kDRBibliographicFile forKey:@"kDRBibliographicFile"];
[d setObject:(NSString *)kDRBlockSize forKey:@"kDRBlockSize"];
[d setObject:(NSString *)kDRBlockSizeKey forKey:@"kDRBlockSizeKey"];
[d setObject:(NSString *)kDRBlockTypeKey forKey:@"kDRBlockTypeKey"];
[d setObject:(NSString *)kDRBufferZone1DataKey forKey:@"kDRBufferZone1DataKey"];
[d setObject:(NSString *)kDRBurnAppendableKey forKey:@"kDRBurnAppendableKey"];
[d setObject:(NSString *)kDRBurnCompletionActionEject forKey:@"kDRBurnCompletionActionEject"];
[d setObject:(NSString *)kDRBurnCompletionActionKey forKey:@"kDRBurnCompletionActionKey"];
[d setObject:(NSString *)kDRBurnCompletionActionMount forKey:@"kDRBurnCompletionActionMount"];
[d setObject:(NSString *)kDRBurnDoubleLayerL0DataZoneBlocksKey forKey:@"kDRBurnDoubleLayerL0DataZoneBlocksKey"];
[d setObject:(NSString *)kDRBurnFailureActionEject forKey:@"kDRBurnFailureActionEject"];
[d setObject:(NSString *)kDRBurnFailureActionKey forKey:@"kDRBurnFailureActionKey"];
[d setObject:(NSString *)kDRBurnFailureActionNone forKey:@"kDRBurnFailureActionNone"];
[d setObject:(NSString *)kDRBurnKey forKey:@"kDRBurnKey"];
[d setObject:(NSString *)kDRBurnOverwriteDiscKey forKey:@"kDRBurnOverwriteDiscKey"];
[d setObject:(NSString *)kDRBurnRequestedSpeedKey forKey:@"kDRBurnRequestedSpeedKey"];
[d setObject:(NSString *)kDRBurnStatusChangedNotification forKey:@"kDRBurnStatusChangedNotification"];
[d setObject:(NSString *)kDRBurnStrategyBDDAO forKey:@"kDRBurnStrategyBDDAO"];
[d setObject:(NSString *)kDRBurnStrategyCDSAO forKey:@"kDRBurnStrategyCDSAO"];
[d setObject:(NSString *)kDRBurnStrategyCDTAO forKey:@"kDRBurnStrategyCDTAO"];
[d setObject:(NSString *)kDRBurnStrategyDVDDAO forKey:@"kDRBurnStrategyDVDDAO"];
[d setObject:(NSString *)kDRBurnStrategyIsRequiredKey forKey:@"kDRBurnStrategyIsRequiredKey"];
[d setObject:(NSString *)kDRBurnStrategyKey forKey:@"kDRBurnStrategyKey"];
[d setObject:(NSString *)kDRBurnTestingKey forKey:@"kDRBurnTestingKey"];
[d setObject:(NSString *)kDRBurnUnderrunProtectionKey forKey:@"kDRBurnUnderrunProtectionKey"];
[d setObject:(NSString *)kDRBurnVerifyDiscKey forKey:@"kDRBurnVerifyDiscKey"];
[d setObject:(NSString *)kDRCDTextArrangerKey forKey:@"kDRCDTextArrangerKey"];
[d setObject:(NSString *)kDRCDTextCFStringEncodingKey forKey:@"kDRCDTextCFStringEncodingKey"];
[d setObject:(NSString *)kDRCDTextCharacterCodeKey forKey:@"kDRCDTextCharacterCodeKey"];
[d setObject:(NSString *)kDRCDTextClosedKey forKey:@"kDRCDTextClosedKey"];
[d setObject:(NSString *)kDRCDTextComposerKey forKey:@"kDRCDTextComposerKey"];
[d setObject:(NSString *)kDRCDTextCopyrightAssertedForNamesKey forKey:@"kDRCDTextCopyrightAssertedForNamesKey"];
[d setObject:(NSString *)kDRCDTextCopyrightAssertedForSpecialMessagesKey forKey:@"kDRCDTextCopyrightAssertedForSpecialMessagesKey"];
[d setObject:(NSString *)kDRCDTextCopyrightAssertedForTitlesKey forKey:@"kDRCDTextCopyrightAssertedForTitlesKey"];
[d setObject:(NSString *)kDRCDTextDiscIdentKey forKey:@"kDRCDTextDiscIdentKey"];
[d setObject:(NSString *)kDRCDTextGenreCodeKey forKey:@"kDRCDTextGenreCodeKey"];
[d setObject:(NSString *)kDRCDTextGenreKey forKey:@"kDRCDTextGenreKey"];
[d setObject:(NSString *)kDRCDTextKey forKey:@"kDRCDTextKey"];
[d setObject:(NSString *)kDRCDTextLanguageKey forKey:@"kDRCDTextLanguageKey"];
[d setObject:(NSString *)kDRCDTextMCNISRCKey forKey:@"kDRCDTextMCNISRCKey"];
[d setObject:(NSString *)kDRCDTextPerformerKey forKey:@"kDRCDTextPerformerKey"];
[d setObject:(NSString *)kDRCDTextSizeKey forKey:@"kDRCDTextSizeKey"];
[d setObject:(NSString *)kDRCDTextSongwriterKey forKey:@"kDRCDTextSongwriterKey"];
[d setObject:(NSString *)kDRCDTextSpecialMessageKey forKey:@"kDRCDTextSpecialMessageKey"];
[d setObject:(NSString *)kDRCDTextTOC2Key forKey:@"kDRCDTextTOC2Key"];
[d setObject:(NSString *)kDRCDTextTOCKey forKey:@"kDRCDTextTOCKey"];
[d setObject:(NSString *)kDRCDTextTitleKey forKey:@"kDRCDTextTitleKey"];
[d setObject:(NSString *)kDRContentModificationDate forKey:@"kDRContentModificationDate"];
[d setObject:(NSString *)kDRCopyrightFile forKey:@"kDRCopyrightFile"];
[d setObject:(NSString *)kDRCreationDate forKey:@"kDRCreationDate"];
[d setObject:(NSString *)kDRDVDCopyrightInfoKey forKey:@"kDRDVDCopyrightInfoKey"];
[d setObject:(NSString *)kDRDVDTimestampKey forKey:@"kDRDVDTimestampKey"];
[d setObject:(NSString *)kDRDataFormKey forKey:@"kDRDataFormKey"];
[d setObject:(NSString *)kDRDataPreparer forKey:@"kDRDataPreparer"];
[d setObject:(NSString *)kDRDefaultDate forKey:@"kDRDefaultDate"];
[d setObject:(NSString *)kDRDeviceAppearedNotification forKey:@"kDRDeviceAppearedNotification"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedBD1x] forKey:@"kDRDeviceBurnSpeedBD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedCD1x] forKey:@"kDRDeviceBurnSpeedCD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedDVD1x] forKey:@"kDRDeviceBurnSpeedDVD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedHDDVD1x] forKey:@"kDRDeviceBurnSpeedHDDVD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedMax] forKey:@"kDRDeviceBurnSpeedMax"];
[d setObject:(NSString *)kDRDeviceBurnSpeedsKey forKey:@"kDRDeviceBurnSpeedsKey"];
[d setObject:(NSString *)kDRDeviceCanTestWriteCDKey forKey:@"kDRDeviceCanTestWriteCDKey"];
[d setObject:(NSString *)kDRDeviceCanTestWriteDVDKey forKey:@"kDRDeviceCanTestWriteDVDKey"];
[d setObject:(NSString *)kDRDeviceCanUnderrunProtectCDKey forKey:@"kDRDeviceCanUnderrunProtectCDKey"];
[d setObject:(NSString *)kDRDeviceCanUnderrunProtectDVDKey forKey:@"kDRDeviceCanUnderrunProtectDVDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteBDKey forKey:@"kDRDeviceCanWriteBDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteBDREKey forKey:@"kDRDeviceCanWriteBDREKey"];
[d setObject:(NSString *)kDRDeviceCanWriteBDRKey forKey:@"kDRDeviceCanWriteBDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDKey forKey:@"kDRDeviceCanWriteCDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDRKey forKey:@"kDRDeviceCanWriteCDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDRWKey forKey:@"kDRDeviceCanWriteCDRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDRawKey forKey:@"kDRDeviceCanWriteCDRawKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDSAOKey forKey:@"kDRDeviceCanWriteCDSAOKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDTAOKey forKey:@"kDRDeviceCanWriteCDTAOKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDTextKey forKey:@"kDRDeviceCanWriteCDTextKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDDAOKey forKey:@"kDRDeviceCanWriteDVDDAOKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDKey forKey:@"kDRDeviceCanWriteDVDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRDoubleLayerKey forKey:@"kDRDeviceCanWriteDVDPlusRDoubleLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRKey forKey:@"kDRDeviceCanWriteDVDPlusRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRWDoubleLayerKey forKey:@"kDRDeviceCanWriteDVDPlusRWDoubleLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRWKey forKey:@"kDRDeviceCanWriteDVDPlusRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRAMKey forKey:@"kDRDeviceCanWriteDVDRAMKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRDualLayerKey forKey:@"kDRDeviceCanWriteDVDRDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRKey forKey:@"kDRDeviceCanWriteDVDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRWDualLayerKey forKey:@"kDRDeviceCanWriteDVDRWDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRWKey forKey:@"kDRDeviceCanWriteDVDRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDKey forKey:@"kDRDeviceCanWriteHDDVDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRAMKey forKey:@"kDRDeviceCanWriteHDDVDRAMKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRDualLayerKey forKey:@"kDRDeviceCanWriteHDDVDRDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRKey forKey:@"kDRDeviceCanWriteHDDVDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRWDualLayerKey forKey:@"kDRDeviceCanWriteHDDVDRWDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRWKey forKey:@"kDRDeviceCanWriteHDDVDRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteISRCKey forKey:@"kDRDeviceCanWriteISRCKey"];
[d setObject:(NSString *)kDRDeviceCanWriteIndexPointsKey forKey:@"kDRDeviceCanWriteIndexPointsKey"];
[d setObject:(NSString *)kDRDeviceCanWriteKey forKey:@"kDRDeviceCanWriteKey"];
[d setObject:(NSString *)kDRDeviceCurrentWriteSpeedKey forKey:@"kDRDeviceCurrentWriteSpeedKey"];
[d setObject:(NSString *)kDRDeviceDisappearedNotification forKey:@"kDRDeviceDisappearedNotification"];
[d setObject:(NSString *)kDRDeviceFirmwareRevisionKey forKey:@"kDRDeviceFirmwareRevisionKey"];
[d setObject:(NSString *)kDRDeviceIORegistryEntryPathKey forKey:@"kDRDeviceIORegistryEntryPathKey"];
[d setObject:(NSString *)kDRDeviceIsBusyKey forKey:@"kDRDeviceIsBusyKey"];
[d setObject:(NSString *)kDRDeviceIsTrayOpenKey forKey:@"kDRDeviceIsTrayOpenKey"];
[d setObject:(NSString *)kDRDeviceLoadingMechanismCanEjectKey forKey:@"kDRDeviceLoadingMechanismCanEjectKey"];
[d setObject:(NSString *)kDRDeviceLoadingMechanismCanInjectKey forKey:@"kDRDeviceLoadingMechanismCanInjectKey"];
[d setObject:(NSString *)kDRDeviceLoadingMechanismCanOpenKey forKey:@"kDRDeviceLoadingMechanismCanOpenKey"];
[d setObject:(NSString *)kDRDeviceMaximumWriteSpeedKey forKey:@"kDRDeviceMaximumWriteSpeedKey"];
[d setObject:(NSString *)kDRDeviceMediaBSDNameKey forKey:@"kDRDeviceMediaBSDNameKey"];
[d setObject:(NSString *)kDRDeviceMediaBlocksFreeKey forKey:@"kDRDeviceMediaBlocksFreeKey"];
[d setObject:(NSString *)kDRDeviceMediaBlocksOverwritableKey forKey:@"kDRDeviceMediaBlocksOverwritableKey"];
[d setObject:(NSString *)kDRDeviceMediaBlocksUsedKey forKey:@"kDRDeviceMediaBlocksUsedKey"];
[d setObject:(NSString *)kDRDeviceMediaClassBD forKey:@"kDRDeviceMediaClassBD"];
[d setObject:(NSString *)kDRDeviceMediaClassCD forKey:@"kDRDeviceMediaClassCD"];
[d setObject:(NSString *)kDRDeviceMediaClassDVD forKey:@"kDRDeviceMediaClassDVD"];
[d setObject:(NSString *)kDRDeviceMediaClassHDDVD forKey:@"kDRDeviceMediaClassHDDVD"];
[d setObject:(NSString *)kDRDeviceMediaClassKey forKey:@"kDRDeviceMediaClassKey"];
[d setObject:(NSString *)kDRDeviceMediaClassUnknown forKey:@"kDRDeviceMediaClassUnknown"];
[d setObject:(NSString *)kDRDeviceMediaDoubleLayerL0DataZoneBlocksKey forKey:@"kDRDeviceMediaDoubleLayerL0DataZoneBlocksKey"];
[d setObject:(NSString *)kDRDeviceMediaInfoKey forKey:@"kDRDeviceMediaInfoKey"];
[d setObject:(NSString *)kDRDeviceMediaIsAppendableKey forKey:@"kDRDeviceMediaIsAppendableKey"];
[d setObject:(NSString *)kDRDeviceMediaIsBlankKey forKey:@"kDRDeviceMediaIsBlankKey"];
[d setObject:(NSString *)kDRDeviceMediaIsErasableKey forKey:@"kDRDeviceMediaIsErasableKey"];
[d setObject:(NSString *)kDRDeviceMediaIsOverwritableKey forKey:@"kDRDeviceMediaIsOverwritableKey"];
[d setObject:(NSString *)kDRDeviceMediaIsReservedKey forKey:@"kDRDeviceMediaIsReservedKey"];
[d setObject:(NSString *)kDRDeviceMediaSessionCountKey forKey:@"kDRDeviceMediaSessionCountKey"];
[d setObject:(NSString *)kDRDeviceMediaStateInTransition forKey:@"kDRDeviceMediaStateInTransition"];
[d setObject:(NSString *)kDRDeviceMediaStateKey forKey:@"kDRDeviceMediaStateKey"];
[d setObject:(NSString *)kDRDeviceMediaStateMediaPresent forKey:@"kDRDeviceMediaStateMediaPresent"];
[d setObject:(NSString *)kDRDeviceMediaStateNone forKey:@"kDRDeviceMediaStateNone"];
[d setObject:(NSString *)kDRDeviceMediaTrackCountKey forKey:@"kDRDeviceMediaTrackCountKey"];
[d setObject:(NSString *)kDRDeviceMediaTypeBDR forKey:@"kDRDeviceMediaTypeBDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeBDRE forKey:@"kDRDeviceMediaTypeBDRE"];
[d setObject:(NSString *)kDRDeviceMediaTypeBDROM forKey:@"kDRDeviceMediaTypeBDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeCDR forKey:@"kDRDeviceMediaTypeCDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeCDROM forKey:@"kDRDeviceMediaTypeCDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeCDRW forKey:@"kDRDeviceMediaTypeCDRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusR forKey:@"kDRDeviceMediaTypeDVDPlusR"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusRDoubleLayer forKey:@"kDRDeviceMediaTypeDVDPlusRDoubleLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusRW forKey:@"kDRDeviceMediaTypeDVDPlusRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusRWDoubleLayer forKey:@"kDRDeviceMediaTypeDVDPlusRWDoubleLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDR forKey:@"kDRDeviceMediaTypeDVDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRAM forKey:@"kDRDeviceMediaTypeDVDRAM"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRDualLayer forKey:@"kDRDeviceMediaTypeDVDRDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDROM forKey:@"kDRDeviceMediaTypeDVDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRW forKey:@"kDRDeviceMediaTypeDVDRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRWDualLayer forKey:@"kDRDeviceMediaTypeDVDRWDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDR forKey:@"kDRDeviceMediaTypeHDDVDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRAM forKey:@"kDRDeviceMediaTypeHDDVDRAM"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRDualLayer forKey:@"kDRDeviceMediaTypeHDDVDRDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDROM forKey:@"kDRDeviceMediaTypeHDDVDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRW forKey:@"kDRDeviceMediaTypeHDDVDRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRWDualLayer forKey:@"kDRDeviceMediaTypeHDDVDRWDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeKey forKey:@"kDRDeviceMediaTypeKey"];
[d setObject:(NSString *)kDRDeviceMediaTypeUnknown forKey:@"kDRDeviceMediaTypeUnknown"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectATAPI forKey:@"kDRDevicePhysicalInterconnectATAPI"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectFibreChannel forKey:@"kDRDevicePhysicalInterconnectFibreChannel"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectFireWire forKey:@"kDRDevicePhysicalInterconnectFireWire"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectKey forKey:@"kDRDevicePhysicalInterconnectKey"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationExternal forKey:@"kDRDevicePhysicalInterconnectLocationExternal"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationInternal forKey:@"kDRDevicePhysicalInterconnectLocationInternal"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationKey forKey:@"kDRDevicePhysicalInterconnectLocationKey"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationUnknown forKey:@"kDRDevicePhysicalInterconnectLocationUnknown"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectSCSI forKey:@"kDRDevicePhysicalInterconnectSCSI"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectUSB forKey:@"kDRDevicePhysicalInterconnectUSB"];
[d setObject:(NSString *)kDRDeviceProductNameKey forKey:@"kDRDeviceProductNameKey"];
[d setObject:(NSString *)kDRDeviceStatusChangedNotification forKey:@"kDRDeviceStatusChangedNotification"];
[d setObject:(NSString *)kDRDeviceSupportLevelAppleShipping forKey:@"kDRDeviceSupportLevelAppleShipping"];
[d setObject:(NSString *)kDRDeviceSupportLevelAppleSupported forKey:@"kDRDeviceSupportLevelAppleSupported"];
[d setObject:(NSString *)kDRDeviceSupportLevelKey forKey:@"kDRDeviceSupportLevelKey"];
[d setObject:(NSString *)kDRDeviceSupportLevelNone forKey:@"kDRDeviceSupportLevelNone"];
[d setObject:(NSString *)kDRDeviceSupportLevelUnsupported forKey:@"kDRDeviceSupportLevelUnsupported"];
[d setObject:(NSString *)kDRDeviceSupportLevelVendorSupported forKey:@"kDRDeviceSupportLevelVendorSupported"];
[d setObject:(NSString *)kDRDeviceTrackInfoKey forKey:@"kDRDeviceTrackInfoKey"];
[d setObject:(NSString *)kDRDeviceTrackRefsKey forKey:@"kDRDeviceTrackRefsKey"];
[d setObject:(NSString *)kDRDeviceVendorNameKey forKey:@"kDRDeviceVendorNameKey"];
[d setObject:(NSString *)kDRDeviceWriteBufferSizeKey forKey:@"kDRDeviceWriteBufferSizeKey"];
[d setObject:(NSString *)kDRDeviceWriteCapabilitiesKey forKey:@"kDRDeviceWriteCapabilitiesKey"];
[d setObject:(NSString *)kDREffectiveDate forKey:@"kDREffectiveDate"];
[d setObject:(NSString *)kDREraseStatusChangedNotification forKey:@"kDREraseStatusChangedNotification"];
[d setObject:(NSString *)kDREraseTypeComplete forKey:@"kDREraseTypeComplete"];
[d setObject:(NSString *)kDREraseTypeKey forKey:@"kDREraseTypeKey"];
[d setObject:(NSString *)kDREraseTypeQuick forKey:@"kDREraseTypeQuick"];
[d setObject:(NSString *)kDRErrorStatusAdditionalSenseStringKey forKey:@"kDRErrorStatusAdditionalSenseStringKey"];
[d setObject:(NSString *)kDRErrorStatusErrorInfoStringKey forKey:@"kDRErrorStatusErrorInfoStringKey"];
[d setObject:(NSString *)kDRErrorStatusErrorKey forKey:@"kDRErrorStatusErrorKey"];
[d setObject:(NSString *)kDRErrorStatusErrorStringKey forKey:@"kDRErrorStatusErrorStringKey"];
[d setObject:(NSString *)kDRErrorStatusKey forKey:@"kDRErrorStatusKey"];
[d setObject:(NSString *)kDRErrorStatusSenseCodeStringKey forKey:@"kDRErrorStatusSenseCodeStringKey"];
[d setObject:(NSString *)kDRErrorStatusSenseKey forKey:@"kDRErrorStatusSenseKey"];
[d setObject:(NSString *)kDRExpirationDate forKey:@"kDRExpirationDate"];
[d setObject:(NSString *)kDRFreeBlocksKey forKey:@"kDRFreeBlocksKey"];
[d setObject:(NSString *)kDRHFSPlus forKey:@"kDRHFSPlus"];
[d setObject:(NSString *)kDRHFSPlusCatalogNodeID forKey:@"kDRHFSPlusCatalogNodeID"];
[d setObject:(NSString *)kDRHFSPlusTextEncodingHint forKey:@"kDRHFSPlusTextEncodingHint"];
[d setObject:(NSString *)kDRISO9660 forKey:@"kDRISO9660"];
[d setObject:(NSString *)kDRISO9660LevelOne forKey:@"kDRISO9660LevelOne"];
[d setObject:(NSString *)kDRISO9660LevelTwo forKey:@"kDRISO9660LevelTwo"];
[d setObject:(NSString *)kDRISO9660VersionNumber forKey:@"kDRISO9660VersionNumber"];
[d setObject:(NSString *)kDRISOLevel forKey:@"kDRISOLevel"];
[d setObject:(NSString *)kDRISOMacExtensions forKey:@"kDRISOMacExtensions"];
[d setObject:(NSString *)kDRISORockRidgeExtensions forKey:@"kDRISORockRidgeExtensions"];
[d setObject:(NSString *)kDRIndexPointsKey forKey:@"kDRIndexPointsKey"];
[d setObject:(NSString *)kDRInvisible forKey:@"kDRInvisible"];
[d setObject:(NSString *)kDRJoliet forKey:@"kDRJoliet"];
[d setObject:(NSString *)kDRMacExtendedFinderFlags forKey:@"kDRMacExtendedFinderFlags"];
[d setObject:(NSString *)kDRMacFileCreator forKey:@"kDRMacFileCreator"];
[d setObject:(NSString *)kDRMacFileType forKey:@"kDRMacFileType"];
[d setObject:(NSString *)kDRMacFinderFlags forKey:@"kDRMacFinderFlags"];
[d setObject:(NSString *)kDRMacFinderHideExtension forKey:@"kDRMacFinderHideExtension"];
[d setObject:(NSString *)kDRMacIconLocation forKey:@"kDRMacIconLocation"];
[d setObject:(NSString *)kDRMacScrollPosition forKey:@"kDRMacScrollPosition"];
[d setObject:(NSString *)kDRMacWindowBounds forKey:@"kDRMacWindowBounds"];
[d setObject:(NSString *)kDRMacWindowView forKey:@"kDRMacWindowView"];
[d setObject:(NSString *)kDRMaxBurnSpeedKey forKey:@"kDRMaxBurnSpeedKey"];
[d setObject:(NSString *)kDRMediaCatalogNumberKey forKey:@"kDRMediaCatalogNumberKey"];
[d setObject:(NSString *)kDRNextWritableAddressKey forKey:@"kDRNextWritableAddressKey"];
[d setObject:(NSString *)kDRPosixFileMode forKey:@"kDRPosixFileMode"];
[d setObject:(NSString *)kDRPosixGID forKey:@"kDRPosixGID"];
[d setObject:(NSString *)kDRPosixUID forKey:@"kDRPosixUID"];
[d setObject:(NSString *)kDRPreGapIsRequiredKey forKey:@"kDRPreGapIsRequiredKey"];
[d setObject:(NSString *)kDRPreGapLengthKey forKey:@"kDRPreGapLengthKey"];
[d setObject:(NSString *)kDRPublisher forKey:@"kDRPublisher"];
[d setObject:(NSString *)kDRRecordingDate forKey:@"kDRRecordingDate"];
[d setObject:(NSString *)kDRSCMSCopyrightFree forKey:@"kDRSCMSCopyrightFree"];
[d setObject:(NSString *)kDRSCMSCopyrightProtectedCopy forKey:@"kDRSCMSCopyrightProtectedCopy"];
[d setObject:(NSString *)kDRSCMSCopyrightProtectedOriginal forKey:@"kDRSCMSCopyrightProtectedOriginal"];
[d setObject:(NSString *)kDRSerialCopyManagementStateKey forKey:@"kDRSerialCopyManagementStateKey"];
[d setObject:(NSString *)kDRSessionFormatKey forKey:@"kDRSessionFormatKey"];
[d setObject:(NSString *)kDRSessionNumberKey forKey:@"kDRSessionNumberKey"];
[d setObject:(NSString *)kDRStatusCurrentSessionKey forKey:@"kDRStatusCurrentSessionKey"];
[d setObject:(NSString *)kDRStatusCurrentSpeedKey forKey:@"kDRStatusCurrentSpeedKey"];
[d setObject:(NSString *)kDRStatusCurrentTrackKey forKey:@"kDRStatusCurrentTrackKey"];
[d setObject:(NSString *)kDRStatusEraseTypeKey forKey:@"kDRStatusEraseTypeKey"];
[d setObject:(NSString *)kDRStatusPercentCompleteKey forKey:@"kDRStatusPercentCompleteKey"];
[d setObject:(NSString *)kDRStatusProgressCurrentKPS forKey:@"kDRStatusProgressCurrentKPS"];
[d setObject:(NSString *)kDRStatusProgressCurrentXFactor forKey:@"kDRStatusProgressCurrentXFactor"];
[d setObject:(NSString *)kDRStatusProgressInfoKey forKey:@"kDRStatusProgressInfoKey"];
[d setObject:(NSString *)kDRStatusStateDone forKey:@"kDRStatusStateDone"];
[d setObject:(NSString *)kDRStatusStateErasing forKey:@"kDRStatusStateErasing"];
[d setObject:(NSString *)kDRStatusStateFailed forKey:@"kDRStatusStateFailed"];
[d setObject:(NSString *)kDRStatusStateFinishing forKey:@"kDRStatusStateFinishing"];
[d setObject:(NSString *)kDRStatusStateKey forKey:@"kDRStatusStateKey"];
[d setObject:(NSString *)kDRStatusStateNone forKey:@"kDRStatusStateNone"];
[d setObject:(NSString *)kDRStatusStatePreparing forKey:@"kDRStatusStatePreparing"];
[d setObject:(NSString *)kDRStatusStateSessionClose forKey:@"kDRStatusStateSessionClose"];
[d setObject:(NSString *)kDRStatusStateSessionOpen forKey:@"kDRStatusStateSessionOpen"];
[d setObject:(NSString *)kDRStatusStateTrackClose forKey:@"kDRStatusStateTrackClose"];
[d setObject:(NSString *)kDRStatusStateTrackOpen forKey:@"kDRStatusStateTrackOpen"];
[d setObject:(NSString *)kDRStatusStateTrackWrite forKey:@"kDRStatusStateTrackWrite"];
[d setObject:(NSString *)kDRStatusStateVerifying forKey:@"kDRStatusStateVerifying"];
[d setObject:(NSString *)kDRStatusTotalSessionsKey forKey:@"kDRStatusTotalSessionsKey"];
[d setObject:(NSString *)kDRStatusTotalTracksKey forKey:@"kDRStatusTotalTracksKey"];
[d setObject:(NSString *)kDRSubchannelDataFormKey forKey:@"kDRSubchannelDataFormKey"];
[d setObject:(NSString *)kDRSubchannelDataFormNone forKey:@"kDRSubchannelDataFormNone"];
[d setObject:(NSString *)kDRSubchannelDataFormPack forKey:@"kDRSubchannelDataFormPack"];
[d setObject:(NSString *)kDRSubchannelDataFormRaw forKey:@"kDRSubchannelDataFormRaw"];
[d setObject:(NSString *)kDRSuppressMacSpecificFiles forKey:@"kDRSuppressMacSpecificFiles"];
[d setObject:(NSString *)kDRSynchronousBehaviorKey forKey:@"kDRSynchronousBehaviorKey"];
[d setObject:(NSString *)kDRSystemIdentifier forKey:@"kDRSystemIdentifier"];
[d setObject:(NSString *)kDRTrackISRCKey forKey:@"kDRTrackISRCKey"];
[d setObject:(NSString *)kDRTrackIsEmptyKey forKey:@"kDRTrackIsEmptyKey"];
[d setObject:(NSString *)kDRTrackLengthKey forKey:@"kDRTrackLengthKey"];
[d setObject:(NSString *)kDRTrackModeKey forKey:@"kDRTrackModeKey"];
[d setObject:(NSString *)kDRTrackNumberKey forKey:@"kDRTrackNumberKey"];
[d setObject:(NSString *)kDRTrackPacketSizeKey forKey:@"kDRTrackPacketSizeKey"];
[d setObject:(NSString *)kDRTrackPacketTypeFixed forKey:@"kDRTrackPacketTypeFixed"];
[d setObject:(NSString *)kDRTrackPacketTypeKey forKey:@"kDRTrackPacketTypeKey"];
[d setObject:(NSString *)kDRTrackPacketTypeVariable forKey:@"kDRTrackPacketTypeVariable"];
[d setObject:(NSString *)kDRTrackStartAddressKey forKey:@"kDRTrackStartAddressKey"];
[d setObject:(NSString *)kDRTrackTypeClosed forKey:@"kDRTrackTypeClosed"];
[d setObject:(NSString *)kDRTrackTypeIncomplete forKey:@"kDRTrackTypeIncomplete"];
[d setObject:(NSString *)kDRTrackTypeInvisible forKey:@"kDRTrackTypeInvisible"];
[d setObject:(NSString *)kDRTrackTypeKey forKey:@"kDRTrackTypeKey"];
[d setObject:(NSString *)kDRTrackTypeReserved forKey:@"kDRTrackTypeReserved"];
[d setObject:(NSString *)kDRUDF forKey:@"kDRUDF"];
[d setObject:(NSString *)kDRUDFApplicationIdentifierSuffix forKey:@"kDRUDFApplicationIdentifierSuffix"];
[d setObject:(NSString *)kDRUDFExtendedFilePermissions forKey:@"kDRUDFExtendedFilePermissions"];
[d setObject:(NSString *)kDRUDFInterchangeLevel forKey:@"kDRUDFInterchangeLevel"];
[d setObject:(NSString *)kDRUDFMaxInterchangeLevel forKey:@"kDRUDFMaxInterchangeLevel"];
[d setObject:(NSString *)kDRUDFMaxVolumeSequenceNumber forKey:@"kDRUDFMaxVolumeSequenceNumber"];
[d setObject:(NSString *)kDRUDFPrimaryVolumeDescriptorNumber forKey:@"kDRUDFPrimaryVolumeDescriptorNumber"];
[d setObject:(NSString *)kDRUDFRealTimeFile forKey:@"kDRUDFRealTimeFile"];
[d setObject:(NSString *)kDRUDFVersion102 forKey:@"kDRUDFVersion102"];
[d setObject:(NSString *)kDRUDFVersion150 forKey:@"kDRUDFVersion150"];
[d setObject:(NSString *)kDRUDFVolumeSequenceNumber forKey:@"kDRUDFVolumeSequenceNumber"];
[d setObject:(NSString *)kDRUDFVolumeSetIdentifier forKey:@"kDRUDFVolumeSetIdentifier"];
[d setObject:(NSString *)kDRUDFVolumeSetImplementationUse forKey:@"kDRUDFVolumeSetImplementationUse"];
[d setObject:(NSString *)kDRUDFVolumeSetTimestamp forKey:@"kDRUDFVolumeSetTimestamp"];
[d setObject:(NSString *)kDRUDFWriteVersion forKey:@"kDRUDFWriteVersion"];
[d setObject:(NSString *)kDRVerificationTypeChecksum forKey:@"kDRVerificationTypeChecksum"];
[d setObject:(NSString *)kDRVerificationTypeKey forKey:@"kDRVerificationTypeKey"];
[d setObject:(NSString *)kDRVerificationTypeNone forKey:@"kDRVerificationTypeNone"];
[d setObject:(NSString *)kDRVerificationTypeProduceAgain forKey:@"kDRVerificationTypeProduceAgain"];
[d setObject:(NSString *)kDRVerificationTypeReceiveData forKey:@"kDRVerificationTypeReceiveData"];
[d setObject:(NSString *)kDRVolumeCheckedDate forKey:@"kDRVolumeCheckedDate"];
[d setObject:(NSString *)kDRVolumeCreationDate forKey:@"kDRVolumeCreationDate"];
[d setObject:(NSString *)kDRVolumeEffectiveDate forKey:@"kDRVolumeEffectiveDate"];
[d setObject:(NSString *)kDRVolumeExpirationDate forKey:@"kDRVolumeExpirationDate"];
[d setObject:(NSString *)kDRVolumeModificationDate forKey:@"kDRVolumeModificationDate"];
[d setObject:(NSString *)kDRVolumeSet forKey:@"kDRVolumeSet"];
[d setObject:[Number numberWithDouble:DRCDTextEncodingASCII] forKey:@"DRCDTextEncodingASCII"];
[d setObject:[Number numberWithDouble:DRCDTextEncodingISOLatin1Modified] forKey:@"DRCDTextEncodingISOLatin1Modified"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeAdultContemporary] forKey:@"DRCDTextGenreCodeAdultContemporary"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeAlternativeRock] forKey:@"DRCDTextGenreCodeAlternativeRock"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeChildrens] forKey:@"DRCDTextGenreCodeChildrens"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeClassical] forKey:@"DRCDTextGenreCodeClassical"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeContemporaryChristian] forKey:@"DRCDTextGenreCodeContemporaryChristian"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeCountry] forKey:@"DRCDTextGenreCodeCountry"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeDance] forKey:@"DRCDTextGenreCodeDance"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeEasyListening] forKey:@"DRCDTextGenreCodeEasyListening"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeErotic] forKey:@"DRCDTextGenreCodeErotic"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeFolk] forKey:@"DRCDTextGenreCodeFolk"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeGospel] forKey:@"DRCDTextGenreCodeGospel"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeHipHop] forKey:@"DRCDTextGenreCodeHipHop"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeJazz] forKey:@"DRCDTextGenreCodeJazz"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeLatin] forKey:@"DRCDTextGenreCodeLatin"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeMusical] forKey:@"DRCDTextGenreCodeMusical"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeNewAge] forKey:@"DRCDTextGenreCodeNewAge"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeOpera] forKey:@"DRCDTextGenreCodeOpera"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeOperetta] forKey:@"DRCDTextGenreCodeOperetta"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodePop] forKey:@"DRCDTextGenreCodePop"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeRap] forKey:@"DRCDTextGenreCodeRap"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeReggae] forKey:@"DRCDTextGenreCodeReggae"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeRhythmAndBlues] forKey:@"DRCDTextGenreCodeRhythmAndBlues"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeRock] forKey:@"DRCDTextGenreCodeRock"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeSoundEffects] forKey:@"DRCDTextGenreCodeSoundEffects"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeSoundtrack] forKey:@"DRCDTextGenreCodeSoundtrack"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeSpokenWord] forKey:@"DRCDTextGenreCodeSpokenWord"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeUnknown] forKey:@"DRCDTextGenreCodeUnknown"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeWorldMusic] forKey:@"DRCDTextGenreCodeWorldMusic"];
[d setObject:[Number numberWithDouble:DRFileForkData] forKey:@"DRFileForkData"];
[d setObject:[Number numberWithDouble:DRFileForkResource] forKey:@"DRFileForkResource"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskHFSPlus] forKey:@"DRFilesystemInclusionMaskHFSPlus"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskISO9660] forKey:@"DRFilesystemInclusionMaskISO9660"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskJoliet] forKey:@"DRFilesystemInclusionMaskJoliet"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskUDF] forKey:@"DRFilesystemInclusionMaskUDF"];
[d setObject:[Number numberWithDouble:DRFlagSubchannelDataRequested] forKey:@"DRFlagSubchannelDataRequested"];
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:kDRAudioFileNotSupportedErr] forKey:@"kDRAudioFileNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRBadLayoutErr] forKey:@"kDRBadLayoutErr"];
[d setObject:[Number numberWithDouble:kDRBlockSizeAudio] forKey:@"kDRBlockSizeAudio"];
[d setObject:[Number numberWithDouble:kDRBlockSizeDVDData] forKey:@"kDRBlockSizeDVDData"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode1Data] forKey:@"kDRBlockSizeMode1Data"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode2Data] forKey:@"kDRBlockSizeMode2Data"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode2Form1Data] forKey:@"kDRBlockSizeMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode2Form2Data] forKey:@"kDRBlockSizeMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeAudio] forKey:@"kDRBlockTypeAudio"];
[d setObject:[Number numberWithDouble:kDRBlockTypeDVDData] forKey:@"kDRBlockTypeDVDData"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode1Data] forKey:@"kDRBlockTypeMode1Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode2Data] forKey:@"kDRBlockTypeMode2Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode2Form1Data] forKey:@"kDRBlockTypeMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode2Form2Data] forKey:@"kDRBlockTypeMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRBurnMediaWriteFailureErr] forKey:@"kDRBurnMediaWriteFailureErr"];
[d setObject:[Number numberWithDouble:kDRBurnNotAllowedErr] forKey:@"kDRBurnNotAllowedErr"];
[d setObject:[Number numberWithDouble:kDRBurnPowerCalibrationErr] forKey:@"kDRBurnPowerCalibrationErr"];
[d setObject:[Number numberWithDouble:kDRBurnUnderrunErr] forKey:@"kDRBurnUnderrunErr"];
[d setObject:[Number numberWithDouble:kDRCDTextEncodingASCII] forKey:@"kDRCDTextEncodingASCII"];
[d setObject:[Number numberWithDouble:kDRCDTextEncodingISOLatin1Modified] forKey:@"kDRCDTextEncodingISOLatin1Modified"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeAdultContemporary] forKey:@"kDRCDTextGenreCodeAdultContemporary"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeAlternativeRock] forKey:@"kDRCDTextGenreCodeAlternativeRock"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeChildrens] forKey:@"kDRCDTextGenreCodeChildrens"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeClassical] forKey:@"kDRCDTextGenreCodeClassical"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeContemporaryChristian] forKey:@"kDRCDTextGenreCodeContemporaryChristian"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeCountry] forKey:@"kDRCDTextGenreCodeCountry"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeDance] forKey:@"kDRCDTextGenreCodeDance"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeEasyListening] forKey:@"kDRCDTextGenreCodeEasyListening"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeErotic] forKey:@"kDRCDTextGenreCodeErotic"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeFolk] forKey:@"kDRCDTextGenreCodeFolk"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeGospel] forKey:@"kDRCDTextGenreCodeGospel"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeHipHop] forKey:@"kDRCDTextGenreCodeHipHop"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeJazz] forKey:@"kDRCDTextGenreCodeJazz"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeLatin] forKey:@"kDRCDTextGenreCodeLatin"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeMusical] forKey:@"kDRCDTextGenreCodeMusical"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeNewAge] forKey:@"kDRCDTextGenreCodeNewAge"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeOpera] forKey:@"kDRCDTextGenreCodeOpera"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeOperetta] forKey:@"kDRCDTextGenreCodeOperetta"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodePop] forKey:@"kDRCDTextGenreCodePop"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeRap] forKey:@"kDRCDTextGenreCodeRap"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeReggae] forKey:@"kDRCDTextGenreCodeReggae"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeRhythmAndBlues] forKey:@"kDRCDTextGenreCodeRhythmAndBlues"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeRock] forKey:@"kDRCDTextGenreCodeRock"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeSoundEffects] forKey:@"kDRCDTextGenreCodeSoundEffects"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeSoundtrack] forKey:@"kDRCDTextGenreCodeSoundtrack"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeSpokenWord] forKey:@"kDRCDTextGenreCodeSpokenWord"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeUnknown] forKey:@"kDRCDTextGenreCodeUnknown"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeWorldMusic] forKey:@"kDRCDTextGenreCodeWorldMusic"];
[d setObject:[Number numberWithDouble:kDRDataFormAudio] forKey:@"kDRDataFormAudio"];
[d setObject:[Number numberWithDouble:kDRDataFormDVDData] forKey:@"kDRDataFormDVDData"];
[d setObject:[Number numberWithDouble:kDRDataFormMode1Data] forKey:@"kDRDataFormMode1Data"];
[d setObject:[Number numberWithDouble:kDRDataFormMode2Data] forKey:@"kDRDataFormMode2Data"];
[d setObject:[Number numberWithDouble:kDRDataFormMode2Form1Data] forKey:@"kDRDataFormMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRDataFormMode2Form2Data] forKey:@"kDRDataFormMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRDataProductionErr] forKey:@"kDRDataProductionErr"];
[d setObject:[Number numberWithDouble:kDRDeviceAccessErr] forKey:@"kDRDeviceAccessErr"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnStrategyNotAvailableErr] forKey:@"kDRDeviceBurnStrategyNotAvailableErr"];
[d setObject:[Number numberWithDouble:kDRDeviceBusyErr] forKey:@"kDRDeviceBusyErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteCDTextErr] forKey:@"kDRDeviceCantWriteCDTextErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteISRCErr] forKey:@"kDRDeviceCantWriteISRCErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteIndexPointsErr] forKey:@"kDRDeviceCantWriteIndexPointsErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteSCMSErr] forKey:@"kDRDeviceCantWriteSCMSErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCommunicationErr] forKey:@"kDRDeviceCommunicationErr"];
[d setObject:[Number numberWithDouble:kDRDeviceInvalidErr] forKey:@"kDRDeviceInvalidErr"];
[d setObject:[Number numberWithDouble:kDRDeviceNotReadyErr] forKey:@"kDRDeviceNotReadyErr"];
[d setObject:[Number numberWithDouble:kDRDeviceNotSupportedErr] forKey:@"kDRDeviceNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRDevicePreGapLengthNotValidErr] forKey:@"kDRDevicePreGapLengthNotValidErr"];
[d setObject:[Number numberWithDouble:kDRDoubleLayerL0AlreadySpecifiedErr] forKey:@"kDRDoubleLayerL0AlreadySpecifiedErr"];
[d setObject:[Number numberWithDouble:kDRDoubleLayerL0DataZoneBlocksParamErr] forKey:@"kDRDoubleLayerL0DataZoneBlocksParamErr"];
[d setObject:[Number numberWithDouble:kDRFileForkData] forKey:@"kDRFileForkData"];
[d setObject:[Number numberWithDouble:kDRFileForkResource] forKey:@"kDRFileForkResource"];
[d setObject:[Number numberWithDouble:kDRFileForkSizeActual] forKey:@"kDRFileForkSizeActual"];
[d setObject:[Number numberWithDouble:kDRFileForkSizeEstimate] forKey:@"kDRFileForkSizeEstimate"];
[d setObject:[Number numberWithDouble:kDRFileLocationConflictErr] forKey:@"kDRFileLocationConflictErr"];
[d setObject:[Number numberWithDouble:kDRFileMessageForkSize] forKey:@"kDRFileMessageForkSize"];
[d setObject:[Number numberWithDouble:kDRFileMessagePostBurn] forKey:@"kDRFileMessagePostBurn"];
[d setObject:[Number numberWithDouble:kDRFileMessagePreBurn] forKey:@"kDRFileMessagePreBurn"];
[d setObject:[Number numberWithDouble:kDRFileMessageProduceData] forKey:@"kDRFileMessageProduceData"];
[d setObject:[Number numberWithDouble:kDRFileMessageRelease] forKey:@"kDRFileMessageRelease"];
[d setObject:[Number numberWithDouble:kDRFileMessageVerificationStarting] forKey:@"kDRFileMessageVerificationStarting"];
[d setObject:[Number numberWithDouble:kDRFileModifiedDuringBurnErr] forKey:@"kDRFileModifiedDuringBurnErr"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskDefault] forKey:@"kDRFilesystemMaskDefault"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskHFSPlus] forKey:@"kDRFilesystemMaskHFSPlus"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskISO9660] forKey:@"kDRFilesystemMaskISO9660"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskJoliet] forKey:@"kDRFilesystemMaskJoliet"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskUDF] forKey:@"kDRFilesystemMaskUDF"];
[d setObject:[Number numberWithDouble:kDRFilesystemsNotSupportedErr] forKey:@"kDRFilesystemsNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRFirstErr] forKey:@"kDRFirstErr"];
[d setObject:[Number numberWithDouble:kDRFlagNoMoreData] forKey:@"kDRFlagNoMoreData"];
[d setObject:[Number numberWithDouble:kDRFlagSubchannelDataRequested] forKey:@"kDRFlagSubchannelDataRequested"];
[d setObject:[Number numberWithDouble:kDRFunctionNotSupportedErr] forKey:@"kDRFunctionNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRInternalErr] forKey:@"kDRInternalErr"];
[d setObject:[Number numberWithDouble:kDRInvalidIndexPointsErr] forKey:@"kDRInvalidIndexPointsErr"];
[d setObject:[Number numberWithDouble:kDRLinkTypeFinderAlias] forKey:@"kDRLinkTypeFinderAlias"];
[d setObject:[Number numberWithDouble:kDRLinkTypeHardLink] forKey:@"kDRLinkTypeHardLink"];
[d setObject:[Number numberWithDouble:kDRLinkTypeSymbolicLink] forKey:@"kDRLinkTypeSymbolicLink"];
[d setObject:[Number numberWithDouble:kDRMediaBusyErr] forKey:@"kDRMediaBusyErr"];
[d setObject:[Number numberWithDouble:kDRMediaInvalidErr] forKey:@"kDRMediaInvalidErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotBlankErr] forKey:@"kDRMediaNotBlankErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotErasableErr] forKey:@"kDRMediaNotErasableErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotPresentErr] forKey:@"kDRMediaNotPresentErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotSupportedErr] forKey:@"kDRMediaNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotWritableErr] forKey:@"kDRMediaNotWritableErr"];
[d setObject:[Number numberWithDouble:kDRSessionFormatAudio] forKey:@"kDRSessionFormatAudio"];
[d setObject:[Number numberWithDouble:kDRSessionFormatCDI] forKey:@"kDRSessionFormatCDI"];
[d setObject:[Number numberWithDouble:kDRSessionFormatCDXA] forKey:@"kDRSessionFormatCDXA"];
[d setObject:[Number numberWithDouble:kDRSessionFormatDVDData] forKey:@"kDRSessionFormatDVDData"];
[d setObject:[Number numberWithDouble:kDRSessionFormatMode1Data] forKey:@"kDRSessionFormatMode1Data"];
[d setObject:[Number numberWithDouble:kDRSpeedTestAlreadyRunningErr] forKey:@"kDRSpeedTestAlreadyRunningErr"];
[d setObject:[Number numberWithDouble:kDRTooManyNameConflictsErr] forKey:@"kDRTooManyNameConflictsErr"];
[d setObject:[Number numberWithDouble:kDRTooManyTracksForDVDErr] forKey:@"kDRTooManyTracksForDVDErr"];
[d setObject:[Number numberWithDouble:kDRTrackMessageEstimateLength] forKey:@"kDRTrackMessageEstimateLength"];
[d setObject:[Number numberWithDouble:kDRTrackMessagePostBurn] forKey:@"kDRTrackMessagePostBurn"];
[d setObject:[Number numberWithDouble:kDRTrackMessagePreBurn] forKey:@"kDRTrackMessagePreBurn"];
[d setObject:[Number numberWithDouble:kDRTrackMessageProduceData] forKey:@"kDRTrackMessageProduceData"];
[d setObject:[Number numberWithDouble:kDRTrackMessageProducePreGap] forKey:@"kDRTrackMessageProducePreGap"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerificationDone] forKey:@"kDRTrackMessageVerificationDone"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerificationStarting] forKey:@"kDRTrackMessageVerificationStarting"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerifyData] forKey:@"kDRTrackMessageVerifyData"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerifyPreGap] forKey:@"kDRTrackMessageVerifyPreGap"];
[d setObject:[Number numberWithDouble:kDRTrackMode1Data] forKey:@"kDRTrackMode1Data"];
[d setObject:[Number numberWithDouble:kDRTrackMode2Data] forKey:@"kDRTrackMode2Data"];
[d setObject:[Number numberWithDouble:kDRTrackMode2Form1Data] forKey:@"kDRTrackMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRTrackMode2Form2Data] forKey:@"kDRTrackMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRTrackModeAudio] forKey:@"kDRTrackModeAudio"];
[d setObject:[Number numberWithDouble:kDRTrackModeDVDData] forKey:@"kDRTrackModeDVDData"];
[d setObject:[Number numberWithDouble:kDRTrackReusedErr] forKey:@"kDRTrackReusedErr"];
[d setObject:[Number numberWithDouble:kDRUserCanceledErr] forKey:@"kDRUserCanceledErr"];
[d setObject:[Number numberWithDouble:kDRVerificationFailedErr] forKey:@"kDRVerificationFailedErr"];
if ([DRAbstractFile isKindOfClass:[NSString class]]) [d setObject:DRAbstractFile forKey:@"DRAbstractFile"]; else NSLog([@"Can't initialize DRAbstractFile with object " stringByAppendingString:[DRAbstractFile description]]);
if ([DRAccessDate isKindOfClass:[NSString class]]) [d setObject:DRAccessDate forKey:@"DRAccessDate"]; else NSLog([@"Can't initialize DRAccessDate with object " stringByAppendingString:[DRAccessDate description]]);
if ([DRAllFilesystems isKindOfClass:[NSString class]]) [d setObject:DRAllFilesystems forKey:@"DRAllFilesystems"]; else NSLog([@"Can't initialize DRAllFilesystems with object " stringByAppendingString:[DRAllFilesystems description]]);
if ([DRApplicationIdentifier isKindOfClass:[NSString class]]) [d setObject:DRApplicationIdentifier forKey:@"DRApplicationIdentifier"]; else NSLog([@"Can't initialize DRApplicationIdentifier with object " stringByAppendingString:[DRApplicationIdentifier description]]);
if ([DRAttributeModificationDate isKindOfClass:[NSString class]]) [d setObject:DRAttributeModificationDate forKey:@"DRAttributeModificationDate"]; else NSLog([@"Can't initialize DRAttributeModificationDate with object " stringByAppendingString:[DRAttributeModificationDate description]]);
if ([DRAudioFourChannelKey isKindOfClass:[NSString class]]) [d setObject:DRAudioFourChannelKey forKey:@"DRAudioFourChannelKey"]; else NSLog([@"Can't initialize DRAudioFourChannelKey with object " stringByAppendingString:[DRAudioFourChannelKey description]]);
if ([DRAudioPreEmphasisKey isKindOfClass:[NSString class]]) [d setObject:DRAudioPreEmphasisKey forKey:@"DRAudioPreEmphasisKey"]; else NSLog([@"Can't initialize DRAudioPreEmphasisKey with object " stringByAppendingString:[DRAudioPreEmphasisKey description]]);
if ([DRBackupDate isKindOfClass:[NSString class]]) [d setObject:DRBackupDate forKey:@"DRBackupDate"]; else NSLog([@"Can't initialize DRBackupDate with object " stringByAppendingString:[DRBackupDate description]]);
if ([DRBibliographicFile isKindOfClass:[NSString class]]) [d setObject:DRBibliographicFile forKey:@"DRBibliographicFile"]; else NSLog([@"Can't initialize DRBibliographicFile with object " stringByAppendingString:[DRBibliographicFile description]]);
if ([DRBlockSize isKindOfClass:[NSString class]]) [d setObject:DRBlockSize forKey:@"DRBlockSize"]; else NSLog([@"Can't initialize DRBlockSize with object " stringByAppendingString:[DRBlockSize description]]);
if ([DRBlockSizeKey isKindOfClass:[NSString class]]) [d setObject:DRBlockSizeKey forKey:@"DRBlockSizeKey"]; else NSLog([@"Can't initialize DRBlockSizeKey with object " stringByAppendingString:[DRBlockSizeKey description]]);
if ([DRBlockTypeKey isKindOfClass:[NSString class]]) [d setObject:DRBlockTypeKey forKey:@"DRBlockTypeKey"]; else NSLog([@"Can't initialize DRBlockTypeKey with object " stringByAppendingString:[DRBlockTypeKey description]]);
if ([DRBurnAppendableKey isKindOfClass:[NSString class]]) [d setObject:DRBurnAppendableKey forKey:@"DRBurnAppendableKey"]; else NSLog([@"Can't initialize DRBurnAppendableKey with object " stringByAppendingString:[DRBurnAppendableKey description]]);
if ([DRBurnCompletionActionEject isKindOfClass:[NSString class]]) [d setObject:DRBurnCompletionActionEject forKey:@"DRBurnCompletionActionEject"]; else NSLog([@"Can't initialize DRBurnCompletionActionEject with object " stringByAppendingString:[DRBurnCompletionActionEject description]]);
if ([DRBurnCompletionActionKey isKindOfClass:[NSString class]]) [d setObject:DRBurnCompletionActionKey forKey:@"DRBurnCompletionActionKey"]; else NSLog([@"Can't initialize DRBurnCompletionActionKey with object " stringByAppendingString:[DRBurnCompletionActionKey description]]);
if ([DRBurnCompletionActionMount isKindOfClass:[NSString class]]) [d setObject:DRBurnCompletionActionMount forKey:@"DRBurnCompletionActionMount"]; else NSLog([@"Can't initialize DRBurnCompletionActionMount with object " stringByAppendingString:[DRBurnCompletionActionMount description]]);
if ([DRBurnDoubleLayerL0DataZoneBlocksKey isKindOfClass:[NSString class]]) [d setObject:DRBurnDoubleLayerL0DataZoneBlocksKey forKey:@"DRBurnDoubleLayerL0DataZoneBlocksKey"]; else NSLog([@"Can't initialize DRBurnDoubleLayerL0DataZoneBlocksKey with object " stringByAppendingString:[DRBurnDoubleLayerL0DataZoneBlocksKey description]]);
if ([DRBurnFailureActionEject isKindOfClass:[NSString class]]) [d setObject:DRBurnFailureActionEject forKey:@"DRBurnFailureActionEject"]; else NSLog([@"Can't initialize DRBurnFailureActionEject with object " stringByAppendingString:[DRBurnFailureActionEject description]]);
if ([DRBurnFailureActionKey isKindOfClass:[NSString class]]) [d setObject:DRBurnFailureActionKey forKey:@"DRBurnFailureActionKey"]; else NSLog([@"Can't initialize DRBurnFailureActionKey with object " stringByAppendingString:[DRBurnFailureActionKey description]]);
if ([DRBurnFailureActionNone isKindOfClass:[NSString class]]) [d setObject:DRBurnFailureActionNone forKey:@"DRBurnFailureActionNone"]; else NSLog([@"Can't initialize DRBurnFailureActionNone with object " stringByAppendingString:[DRBurnFailureActionNone description]]);
if ([DRBurnOverwriteDiscKey isKindOfClass:[NSString class]]) [d setObject:DRBurnOverwriteDiscKey forKey:@"DRBurnOverwriteDiscKey"]; else NSLog([@"Can't initialize DRBurnOverwriteDiscKey with object " stringByAppendingString:[DRBurnOverwriteDiscKey description]]);
if ([DRBurnRequestedSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRBurnRequestedSpeedKey forKey:@"DRBurnRequestedSpeedKey"]; else NSLog([@"Can't initialize DRBurnRequestedSpeedKey with object " stringByAppendingString:[DRBurnRequestedSpeedKey description]]);
if ([DRBurnStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:DRBurnStatusChangedNotification forKey:@"DRBurnStatusChangedNotification"]; else NSLog([@"Can't initialize DRBurnStatusChangedNotification with object " stringByAppendingString:[DRBurnStatusChangedNotification description]]);
if ([DRBurnStrategyBDDAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyBDDAO forKey:@"DRBurnStrategyBDDAO"]; else NSLog([@"Can't initialize DRBurnStrategyBDDAO with object " stringByAppendingString:[DRBurnStrategyBDDAO description]]);
if ([DRBurnStrategyCDSAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyCDSAO forKey:@"DRBurnStrategyCDSAO"]; else NSLog([@"Can't initialize DRBurnStrategyCDSAO with object " stringByAppendingString:[DRBurnStrategyCDSAO description]]);
if ([DRBurnStrategyCDTAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyCDTAO forKey:@"DRBurnStrategyCDTAO"]; else NSLog([@"Can't initialize DRBurnStrategyCDTAO with object " stringByAppendingString:[DRBurnStrategyCDTAO description]]);
if ([DRBurnStrategyDVDDAO isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyDVDDAO forKey:@"DRBurnStrategyDVDDAO"]; else NSLog([@"Can't initialize DRBurnStrategyDVDDAO with object " stringByAppendingString:[DRBurnStrategyDVDDAO description]]);
if ([DRBurnStrategyIsRequiredKey isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyIsRequiredKey forKey:@"DRBurnStrategyIsRequiredKey"]; else NSLog([@"Can't initialize DRBurnStrategyIsRequiredKey with object " stringByAppendingString:[DRBurnStrategyIsRequiredKey description]]);
if ([DRBurnStrategyKey isKindOfClass:[NSString class]]) [d setObject:DRBurnStrategyKey forKey:@"DRBurnStrategyKey"]; else NSLog([@"Can't initialize DRBurnStrategyKey with object " stringByAppendingString:[DRBurnStrategyKey description]]);
if ([DRBurnTestingKey isKindOfClass:[NSString class]]) [d setObject:DRBurnTestingKey forKey:@"DRBurnTestingKey"]; else NSLog([@"Can't initialize DRBurnTestingKey with object " stringByAppendingString:[DRBurnTestingKey description]]);
if ([DRBurnUnderrunProtectionKey isKindOfClass:[NSString class]]) [d setObject:DRBurnUnderrunProtectionKey forKey:@"DRBurnUnderrunProtectionKey"]; else NSLog([@"Can't initialize DRBurnUnderrunProtectionKey with object " stringByAppendingString:[DRBurnUnderrunProtectionKey description]]);
if ([DRBurnVerifyDiscKey isKindOfClass:[NSString class]]) [d setObject:DRBurnVerifyDiscKey forKey:@"DRBurnVerifyDiscKey"]; else NSLog([@"Can't initialize DRBurnVerifyDiscKey with object " stringByAppendingString:[DRBurnVerifyDiscKey description]]);
if ([DRCDTextArrangerKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextArrangerKey forKey:@"DRCDTextArrangerKey"]; else NSLog([@"Can't initialize DRCDTextArrangerKey with object " stringByAppendingString:[DRCDTextArrangerKey description]]);
if ([DRCDTextCharacterCodeKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCharacterCodeKey forKey:@"DRCDTextCharacterCodeKey"]; else NSLog([@"Can't initialize DRCDTextCharacterCodeKey with object " stringByAppendingString:[DRCDTextCharacterCodeKey description]]);
if ([DRCDTextClosedKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextClosedKey forKey:@"DRCDTextClosedKey"]; else NSLog([@"Can't initialize DRCDTextClosedKey with object " stringByAppendingString:[DRCDTextClosedKey description]]);
if ([DRCDTextComposerKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextComposerKey forKey:@"DRCDTextComposerKey"]; else NSLog([@"Can't initialize DRCDTextComposerKey with object " stringByAppendingString:[DRCDTextComposerKey description]]);
if ([DRCDTextCopyrightAssertedForNamesKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCopyrightAssertedForNamesKey forKey:@"DRCDTextCopyrightAssertedForNamesKey"]; else NSLog([@"Can't initialize DRCDTextCopyrightAssertedForNamesKey with object " stringByAppendingString:[DRCDTextCopyrightAssertedForNamesKey description]]);
if ([DRCDTextCopyrightAssertedForSpecialMessagesKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCopyrightAssertedForSpecialMessagesKey forKey:@"DRCDTextCopyrightAssertedForSpecialMessagesKey"]; else NSLog([@"Can't initialize DRCDTextCopyrightAssertedForSpecialMessagesKey with object " stringByAppendingString:[DRCDTextCopyrightAssertedForSpecialMessagesKey description]]);
if ([DRCDTextCopyrightAssertedForTitlesKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextCopyrightAssertedForTitlesKey forKey:@"DRCDTextCopyrightAssertedForTitlesKey"]; else NSLog([@"Can't initialize DRCDTextCopyrightAssertedForTitlesKey with object " stringByAppendingString:[DRCDTextCopyrightAssertedForTitlesKey description]]);
if ([DRCDTextDiscIdentKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextDiscIdentKey forKey:@"DRCDTextDiscIdentKey"]; else NSLog([@"Can't initialize DRCDTextDiscIdentKey with object " stringByAppendingString:[DRCDTextDiscIdentKey description]]);
if ([DRCDTextGenreCodeKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextGenreCodeKey forKey:@"DRCDTextGenreCodeKey"]; else NSLog([@"Can't initialize DRCDTextGenreCodeKey with object " stringByAppendingString:[DRCDTextGenreCodeKey description]]);
if ([DRCDTextGenreKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextGenreKey forKey:@"DRCDTextGenreKey"]; else NSLog([@"Can't initialize DRCDTextGenreKey with object " stringByAppendingString:[DRCDTextGenreKey description]]);
if ([DRCDTextKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextKey forKey:@"DRCDTextKey"]; else NSLog([@"Can't initialize DRCDTextKey with object " stringByAppendingString:[DRCDTextKey description]]);
if ([DRCDTextLanguageKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextLanguageKey forKey:@"DRCDTextLanguageKey"]; else NSLog([@"Can't initialize DRCDTextLanguageKey with object " stringByAppendingString:[DRCDTextLanguageKey description]]);
if ([DRCDTextMCNISRCKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextMCNISRCKey forKey:@"DRCDTextMCNISRCKey"]; else NSLog([@"Can't initialize DRCDTextMCNISRCKey with object " stringByAppendingString:[DRCDTextMCNISRCKey description]]);
if ([DRCDTextNSStringEncodingKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextNSStringEncodingKey forKey:@"DRCDTextNSStringEncodingKey"]; else NSLog([@"Can't initialize DRCDTextNSStringEncodingKey with object " stringByAppendingString:[DRCDTextNSStringEncodingKey description]]);
if ([DRCDTextPerformerKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextPerformerKey forKey:@"DRCDTextPerformerKey"]; else NSLog([@"Can't initialize DRCDTextPerformerKey with object " stringByAppendingString:[DRCDTextPerformerKey description]]);
if ([DRCDTextSizeKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextSizeKey forKey:@"DRCDTextSizeKey"]; else NSLog([@"Can't initialize DRCDTextSizeKey with object " stringByAppendingString:[DRCDTextSizeKey description]]);
if ([DRCDTextSongwriterKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextSongwriterKey forKey:@"DRCDTextSongwriterKey"]; else NSLog([@"Can't initialize DRCDTextSongwriterKey with object " stringByAppendingString:[DRCDTextSongwriterKey description]]);
if ([DRCDTextSpecialMessageKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextSpecialMessageKey forKey:@"DRCDTextSpecialMessageKey"]; else NSLog([@"Can't initialize DRCDTextSpecialMessageKey with object " stringByAppendingString:[DRCDTextSpecialMessageKey description]]);
if ([DRCDTextTOC2Key isKindOfClass:[NSString class]]) [d setObject:DRCDTextTOC2Key forKey:@"DRCDTextTOC2Key"]; else NSLog([@"Can't initialize DRCDTextTOC2Key with object " stringByAppendingString:[DRCDTextTOC2Key description]]);
if ([DRCDTextTOCKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextTOCKey forKey:@"DRCDTextTOCKey"]; else NSLog([@"Can't initialize DRCDTextTOCKey with object " stringByAppendingString:[DRCDTextTOCKey description]]);
if ([DRCDTextTitleKey isKindOfClass:[NSString class]]) [d setObject:DRCDTextTitleKey forKey:@"DRCDTextTitleKey"]; else NSLog([@"Can't initialize DRCDTextTitleKey with object " stringByAppendingString:[DRCDTextTitleKey description]]);
if ([DRContentModificationDate isKindOfClass:[NSString class]]) [d setObject:DRContentModificationDate forKey:@"DRContentModificationDate"]; else NSLog([@"Can't initialize DRContentModificationDate with object " stringByAppendingString:[DRContentModificationDate description]]);
if ([DRCopyrightFile isKindOfClass:[NSString class]]) [d setObject:DRCopyrightFile forKey:@"DRCopyrightFile"]; else NSLog([@"Can't initialize DRCopyrightFile with object " stringByAppendingString:[DRCopyrightFile description]]);
if ([DRCreationDate isKindOfClass:[NSString class]]) [d setObject:DRCreationDate forKey:@"DRCreationDate"]; else NSLog([@"Can't initialize DRCreationDate with object " stringByAppendingString:[DRCreationDate description]]);
if ([DRDVDCopyrightInfoKey isKindOfClass:[NSString class]]) [d setObject:DRDVDCopyrightInfoKey forKey:@"DRDVDCopyrightInfoKey"]; else NSLog([@"Can't initialize DRDVDCopyrightInfoKey with object " stringByAppendingString:[DRDVDCopyrightInfoKey description]]);
if ([DRDVDTimestampKey isKindOfClass:[NSString class]]) [d setObject:DRDVDTimestampKey forKey:@"DRDVDTimestampKey"]; else NSLog([@"Can't initialize DRDVDTimestampKey with object " stringByAppendingString:[DRDVDTimestampKey description]]);
if ([DRDataFormKey isKindOfClass:[NSString class]]) [d setObject:DRDataFormKey forKey:@"DRDataFormKey"]; else NSLog([@"Can't initialize DRDataFormKey with object " stringByAppendingString:[DRDataFormKey description]]);
if ([DRDataPreparer isKindOfClass:[NSString class]]) [d setObject:DRDataPreparer forKey:@"DRDataPreparer"]; else NSLog([@"Can't initialize DRDataPreparer with object " stringByAppendingString:[DRDataPreparer description]]);
if ([DRDefaultDate isKindOfClass:[NSString class]]) [d setObject:DRDefaultDate forKey:@"DRDefaultDate"]; else NSLog([@"Can't initialize DRDefaultDate with object " stringByAppendingString:[DRDefaultDate description]]);
if ([DRDeviceAppearedNotification isKindOfClass:[NSString class]]) [d setObject:DRDeviceAppearedNotification forKey:@"DRDeviceAppearedNotification"]; else NSLog([@"Can't initialize DRDeviceAppearedNotification with object " stringByAppendingString:[DRDeviceAppearedNotification description]]);
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedBD1x] forKey:@"DRDeviceBurnSpeedBD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedCD1x] forKey:@"DRDeviceBurnSpeedCD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedDVD1x] forKey:@"DRDeviceBurnSpeedDVD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedHDDVD1x] forKey:@"DRDeviceBurnSpeedHDDVD1x"];
[d setObject:[Number numberWithDouble:DRDeviceBurnSpeedMax] forKey:@"DRDeviceBurnSpeedMax"];
if ([DRDeviceBurnSpeedsKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceBurnSpeedsKey forKey:@"DRDeviceBurnSpeedsKey"]; else NSLog([@"Can't initialize DRDeviceBurnSpeedsKey with object " stringByAppendingString:[DRDeviceBurnSpeedsKey description]]);
if ([DRDeviceCanTestWriteCDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanTestWriteCDKey forKey:@"DRDeviceCanTestWriteCDKey"]; else NSLog([@"Can't initialize DRDeviceCanTestWriteCDKey with object " stringByAppendingString:[DRDeviceCanTestWriteCDKey description]]);
if ([DRDeviceCanTestWriteDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanTestWriteDVDKey forKey:@"DRDeviceCanTestWriteDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanTestWriteDVDKey with object " stringByAppendingString:[DRDeviceCanTestWriteDVDKey description]]);
if ([DRDeviceCanUnderrunProtectCDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanUnderrunProtectCDKey forKey:@"DRDeviceCanUnderrunProtectCDKey"]; else NSLog([@"Can't initialize DRDeviceCanUnderrunProtectCDKey with object " stringByAppendingString:[DRDeviceCanUnderrunProtectCDKey description]]);
if ([DRDeviceCanUnderrunProtectDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanUnderrunProtectDVDKey forKey:@"DRDeviceCanUnderrunProtectDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanUnderrunProtectDVDKey with object " stringByAppendingString:[DRDeviceCanUnderrunProtectDVDKey description]]);
if ([DRDeviceCanWriteBDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteBDKey forKey:@"DRDeviceCanWriteBDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteBDKey with object " stringByAppendingString:[DRDeviceCanWriteBDKey description]]);
if ([DRDeviceCanWriteBDREKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteBDREKey forKey:@"DRDeviceCanWriteBDREKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteBDREKey with object " stringByAppendingString:[DRDeviceCanWriteBDREKey description]]);
if ([DRDeviceCanWriteBDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteBDRKey forKey:@"DRDeviceCanWriteBDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteBDRKey with object " stringByAppendingString:[DRDeviceCanWriteBDRKey description]]);
if ([DRDeviceCanWriteCDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDKey forKey:@"DRDeviceCanWriteCDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDKey with object " stringByAppendingString:[DRDeviceCanWriteCDKey description]]);
if ([DRDeviceCanWriteCDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDRKey forKey:@"DRDeviceCanWriteCDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDRKey with object " stringByAppendingString:[DRDeviceCanWriteCDRKey description]]);
if ([DRDeviceCanWriteCDRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDRWKey forKey:@"DRDeviceCanWriteCDRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDRWKey with object " stringByAppendingString:[DRDeviceCanWriteCDRWKey description]]);
if ([DRDeviceCanWriteCDRawKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDRawKey forKey:@"DRDeviceCanWriteCDRawKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDRawKey with object " stringByAppendingString:[DRDeviceCanWriteCDRawKey description]]);
if ([DRDeviceCanWriteCDSAOKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDSAOKey forKey:@"DRDeviceCanWriteCDSAOKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDSAOKey with object " stringByAppendingString:[DRDeviceCanWriteCDSAOKey description]]);
if ([DRDeviceCanWriteCDTAOKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDTAOKey forKey:@"DRDeviceCanWriteCDTAOKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDTAOKey with object " stringByAppendingString:[DRDeviceCanWriteCDTAOKey description]]);
if ([DRDeviceCanWriteCDTextKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteCDTextKey forKey:@"DRDeviceCanWriteCDTextKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteCDTextKey with object " stringByAppendingString:[DRDeviceCanWriteCDTextKey description]]);
if ([DRDeviceCanWriteDVDDAOKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDDAOKey forKey:@"DRDeviceCanWriteDVDDAOKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDDAOKey with object " stringByAppendingString:[DRDeviceCanWriteDVDDAOKey description]]);
if ([DRDeviceCanWriteDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDKey forKey:@"DRDeviceCanWriteDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDKey with object " stringByAppendingString:[DRDeviceCanWriteDVDKey description]]);
if ([DRDeviceCanWriteDVDPlusRDoubleLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRDoubleLayerKey forKey:@"DRDeviceCanWriteDVDPlusRDoubleLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRDoubleLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRDoubleLayerKey description]]);
if ([DRDeviceCanWriteDVDPlusRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRKey forKey:@"DRDeviceCanWriteDVDPlusRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRKey description]]);
if ([DRDeviceCanWriteDVDPlusRWDoubleLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRWDoubleLayerKey forKey:@"DRDeviceCanWriteDVDPlusRWDoubleLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRWDoubleLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRWDoubleLayerKey description]]);
if ([DRDeviceCanWriteDVDPlusRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDPlusRWKey forKey:@"DRDeviceCanWriteDVDPlusRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDPlusRWKey with object " stringByAppendingString:[DRDeviceCanWriteDVDPlusRWKey description]]);
if ([DRDeviceCanWriteDVDRAMKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRAMKey forKey:@"DRDeviceCanWriteDVDRAMKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRAMKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRAMKey description]]);
if ([DRDeviceCanWriteDVDRDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRDualLayerKey forKey:@"DRDeviceCanWriteDVDRDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRDualLayerKey description]]);
if ([DRDeviceCanWriteDVDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRKey forKey:@"DRDeviceCanWriteDVDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRKey description]]);
if ([DRDeviceCanWriteDVDRWDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRWDualLayerKey forKey:@"DRDeviceCanWriteDVDRWDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRWDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRWDualLayerKey description]]);
if ([DRDeviceCanWriteDVDRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteDVDRWKey forKey:@"DRDeviceCanWriteDVDRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteDVDRWKey with object " stringByAppendingString:[DRDeviceCanWriteDVDRWKey description]]);
if ([DRDeviceCanWriteHDDVDKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDKey forKey:@"DRDeviceCanWriteHDDVDKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDKey description]]);
if ([DRDeviceCanWriteHDDVDRAMKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRAMKey forKey:@"DRDeviceCanWriteHDDVDRAMKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRAMKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRAMKey description]]);
if ([DRDeviceCanWriteHDDVDRDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRDualLayerKey forKey:@"DRDeviceCanWriteHDDVDRDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRDualLayerKey description]]);
if ([DRDeviceCanWriteHDDVDRKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRKey forKey:@"DRDeviceCanWriteHDDVDRKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRKey description]]);
if ([DRDeviceCanWriteHDDVDRWDualLayerKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRWDualLayerKey forKey:@"DRDeviceCanWriteHDDVDRWDualLayerKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRWDualLayerKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRWDualLayerKey description]]);
if ([DRDeviceCanWriteHDDVDRWKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteHDDVDRWKey forKey:@"DRDeviceCanWriteHDDVDRWKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteHDDVDRWKey with object " stringByAppendingString:[DRDeviceCanWriteHDDVDRWKey description]]);
if ([DRDeviceCanWriteISRCKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteISRCKey forKey:@"DRDeviceCanWriteISRCKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteISRCKey with object " stringByAppendingString:[DRDeviceCanWriteISRCKey description]]);
if ([DRDeviceCanWriteIndexPointsKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteIndexPointsKey forKey:@"DRDeviceCanWriteIndexPointsKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteIndexPointsKey with object " stringByAppendingString:[DRDeviceCanWriteIndexPointsKey description]]);
if ([DRDeviceCanWriteKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCanWriteKey forKey:@"DRDeviceCanWriteKey"]; else NSLog([@"Can't initialize DRDeviceCanWriteKey with object " stringByAppendingString:[DRDeviceCanWriteKey description]]);
if ([DRDeviceCurrentWriteSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceCurrentWriteSpeedKey forKey:@"DRDeviceCurrentWriteSpeedKey"]; else NSLog([@"Can't initialize DRDeviceCurrentWriteSpeedKey with object " stringByAppendingString:[DRDeviceCurrentWriteSpeedKey description]]);
if ([DRDeviceDisappearedNotification isKindOfClass:[NSString class]]) [d setObject:DRDeviceDisappearedNotification forKey:@"DRDeviceDisappearedNotification"]; else NSLog([@"Can't initialize DRDeviceDisappearedNotification with object " stringByAppendingString:[DRDeviceDisappearedNotification description]]);
if ([DRDeviceFirmwareRevisionKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceFirmwareRevisionKey forKey:@"DRDeviceFirmwareRevisionKey"]; else NSLog([@"Can't initialize DRDeviceFirmwareRevisionKey with object " stringByAppendingString:[DRDeviceFirmwareRevisionKey description]]);
if ([DRDeviceIORegistryEntryPathKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceIORegistryEntryPathKey forKey:@"DRDeviceIORegistryEntryPathKey"]; else NSLog([@"Can't initialize DRDeviceIORegistryEntryPathKey with object " stringByAppendingString:[DRDeviceIORegistryEntryPathKey description]]);
if ([DRDeviceIsBusyKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceIsBusyKey forKey:@"DRDeviceIsBusyKey"]; else NSLog([@"Can't initialize DRDeviceIsBusyKey with object " stringByAppendingString:[DRDeviceIsBusyKey description]]);
if ([DRDeviceIsTrayOpenKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceIsTrayOpenKey forKey:@"DRDeviceIsTrayOpenKey"]; else NSLog([@"Can't initialize DRDeviceIsTrayOpenKey with object " stringByAppendingString:[DRDeviceIsTrayOpenKey description]]);
if ([DRDeviceLoadingMechanismCanEjectKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceLoadingMechanismCanEjectKey forKey:@"DRDeviceLoadingMechanismCanEjectKey"]; else NSLog([@"Can't initialize DRDeviceLoadingMechanismCanEjectKey with object " stringByAppendingString:[DRDeviceLoadingMechanismCanEjectKey description]]);
if ([DRDeviceLoadingMechanismCanInjectKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceLoadingMechanismCanInjectKey forKey:@"DRDeviceLoadingMechanismCanInjectKey"]; else NSLog([@"Can't initialize DRDeviceLoadingMechanismCanInjectKey with object " stringByAppendingString:[DRDeviceLoadingMechanismCanInjectKey description]]);
if ([DRDeviceLoadingMechanismCanOpenKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceLoadingMechanismCanOpenKey forKey:@"DRDeviceLoadingMechanismCanOpenKey"]; else NSLog([@"Can't initialize DRDeviceLoadingMechanismCanOpenKey with object " stringByAppendingString:[DRDeviceLoadingMechanismCanOpenKey description]]);
if ([DRDeviceMaximumWriteSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMaximumWriteSpeedKey forKey:@"DRDeviceMaximumWriteSpeedKey"]; else NSLog([@"Can't initialize DRDeviceMaximumWriteSpeedKey with object " stringByAppendingString:[DRDeviceMaximumWriteSpeedKey description]]);
if ([DRDeviceMediaBSDNameKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBSDNameKey forKey:@"DRDeviceMediaBSDNameKey"]; else NSLog([@"Can't initialize DRDeviceMediaBSDNameKey with object " stringByAppendingString:[DRDeviceMediaBSDNameKey description]]);
if ([DRDeviceMediaBlocksFreeKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBlocksFreeKey forKey:@"DRDeviceMediaBlocksFreeKey"]; else NSLog([@"Can't initialize DRDeviceMediaBlocksFreeKey with object " stringByAppendingString:[DRDeviceMediaBlocksFreeKey description]]);
if ([DRDeviceMediaBlocksOverwritableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBlocksOverwritableKey forKey:@"DRDeviceMediaBlocksOverwritableKey"]; else NSLog([@"Can't initialize DRDeviceMediaBlocksOverwritableKey with object " stringByAppendingString:[DRDeviceMediaBlocksOverwritableKey description]]);
if ([DRDeviceMediaBlocksUsedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaBlocksUsedKey forKey:@"DRDeviceMediaBlocksUsedKey"]; else NSLog([@"Can't initialize DRDeviceMediaBlocksUsedKey with object " stringByAppendingString:[DRDeviceMediaBlocksUsedKey description]]);
if ([DRDeviceMediaClassBD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassBD forKey:@"DRDeviceMediaClassBD"]; else NSLog([@"Can't initialize DRDeviceMediaClassBD with object " stringByAppendingString:[DRDeviceMediaClassBD description]]);
if ([DRDeviceMediaClassCD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassCD forKey:@"DRDeviceMediaClassCD"]; else NSLog([@"Can't initialize DRDeviceMediaClassCD with object " stringByAppendingString:[DRDeviceMediaClassCD description]]);
if ([DRDeviceMediaClassDVD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassDVD forKey:@"DRDeviceMediaClassDVD"]; else NSLog([@"Can't initialize DRDeviceMediaClassDVD with object " stringByAppendingString:[DRDeviceMediaClassDVD description]]);
if ([DRDeviceMediaClassHDDVD isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassHDDVD forKey:@"DRDeviceMediaClassHDDVD"]; else NSLog([@"Can't initialize DRDeviceMediaClassHDDVD with object " stringByAppendingString:[DRDeviceMediaClassHDDVD description]]);
if ([DRDeviceMediaClassKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassKey forKey:@"DRDeviceMediaClassKey"]; else NSLog([@"Can't initialize DRDeviceMediaClassKey with object " stringByAppendingString:[DRDeviceMediaClassKey description]]);
if ([DRDeviceMediaClassUnknown isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaClassUnknown forKey:@"DRDeviceMediaClassUnknown"]; else NSLog([@"Can't initialize DRDeviceMediaClassUnknown with object " stringByAppendingString:[DRDeviceMediaClassUnknown description]]);
if ([DRDeviceMediaDoubleLayerL0DataZoneBlocksKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaDoubleLayerL0DataZoneBlocksKey forKey:@"DRDeviceMediaDoubleLayerL0DataZoneBlocksKey"]; else NSLog([@"Can't initialize DRDeviceMediaDoubleLayerL0DataZoneBlocksKey with object " stringByAppendingString:[DRDeviceMediaDoubleLayerL0DataZoneBlocksKey description]]);
if ([DRDeviceMediaFreeSpaceKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaFreeSpaceKey forKey:@"DRDeviceMediaFreeSpaceKey"]; else NSLog([@"Can't initialize DRDeviceMediaFreeSpaceKey with object " stringByAppendingString:[DRDeviceMediaFreeSpaceKey description]]);
if ([DRDeviceMediaInfoKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaInfoKey forKey:@"DRDeviceMediaInfoKey"]; else NSLog([@"Can't initialize DRDeviceMediaInfoKey with object " stringByAppendingString:[DRDeviceMediaInfoKey description]]);
if ([DRDeviceMediaIsAppendableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsAppendableKey forKey:@"DRDeviceMediaIsAppendableKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsAppendableKey with object " stringByAppendingString:[DRDeviceMediaIsAppendableKey description]]);
if ([DRDeviceMediaIsBlankKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsBlankKey forKey:@"DRDeviceMediaIsBlankKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsBlankKey with object " stringByAppendingString:[DRDeviceMediaIsBlankKey description]]);
if ([DRDeviceMediaIsErasableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsErasableKey forKey:@"DRDeviceMediaIsErasableKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsErasableKey with object " stringByAppendingString:[DRDeviceMediaIsErasableKey description]]);
if ([DRDeviceMediaIsOverwritableKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsOverwritableKey forKey:@"DRDeviceMediaIsOverwritableKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsOverwritableKey with object " stringByAppendingString:[DRDeviceMediaIsOverwritableKey description]]);
if ([DRDeviceMediaIsReservedKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaIsReservedKey forKey:@"DRDeviceMediaIsReservedKey"]; else NSLog([@"Can't initialize DRDeviceMediaIsReservedKey with object " stringByAppendingString:[DRDeviceMediaIsReservedKey description]]);
if ([DRDeviceMediaOverwritableSpaceKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaOverwritableSpaceKey forKey:@"DRDeviceMediaOverwritableSpaceKey"]; else NSLog([@"Can't initialize DRDeviceMediaOverwritableSpaceKey with object " stringByAppendingString:[DRDeviceMediaOverwritableSpaceKey description]]);
if ([DRDeviceMediaSessionCountKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaSessionCountKey forKey:@"DRDeviceMediaSessionCountKey"]; else NSLog([@"Can't initialize DRDeviceMediaSessionCountKey with object " stringByAppendingString:[DRDeviceMediaSessionCountKey description]]);
if ([DRDeviceMediaStateInTransition isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateInTransition forKey:@"DRDeviceMediaStateInTransition"]; else NSLog([@"Can't initialize DRDeviceMediaStateInTransition with object " stringByAppendingString:[DRDeviceMediaStateInTransition description]]);
if ([DRDeviceMediaStateKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateKey forKey:@"DRDeviceMediaStateKey"]; else NSLog([@"Can't initialize DRDeviceMediaStateKey with object " stringByAppendingString:[DRDeviceMediaStateKey description]]);
if ([DRDeviceMediaStateMediaPresent isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateMediaPresent forKey:@"DRDeviceMediaStateMediaPresent"]; else NSLog([@"Can't initialize DRDeviceMediaStateMediaPresent with object " stringByAppendingString:[DRDeviceMediaStateMediaPresent description]]);
if ([DRDeviceMediaStateNone isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaStateNone forKey:@"DRDeviceMediaStateNone"]; else NSLog([@"Can't initialize DRDeviceMediaStateNone with object " stringByAppendingString:[DRDeviceMediaStateNone description]]);
if ([DRDeviceMediaTrackCountKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTrackCountKey forKey:@"DRDeviceMediaTrackCountKey"]; else NSLog([@"Can't initialize DRDeviceMediaTrackCountKey with object " stringByAppendingString:[DRDeviceMediaTrackCountKey description]]);
if ([DRDeviceMediaTypeBDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeBDR forKey:@"DRDeviceMediaTypeBDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeBDR with object " stringByAppendingString:[DRDeviceMediaTypeBDR description]]);
if ([DRDeviceMediaTypeBDRE isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeBDRE forKey:@"DRDeviceMediaTypeBDRE"]; else NSLog([@"Can't initialize DRDeviceMediaTypeBDRE with object " stringByAppendingString:[DRDeviceMediaTypeBDRE description]]);
if ([DRDeviceMediaTypeBDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeBDROM forKey:@"DRDeviceMediaTypeBDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeBDROM with object " stringByAppendingString:[DRDeviceMediaTypeBDROM description]]);
if ([DRDeviceMediaTypeCDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeCDR forKey:@"DRDeviceMediaTypeCDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeCDR with object " stringByAppendingString:[DRDeviceMediaTypeCDR description]]);
if ([DRDeviceMediaTypeCDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeCDROM forKey:@"DRDeviceMediaTypeCDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeCDROM with object " stringByAppendingString:[DRDeviceMediaTypeCDROM description]]);
if ([DRDeviceMediaTypeCDRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeCDRW forKey:@"DRDeviceMediaTypeCDRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeCDRW with object " stringByAppendingString:[DRDeviceMediaTypeCDRW description]]);
if ([DRDeviceMediaTypeDVDPlusR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusR forKey:@"DRDeviceMediaTypeDVDPlusR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusR with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusR description]]);
if ([DRDeviceMediaTypeDVDPlusRDoubleLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusRDoubleLayer forKey:@"DRDeviceMediaTypeDVDPlusRDoubleLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusRDoubleLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusRDoubleLayer description]]);
if ([DRDeviceMediaTypeDVDPlusRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusRW forKey:@"DRDeviceMediaTypeDVDPlusRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusRW with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusRW description]]);
if ([DRDeviceMediaTypeDVDPlusRWDoubleLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDPlusRWDoubleLayer forKey:@"DRDeviceMediaTypeDVDPlusRWDoubleLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDPlusRWDoubleLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDPlusRWDoubleLayer description]]);
if ([DRDeviceMediaTypeDVDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDR forKey:@"DRDeviceMediaTypeDVDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDR with object " stringByAppendingString:[DRDeviceMediaTypeDVDR description]]);
if ([DRDeviceMediaTypeDVDRAM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRAM forKey:@"DRDeviceMediaTypeDVDRAM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRAM with object " stringByAppendingString:[DRDeviceMediaTypeDVDRAM description]]);
if ([DRDeviceMediaTypeDVDRDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRDualLayer forKey:@"DRDeviceMediaTypeDVDRDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDRDualLayer description]]);
if ([DRDeviceMediaTypeDVDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDROM forKey:@"DRDeviceMediaTypeDVDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDROM with object " stringByAppendingString:[DRDeviceMediaTypeDVDROM description]]);
if ([DRDeviceMediaTypeDVDRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRW forKey:@"DRDeviceMediaTypeDVDRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRW with object " stringByAppendingString:[DRDeviceMediaTypeDVDRW description]]);
if ([DRDeviceMediaTypeDVDRWDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeDVDRWDualLayer forKey:@"DRDeviceMediaTypeDVDRWDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeDVDRWDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeDVDRWDualLayer description]]);
if ([DRDeviceMediaTypeHDDVDR isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDR forKey:@"DRDeviceMediaTypeHDDVDR"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDR with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDR description]]);
if ([DRDeviceMediaTypeHDDVDRAM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRAM forKey:@"DRDeviceMediaTypeHDDVDRAM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRAM with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRAM description]]);
if ([DRDeviceMediaTypeHDDVDRDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRDualLayer forKey:@"DRDeviceMediaTypeHDDVDRDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRDualLayer description]]);
if ([DRDeviceMediaTypeHDDVDROM isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDROM forKey:@"DRDeviceMediaTypeHDDVDROM"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDROM with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDROM description]]);
if ([DRDeviceMediaTypeHDDVDRW isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRW forKey:@"DRDeviceMediaTypeHDDVDRW"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRW with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRW description]]);
if ([DRDeviceMediaTypeHDDVDRWDualLayer isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeHDDVDRWDualLayer forKey:@"DRDeviceMediaTypeHDDVDRWDualLayer"]; else NSLog([@"Can't initialize DRDeviceMediaTypeHDDVDRWDualLayer with object " stringByAppendingString:[DRDeviceMediaTypeHDDVDRWDualLayer description]]);
if ([DRDeviceMediaTypeKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeKey forKey:@"DRDeviceMediaTypeKey"]; else NSLog([@"Can't initialize DRDeviceMediaTypeKey with object " stringByAppendingString:[DRDeviceMediaTypeKey description]]);
if ([DRDeviceMediaTypeUnknown isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaTypeUnknown forKey:@"DRDeviceMediaTypeUnknown"]; else NSLog([@"Can't initialize DRDeviceMediaTypeUnknown with object " stringByAppendingString:[DRDeviceMediaTypeUnknown description]]);
if ([DRDeviceMediaUsedSpaceKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceMediaUsedSpaceKey forKey:@"DRDeviceMediaUsedSpaceKey"]; else NSLog([@"Can't initialize DRDeviceMediaUsedSpaceKey with object " stringByAppendingString:[DRDeviceMediaUsedSpaceKey description]]);
if ([DRDevicePhysicalInterconnectATAPI isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectATAPI forKey:@"DRDevicePhysicalInterconnectATAPI"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectATAPI with object " stringByAppendingString:[DRDevicePhysicalInterconnectATAPI description]]);
if ([DRDevicePhysicalInterconnectFibreChannel isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectFibreChannel forKey:@"DRDevicePhysicalInterconnectFibreChannel"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectFibreChannel with object " stringByAppendingString:[DRDevicePhysicalInterconnectFibreChannel description]]);
if ([DRDevicePhysicalInterconnectFireWire isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectFireWire forKey:@"DRDevicePhysicalInterconnectFireWire"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectFireWire with object " stringByAppendingString:[DRDevicePhysicalInterconnectFireWire description]]);
if ([DRDevicePhysicalInterconnectKey isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectKey forKey:@"DRDevicePhysicalInterconnectKey"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectKey with object " stringByAppendingString:[DRDevicePhysicalInterconnectKey description]]);
if ([DRDevicePhysicalInterconnectLocationExternal isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationExternal forKey:@"DRDevicePhysicalInterconnectLocationExternal"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationExternal with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationExternal description]]);
if ([DRDevicePhysicalInterconnectLocationInternal isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationInternal forKey:@"DRDevicePhysicalInterconnectLocationInternal"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationInternal with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationInternal description]]);
if ([DRDevicePhysicalInterconnectLocationKey isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationKey forKey:@"DRDevicePhysicalInterconnectLocationKey"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationKey with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationKey description]]);
if ([DRDevicePhysicalInterconnectLocationUnknown isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectLocationUnknown forKey:@"DRDevicePhysicalInterconnectLocationUnknown"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectLocationUnknown with object " stringByAppendingString:[DRDevicePhysicalInterconnectLocationUnknown description]]);
if ([DRDevicePhysicalInterconnectSCSI isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectSCSI forKey:@"DRDevicePhysicalInterconnectSCSI"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectSCSI with object " stringByAppendingString:[DRDevicePhysicalInterconnectSCSI description]]);
if ([DRDevicePhysicalInterconnectUSB isKindOfClass:[NSString class]]) [d setObject:DRDevicePhysicalInterconnectUSB forKey:@"DRDevicePhysicalInterconnectUSB"]; else NSLog([@"Can't initialize DRDevicePhysicalInterconnectUSB with object " stringByAppendingString:[DRDevicePhysicalInterconnectUSB description]]);
if ([DRDeviceProductNameKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceProductNameKey forKey:@"DRDeviceProductNameKey"]; else NSLog([@"Can't initialize DRDeviceProductNameKey with object " stringByAppendingString:[DRDeviceProductNameKey description]]);
if ([DRDeviceStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:DRDeviceStatusChangedNotification forKey:@"DRDeviceStatusChangedNotification"]; else NSLog([@"Can't initialize DRDeviceStatusChangedNotification with object " stringByAppendingString:[DRDeviceStatusChangedNotification description]]);
if ([DRDeviceSupportLevelAppleShipping isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelAppleShipping forKey:@"DRDeviceSupportLevelAppleShipping"]; else NSLog([@"Can't initialize DRDeviceSupportLevelAppleShipping with object " stringByAppendingString:[DRDeviceSupportLevelAppleShipping description]]);
if ([DRDeviceSupportLevelAppleSupported isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelAppleSupported forKey:@"DRDeviceSupportLevelAppleSupported"]; else NSLog([@"Can't initialize DRDeviceSupportLevelAppleSupported with object " stringByAppendingString:[DRDeviceSupportLevelAppleSupported description]]);
if ([DRDeviceSupportLevelKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelKey forKey:@"DRDeviceSupportLevelKey"]; else NSLog([@"Can't initialize DRDeviceSupportLevelKey with object " stringByAppendingString:[DRDeviceSupportLevelKey description]]);
if ([DRDeviceSupportLevelNone isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelNone forKey:@"DRDeviceSupportLevelNone"]; else NSLog([@"Can't initialize DRDeviceSupportLevelNone with object " stringByAppendingString:[DRDeviceSupportLevelNone description]]);
if ([DRDeviceSupportLevelUnsupported isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelUnsupported forKey:@"DRDeviceSupportLevelUnsupported"]; else NSLog([@"Can't initialize DRDeviceSupportLevelUnsupported with object " stringByAppendingString:[DRDeviceSupportLevelUnsupported description]]);
if ([DRDeviceSupportLevelVendorSupported isKindOfClass:[NSString class]]) [d setObject:DRDeviceSupportLevelVendorSupported forKey:@"DRDeviceSupportLevelVendorSupported"]; else NSLog([@"Can't initialize DRDeviceSupportLevelVendorSupported with object " stringByAppendingString:[DRDeviceSupportLevelVendorSupported description]]);
if ([DRDeviceTrackInfoKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceTrackInfoKey forKey:@"DRDeviceTrackInfoKey"]; else NSLog([@"Can't initialize DRDeviceTrackInfoKey with object " stringByAppendingString:[DRDeviceTrackInfoKey description]]);
if ([DRDeviceTrackRefsKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceTrackRefsKey forKey:@"DRDeviceTrackRefsKey"]; else NSLog([@"Can't initialize DRDeviceTrackRefsKey with object " stringByAppendingString:[DRDeviceTrackRefsKey description]]);
if ([DRDeviceVendorNameKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceVendorNameKey forKey:@"DRDeviceVendorNameKey"]; else NSLog([@"Can't initialize DRDeviceVendorNameKey with object " stringByAppendingString:[DRDeviceVendorNameKey description]]);
if ([DRDeviceWriteBufferSizeKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceWriteBufferSizeKey forKey:@"DRDeviceWriteBufferSizeKey"]; else NSLog([@"Can't initialize DRDeviceWriteBufferSizeKey with object " stringByAppendingString:[DRDeviceWriteBufferSizeKey description]]);
if ([DRDeviceWriteCapabilitiesKey isKindOfClass:[NSString class]]) [d setObject:DRDeviceWriteCapabilitiesKey forKey:@"DRDeviceWriteCapabilitiesKey"]; else NSLog([@"Can't initialize DRDeviceWriteCapabilitiesKey with object " stringByAppendingString:[DRDeviceWriteCapabilitiesKey description]]);
if ([DREffectiveDate isKindOfClass:[NSString class]]) [d setObject:DREffectiveDate forKey:@"DREffectiveDate"]; else NSLog([@"Can't initialize DREffectiveDate with object " stringByAppendingString:[DREffectiveDate description]]);
if ([DREraseStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:DREraseStatusChangedNotification forKey:@"DREraseStatusChangedNotification"]; else NSLog([@"Can't initialize DREraseStatusChangedNotification with object " stringByAppendingString:[DREraseStatusChangedNotification description]]);
if ([DREraseTypeComplete isKindOfClass:[NSString class]]) [d setObject:DREraseTypeComplete forKey:@"DREraseTypeComplete"]; else NSLog([@"Can't initialize DREraseTypeComplete with object " stringByAppendingString:[DREraseTypeComplete description]]);
if ([DREraseTypeKey isKindOfClass:[NSString class]]) [d setObject:DREraseTypeKey forKey:@"DREraseTypeKey"]; else NSLog([@"Can't initialize DREraseTypeKey with object " stringByAppendingString:[DREraseTypeKey description]]);
if ([DREraseTypeQuick isKindOfClass:[NSString class]]) [d setObject:DREraseTypeQuick forKey:@"DREraseTypeQuick"]; else NSLog([@"Can't initialize DREraseTypeQuick with object " stringByAppendingString:[DREraseTypeQuick description]]);
if ([DRErrorStatusAdditionalSenseStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusAdditionalSenseStringKey forKey:@"DRErrorStatusAdditionalSenseStringKey"]; else NSLog([@"Can't initialize DRErrorStatusAdditionalSenseStringKey with object " stringByAppendingString:[DRErrorStatusAdditionalSenseStringKey description]]);
if ([DRErrorStatusErrorInfoStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusErrorInfoStringKey forKey:@"DRErrorStatusErrorInfoStringKey"]; else NSLog([@"Can't initialize DRErrorStatusErrorInfoStringKey with object " stringByAppendingString:[DRErrorStatusErrorInfoStringKey description]]);
if ([DRErrorStatusErrorKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusErrorKey forKey:@"DRErrorStatusErrorKey"]; else NSLog([@"Can't initialize DRErrorStatusErrorKey with object " stringByAppendingString:[DRErrorStatusErrorKey description]]);
if ([DRErrorStatusErrorStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusErrorStringKey forKey:@"DRErrorStatusErrorStringKey"]; else NSLog([@"Can't initialize DRErrorStatusErrorStringKey with object " stringByAppendingString:[DRErrorStatusErrorStringKey description]]);
if ([DRErrorStatusKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusKey forKey:@"DRErrorStatusKey"]; else NSLog([@"Can't initialize DRErrorStatusKey with object " stringByAppendingString:[DRErrorStatusKey description]]);
if ([DRErrorStatusSenseCodeStringKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusSenseCodeStringKey forKey:@"DRErrorStatusSenseCodeStringKey"]; else NSLog([@"Can't initialize DRErrorStatusSenseCodeStringKey with object " stringByAppendingString:[DRErrorStatusSenseCodeStringKey description]]);
if ([DRErrorStatusSenseKey isKindOfClass:[NSString class]]) [d setObject:DRErrorStatusSenseKey forKey:@"DRErrorStatusSenseKey"]; else NSLog([@"Can't initialize DRErrorStatusSenseKey with object " stringByAppendingString:[DRErrorStatusSenseKey description]]);
if ([DRExpirationDate isKindOfClass:[NSString class]]) [d setObject:DRExpirationDate forKey:@"DRExpirationDate"]; else NSLog([@"Can't initialize DRExpirationDate with object " stringByAppendingString:[DRExpirationDate description]]);
if ([DRFreeBlocksKey isKindOfClass:[NSString class]]) [d setObject:DRFreeBlocksKey forKey:@"DRFreeBlocksKey"]; else NSLog([@"Can't initialize DRFreeBlocksKey with object " stringByAppendingString:[DRFreeBlocksKey description]]);
if ([DRHFSPlus isKindOfClass:[NSString class]]) [d setObject:DRHFSPlus forKey:@"DRHFSPlus"]; else NSLog([@"Can't initialize DRHFSPlus with object " stringByAppendingString:[DRHFSPlus description]]);
if ([DRHFSPlusCatalogNodeID isKindOfClass:[NSString class]]) [d setObject:DRHFSPlusCatalogNodeID forKey:@"DRHFSPlusCatalogNodeID"]; else NSLog([@"Can't initialize DRHFSPlusCatalogNodeID with object " stringByAppendingString:[DRHFSPlusCatalogNodeID description]]);
if ([DRHFSPlusTextEncodingHint isKindOfClass:[NSString class]]) [d setObject:DRHFSPlusTextEncodingHint forKey:@"DRHFSPlusTextEncodingHint"]; else NSLog([@"Can't initialize DRHFSPlusTextEncodingHint with object " stringByAppendingString:[DRHFSPlusTextEncodingHint description]]);
if ([DRISO9660 isKindOfClass:[NSString class]]) [d setObject:DRISO9660 forKey:@"DRISO9660"]; else NSLog([@"Can't initialize DRISO9660 with object " stringByAppendingString:[DRISO9660 description]]);
if ([DRISO9660LevelOne isKindOfClass:[NSString class]]) [d setObject:DRISO9660LevelOne forKey:@"DRISO9660LevelOne"]; else NSLog([@"Can't initialize DRISO9660LevelOne with object " stringByAppendingString:[DRISO9660LevelOne description]]);
if ([DRISO9660LevelTwo isKindOfClass:[NSString class]]) [d setObject:DRISO9660LevelTwo forKey:@"DRISO9660LevelTwo"]; else NSLog([@"Can't initialize DRISO9660LevelTwo with object " stringByAppendingString:[DRISO9660LevelTwo description]]);
if ([DRISO9660VersionNumber isKindOfClass:[NSString class]]) [d setObject:DRISO9660VersionNumber forKey:@"DRISO9660VersionNumber"]; else NSLog([@"Can't initialize DRISO9660VersionNumber with object " stringByAppendingString:[DRISO9660VersionNumber description]]);
if ([DRISOLevel isKindOfClass:[NSString class]]) [d setObject:DRISOLevel forKey:@"DRISOLevel"]; else NSLog([@"Can't initialize DRISOLevel with object " stringByAppendingString:[DRISOLevel description]]);
if ([DRISOMacExtensions isKindOfClass:[NSString class]]) [d setObject:DRISOMacExtensions forKey:@"DRISOMacExtensions"]; else NSLog([@"Can't initialize DRISOMacExtensions with object " stringByAppendingString:[DRISOMacExtensions description]]);
if ([DRISORockRidgeExtensions isKindOfClass:[NSString class]]) [d setObject:DRISORockRidgeExtensions forKey:@"DRISORockRidgeExtensions"]; else NSLog([@"Can't initialize DRISORockRidgeExtensions with object " stringByAppendingString:[DRISORockRidgeExtensions description]]);
if ([DRIndexPointsKey isKindOfClass:[NSString class]]) [d setObject:DRIndexPointsKey forKey:@"DRIndexPointsKey"]; else NSLog([@"Can't initialize DRIndexPointsKey with object " stringByAppendingString:[DRIndexPointsKey description]]);
if ([DRInvisible isKindOfClass:[NSString class]]) [d setObject:DRInvisible forKey:@"DRInvisible"]; else NSLog([@"Can't initialize DRInvisible with object " stringByAppendingString:[DRInvisible description]]);
if ([DRJoliet isKindOfClass:[NSString class]]) [d setObject:DRJoliet forKey:@"DRJoliet"]; else NSLog([@"Can't initialize DRJoliet with object " stringByAppendingString:[DRJoliet description]]);
if ([DRLinkTypeFinderAlias isKindOfClass:[NSString class]]) [d setObject:DRLinkTypeFinderAlias forKey:@"DRLinkTypeFinderAlias"]; else NSLog([@"Can't initialize DRLinkTypeFinderAlias with object " stringByAppendingString:[DRLinkTypeFinderAlias description]]);
if ([DRLinkTypeHardLink isKindOfClass:[NSString class]]) [d setObject:DRLinkTypeHardLink forKey:@"DRLinkTypeHardLink"]; else NSLog([@"Can't initialize DRLinkTypeHardLink with object " stringByAppendingString:[DRLinkTypeHardLink description]]);
if ([DRLinkTypeSymbolicLink isKindOfClass:[NSString class]]) [d setObject:DRLinkTypeSymbolicLink forKey:@"DRLinkTypeSymbolicLink"]; else NSLog([@"Can't initialize DRLinkTypeSymbolicLink with object " stringByAppendingString:[DRLinkTypeSymbolicLink description]]);
if ([DRMacExtendedFinderFlags isKindOfClass:[NSString class]]) [d setObject:DRMacExtendedFinderFlags forKey:@"DRMacExtendedFinderFlags"]; else NSLog([@"Can't initialize DRMacExtendedFinderFlags with object " stringByAppendingString:[DRMacExtendedFinderFlags description]]);
if ([DRMacFileCreator isKindOfClass:[NSString class]]) [d setObject:DRMacFileCreator forKey:@"DRMacFileCreator"]; else NSLog([@"Can't initialize DRMacFileCreator with object " stringByAppendingString:[DRMacFileCreator description]]);
if ([DRMacFileType isKindOfClass:[NSString class]]) [d setObject:DRMacFileType forKey:@"DRMacFileType"]; else NSLog([@"Can't initialize DRMacFileType with object " stringByAppendingString:[DRMacFileType description]]);
if ([DRMacFinderFlags isKindOfClass:[NSString class]]) [d setObject:DRMacFinderFlags forKey:@"DRMacFinderFlags"]; else NSLog([@"Can't initialize DRMacFinderFlags with object " stringByAppendingString:[DRMacFinderFlags description]]);
if ([DRMacFinderHideExtension isKindOfClass:[NSString class]]) [d setObject:DRMacFinderHideExtension forKey:@"DRMacFinderHideExtension"]; else NSLog([@"Can't initialize DRMacFinderHideExtension with object " stringByAppendingString:[DRMacFinderHideExtension description]]);
if ([DRMacIconLocation isKindOfClass:[NSString class]]) [d setObject:DRMacIconLocation forKey:@"DRMacIconLocation"]; else NSLog([@"Can't initialize DRMacIconLocation with object " stringByAppendingString:[DRMacIconLocation description]]);
if ([DRMacScrollPosition isKindOfClass:[NSString class]]) [d setObject:DRMacScrollPosition forKey:@"DRMacScrollPosition"]; else NSLog([@"Can't initialize DRMacScrollPosition with object " stringByAppendingString:[DRMacScrollPosition description]]);
if ([DRMacWindowBounds isKindOfClass:[NSString class]]) [d setObject:DRMacWindowBounds forKey:@"DRMacWindowBounds"]; else NSLog([@"Can't initialize DRMacWindowBounds with object " stringByAppendingString:[DRMacWindowBounds description]]);
if ([DRMacWindowView isKindOfClass:[NSString class]]) [d setObject:DRMacWindowView forKey:@"DRMacWindowView"]; else NSLog([@"Can't initialize DRMacWindowView with object " stringByAppendingString:[DRMacWindowView description]]);
if ([DRMaxBurnSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRMaxBurnSpeedKey forKey:@"DRMaxBurnSpeedKey"]; else NSLog([@"Can't initialize DRMaxBurnSpeedKey with object " stringByAppendingString:[DRMaxBurnSpeedKey description]]);
if ([DRMediaCatalogNumberKey isKindOfClass:[NSString class]]) [d setObject:DRMediaCatalogNumberKey forKey:@"DRMediaCatalogNumberKey"]; else NSLog([@"Can't initialize DRMediaCatalogNumberKey with object " stringByAppendingString:[DRMediaCatalogNumberKey description]]);
if ([DRNextWritableAddressKey isKindOfClass:[NSString class]]) [d setObject:DRNextWritableAddressKey forKey:@"DRNextWritableAddressKey"]; else NSLog([@"Can't initialize DRNextWritableAddressKey with object " stringByAppendingString:[DRNextWritableAddressKey description]]);
if ([DRPosixFileMode isKindOfClass:[NSString class]]) [d setObject:DRPosixFileMode forKey:@"DRPosixFileMode"]; else NSLog([@"Can't initialize DRPosixFileMode with object " stringByAppendingString:[DRPosixFileMode description]]);
if ([DRPosixGID isKindOfClass:[NSString class]]) [d setObject:DRPosixGID forKey:@"DRPosixGID"]; else NSLog([@"Can't initialize DRPosixGID with object " stringByAppendingString:[DRPosixGID description]]);
if ([DRPosixUID isKindOfClass:[NSString class]]) [d setObject:DRPosixUID forKey:@"DRPosixUID"]; else NSLog([@"Can't initialize DRPosixUID with object " stringByAppendingString:[DRPosixUID description]]);
if ([DRPreGapIsRequiredKey isKindOfClass:[NSString class]]) [d setObject:DRPreGapIsRequiredKey forKey:@"DRPreGapIsRequiredKey"]; else NSLog([@"Can't initialize DRPreGapIsRequiredKey with object " stringByAppendingString:[DRPreGapIsRequiredKey description]]);
if ([DRPreGapLengthKey isKindOfClass:[NSString class]]) [d setObject:DRPreGapLengthKey forKey:@"DRPreGapLengthKey"]; else NSLog([@"Can't initialize DRPreGapLengthKey with object " stringByAppendingString:[DRPreGapLengthKey description]]);
if ([DRPublisher isKindOfClass:[NSString class]]) [d setObject:DRPublisher forKey:@"DRPublisher"]; else NSLog([@"Can't initialize DRPublisher with object " stringByAppendingString:[DRPublisher description]]);
if ([DRRecordingDate isKindOfClass:[NSString class]]) [d setObject:DRRecordingDate forKey:@"DRRecordingDate"]; else NSLog([@"Can't initialize DRRecordingDate with object " stringByAppendingString:[DRRecordingDate description]]);
if ([DRSCMSCopyrightFree isKindOfClass:[NSString class]]) [d setObject:DRSCMSCopyrightFree forKey:@"DRSCMSCopyrightFree"]; else NSLog([@"Can't initialize DRSCMSCopyrightFree with object " stringByAppendingString:[DRSCMSCopyrightFree description]]);
if ([DRSCMSCopyrightProtectedCopy isKindOfClass:[NSString class]]) [d setObject:DRSCMSCopyrightProtectedCopy forKey:@"DRSCMSCopyrightProtectedCopy"]; else NSLog([@"Can't initialize DRSCMSCopyrightProtectedCopy with object " stringByAppendingString:[DRSCMSCopyrightProtectedCopy description]]);
if ([DRSCMSCopyrightProtectedOriginal isKindOfClass:[NSString class]]) [d setObject:DRSCMSCopyrightProtectedOriginal forKey:@"DRSCMSCopyrightProtectedOriginal"]; else NSLog([@"Can't initialize DRSCMSCopyrightProtectedOriginal with object " stringByAppendingString:[DRSCMSCopyrightProtectedOriginal description]]);
if ([DRSerialCopyManagementStateKey isKindOfClass:[NSString class]]) [d setObject:DRSerialCopyManagementStateKey forKey:@"DRSerialCopyManagementStateKey"]; else NSLog([@"Can't initialize DRSerialCopyManagementStateKey with object " stringByAppendingString:[DRSerialCopyManagementStateKey description]]);
if ([DRSessionFormatKey isKindOfClass:[NSString class]]) [d setObject:DRSessionFormatKey forKey:@"DRSessionFormatKey"]; else NSLog([@"Can't initialize DRSessionFormatKey with object " stringByAppendingString:[DRSessionFormatKey description]]);
if ([DRSessionNumberKey isKindOfClass:[NSString class]]) [d setObject:DRSessionNumberKey forKey:@"DRSessionNumberKey"]; else NSLog([@"Can't initialize DRSessionNumberKey with object " stringByAppendingString:[DRSessionNumberKey description]]);
if ([DRStatusCurrentSessionKey isKindOfClass:[NSString class]]) [d setObject:DRStatusCurrentSessionKey forKey:@"DRStatusCurrentSessionKey"]; else NSLog([@"Can't initialize DRStatusCurrentSessionKey with object " stringByAppendingString:[DRStatusCurrentSessionKey description]]);
if ([DRStatusCurrentSpeedKey isKindOfClass:[NSString class]]) [d setObject:DRStatusCurrentSpeedKey forKey:@"DRStatusCurrentSpeedKey"]; else NSLog([@"Can't initialize DRStatusCurrentSpeedKey with object " stringByAppendingString:[DRStatusCurrentSpeedKey description]]);
if ([DRStatusCurrentTrackKey isKindOfClass:[NSString class]]) [d setObject:DRStatusCurrentTrackKey forKey:@"DRStatusCurrentTrackKey"]; else NSLog([@"Can't initialize DRStatusCurrentTrackKey with object " stringByAppendingString:[DRStatusCurrentTrackKey description]]);
if ([DRStatusEraseTypeKey isKindOfClass:[NSString class]]) [d setObject:DRStatusEraseTypeKey forKey:@"DRStatusEraseTypeKey"]; else NSLog([@"Can't initialize DRStatusEraseTypeKey with object " stringByAppendingString:[DRStatusEraseTypeKey description]]);
if ([DRStatusPercentCompleteKey isKindOfClass:[NSString class]]) [d setObject:DRStatusPercentCompleteKey forKey:@"DRStatusPercentCompleteKey"]; else NSLog([@"Can't initialize DRStatusPercentCompleteKey with object " stringByAppendingString:[DRStatusPercentCompleteKey description]]);
if ([DRStatusProgressCurrentKPS isKindOfClass:[NSString class]]) [d setObject:DRStatusProgressCurrentKPS forKey:@"DRStatusProgressCurrentKPS"]; else NSLog([@"Can't initialize DRStatusProgressCurrentKPS with object " stringByAppendingString:[DRStatusProgressCurrentKPS description]]);
if ([DRStatusProgressCurrentXFactor isKindOfClass:[NSString class]]) [d setObject:DRStatusProgressCurrentXFactor forKey:@"DRStatusProgressCurrentXFactor"]; else NSLog([@"Can't initialize DRStatusProgressCurrentXFactor with object " stringByAppendingString:[DRStatusProgressCurrentXFactor description]]);
if ([DRStatusProgressInfoKey isKindOfClass:[NSString class]]) [d setObject:DRStatusProgressInfoKey forKey:@"DRStatusProgressInfoKey"]; else NSLog([@"Can't initialize DRStatusProgressInfoKey with object " stringByAppendingString:[DRStatusProgressInfoKey description]]);
if ([DRStatusStateDone isKindOfClass:[NSString class]]) [d setObject:DRStatusStateDone forKey:@"DRStatusStateDone"]; else NSLog([@"Can't initialize DRStatusStateDone with object " stringByAppendingString:[DRStatusStateDone description]]);
if ([DRStatusStateErasing isKindOfClass:[NSString class]]) [d setObject:DRStatusStateErasing forKey:@"DRStatusStateErasing"]; else NSLog([@"Can't initialize DRStatusStateErasing with object " stringByAppendingString:[DRStatusStateErasing description]]);
if ([DRStatusStateFailed isKindOfClass:[NSString class]]) [d setObject:DRStatusStateFailed forKey:@"DRStatusStateFailed"]; else NSLog([@"Can't initialize DRStatusStateFailed with object " stringByAppendingString:[DRStatusStateFailed description]]);
if ([DRStatusStateFinishing isKindOfClass:[NSString class]]) [d setObject:DRStatusStateFinishing forKey:@"DRStatusStateFinishing"]; else NSLog([@"Can't initialize DRStatusStateFinishing with object " stringByAppendingString:[DRStatusStateFinishing description]]);
if ([DRStatusStateKey isKindOfClass:[NSString class]]) [d setObject:DRStatusStateKey forKey:@"DRStatusStateKey"]; else NSLog([@"Can't initialize DRStatusStateKey with object " stringByAppendingString:[DRStatusStateKey description]]);
if ([DRStatusStateNone isKindOfClass:[NSString class]]) [d setObject:DRStatusStateNone forKey:@"DRStatusStateNone"]; else NSLog([@"Can't initialize DRStatusStateNone with object " stringByAppendingString:[DRStatusStateNone description]]);
if ([DRStatusStatePreparing isKindOfClass:[NSString class]]) [d setObject:DRStatusStatePreparing forKey:@"DRStatusStatePreparing"]; else NSLog([@"Can't initialize DRStatusStatePreparing with object " stringByAppendingString:[DRStatusStatePreparing description]]);
if ([DRStatusStateSessionClose isKindOfClass:[NSString class]]) [d setObject:DRStatusStateSessionClose forKey:@"DRStatusStateSessionClose"]; else NSLog([@"Can't initialize DRStatusStateSessionClose with object " stringByAppendingString:[DRStatusStateSessionClose description]]);
if ([DRStatusStateSessionOpen isKindOfClass:[NSString class]]) [d setObject:DRStatusStateSessionOpen forKey:@"DRStatusStateSessionOpen"]; else NSLog([@"Can't initialize DRStatusStateSessionOpen with object " stringByAppendingString:[DRStatusStateSessionOpen description]]);
if ([DRStatusStateTrackClose isKindOfClass:[NSString class]]) [d setObject:DRStatusStateTrackClose forKey:@"DRStatusStateTrackClose"]; else NSLog([@"Can't initialize DRStatusStateTrackClose with object " stringByAppendingString:[DRStatusStateTrackClose description]]);
if ([DRStatusStateTrackOpen isKindOfClass:[NSString class]]) [d setObject:DRStatusStateTrackOpen forKey:@"DRStatusStateTrackOpen"]; else NSLog([@"Can't initialize DRStatusStateTrackOpen with object " stringByAppendingString:[DRStatusStateTrackOpen description]]);
if ([DRStatusStateTrackWrite isKindOfClass:[NSString class]]) [d setObject:DRStatusStateTrackWrite forKey:@"DRStatusStateTrackWrite"]; else NSLog([@"Can't initialize DRStatusStateTrackWrite with object " stringByAppendingString:[DRStatusStateTrackWrite description]]);
if ([DRStatusStateVerifying isKindOfClass:[NSString class]]) [d setObject:DRStatusStateVerifying forKey:@"DRStatusStateVerifying"]; else NSLog([@"Can't initialize DRStatusStateVerifying with object " stringByAppendingString:[DRStatusStateVerifying description]]);
if ([DRStatusTotalSessionsKey isKindOfClass:[NSString class]]) [d setObject:DRStatusTotalSessionsKey forKey:@"DRStatusTotalSessionsKey"]; else NSLog([@"Can't initialize DRStatusTotalSessionsKey with object " stringByAppendingString:[DRStatusTotalSessionsKey description]]);
if ([DRStatusTotalTracksKey isKindOfClass:[NSString class]]) [d setObject:DRStatusTotalTracksKey forKey:@"DRStatusTotalTracksKey"]; else NSLog([@"Can't initialize DRStatusTotalTracksKey with object " stringByAppendingString:[DRStatusTotalTracksKey description]]);
if ([DRSubchannelDataFormKey isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormKey forKey:@"DRSubchannelDataFormKey"]; else NSLog([@"Can't initialize DRSubchannelDataFormKey with object " stringByAppendingString:[DRSubchannelDataFormKey description]]);
if ([DRSubchannelDataFormNone isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormNone forKey:@"DRSubchannelDataFormNone"]; else NSLog([@"Can't initialize DRSubchannelDataFormNone with object " stringByAppendingString:[DRSubchannelDataFormNone description]]);
if ([DRSubchannelDataFormPack isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormPack forKey:@"DRSubchannelDataFormPack"]; else NSLog([@"Can't initialize DRSubchannelDataFormPack with object " stringByAppendingString:[DRSubchannelDataFormPack description]]);
if ([DRSubchannelDataFormRaw isKindOfClass:[NSString class]]) [d setObject:DRSubchannelDataFormRaw forKey:@"DRSubchannelDataFormRaw"]; else NSLog([@"Can't initialize DRSubchannelDataFormRaw with object " stringByAppendingString:[DRSubchannelDataFormRaw description]]);
if ([DRSuppressMacSpecificFiles isKindOfClass:[NSString class]]) [d setObject:DRSuppressMacSpecificFiles forKey:@"DRSuppressMacSpecificFiles"]; else NSLog([@"Can't initialize DRSuppressMacSpecificFiles with object " stringByAppendingString:[DRSuppressMacSpecificFiles description]]);
if ([DRSynchronousBehaviorKey isKindOfClass:[NSString class]]) [d setObject:DRSynchronousBehaviorKey forKey:@"DRSynchronousBehaviorKey"]; else NSLog([@"Can't initialize DRSynchronousBehaviorKey with object " stringByAppendingString:[DRSynchronousBehaviorKey description]]);
if ([DRSystemIdentifier isKindOfClass:[NSString class]]) [d setObject:DRSystemIdentifier forKey:@"DRSystemIdentifier"]; else NSLog([@"Can't initialize DRSystemIdentifier with object " stringByAppendingString:[DRSystemIdentifier description]]);
if ([DRTrackISRCKey isKindOfClass:[NSString class]]) [d setObject:DRTrackISRCKey forKey:@"DRTrackISRCKey"]; else NSLog([@"Can't initialize DRTrackISRCKey with object " stringByAppendingString:[DRTrackISRCKey description]]);
if ([DRTrackIsEmptyKey isKindOfClass:[NSString class]]) [d setObject:DRTrackIsEmptyKey forKey:@"DRTrackIsEmptyKey"]; else NSLog([@"Can't initialize DRTrackIsEmptyKey with object " stringByAppendingString:[DRTrackIsEmptyKey description]]);
if ([DRTrackLengthKey isKindOfClass:[NSString class]]) [d setObject:DRTrackLengthKey forKey:@"DRTrackLengthKey"]; else NSLog([@"Can't initialize DRTrackLengthKey with object " stringByAppendingString:[DRTrackLengthKey description]]);
if ([DRTrackModeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackModeKey forKey:@"DRTrackModeKey"]; else NSLog([@"Can't initialize DRTrackModeKey with object " stringByAppendingString:[DRTrackModeKey description]]);
if ([DRTrackNumberKey isKindOfClass:[NSString class]]) [d setObject:DRTrackNumberKey forKey:@"DRTrackNumberKey"]; else NSLog([@"Can't initialize DRTrackNumberKey with object " stringByAppendingString:[DRTrackNumberKey description]]);
if ([DRTrackPacketSizeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketSizeKey forKey:@"DRTrackPacketSizeKey"]; else NSLog([@"Can't initialize DRTrackPacketSizeKey with object " stringByAppendingString:[DRTrackPacketSizeKey description]]);
if ([DRTrackPacketTypeFixed isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketTypeFixed forKey:@"DRTrackPacketTypeFixed"]; else NSLog([@"Can't initialize DRTrackPacketTypeFixed with object " stringByAppendingString:[DRTrackPacketTypeFixed description]]);
if ([DRTrackPacketTypeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketTypeKey forKey:@"DRTrackPacketTypeKey"]; else NSLog([@"Can't initialize DRTrackPacketTypeKey with object " stringByAppendingString:[DRTrackPacketTypeKey description]]);
if ([DRTrackPacketTypeVariable isKindOfClass:[NSString class]]) [d setObject:DRTrackPacketTypeVariable forKey:@"DRTrackPacketTypeVariable"]; else NSLog([@"Can't initialize DRTrackPacketTypeVariable with object " stringByAppendingString:[DRTrackPacketTypeVariable description]]);
if ([DRTrackStartAddressKey isKindOfClass:[NSString class]]) [d setObject:DRTrackStartAddressKey forKey:@"DRTrackStartAddressKey"]; else NSLog([@"Can't initialize DRTrackStartAddressKey with object " stringByAppendingString:[DRTrackStartAddressKey description]]);
if ([DRTrackTypeClosed isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeClosed forKey:@"DRTrackTypeClosed"]; else NSLog([@"Can't initialize DRTrackTypeClosed with object " stringByAppendingString:[DRTrackTypeClosed description]]);
if ([DRTrackTypeIncomplete isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeIncomplete forKey:@"DRTrackTypeIncomplete"]; else NSLog([@"Can't initialize DRTrackTypeIncomplete with object " stringByAppendingString:[DRTrackTypeIncomplete description]]);
if ([DRTrackTypeInvisible isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeInvisible forKey:@"DRTrackTypeInvisible"]; else NSLog([@"Can't initialize DRTrackTypeInvisible with object " stringByAppendingString:[DRTrackTypeInvisible description]]);
if ([DRTrackTypeKey isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeKey forKey:@"DRTrackTypeKey"]; else NSLog([@"Can't initialize DRTrackTypeKey with object " stringByAppendingString:[DRTrackTypeKey description]]);
if ([DRTrackTypeReserved isKindOfClass:[NSString class]]) [d setObject:DRTrackTypeReserved forKey:@"DRTrackTypeReserved"]; else NSLog([@"Can't initialize DRTrackTypeReserved with object " stringByAppendingString:[DRTrackTypeReserved description]]);
if ([DRUDF isKindOfClass:[NSString class]]) [d setObject:DRUDF forKey:@"DRUDF"]; else NSLog([@"Can't initialize DRUDF with object " stringByAppendingString:[DRUDF description]]);
if ([DRUDFApplicationIdentifierSuffix isKindOfClass:[NSString class]]) [d setObject:DRUDFApplicationIdentifierSuffix forKey:@"DRUDFApplicationIdentifierSuffix"]; else NSLog([@"Can't initialize DRUDFApplicationIdentifierSuffix with object " stringByAppendingString:[DRUDFApplicationIdentifierSuffix description]]);
if ([DRUDFExtendedFilePermissions isKindOfClass:[NSString class]]) [d setObject:DRUDFExtendedFilePermissions forKey:@"DRUDFExtendedFilePermissions"]; else NSLog([@"Can't initialize DRUDFExtendedFilePermissions with object " stringByAppendingString:[DRUDFExtendedFilePermissions description]]);
if ([DRUDFInterchangeLevel isKindOfClass:[NSString class]]) [d setObject:DRUDFInterchangeLevel forKey:@"DRUDFInterchangeLevel"]; else NSLog([@"Can't initialize DRUDFInterchangeLevel with object " stringByAppendingString:[DRUDFInterchangeLevel description]]);
if ([DRUDFMaxInterchangeLevel isKindOfClass:[NSString class]]) [d setObject:DRUDFMaxInterchangeLevel forKey:@"DRUDFMaxInterchangeLevel"]; else NSLog([@"Can't initialize DRUDFMaxInterchangeLevel with object " stringByAppendingString:[DRUDFMaxInterchangeLevel description]]);
if ([DRUDFMaxVolumeSequenceNumber isKindOfClass:[NSString class]]) [d setObject:DRUDFMaxVolumeSequenceNumber forKey:@"DRUDFMaxVolumeSequenceNumber"]; else NSLog([@"Can't initialize DRUDFMaxVolumeSequenceNumber with object " stringByAppendingString:[DRUDFMaxVolumeSequenceNumber description]]);
if ([DRUDFPrimaryVolumeDescriptorNumber isKindOfClass:[NSString class]]) [d setObject:DRUDFPrimaryVolumeDescriptorNumber forKey:@"DRUDFPrimaryVolumeDescriptorNumber"]; else NSLog([@"Can't initialize DRUDFPrimaryVolumeDescriptorNumber with object " stringByAppendingString:[DRUDFPrimaryVolumeDescriptorNumber description]]);
if ([DRUDFRealTimeFile isKindOfClass:[NSString class]]) [d setObject:DRUDFRealTimeFile forKey:@"DRUDFRealTimeFile"]; else NSLog([@"Can't initialize DRUDFRealTimeFile with object " stringByAppendingString:[DRUDFRealTimeFile description]]);
if ([DRUDFVersion102 isKindOfClass:[NSString class]]) [d setObject:DRUDFVersion102 forKey:@"DRUDFVersion102"]; else NSLog([@"Can't initialize DRUDFVersion102 with object " stringByAppendingString:[DRUDFVersion102 description]]);
if ([DRUDFVersion150 isKindOfClass:[NSString class]]) [d setObject:DRUDFVersion150 forKey:@"DRUDFVersion150"]; else NSLog([@"Can't initialize DRUDFVersion150 with object " stringByAppendingString:[DRUDFVersion150 description]]);
if ([DRUDFVolumeSequenceNumber isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSequenceNumber forKey:@"DRUDFVolumeSequenceNumber"]; else NSLog([@"Can't initialize DRUDFVolumeSequenceNumber with object " stringByAppendingString:[DRUDFVolumeSequenceNumber description]]);
if ([DRUDFVolumeSetIdentifier isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSetIdentifier forKey:@"DRUDFVolumeSetIdentifier"]; else NSLog([@"Can't initialize DRUDFVolumeSetIdentifier with object " stringByAppendingString:[DRUDFVolumeSetIdentifier description]]);
if ([DRUDFVolumeSetImplementationUse isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSetImplementationUse forKey:@"DRUDFVolumeSetImplementationUse"]; else NSLog([@"Can't initialize DRUDFVolumeSetImplementationUse with object " stringByAppendingString:[DRUDFVolumeSetImplementationUse description]]);
if ([DRUDFVolumeSetTimestamp isKindOfClass:[NSString class]]) [d setObject:DRUDFVolumeSetTimestamp forKey:@"DRUDFVolumeSetTimestamp"]; else NSLog([@"Can't initialize DRUDFVolumeSetTimestamp with object " stringByAppendingString:[DRUDFVolumeSetTimestamp description]]);
if ([DRUDFWriteVersion isKindOfClass:[NSString class]]) [d setObject:DRUDFWriteVersion forKey:@"DRUDFWriteVersion"]; else NSLog([@"Can't initialize DRUDFWriteVersion with object " stringByAppendingString:[DRUDFWriteVersion description]]);
if ([DRVerificationTypeChecksum isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeChecksum forKey:@"DRVerificationTypeChecksum"]; else NSLog([@"Can't initialize DRVerificationTypeChecksum with object " stringByAppendingString:[DRVerificationTypeChecksum description]]);
if ([DRVerificationTypeKey isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeKey forKey:@"DRVerificationTypeKey"]; else NSLog([@"Can't initialize DRVerificationTypeKey with object " stringByAppendingString:[DRVerificationTypeKey description]]);
if ([DRVerificationTypeNone isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeNone forKey:@"DRVerificationTypeNone"]; else NSLog([@"Can't initialize DRVerificationTypeNone with object " stringByAppendingString:[DRVerificationTypeNone description]]);
if ([DRVerificationTypeProduceAgain isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeProduceAgain forKey:@"DRVerificationTypeProduceAgain"]; else NSLog([@"Can't initialize DRVerificationTypeProduceAgain with object " stringByAppendingString:[DRVerificationTypeProduceAgain description]]);
if ([DRVerificationTypeReceiveData isKindOfClass:[NSString class]]) [d setObject:DRVerificationTypeReceiveData forKey:@"DRVerificationTypeReceiveData"]; else NSLog([@"Can't initialize DRVerificationTypeReceiveData with object " stringByAppendingString:[DRVerificationTypeReceiveData description]]);
if ([DRVolumeCheckedDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeCheckedDate forKey:@"DRVolumeCheckedDate"]; else NSLog([@"Can't initialize DRVolumeCheckedDate with object " stringByAppendingString:[DRVolumeCheckedDate description]]);
if ([DRVolumeCreationDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeCreationDate forKey:@"DRVolumeCreationDate"]; else NSLog([@"Can't initialize DRVolumeCreationDate with object " stringByAppendingString:[DRVolumeCreationDate description]]);
if ([DRVolumeEffectiveDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeEffectiveDate forKey:@"DRVolumeEffectiveDate"]; else NSLog([@"Can't initialize DRVolumeEffectiveDate with object " stringByAppendingString:[DRVolumeEffectiveDate description]]);
if ([DRVolumeExpirationDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeExpirationDate forKey:@"DRVolumeExpirationDate"]; else NSLog([@"Can't initialize DRVolumeExpirationDate with object " stringByAppendingString:[DRVolumeExpirationDate description]]);
if ([DRVolumeModificationDate isKindOfClass:[NSString class]]) [d setObject:DRVolumeModificationDate forKey:@"DRVolumeModificationDate"]; else NSLog([@"Can't initialize DRVolumeModificationDate with object " stringByAppendingString:[DRVolumeModificationDate description]]);
if ([DRVolumeSet isKindOfClass:[NSString class]]) [d setObject:DRVolumeSet forKey:@"DRVolumeSet"]; else NSLog([@"Can't initialize DRVolumeSet with object " stringByAppendingString:[DRVolumeSet description]]);
[d setObject:(NSString *)kDRAbstractFile forKey:@"kDRAbstractFile"];
[d setObject:(NSString *)kDRAccessDate forKey:@"kDRAccessDate"];
[d setObject:(NSString *)kDRAllFilesystems forKey:@"kDRAllFilesystems"];
[d setObject:(NSString *)kDRApplicationIdentifier forKey:@"kDRApplicationIdentifier"];
[d setObject:(NSString *)kDRAttributeModificationDate forKey:@"kDRAttributeModificationDate"];
[d setObject:(NSString *)kDRAudioFourChannelKey forKey:@"kDRAudioFourChannelKey"];
[d setObject:(NSString *)kDRAudioPreEmphasisKey forKey:@"kDRAudioPreEmphasisKey"];
[d setObject:(NSString *)kDRBackupDate forKey:@"kDRBackupDate"];
[d setObject:(NSString *)kDRBibliographicFile forKey:@"kDRBibliographicFile"];
[d setObject:(NSString *)kDRBlockSize forKey:@"kDRBlockSize"];
[d setObject:(NSString *)kDRBlockSizeKey forKey:@"kDRBlockSizeKey"];
[d setObject:(NSString *)kDRBlockTypeKey forKey:@"kDRBlockTypeKey"];
[d setObject:(NSString *)kDRBufferZone1DataKey forKey:@"kDRBufferZone1DataKey"];
[d setObject:(NSString *)kDRBurnAppendableKey forKey:@"kDRBurnAppendableKey"];
[d setObject:(NSString *)kDRBurnCompletionActionEject forKey:@"kDRBurnCompletionActionEject"];
[d setObject:(NSString *)kDRBurnCompletionActionKey forKey:@"kDRBurnCompletionActionKey"];
[d setObject:(NSString *)kDRBurnCompletionActionMount forKey:@"kDRBurnCompletionActionMount"];
[d setObject:(NSString *)kDRBurnDoubleLayerL0DataZoneBlocksKey forKey:@"kDRBurnDoubleLayerL0DataZoneBlocksKey"];
[d setObject:(NSString *)kDRBurnFailureActionEject forKey:@"kDRBurnFailureActionEject"];
[d setObject:(NSString *)kDRBurnFailureActionKey forKey:@"kDRBurnFailureActionKey"];
[d setObject:(NSString *)kDRBurnFailureActionNone forKey:@"kDRBurnFailureActionNone"];
[d setObject:(NSString *)kDRBurnKey forKey:@"kDRBurnKey"];
[d setObject:(NSString *)kDRBurnOverwriteDiscKey forKey:@"kDRBurnOverwriteDiscKey"];
[d setObject:(NSString *)kDRBurnRequestedSpeedKey forKey:@"kDRBurnRequestedSpeedKey"];
[d setObject:(NSString *)kDRBurnStatusChangedNotification forKey:@"kDRBurnStatusChangedNotification"];
[d setObject:(NSString *)kDRBurnStrategyBDDAO forKey:@"kDRBurnStrategyBDDAO"];
[d setObject:(NSString *)kDRBurnStrategyCDSAO forKey:@"kDRBurnStrategyCDSAO"];
[d setObject:(NSString *)kDRBurnStrategyCDTAO forKey:@"kDRBurnStrategyCDTAO"];
[d setObject:(NSString *)kDRBurnStrategyDVDDAO forKey:@"kDRBurnStrategyDVDDAO"];
[d setObject:(NSString *)kDRBurnStrategyIsRequiredKey forKey:@"kDRBurnStrategyIsRequiredKey"];
[d setObject:(NSString *)kDRBurnStrategyKey forKey:@"kDRBurnStrategyKey"];
[d setObject:(NSString *)kDRBurnTestingKey forKey:@"kDRBurnTestingKey"];
[d setObject:(NSString *)kDRBurnUnderrunProtectionKey forKey:@"kDRBurnUnderrunProtectionKey"];
[d setObject:(NSString *)kDRBurnVerifyDiscKey forKey:@"kDRBurnVerifyDiscKey"];
[d setObject:(NSString *)kDRCDTextArrangerKey forKey:@"kDRCDTextArrangerKey"];
[d setObject:(NSString *)kDRCDTextCFStringEncodingKey forKey:@"kDRCDTextCFStringEncodingKey"];
[d setObject:(NSString *)kDRCDTextCharacterCodeKey forKey:@"kDRCDTextCharacterCodeKey"];
[d setObject:(NSString *)kDRCDTextClosedKey forKey:@"kDRCDTextClosedKey"];
[d setObject:(NSString *)kDRCDTextComposerKey forKey:@"kDRCDTextComposerKey"];
[d setObject:(NSString *)kDRCDTextCopyrightAssertedForNamesKey forKey:@"kDRCDTextCopyrightAssertedForNamesKey"];
[d setObject:(NSString *)kDRCDTextCopyrightAssertedForSpecialMessagesKey forKey:@"kDRCDTextCopyrightAssertedForSpecialMessagesKey"];
[d setObject:(NSString *)kDRCDTextCopyrightAssertedForTitlesKey forKey:@"kDRCDTextCopyrightAssertedForTitlesKey"];
[d setObject:(NSString *)kDRCDTextDiscIdentKey forKey:@"kDRCDTextDiscIdentKey"];
[d setObject:(NSString *)kDRCDTextGenreCodeKey forKey:@"kDRCDTextGenreCodeKey"];
[d setObject:(NSString *)kDRCDTextGenreKey forKey:@"kDRCDTextGenreKey"];
[d setObject:(NSString *)kDRCDTextKey forKey:@"kDRCDTextKey"];
[d setObject:(NSString *)kDRCDTextLanguageKey forKey:@"kDRCDTextLanguageKey"];
[d setObject:(NSString *)kDRCDTextMCNISRCKey forKey:@"kDRCDTextMCNISRCKey"];
[d setObject:(NSString *)kDRCDTextPerformerKey forKey:@"kDRCDTextPerformerKey"];
[d setObject:(NSString *)kDRCDTextSizeKey forKey:@"kDRCDTextSizeKey"];
[d setObject:(NSString *)kDRCDTextSongwriterKey forKey:@"kDRCDTextSongwriterKey"];
[d setObject:(NSString *)kDRCDTextSpecialMessageKey forKey:@"kDRCDTextSpecialMessageKey"];
[d setObject:(NSString *)kDRCDTextTOC2Key forKey:@"kDRCDTextTOC2Key"];
[d setObject:(NSString *)kDRCDTextTOCKey forKey:@"kDRCDTextTOCKey"];
[d setObject:(NSString *)kDRCDTextTitleKey forKey:@"kDRCDTextTitleKey"];
[d setObject:(NSString *)kDRContentModificationDate forKey:@"kDRContentModificationDate"];
[d setObject:(NSString *)kDRCopyrightFile forKey:@"kDRCopyrightFile"];
[d setObject:(NSString *)kDRCreationDate forKey:@"kDRCreationDate"];
[d setObject:(NSString *)kDRDVDCopyrightInfoKey forKey:@"kDRDVDCopyrightInfoKey"];
[d setObject:(NSString *)kDRDVDTimestampKey forKey:@"kDRDVDTimestampKey"];
[d setObject:(NSString *)kDRDataFormKey forKey:@"kDRDataFormKey"];
[d setObject:(NSString *)kDRDataPreparer forKey:@"kDRDataPreparer"];
[d setObject:(NSString *)kDRDefaultDate forKey:@"kDRDefaultDate"];
[d setObject:(NSString *)kDRDeviceAppearedNotification forKey:@"kDRDeviceAppearedNotification"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedBD1x] forKey:@"kDRDeviceBurnSpeedBD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedCD1x] forKey:@"kDRDeviceBurnSpeedCD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedDVD1x] forKey:@"kDRDeviceBurnSpeedDVD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedHDDVD1x] forKey:@"kDRDeviceBurnSpeedHDDVD1x"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnSpeedMax] forKey:@"kDRDeviceBurnSpeedMax"];
[d setObject:(NSString *)kDRDeviceBurnSpeedsKey forKey:@"kDRDeviceBurnSpeedsKey"];
[d setObject:(NSString *)kDRDeviceCanTestWriteCDKey forKey:@"kDRDeviceCanTestWriteCDKey"];
[d setObject:(NSString *)kDRDeviceCanTestWriteDVDKey forKey:@"kDRDeviceCanTestWriteDVDKey"];
[d setObject:(NSString *)kDRDeviceCanUnderrunProtectCDKey forKey:@"kDRDeviceCanUnderrunProtectCDKey"];
[d setObject:(NSString *)kDRDeviceCanUnderrunProtectDVDKey forKey:@"kDRDeviceCanUnderrunProtectDVDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteBDKey forKey:@"kDRDeviceCanWriteBDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteBDREKey forKey:@"kDRDeviceCanWriteBDREKey"];
[d setObject:(NSString *)kDRDeviceCanWriteBDRKey forKey:@"kDRDeviceCanWriteBDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDKey forKey:@"kDRDeviceCanWriteCDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDRKey forKey:@"kDRDeviceCanWriteCDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDRWKey forKey:@"kDRDeviceCanWriteCDRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDRawKey forKey:@"kDRDeviceCanWriteCDRawKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDSAOKey forKey:@"kDRDeviceCanWriteCDSAOKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDTAOKey forKey:@"kDRDeviceCanWriteCDTAOKey"];
[d setObject:(NSString *)kDRDeviceCanWriteCDTextKey forKey:@"kDRDeviceCanWriteCDTextKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDDAOKey forKey:@"kDRDeviceCanWriteDVDDAOKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDKey forKey:@"kDRDeviceCanWriteDVDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRDoubleLayerKey forKey:@"kDRDeviceCanWriteDVDPlusRDoubleLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRKey forKey:@"kDRDeviceCanWriteDVDPlusRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRWDoubleLayerKey forKey:@"kDRDeviceCanWriteDVDPlusRWDoubleLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDPlusRWKey forKey:@"kDRDeviceCanWriteDVDPlusRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRAMKey forKey:@"kDRDeviceCanWriteDVDRAMKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRDualLayerKey forKey:@"kDRDeviceCanWriteDVDRDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRKey forKey:@"kDRDeviceCanWriteDVDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRWDualLayerKey forKey:@"kDRDeviceCanWriteDVDRWDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteDVDRWKey forKey:@"kDRDeviceCanWriteDVDRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDKey forKey:@"kDRDeviceCanWriteHDDVDKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRAMKey forKey:@"kDRDeviceCanWriteHDDVDRAMKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRDualLayerKey forKey:@"kDRDeviceCanWriteHDDVDRDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRKey forKey:@"kDRDeviceCanWriteHDDVDRKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRWDualLayerKey forKey:@"kDRDeviceCanWriteHDDVDRWDualLayerKey"];
[d setObject:(NSString *)kDRDeviceCanWriteHDDVDRWKey forKey:@"kDRDeviceCanWriteHDDVDRWKey"];
[d setObject:(NSString *)kDRDeviceCanWriteISRCKey forKey:@"kDRDeviceCanWriteISRCKey"];
[d setObject:(NSString *)kDRDeviceCanWriteIndexPointsKey forKey:@"kDRDeviceCanWriteIndexPointsKey"];
[d setObject:(NSString *)kDRDeviceCanWriteKey forKey:@"kDRDeviceCanWriteKey"];
[d setObject:(NSString *)kDRDeviceCurrentWriteSpeedKey forKey:@"kDRDeviceCurrentWriteSpeedKey"];
[d setObject:(NSString *)kDRDeviceDisappearedNotification forKey:@"kDRDeviceDisappearedNotification"];
[d setObject:(NSString *)kDRDeviceFirmwareRevisionKey forKey:@"kDRDeviceFirmwareRevisionKey"];
[d setObject:(NSString *)kDRDeviceIORegistryEntryPathKey forKey:@"kDRDeviceIORegistryEntryPathKey"];
[d setObject:(NSString *)kDRDeviceIsBusyKey forKey:@"kDRDeviceIsBusyKey"];
[d setObject:(NSString *)kDRDeviceIsTrayOpenKey forKey:@"kDRDeviceIsTrayOpenKey"];
[d setObject:(NSString *)kDRDeviceLoadingMechanismCanEjectKey forKey:@"kDRDeviceLoadingMechanismCanEjectKey"];
[d setObject:(NSString *)kDRDeviceLoadingMechanismCanInjectKey forKey:@"kDRDeviceLoadingMechanismCanInjectKey"];
[d setObject:(NSString *)kDRDeviceLoadingMechanismCanOpenKey forKey:@"kDRDeviceLoadingMechanismCanOpenKey"];
[d setObject:(NSString *)kDRDeviceMaximumWriteSpeedKey forKey:@"kDRDeviceMaximumWriteSpeedKey"];
[d setObject:(NSString *)kDRDeviceMediaBSDNameKey forKey:@"kDRDeviceMediaBSDNameKey"];
[d setObject:(NSString *)kDRDeviceMediaBlocksFreeKey forKey:@"kDRDeviceMediaBlocksFreeKey"];
[d setObject:(NSString *)kDRDeviceMediaBlocksOverwritableKey forKey:@"kDRDeviceMediaBlocksOverwritableKey"];
[d setObject:(NSString *)kDRDeviceMediaBlocksUsedKey forKey:@"kDRDeviceMediaBlocksUsedKey"];
[d setObject:(NSString *)kDRDeviceMediaClassBD forKey:@"kDRDeviceMediaClassBD"];
[d setObject:(NSString *)kDRDeviceMediaClassCD forKey:@"kDRDeviceMediaClassCD"];
[d setObject:(NSString *)kDRDeviceMediaClassDVD forKey:@"kDRDeviceMediaClassDVD"];
[d setObject:(NSString *)kDRDeviceMediaClassHDDVD forKey:@"kDRDeviceMediaClassHDDVD"];
[d setObject:(NSString *)kDRDeviceMediaClassKey forKey:@"kDRDeviceMediaClassKey"];
[d setObject:(NSString *)kDRDeviceMediaClassUnknown forKey:@"kDRDeviceMediaClassUnknown"];
[d setObject:(NSString *)kDRDeviceMediaDoubleLayerL0DataZoneBlocksKey forKey:@"kDRDeviceMediaDoubleLayerL0DataZoneBlocksKey"];
[d setObject:(NSString *)kDRDeviceMediaInfoKey forKey:@"kDRDeviceMediaInfoKey"];
[d setObject:(NSString *)kDRDeviceMediaIsAppendableKey forKey:@"kDRDeviceMediaIsAppendableKey"];
[d setObject:(NSString *)kDRDeviceMediaIsBlankKey forKey:@"kDRDeviceMediaIsBlankKey"];
[d setObject:(NSString *)kDRDeviceMediaIsErasableKey forKey:@"kDRDeviceMediaIsErasableKey"];
[d setObject:(NSString *)kDRDeviceMediaIsOverwritableKey forKey:@"kDRDeviceMediaIsOverwritableKey"];
[d setObject:(NSString *)kDRDeviceMediaIsReservedKey forKey:@"kDRDeviceMediaIsReservedKey"];
[d setObject:(NSString *)kDRDeviceMediaSessionCountKey forKey:@"kDRDeviceMediaSessionCountKey"];
[d setObject:(NSString *)kDRDeviceMediaStateInTransition forKey:@"kDRDeviceMediaStateInTransition"];
[d setObject:(NSString *)kDRDeviceMediaStateKey forKey:@"kDRDeviceMediaStateKey"];
[d setObject:(NSString *)kDRDeviceMediaStateMediaPresent forKey:@"kDRDeviceMediaStateMediaPresent"];
[d setObject:(NSString *)kDRDeviceMediaStateNone forKey:@"kDRDeviceMediaStateNone"];
[d setObject:(NSString *)kDRDeviceMediaTrackCountKey forKey:@"kDRDeviceMediaTrackCountKey"];
[d setObject:(NSString *)kDRDeviceMediaTypeBDR forKey:@"kDRDeviceMediaTypeBDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeBDRE forKey:@"kDRDeviceMediaTypeBDRE"];
[d setObject:(NSString *)kDRDeviceMediaTypeBDROM forKey:@"kDRDeviceMediaTypeBDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeCDR forKey:@"kDRDeviceMediaTypeCDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeCDROM forKey:@"kDRDeviceMediaTypeCDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeCDRW forKey:@"kDRDeviceMediaTypeCDRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusR forKey:@"kDRDeviceMediaTypeDVDPlusR"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusRDoubleLayer forKey:@"kDRDeviceMediaTypeDVDPlusRDoubleLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusRW forKey:@"kDRDeviceMediaTypeDVDPlusRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDPlusRWDoubleLayer forKey:@"kDRDeviceMediaTypeDVDPlusRWDoubleLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDR forKey:@"kDRDeviceMediaTypeDVDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRAM forKey:@"kDRDeviceMediaTypeDVDRAM"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRDualLayer forKey:@"kDRDeviceMediaTypeDVDRDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDROM forKey:@"kDRDeviceMediaTypeDVDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRW forKey:@"kDRDeviceMediaTypeDVDRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeDVDRWDualLayer forKey:@"kDRDeviceMediaTypeDVDRWDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDR forKey:@"kDRDeviceMediaTypeHDDVDR"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRAM forKey:@"kDRDeviceMediaTypeHDDVDRAM"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRDualLayer forKey:@"kDRDeviceMediaTypeHDDVDRDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDROM forKey:@"kDRDeviceMediaTypeHDDVDROM"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRW forKey:@"kDRDeviceMediaTypeHDDVDRW"];
[d setObject:(NSString *)kDRDeviceMediaTypeHDDVDRWDualLayer forKey:@"kDRDeviceMediaTypeHDDVDRWDualLayer"];
[d setObject:(NSString *)kDRDeviceMediaTypeKey forKey:@"kDRDeviceMediaTypeKey"];
[d setObject:(NSString *)kDRDeviceMediaTypeUnknown forKey:@"kDRDeviceMediaTypeUnknown"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectATAPI forKey:@"kDRDevicePhysicalInterconnectATAPI"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectFibreChannel forKey:@"kDRDevicePhysicalInterconnectFibreChannel"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectFireWire forKey:@"kDRDevicePhysicalInterconnectFireWire"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectKey forKey:@"kDRDevicePhysicalInterconnectKey"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationExternal forKey:@"kDRDevicePhysicalInterconnectLocationExternal"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationInternal forKey:@"kDRDevicePhysicalInterconnectLocationInternal"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationKey forKey:@"kDRDevicePhysicalInterconnectLocationKey"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectLocationUnknown forKey:@"kDRDevicePhysicalInterconnectLocationUnknown"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectSCSI forKey:@"kDRDevicePhysicalInterconnectSCSI"];
[d setObject:(NSString *)kDRDevicePhysicalInterconnectUSB forKey:@"kDRDevicePhysicalInterconnectUSB"];
[d setObject:(NSString *)kDRDeviceProductNameKey forKey:@"kDRDeviceProductNameKey"];
[d setObject:(NSString *)kDRDeviceStatusChangedNotification forKey:@"kDRDeviceStatusChangedNotification"];
[d setObject:(NSString *)kDRDeviceSupportLevelAppleShipping forKey:@"kDRDeviceSupportLevelAppleShipping"];
[d setObject:(NSString *)kDRDeviceSupportLevelAppleSupported forKey:@"kDRDeviceSupportLevelAppleSupported"];
[d setObject:(NSString *)kDRDeviceSupportLevelKey forKey:@"kDRDeviceSupportLevelKey"];
[d setObject:(NSString *)kDRDeviceSupportLevelNone forKey:@"kDRDeviceSupportLevelNone"];
[d setObject:(NSString *)kDRDeviceSupportLevelUnsupported forKey:@"kDRDeviceSupportLevelUnsupported"];
[d setObject:(NSString *)kDRDeviceSupportLevelVendorSupported forKey:@"kDRDeviceSupportLevelVendorSupported"];
[d setObject:(NSString *)kDRDeviceTrackInfoKey forKey:@"kDRDeviceTrackInfoKey"];
[d setObject:(NSString *)kDRDeviceTrackRefsKey forKey:@"kDRDeviceTrackRefsKey"];
[d setObject:(NSString *)kDRDeviceVendorNameKey forKey:@"kDRDeviceVendorNameKey"];
[d setObject:(NSString *)kDRDeviceWriteBufferSizeKey forKey:@"kDRDeviceWriteBufferSizeKey"];
[d setObject:(NSString *)kDRDeviceWriteCapabilitiesKey forKey:@"kDRDeviceWriteCapabilitiesKey"];
[d setObject:(NSString *)kDREffectiveDate forKey:@"kDREffectiveDate"];
[d setObject:(NSString *)kDREraseStatusChangedNotification forKey:@"kDREraseStatusChangedNotification"];
[d setObject:(NSString *)kDREraseTypeComplete forKey:@"kDREraseTypeComplete"];
[d setObject:(NSString *)kDREraseTypeKey forKey:@"kDREraseTypeKey"];
[d setObject:(NSString *)kDREraseTypeQuick forKey:@"kDREraseTypeQuick"];
[d setObject:(NSString *)kDRErrorStatusAdditionalSenseStringKey forKey:@"kDRErrorStatusAdditionalSenseStringKey"];
[d setObject:(NSString *)kDRErrorStatusErrorInfoStringKey forKey:@"kDRErrorStatusErrorInfoStringKey"];
[d setObject:(NSString *)kDRErrorStatusErrorKey forKey:@"kDRErrorStatusErrorKey"];
[d setObject:(NSString *)kDRErrorStatusErrorStringKey forKey:@"kDRErrorStatusErrorStringKey"];
[d setObject:(NSString *)kDRErrorStatusKey forKey:@"kDRErrorStatusKey"];
[d setObject:(NSString *)kDRErrorStatusSenseCodeStringKey forKey:@"kDRErrorStatusSenseCodeStringKey"];
[d setObject:(NSString *)kDRErrorStatusSenseKey forKey:@"kDRErrorStatusSenseKey"];
[d setObject:(NSString *)kDRExpirationDate forKey:@"kDRExpirationDate"];
[d setObject:(NSString *)kDRFreeBlocksKey forKey:@"kDRFreeBlocksKey"];
[d setObject:(NSString *)kDRHFSPlus forKey:@"kDRHFSPlus"];
[d setObject:(NSString *)kDRHFSPlusCatalogNodeID forKey:@"kDRHFSPlusCatalogNodeID"];
[d setObject:(NSString *)kDRHFSPlusTextEncodingHint forKey:@"kDRHFSPlusTextEncodingHint"];
[d setObject:(NSString *)kDRISO9660 forKey:@"kDRISO9660"];
[d setObject:(NSString *)kDRISO9660LevelOne forKey:@"kDRISO9660LevelOne"];
[d setObject:(NSString *)kDRISO9660LevelTwo forKey:@"kDRISO9660LevelTwo"];
[d setObject:(NSString *)kDRISO9660VersionNumber forKey:@"kDRISO9660VersionNumber"];
[d setObject:(NSString *)kDRISOLevel forKey:@"kDRISOLevel"];
[d setObject:(NSString *)kDRISOMacExtensions forKey:@"kDRISOMacExtensions"];
[d setObject:(NSString *)kDRISORockRidgeExtensions forKey:@"kDRISORockRidgeExtensions"];
[d setObject:(NSString *)kDRIndexPointsKey forKey:@"kDRIndexPointsKey"];
[d setObject:(NSString *)kDRInvisible forKey:@"kDRInvisible"];
[d setObject:(NSString *)kDRJoliet forKey:@"kDRJoliet"];
[d setObject:(NSString *)kDRMacExtendedFinderFlags forKey:@"kDRMacExtendedFinderFlags"];
[d setObject:(NSString *)kDRMacFileCreator forKey:@"kDRMacFileCreator"];
[d setObject:(NSString *)kDRMacFileType forKey:@"kDRMacFileType"];
[d setObject:(NSString *)kDRMacFinderFlags forKey:@"kDRMacFinderFlags"];
[d setObject:(NSString *)kDRMacFinderHideExtension forKey:@"kDRMacFinderHideExtension"];
[d setObject:(NSString *)kDRMacIconLocation forKey:@"kDRMacIconLocation"];
[d setObject:(NSString *)kDRMacScrollPosition forKey:@"kDRMacScrollPosition"];
[d setObject:(NSString *)kDRMacWindowBounds forKey:@"kDRMacWindowBounds"];
[d setObject:(NSString *)kDRMacWindowView forKey:@"kDRMacWindowView"];
[d setObject:(NSString *)kDRMaxBurnSpeedKey forKey:@"kDRMaxBurnSpeedKey"];
[d setObject:(NSString *)kDRMediaCatalogNumberKey forKey:@"kDRMediaCatalogNumberKey"];
[d setObject:(NSString *)kDRNextWritableAddressKey forKey:@"kDRNextWritableAddressKey"];
[d setObject:(NSString *)kDRPosixFileMode forKey:@"kDRPosixFileMode"];
[d setObject:(NSString *)kDRPosixGID forKey:@"kDRPosixGID"];
[d setObject:(NSString *)kDRPosixUID forKey:@"kDRPosixUID"];
[d setObject:(NSString *)kDRPreGapIsRequiredKey forKey:@"kDRPreGapIsRequiredKey"];
[d setObject:(NSString *)kDRPreGapLengthKey forKey:@"kDRPreGapLengthKey"];
[d setObject:(NSString *)kDRPublisher forKey:@"kDRPublisher"];
[d setObject:(NSString *)kDRRecordingDate forKey:@"kDRRecordingDate"];
[d setObject:(NSString *)kDRSCMSCopyrightFree forKey:@"kDRSCMSCopyrightFree"];
[d setObject:(NSString *)kDRSCMSCopyrightProtectedCopy forKey:@"kDRSCMSCopyrightProtectedCopy"];
[d setObject:(NSString *)kDRSCMSCopyrightProtectedOriginal forKey:@"kDRSCMSCopyrightProtectedOriginal"];
[d setObject:(NSString *)kDRSerialCopyManagementStateKey forKey:@"kDRSerialCopyManagementStateKey"];
[d setObject:(NSString *)kDRSessionFormatKey forKey:@"kDRSessionFormatKey"];
[d setObject:(NSString *)kDRSessionNumberKey forKey:@"kDRSessionNumberKey"];
[d setObject:(NSString *)kDRStatusCurrentSessionKey forKey:@"kDRStatusCurrentSessionKey"];
[d setObject:(NSString *)kDRStatusCurrentSpeedKey forKey:@"kDRStatusCurrentSpeedKey"];
[d setObject:(NSString *)kDRStatusCurrentTrackKey forKey:@"kDRStatusCurrentTrackKey"];
[d setObject:(NSString *)kDRStatusEraseTypeKey forKey:@"kDRStatusEraseTypeKey"];
[d setObject:(NSString *)kDRStatusPercentCompleteKey forKey:@"kDRStatusPercentCompleteKey"];
[d setObject:(NSString *)kDRStatusProgressCurrentKPS forKey:@"kDRStatusProgressCurrentKPS"];
[d setObject:(NSString *)kDRStatusProgressCurrentXFactor forKey:@"kDRStatusProgressCurrentXFactor"];
[d setObject:(NSString *)kDRStatusProgressInfoKey forKey:@"kDRStatusProgressInfoKey"];
[d setObject:(NSString *)kDRStatusStateDone forKey:@"kDRStatusStateDone"];
[d setObject:(NSString *)kDRStatusStateErasing forKey:@"kDRStatusStateErasing"];
[d setObject:(NSString *)kDRStatusStateFailed forKey:@"kDRStatusStateFailed"];
[d setObject:(NSString *)kDRStatusStateFinishing forKey:@"kDRStatusStateFinishing"];
[d setObject:(NSString *)kDRStatusStateKey forKey:@"kDRStatusStateKey"];
[d setObject:(NSString *)kDRStatusStateNone forKey:@"kDRStatusStateNone"];
[d setObject:(NSString *)kDRStatusStatePreparing forKey:@"kDRStatusStatePreparing"];
[d setObject:(NSString *)kDRStatusStateSessionClose forKey:@"kDRStatusStateSessionClose"];
[d setObject:(NSString *)kDRStatusStateSessionOpen forKey:@"kDRStatusStateSessionOpen"];
[d setObject:(NSString *)kDRStatusStateTrackClose forKey:@"kDRStatusStateTrackClose"];
[d setObject:(NSString *)kDRStatusStateTrackOpen forKey:@"kDRStatusStateTrackOpen"];
[d setObject:(NSString *)kDRStatusStateTrackWrite forKey:@"kDRStatusStateTrackWrite"];
[d setObject:(NSString *)kDRStatusStateVerifying forKey:@"kDRStatusStateVerifying"];
[d setObject:(NSString *)kDRStatusTotalSessionsKey forKey:@"kDRStatusTotalSessionsKey"];
[d setObject:(NSString *)kDRStatusTotalTracksKey forKey:@"kDRStatusTotalTracksKey"];
[d setObject:(NSString *)kDRSubchannelDataFormKey forKey:@"kDRSubchannelDataFormKey"];
[d setObject:(NSString *)kDRSubchannelDataFormNone forKey:@"kDRSubchannelDataFormNone"];
[d setObject:(NSString *)kDRSubchannelDataFormPack forKey:@"kDRSubchannelDataFormPack"];
[d setObject:(NSString *)kDRSubchannelDataFormRaw forKey:@"kDRSubchannelDataFormRaw"];
[d setObject:(NSString *)kDRSuppressMacSpecificFiles forKey:@"kDRSuppressMacSpecificFiles"];
[d setObject:(NSString *)kDRSynchronousBehaviorKey forKey:@"kDRSynchronousBehaviorKey"];
[d setObject:(NSString *)kDRSystemIdentifier forKey:@"kDRSystemIdentifier"];
[d setObject:(NSString *)kDRTrackISRCKey forKey:@"kDRTrackISRCKey"];
[d setObject:(NSString *)kDRTrackIsEmptyKey forKey:@"kDRTrackIsEmptyKey"];
[d setObject:(NSString *)kDRTrackLengthKey forKey:@"kDRTrackLengthKey"];
[d setObject:(NSString *)kDRTrackModeKey forKey:@"kDRTrackModeKey"];
[d setObject:(NSString *)kDRTrackNumberKey forKey:@"kDRTrackNumberKey"];
[d setObject:(NSString *)kDRTrackPacketSizeKey forKey:@"kDRTrackPacketSizeKey"];
[d setObject:(NSString *)kDRTrackPacketTypeFixed forKey:@"kDRTrackPacketTypeFixed"];
[d setObject:(NSString *)kDRTrackPacketTypeKey forKey:@"kDRTrackPacketTypeKey"];
[d setObject:(NSString *)kDRTrackPacketTypeVariable forKey:@"kDRTrackPacketTypeVariable"];
[d setObject:(NSString *)kDRTrackStartAddressKey forKey:@"kDRTrackStartAddressKey"];
[d setObject:(NSString *)kDRTrackTypeClosed forKey:@"kDRTrackTypeClosed"];
[d setObject:(NSString *)kDRTrackTypeIncomplete forKey:@"kDRTrackTypeIncomplete"];
[d setObject:(NSString *)kDRTrackTypeInvisible forKey:@"kDRTrackTypeInvisible"];
[d setObject:(NSString *)kDRTrackTypeKey forKey:@"kDRTrackTypeKey"];
[d setObject:(NSString *)kDRTrackTypeReserved forKey:@"kDRTrackTypeReserved"];
[d setObject:(NSString *)kDRUDF forKey:@"kDRUDF"];
[d setObject:(NSString *)kDRUDFApplicationIdentifierSuffix forKey:@"kDRUDFApplicationIdentifierSuffix"];
[d setObject:(NSString *)kDRUDFExtendedFilePermissions forKey:@"kDRUDFExtendedFilePermissions"];
[d setObject:(NSString *)kDRUDFInterchangeLevel forKey:@"kDRUDFInterchangeLevel"];
[d setObject:(NSString *)kDRUDFMaxInterchangeLevel forKey:@"kDRUDFMaxInterchangeLevel"];
[d setObject:(NSString *)kDRUDFMaxVolumeSequenceNumber forKey:@"kDRUDFMaxVolumeSequenceNumber"];
[d setObject:(NSString *)kDRUDFPrimaryVolumeDescriptorNumber forKey:@"kDRUDFPrimaryVolumeDescriptorNumber"];
[d setObject:(NSString *)kDRUDFRealTimeFile forKey:@"kDRUDFRealTimeFile"];
[d setObject:(NSString *)kDRUDFVersion102 forKey:@"kDRUDFVersion102"];
[d setObject:(NSString *)kDRUDFVersion150 forKey:@"kDRUDFVersion150"];
[d setObject:(NSString *)kDRUDFVolumeSequenceNumber forKey:@"kDRUDFVolumeSequenceNumber"];
[d setObject:(NSString *)kDRUDFVolumeSetIdentifier forKey:@"kDRUDFVolumeSetIdentifier"];
[d setObject:(NSString *)kDRUDFVolumeSetImplementationUse forKey:@"kDRUDFVolumeSetImplementationUse"];
[d setObject:(NSString *)kDRUDFVolumeSetTimestamp forKey:@"kDRUDFVolumeSetTimestamp"];
[d setObject:(NSString *)kDRUDFWriteVersion forKey:@"kDRUDFWriteVersion"];
[d setObject:(NSString *)kDRVerificationTypeChecksum forKey:@"kDRVerificationTypeChecksum"];
[d setObject:(NSString *)kDRVerificationTypeKey forKey:@"kDRVerificationTypeKey"];
[d setObject:(NSString *)kDRVerificationTypeNone forKey:@"kDRVerificationTypeNone"];
[d setObject:(NSString *)kDRVerificationTypeProduceAgain forKey:@"kDRVerificationTypeProduceAgain"];
[d setObject:(NSString *)kDRVerificationTypeReceiveData forKey:@"kDRVerificationTypeReceiveData"];
[d setObject:(NSString *)kDRVolumeCheckedDate forKey:@"kDRVolumeCheckedDate"];
[d setObject:(NSString *)kDRVolumeCreationDate forKey:@"kDRVolumeCreationDate"];
[d setObject:(NSString *)kDRVolumeEffectiveDate forKey:@"kDRVolumeEffectiveDate"];
[d setObject:(NSString *)kDRVolumeExpirationDate forKey:@"kDRVolumeExpirationDate"];
[d setObject:(NSString *)kDRVolumeModificationDate forKey:@"kDRVolumeModificationDate"];
[d setObject:(NSString *)kDRVolumeSet forKey:@"kDRVolumeSet"];
[d setObject:[Number numberWithDouble:DRCDTextEncodingASCII] forKey:@"DRCDTextEncodingASCII"];
[d setObject:[Number numberWithDouble:DRCDTextEncodingISOLatin1Modified] forKey:@"DRCDTextEncodingISOLatin1Modified"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeAdultContemporary] forKey:@"DRCDTextGenreCodeAdultContemporary"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeAlternativeRock] forKey:@"DRCDTextGenreCodeAlternativeRock"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeChildrens] forKey:@"DRCDTextGenreCodeChildrens"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeClassical] forKey:@"DRCDTextGenreCodeClassical"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeContemporaryChristian] forKey:@"DRCDTextGenreCodeContemporaryChristian"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeCountry] forKey:@"DRCDTextGenreCodeCountry"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeDance] forKey:@"DRCDTextGenreCodeDance"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeEasyListening] forKey:@"DRCDTextGenreCodeEasyListening"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeErotic] forKey:@"DRCDTextGenreCodeErotic"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeFolk] forKey:@"DRCDTextGenreCodeFolk"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeGospel] forKey:@"DRCDTextGenreCodeGospel"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeHipHop] forKey:@"DRCDTextGenreCodeHipHop"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeJazz] forKey:@"DRCDTextGenreCodeJazz"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeLatin] forKey:@"DRCDTextGenreCodeLatin"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeMusical] forKey:@"DRCDTextGenreCodeMusical"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeNewAge] forKey:@"DRCDTextGenreCodeNewAge"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeOpera] forKey:@"DRCDTextGenreCodeOpera"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeOperetta] forKey:@"DRCDTextGenreCodeOperetta"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodePop] forKey:@"DRCDTextGenreCodePop"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeRap] forKey:@"DRCDTextGenreCodeRap"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeReggae] forKey:@"DRCDTextGenreCodeReggae"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeRhythmAndBlues] forKey:@"DRCDTextGenreCodeRhythmAndBlues"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeRock] forKey:@"DRCDTextGenreCodeRock"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeSoundEffects] forKey:@"DRCDTextGenreCodeSoundEffects"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeSoundtrack] forKey:@"DRCDTextGenreCodeSoundtrack"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeSpokenWord] forKey:@"DRCDTextGenreCodeSpokenWord"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeUnknown] forKey:@"DRCDTextGenreCodeUnknown"];
[d setObject:[Number numberWithDouble:DRCDTextGenreCodeWorldMusic] forKey:@"DRCDTextGenreCodeWorldMusic"];
[d setObject:[Number numberWithDouble:DRFileForkData] forKey:@"DRFileForkData"];
[d setObject:[Number numberWithDouble:DRFileForkResource] forKey:@"DRFileForkResource"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskHFSPlus] forKey:@"DRFilesystemInclusionMaskHFSPlus"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskISO9660] forKey:@"DRFilesystemInclusionMaskISO9660"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskJoliet] forKey:@"DRFilesystemInclusionMaskJoliet"];
[d setObject:[Number numberWithDouble:DRFilesystemInclusionMaskUDF] forKey:@"DRFilesystemInclusionMaskUDF"];
[d setObject:[Number numberWithDouble:DRFlagSubchannelDataRequested] forKey:@"DRFlagSubchannelDataRequested"];
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:kDRAudioFileNotSupportedErr] forKey:@"kDRAudioFileNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRBadLayoutErr] forKey:@"kDRBadLayoutErr"];
[d setObject:[Number numberWithDouble:kDRBlockSizeAudio] forKey:@"kDRBlockSizeAudio"];
[d setObject:[Number numberWithDouble:kDRBlockSizeDVDData] forKey:@"kDRBlockSizeDVDData"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode1Data] forKey:@"kDRBlockSizeMode1Data"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode2Data] forKey:@"kDRBlockSizeMode2Data"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode2Form1Data] forKey:@"kDRBlockSizeMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRBlockSizeMode2Form2Data] forKey:@"kDRBlockSizeMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeAudio] forKey:@"kDRBlockTypeAudio"];
[d setObject:[Number numberWithDouble:kDRBlockTypeDVDData] forKey:@"kDRBlockTypeDVDData"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode1Data] forKey:@"kDRBlockTypeMode1Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode2Data] forKey:@"kDRBlockTypeMode2Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode2Form1Data] forKey:@"kDRBlockTypeMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRBlockTypeMode2Form2Data] forKey:@"kDRBlockTypeMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRBurnMediaWriteFailureErr] forKey:@"kDRBurnMediaWriteFailureErr"];
[d setObject:[Number numberWithDouble:kDRBurnNotAllowedErr] forKey:@"kDRBurnNotAllowedErr"];
[d setObject:[Number numberWithDouble:kDRBurnPowerCalibrationErr] forKey:@"kDRBurnPowerCalibrationErr"];
[d setObject:[Number numberWithDouble:kDRBurnUnderrunErr] forKey:@"kDRBurnUnderrunErr"];
[d setObject:[Number numberWithDouble:kDRCDTextEncodingASCII] forKey:@"kDRCDTextEncodingASCII"];
[d setObject:[Number numberWithDouble:kDRCDTextEncodingISOLatin1Modified] forKey:@"kDRCDTextEncodingISOLatin1Modified"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeAdultContemporary] forKey:@"kDRCDTextGenreCodeAdultContemporary"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeAlternativeRock] forKey:@"kDRCDTextGenreCodeAlternativeRock"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeChildrens] forKey:@"kDRCDTextGenreCodeChildrens"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeClassical] forKey:@"kDRCDTextGenreCodeClassical"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeContemporaryChristian] forKey:@"kDRCDTextGenreCodeContemporaryChristian"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeCountry] forKey:@"kDRCDTextGenreCodeCountry"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeDance] forKey:@"kDRCDTextGenreCodeDance"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeEasyListening] forKey:@"kDRCDTextGenreCodeEasyListening"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeErotic] forKey:@"kDRCDTextGenreCodeErotic"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeFolk] forKey:@"kDRCDTextGenreCodeFolk"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeGospel] forKey:@"kDRCDTextGenreCodeGospel"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeHipHop] forKey:@"kDRCDTextGenreCodeHipHop"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeJazz] forKey:@"kDRCDTextGenreCodeJazz"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeLatin] forKey:@"kDRCDTextGenreCodeLatin"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeMusical] forKey:@"kDRCDTextGenreCodeMusical"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeNewAge] forKey:@"kDRCDTextGenreCodeNewAge"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeOpera] forKey:@"kDRCDTextGenreCodeOpera"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeOperetta] forKey:@"kDRCDTextGenreCodeOperetta"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodePop] forKey:@"kDRCDTextGenreCodePop"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeRap] forKey:@"kDRCDTextGenreCodeRap"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeReggae] forKey:@"kDRCDTextGenreCodeReggae"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeRhythmAndBlues] forKey:@"kDRCDTextGenreCodeRhythmAndBlues"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeRock] forKey:@"kDRCDTextGenreCodeRock"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeSoundEffects] forKey:@"kDRCDTextGenreCodeSoundEffects"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeSoundtrack] forKey:@"kDRCDTextGenreCodeSoundtrack"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeSpokenWord] forKey:@"kDRCDTextGenreCodeSpokenWord"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeUnknown] forKey:@"kDRCDTextGenreCodeUnknown"];
[d setObject:[Number numberWithDouble:kDRCDTextGenreCodeWorldMusic] forKey:@"kDRCDTextGenreCodeWorldMusic"];
[d setObject:[Number numberWithDouble:kDRDataFormAudio] forKey:@"kDRDataFormAudio"];
[d setObject:[Number numberWithDouble:kDRDataFormDVDData] forKey:@"kDRDataFormDVDData"];
[d setObject:[Number numberWithDouble:kDRDataFormMode1Data] forKey:@"kDRDataFormMode1Data"];
[d setObject:[Number numberWithDouble:kDRDataFormMode2Data] forKey:@"kDRDataFormMode2Data"];
[d setObject:[Number numberWithDouble:kDRDataFormMode2Form1Data] forKey:@"kDRDataFormMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRDataFormMode2Form2Data] forKey:@"kDRDataFormMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRDataProductionErr] forKey:@"kDRDataProductionErr"];
[d setObject:[Number numberWithDouble:kDRDeviceAccessErr] forKey:@"kDRDeviceAccessErr"];
[d setObject:[Number numberWithDouble:kDRDeviceBurnStrategyNotAvailableErr] forKey:@"kDRDeviceBurnStrategyNotAvailableErr"];
[d setObject:[Number numberWithDouble:kDRDeviceBusyErr] forKey:@"kDRDeviceBusyErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteCDTextErr] forKey:@"kDRDeviceCantWriteCDTextErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteISRCErr] forKey:@"kDRDeviceCantWriteISRCErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteIndexPointsErr] forKey:@"kDRDeviceCantWriteIndexPointsErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCantWriteSCMSErr] forKey:@"kDRDeviceCantWriteSCMSErr"];
[d setObject:[Number numberWithDouble:kDRDeviceCommunicationErr] forKey:@"kDRDeviceCommunicationErr"];
[d setObject:[Number numberWithDouble:kDRDeviceInvalidErr] forKey:@"kDRDeviceInvalidErr"];
[d setObject:[Number numberWithDouble:kDRDeviceNotReadyErr] forKey:@"kDRDeviceNotReadyErr"];
[d setObject:[Number numberWithDouble:kDRDeviceNotSupportedErr] forKey:@"kDRDeviceNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRDevicePreGapLengthNotValidErr] forKey:@"kDRDevicePreGapLengthNotValidErr"];
[d setObject:[Number numberWithDouble:kDRDoubleLayerL0AlreadySpecifiedErr] forKey:@"kDRDoubleLayerL0AlreadySpecifiedErr"];
[d setObject:[Number numberWithDouble:kDRDoubleLayerL0DataZoneBlocksParamErr] forKey:@"kDRDoubleLayerL0DataZoneBlocksParamErr"];
[d setObject:[Number numberWithDouble:kDRFileForkData] forKey:@"kDRFileForkData"];
[d setObject:[Number numberWithDouble:kDRFileForkResource] forKey:@"kDRFileForkResource"];
[d setObject:[Number numberWithDouble:kDRFileForkSizeActual] forKey:@"kDRFileForkSizeActual"];
[d setObject:[Number numberWithDouble:kDRFileForkSizeEstimate] forKey:@"kDRFileForkSizeEstimate"];
[d setObject:[Number numberWithDouble:kDRFileLocationConflictErr] forKey:@"kDRFileLocationConflictErr"];
[d setObject:[Number numberWithDouble:kDRFileMessageForkSize] forKey:@"kDRFileMessageForkSize"];
[d setObject:[Number numberWithDouble:kDRFileMessagePostBurn] forKey:@"kDRFileMessagePostBurn"];
[d setObject:[Number numberWithDouble:kDRFileMessagePreBurn] forKey:@"kDRFileMessagePreBurn"];
[d setObject:[Number numberWithDouble:kDRFileMessageProduceData] forKey:@"kDRFileMessageProduceData"];
[d setObject:[Number numberWithDouble:kDRFileMessageRelease] forKey:@"kDRFileMessageRelease"];
[d setObject:[Number numberWithDouble:kDRFileMessageVerificationStarting] forKey:@"kDRFileMessageVerificationStarting"];
[d setObject:[Number numberWithDouble:kDRFileModifiedDuringBurnErr] forKey:@"kDRFileModifiedDuringBurnErr"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskDefault] forKey:@"kDRFilesystemMaskDefault"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskHFSPlus] forKey:@"kDRFilesystemMaskHFSPlus"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskISO9660] forKey:@"kDRFilesystemMaskISO9660"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskJoliet] forKey:@"kDRFilesystemMaskJoliet"];
[d setObject:[Number numberWithDouble:kDRFilesystemMaskUDF] forKey:@"kDRFilesystemMaskUDF"];
[d setObject:[Number numberWithDouble:kDRFilesystemsNotSupportedErr] forKey:@"kDRFilesystemsNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRFirstErr] forKey:@"kDRFirstErr"];
[d setObject:[Number numberWithDouble:kDRFlagNoMoreData] forKey:@"kDRFlagNoMoreData"];
[d setObject:[Number numberWithDouble:kDRFlagSubchannelDataRequested] forKey:@"kDRFlagSubchannelDataRequested"];
[d setObject:[Number numberWithDouble:kDRFunctionNotSupportedErr] forKey:@"kDRFunctionNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRInternalErr] forKey:@"kDRInternalErr"];
[d setObject:[Number numberWithDouble:kDRInvalidIndexPointsErr] forKey:@"kDRInvalidIndexPointsErr"];
[d setObject:[Number numberWithDouble:kDRLinkTypeFinderAlias] forKey:@"kDRLinkTypeFinderAlias"];
[d setObject:[Number numberWithDouble:kDRLinkTypeHardLink] forKey:@"kDRLinkTypeHardLink"];
[d setObject:[Number numberWithDouble:kDRLinkTypeSymbolicLink] forKey:@"kDRLinkTypeSymbolicLink"];
[d setObject:[Number numberWithDouble:kDRMediaBusyErr] forKey:@"kDRMediaBusyErr"];
[d setObject:[Number numberWithDouble:kDRMediaInvalidErr] forKey:@"kDRMediaInvalidErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotBlankErr] forKey:@"kDRMediaNotBlankErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotErasableErr] forKey:@"kDRMediaNotErasableErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotPresentErr] forKey:@"kDRMediaNotPresentErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotSupportedErr] forKey:@"kDRMediaNotSupportedErr"];
[d setObject:[Number numberWithDouble:kDRMediaNotWritableErr] forKey:@"kDRMediaNotWritableErr"];
[d setObject:[Number numberWithDouble:kDRSessionFormatAudio] forKey:@"kDRSessionFormatAudio"];
[d setObject:[Number numberWithDouble:kDRSessionFormatCDI] forKey:@"kDRSessionFormatCDI"];
[d setObject:[Number numberWithDouble:kDRSessionFormatCDXA] forKey:@"kDRSessionFormatCDXA"];
[d setObject:[Number numberWithDouble:kDRSessionFormatDVDData] forKey:@"kDRSessionFormatDVDData"];
[d setObject:[Number numberWithDouble:kDRSessionFormatMode1Data] forKey:@"kDRSessionFormatMode1Data"];
[d setObject:[Number numberWithDouble:kDRSpeedTestAlreadyRunningErr] forKey:@"kDRSpeedTestAlreadyRunningErr"];
[d setObject:[Number numberWithDouble:kDRTooManyNameConflictsErr] forKey:@"kDRTooManyNameConflictsErr"];
[d setObject:[Number numberWithDouble:kDRTooManyTracksForDVDErr] forKey:@"kDRTooManyTracksForDVDErr"];
[d setObject:[Number numberWithDouble:kDRTrackMessageEstimateLength] forKey:@"kDRTrackMessageEstimateLength"];
[d setObject:[Number numberWithDouble:kDRTrackMessagePostBurn] forKey:@"kDRTrackMessagePostBurn"];
[d setObject:[Number numberWithDouble:kDRTrackMessagePreBurn] forKey:@"kDRTrackMessagePreBurn"];
[d setObject:[Number numberWithDouble:kDRTrackMessageProduceData] forKey:@"kDRTrackMessageProduceData"];
[d setObject:[Number numberWithDouble:kDRTrackMessageProducePreGap] forKey:@"kDRTrackMessageProducePreGap"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerificationDone] forKey:@"kDRTrackMessageVerificationDone"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerificationStarting] forKey:@"kDRTrackMessageVerificationStarting"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerifyData] forKey:@"kDRTrackMessageVerifyData"];
[d setObject:[Number numberWithDouble:kDRTrackMessageVerifyPreGap] forKey:@"kDRTrackMessageVerifyPreGap"];
[d setObject:[Number numberWithDouble:kDRTrackMode1Data] forKey:@"kDRTrackMode1Data"];
[d setObject:[Number numberWithDouble:kDRTrackMode2Data] forKey:@"kDRTrackMode2Data"];
[d setObject:[Number numberWithDouble:kDRTrackMode2Form1Data] forKey:@"kDRTrackMode2Form1Data"];
[d setObject:[Number numberWithDouble:kDRTrackMode2Form2Data] forKey:@"kDRTrackMode2Form2Data"];
[d setObject:[Number numberWithDouble:kDRTrackModeAudio] forKey:@"kDRTrackModeAudio"];
[d setObject:[Number numberWithDouble:kDRTrackModeDVDData] forKey:@"kDRTrackModeDVDData"];
[d setObject:[Number numberWithDouble:kDRTrackReusedErr] forKey:@"kDRTrackReusedErr"];
[d setObject:[Number numberWithDouble:kDRUserCanceledErr] forKey:@"kDRUserCanceledErr"];
[d setObject:[Number numberWithDouble:kDRVerificationFailedErr] forKey:@"kDRVerificationFailedErr"];
if ([DRBurnIcon isKindOfClass:[NSString class]]) [d setObject:DRBurnIcon forKey:@"DRBurnIcon"]; else NSLog([@"Can't initialize DRBurnIcon with object " stringByAppendingString:[DRBurnIcon description]]);
if ([DRBurnProgressPanelDidFinishNotification isKindOfClass:[NSString class]]) [d setObject:DRBurnProgressPanelDidFinishNotification forKey:@"DRBurnProgressPanelDidFinishNotification"]; else NSLog([@"Can't initialize DRBurnProgressPanelDidFinishNotification with object " stringByAppendingString:[DRBurnProgressPanelDidFinishNotification description]]);
if ([DRBurnProgressPanelWillBeginNotification isKindOfClass:[NSString class]]) [d setObject:DRBurnProgressPanelWillBeginNotification forKey:@"DRBurnProgressPanelWillBeginNotification"]; else NSLog([@"Can't initialize DRBurnProgressPanelWillBeginNotification with object " stringByAppendingString:[DRBurnProgressPanelWillBeginNotification description]]);
if ([DRBurnSetupPanelDefaultButtonDefaultTitle isKindOfClass:[NSString class]]) [d setObject:DRBurnSetupPanelDefaultButtonDefaultTitle forKey:@"DRBurnSetupPanelDefaultButtonDefaultTitle"]; else NSLog([@"Can't initialize DRBurnSetupPanelDefaultButtonDefaultTitle with object " stringByAppendingString:[DRBurnSetupPanelDefaultButtonDefaultTitle description]]);
if ([DREraseIcon isKindOfClass:[NSString class]]) [d setObject:DREraseIcon forKey:@"DREraseIcon"]; else NSLog([@"Can't initialize DREraseIcon with object " stringByAppendingString:[DREraseIcon description]]);
if ([DREraseProgressPanelDidFinishNotification isKindOfClass:[NSString class]]) [d setObject:DREraseProgressPanelDidFinishNotification forKey:@"DREraseProgressPanelDidFinishNotification"]; else NSLog([@"Can't initialize DREraseProgressPanelDidFinishNotification with object " stringByAppendingString:[DREraseProgressPanelDidFinishNotification description]]);
if ([DREraseProgressPanelWillBeginNotification isKindOfClass:[NSString class]]) [d setObject:DREraseProgressPanelWillBeginNotification forKey:@"DREraseProgressPanelWillBeginNotification"]; else NSLog([@"Can't initialize DREraseProgressPanelWillBeginNotification with object " stringByAppendingString:[DREraseProgressPanelWillBeginNotification description]]);
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:kBurnSessionProgressDialogDefaultOptions] forKey:@"kBurnSessionProgressDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kBurnSessionProgressDialogDisplayVerboseProgress] forKey:@"kBurnSessionProgressDialogDisplayVerboseProgress"];
[d setObject:[Number numberWithDouble:kBurnSessionProgressDialogOptionsCurrentVersion] forKey:@"kBurnSessionProgressDialogOptionsCurrentVersion"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogAllowTestBurns] forKey:@"kBurnSessionSetupDialogAllowTestBurns"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogDefaultOptions] forKey:@"kBurnSessionSetupDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogDontHandleReservations] forKey:@"kBurnSessionSetupDialogDontHandleReservations"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogForceClosedDiscs] forKey:@"kBurnSessionSetupDialogForceClosedDiscs"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogOptionsCurrentVersion] forKey:@"kBurnSessionSetupDialogOptionsCurrentVersion"];
[d setObject:[Number numberWithDouble:kDRBurnProgressSetupCallbacksCurrentVersion] forKey:@"kDRBurnProgressSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kDRBurnSessionCancel] forKey:@"kDRBurnSessionCancel"];
[d setObject:[Number numberWithDouble:kDRBurnSessionOK] forKey:@"kDRBurnSessionOK"];
[d setObject:[Number numberWithDouble:kDRBurnSessionSetupCallbacksCurrentVersion] forKey:@"kDRBurnSessionSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kDREraseProgressSetupCallbacksCurrentVersion] forKey:@"kDREraseProgressSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kDREraseSessionCancel] forKey:@"kDREraseSessionCancel"];
[d setObject:[Number numberWithDouble:kDREraseSessionOK] forKey:@"kDREraseSessionOK"];
[d setObject:[Number numberWithDouble:kDREraseSessionSetupCallbacksCurrentVersion] forKey:@"kDREraseSessionSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kEraseSessionProgressDialogDefaultOptions] forKey:@"kEraseSessionProgressDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kEraseSessionProgressDialogOptionsCurrentVersion] forKey:@"kEraseSessionProgressDialogOptionsCurrentVersion"];
[d setObject:[Number numberWithDouble:kEraseSessionSetupDialogDefaultOptions] forKey:@"kEraseSessionSetupDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kEraseSessionSetupDialogDontHandleReservations] forKey:@"kEraseSessionSetupDialogDontHandleReservations"];
[d setObject:[Number numberWithDouble:kEraseSessionSetupDialogOptionsCurrentVersion] forKey:@"kEraseSessionSetupDialogOptionsCurrentVersion"];
if ([DRBurnIcon isKindOfClass:[NSString class]]) [d setObject:DRBurnIcon forKey:@"DRBurnIcon"]; else NSLog([@"Can't initialize DRBurnIcon with object " stringByAppendingString:[DRBurnIcon description]]);
if ([DRBurnProgressPanelDidFinishNotification isKindOfClass:[NSString class]]) [d setObject:DRBurnProgressPanelDidFinishNotification forKey:@"DRBurnProgressPanelDidFinishNotification"]; else NSLog([@"Can't initialize DRBurnProgressPanelDidFinishNotification with object " stringByAppendingString:[DRBurnProgressPanelDidFinishNotification description]]);
if ([DRBurnProgressPanelWillBeginNotification isKindOfClass:[NSString class]]) [d setObject:DRBurnProgressPanelWillBeginNotification forKey:@"DRBurnProgressPanelWillBeginNotification"]; else NSLog([@"Can't initialize DRBurnProgressPanelWillBeginNotification with object " stringByAppendingString:[DRBurnProgressPanelWillBeginNotification description]]);
if ([DRBurnSetupPanelDefaultButtonDefaultTitle isKindOfClass:[NSString class]]) [d setObject:DRBurnSetupPanelDefaultButtonDefaultTitle forKey:@"DRBurnSetupPanelDefaultButtonDefaultTitle"]; else NSLog([@"Can't initialize DRBurnSetupPanelDefaultButtonDefaultTitle with object " stringByAppendingString:[DRBurnSetupPanelDefaultButtonDefaultTitle description]]);
if ([DREraseIcon isKindOfClass:[NSString class]]) [d setObject:DREraseIcon forKey:@"DREraseIcon"]; else NSLog([@"Can't initialize DREraseIcon with object " stringByAppendingString:[DREraseIcon description]]);
if ([DREraseProgressPanelDidFinishNotification isKindOfClass:[NSString class]]) [d setObject:DREraseProgressPanelDidFinishNotification forKey:@"DREraseProgressPanelDidFinishNotification"]; else NSLog([@"Can't initialize DREraseProgressPanelDidFinishNotification with object " stringByAppendingString:[DREraseProgressPanelDidFinishNotification description]]);
if ([DREraseProgressPanelWillBeginNotification isKindOfClass:[NSString class]]) [d setObject:DREraseProgressPanelWillBeginNotification forKey:@"DREraseProgressPanelWillBeginNotification"]; else NSLog([@"Can't initialize DREraseProgressPanelWillBeginNotification with object " stringByAppendingString:[DREraseProgressPanelWillBeginNotification description]]);
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:kBurnSessionProgressDialogDefaultOptions] forKey:@"kBurnSessionProgressDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kBurnSessionProgressDialogDisplayVerboseProgress] forKey:@"kBurnSessionProgressDialogDisplayVerboseProgress"];
[d setObject:[Number numberWithDouble:kBurnSessionProgressDialogOptionsCurrentVersion] forKey:@"kBurnSessionProgressDialogOptionsCurrentVersion"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogAllowTestBurns] forKey:@"kBurnSessionSetupDialogAllowTestBurns"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogDefaultOptions] forKey:@"kBurnSessionSetupDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogDontHandleReservations] forKey:@"kBurnSessionSetupDialogDontHandleReservations"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogForceClosedDiscs] forKey:@"kBurnSessionSetupDialogForceClosedDiscs"];
[d setObject:[Number numberWithDouble:kBurnSessionSetupDialogOptionsCurrentVersion] forKey:@"kBurnSessionSetupDialogOptionsCurrentVersion"];
[d setObject:[Number numberWithDouble:kDRBurnProgressSetupCallbacksCurrentVersion] forKey:@"kDRBurnProgressSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kDRBurnSessionCancel] forKey:@"kDRBurnSessionCancel"];
[d setObject:[Number numberWithDouble:kDRBurnSessionOK] forKey:@"kDRBurnSessionOK"];
[d setObject:[Number numberWithDouble:kDRBurnSessionSetupCallbacksCurrentVersion] forKey:@"kDRBurnSessionSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kDREraseProgressSetupCallbacksCurrentVersion] forKey:@"kDREraseProgressSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kDREraseSessionCancel] forKey:@"kDREraseSessionCancel"];
[d setObject:[Number numberWithDouble:kDREraseSessionOK] forKey:@"kDREraseSessionOK"];
[d setObject:[Number numberWithDouble:kDREraseSessionSetupCallbacksCurrentVersion] forKey:@"kDREraseSessionSetupCallbacksCurrentVersion"];
[d setObject:[Number numberWithDouble:kEraseSessionProgressDialogDefaultOptions] forKey:@"kEraseSessionProgressDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kEraseSessionProgressDialogOptionsCurrentVersion] forKey:@"kEraseSessionProgressDialogOptionsCurrentVersion"];
[d setObject:[Number numberWithDouble:kEraseSessionSetupDialogDefaultOptions] forKey:@"kEraseSessionSetupDialogDefaultOptions"];
[d setObject:[Number numberWithDouble:kEraseSessionSetupDialogDontHandleReservations] forKey:@"kEraseSessionSetupDialogDontHandleReservations"];
[d setObject:[Number numberWithDouble:kEraseSessionSetupDialogOptionsCurrentVersion] forKey:@"kEraseSessionSetupDialogOptionsCurrentVersion"];
if ([NSStackTraceKey isKindOfClass:[NSString class]]) [d setObject:NSStackTraceKey forKey:@"NSStackTraceKey"]; else NSLog([@"Can't initialize NSStackTraceKey with object " stringByAppendingString:[NSStackTraceKey description]]);
if ([NSUncaughtRuntimeErrorException isKindOfClass:[NSString class]]) [d setObject:NSUncaughtRuntimeErrorException forKey:@"NSUncaughtRuntimeErrorException"]; else NSLog([@"Can't initialize NSUncaughtRuntimeErrorException with object " stringByAppendingString:[NSUncaughtRuntimeErrorException description]]);
if ([NSUncaughtSystemExceptionException isKindOfClass:[NSString class]]) [d setObject:NSUncaughtSystemExceptionException forKey:@"NSUncaughtSystemExceptionException"]; else NSLog([@"Can't initialize NSUncaughtSystemExceptionException with object " stringByAppendingString:[NSUncaughtSystemExceptionException description]]);
[d setObject:[Number numberWithDouble:NSHandleOtherExceptionMask] forKey:@"NSHandleOtherExceptionMask"];
[d setObject:[Number numberWithDouble:NSHandleTopLevelExceptionMask] forKey:@"NSHandleTopLevelExceptionMask"];
[d setObject:[Number numberWithDouble:NSHandleUncaughtExceptionMask] forKey:@"NSHandleUncaughtExceptionMask"];
[d setObject:[Number numberWithDouble:NSHandleUncaughtRuntimeErrorMask] forKey:@"NSHandleUncaughtRuntimeErrorMask"];
[d setObject:[Number numberWithDouble:NSHandleUncaughtSystemExceptionMask] forKey:@"NSHandleUncaughtSystemExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnEveryExceptionMask] forKey:@"NSHangOnEveryExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnOtherExceptionMask] forKey:@"NSHangOnOtherExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnTopLevelExceptionMask] forKey:@"NSHangOnTopLevelExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnUncaughtExceptionMask] forKey:@"NSHangOnUncaughtExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnUncaughtRuntimeErrorMask] forKey:@"NSHangOnUncaughtRuntimeErrorMask"];
[d setObject:[Number numberWithDouble:NSHangOnUncaughtSystemExceptionMask] forKey:@"NSHangOnUncaughtSystemExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogAndHandleEveryExceptionMask] forKey:@"NSLogAndHandleEveryExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogOtherExceptionMask] forKey:@"NSLogOtherExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogTopLevelExceptionMask] forKey:@"NSLogTopLevelExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogUncaughtExceptionMask] forKey:@"NSLogUncaughtExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogUncaughtRuntimeErrorMask] forKey:@"NSLogUncaughtRuntimeErrorMask"];
[d setObject:[Number numberWithDouble:NSLogUncaughtSystemExceptionMask] forKey:@"NSLogUncaughtSystemExceptionMask"];
if ([NSStackTraceKey isKindOfClass:[NSString class]]) [d setObject:NSStackTraceKey forKey:@"NSStackTraceKey"]; else NSLog([@"Can't initialize NSStackTraceKey with object " stringByAppendingString:[NSStackTraceKey description]]);
if ([NSUncaughtRuntimeErrorException isKindOfClass:[NSString class]]) [d setObject:NSUncaughtRuntimeErrorException forKey:@"NSUncaughtRuntimeErrorException"]; else NSLog([@"Can't initialize NSUncaughtRuntimeErrorException with object " stringByAppendingString:[NSUncaughtRuntimeErrorException description]]);
if ([NSUncaughtSystemExceptionException isKindOfClass:[NSString class]]) [d setObject:NSUncaughtSystemExceptionException forKey:@"NSUncaughtSystemExceptionException"]; else NSLog([@"Can't initialize NSUncaughtSystemExceptionException with object " stringByAppendingString:[NSUncaughtSystemExceptionException description]]);
[d setObject:[Number numberWithDouble:NSHandleOtherExceptionMask] forKey:@"NSHandleOtherExceptionMask"];
[d setObject:[Number numberWithDouble:NSHandleTopLevelExceptionMask] forKey:@"NSHandleTopLevelExceptionMask"];
[d setObject:[Number numberWithDouble:NSHandleUncaughtExceptionMask] forKey:@"NSHandleUncaughtExceptionMask"];
[d setObject:[Number numberWithDouble:NSHandleUncaughtRuntimeErrorMask] forKey:@"NSHandleUncaughtRuntimeErrorMask"];
[d setObject:[Number numberWithDouble:NSHandleUncaughtSystemExceptionMask] forKey:@"NSHandleUncaughtSystemExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnEveryExceptionMask] forKey:@"NSHangOnEveryExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnOtherExceptionMask] forKey:@"NSHangOnOtherExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnTopLevelExceptionMask] forKey:@"NSHangOnTopLevelExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnUncaughtExceptionMask] forKey:@"NSHangOnUncaughtExceptionMask"];
[d setObject:[Number numberWithDouble:NSHangOnUncaughtRuntimeErrorMask] forKey:@"NSHangOnUncaughtRuntimeErrorMask"];
[d setObject:[Number numberWithDouble:NSHangOnUncaughtSystemExceptionMask] forKey:@"NSHangOnUncaughtSystemExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogAndHandleEveryExceptionMask] forKey:@"NSLogAndHandleEveryExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogOtherExceptionMask] forKey:@"NSLogOtherExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogTopLevelExceptionMask] forKey:@"NSLogTopLevelExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogUncaughtExceptionMask] forKey:@"NSLogUncaughtExceptionMask"];
[d setObject:[Number numberWithDouble:NSLogUncaughtRuntimeErrorMask] forKey:@"NSLogUncaughtRuntimeErrorMask"];
[d setObject:[Number numberWithDouble:NSLogUncaughtSystemExceptionMask] forKey:@"NSLogUncaughtSystemExceptionMask"];
if ([NSAppleEventManagerWillProcessFirstEventNotification isKindOfClass:[NSString class]]) [d setObject:NSAppleEventManagerWillProcessFirstEventNotification forKey:@"NSAppleEventManagerWillProcessFirstEventNotification"]; else NSLog([@"Can't initialize NSAppleEventManagerWillProcessFirstEventNotification with object " stringByAppendingString:[NSAppleEventManagerWillProcessFirstEventNotification description]]);
[d setObject:[Number numberWithDouble:NSAppleEventTimeOutDefault] forKey:@"NSAppleEventTimeOutDefault"];
[d setObject:[Number numberWithDouble:NSAppleEventTimeOutNone] forKey:@"NSAppleEventTimeOutNone"];
if ([NSAppleScriptErrorAppName isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorAppName forKey:@"NSAppleScriptErrorAppName"]; else NSLog([@"Can't initialize NSAppleScriptErrorAppName with object " stringByAppendingString:[NSAppleScriptErrorAppName description]]);
if ([NSAppleScriptErrorBriefMessage isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorBriefMessage forKey:@"NSAppleScriptErrorBriefMessage"]; else NSLog([@"Can't initialize NSAppleScriptErrorBriefMessage with object " stringByAppendingString:[NSAppleScriptErrorBriefMessage description]]);
if ([NSAppleScriptErrorMessage isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorMessage forKey:@"NSAppleScriptErrorMessage"]; else NSLog([@"Can't initialize NSAppleScriptErrorMessage with object " stringByAppendingString:[NSAppleScriptErrorMessage description]]);
if ([NSAppleScriptErrorNumber isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorNumber forKey:@"NSAppleScriptErrorNumber"]; else NSLog([@"Can't initialize NSAppleScriptErrorNumber with object " stringByAppendingString:[NSAppleScriptErrorNumber description]]);
if ([NSAppleScriptErrorRange isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorRange forKey:@"NSAppleScriptErrorRange"]; else NSLog([@"Can't initialize NSAppleScriptErrorRange with object " stringByAppendingString:[NSAppleScriptErrorRange description]]);
if ([NSArgumentDomain isKindOfClass:[NSString class]]) [d setObject:NSArgumentDomain forKey:@"NSArgumentDomain"]; else NSLog([@"Can't initialize NSArgumentDomain with object " stringByAppendingString:[NSArgumentDomain description]]);
if ([NSAverageKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSAverageKeyValueOperator forKey:@"NSAverageKeyValueOperator"]; else NSLog([@"Can't initialize NSAverageKeyValueOperator with object " stringByAppendingString:[NSAverageKeyValueOperator description]]);
if ([NSBuddhistCalendar isKindOfClass:[NSString class]]) [d setObject:NSBuddhistCalendar forKey:@"NSBuddhistCalendar"]; else NSLog([@"Can't initialize NSBuddhistCalendar with object " stringByAppendingString:[NSBuddhistCalendar description]]);
if ([NSBundleDidLoadNotification isKindOfClass:[NSString class]]) [d setObject:NSBundleDidLoadNotification forKey:@"NSBundleDidLoadNotification"]; else NSLog([@"Can't initialize NSBundleDidLoadNotification with object " stringByAppendingString:[NSBundleDidLoadNotification description]]);
if ([NSCharacterConversionException isKindOfClass:[NSString class]]) [d setObject:NSCharacterConversionException forKey:@"NSCharacterConversionException"]; else NSLog([@"Can't initialize NSCharacterConversionException with object " stringByAppendingString:[NSCharacterConversionException description]]);
if ([NSChineseCalendar isKindOfClass:[NSString class]]) [d setObject:NSChineseCalendar forKey:@"NSChineseCalendar"]; else NSLog([@"Can't initialize NSChineseCalendar with object " stringByAppendingString:[NSChineseCalendar description]]);
if ([NSClassDescriptionNeededForClassNotification isKindOfClass:[NSString class]]) [d setObject:NSClassDescriptionNeededForClassNotification forKey:@"NSClassDescriptionNeededForClassNotification"]; else NSLog([@"Can't initialize NSClassDescriptionNeededForClassNotification with object " stringByAppendingString:[NSClassDescriptionNeededForClassNotification description]]);
if ([NSCocoaErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSCocoaErrorDomain forKey:@"NSCocoaErrorDomain"]; else NSLog([@"Can't initialize NSCocoaErrorDomain with object " stringByAppendingString:[NSCocoaErrorDomain description]]);
if ([NSConnectionDidDieNotification isKindOfClass:[NSString class]]) [d setObject:NSConnectionDidDieNotification forKey:@"NSConnectionDidDieNotification"]; else NSLog([@"Can't initialize NSConnectionDidDieNotification with object " stringByAppendingString:[NSConnectionDidDieNotification description]]);
if ([NSConnectionDidInitializeNotification isKindOfClass:[NSString class]]) [d setObject:NSConnectionDidInitializeNotification forKey:@"NSConnectionDidInitializeNotification"]; else NSLog([@"Can't initialize NSConnectionDidInitializeNotification with object " stringByAppendingString:[NSConnectionDidInitializeNotification description]]);
if ([NSConnectionReplyMode isKindOfClass:[NSString class]]) [d setObject:NSConnectionReplyMode forKey:@"NSConnectionReplyMode"]; else NSLog([@"Can't initialize NSConnectionReplyMode with object " stringByAppendingString:[NSConnectionReplyMode description]]);
if ([NSCountKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSCountKeyValueOperator forKey:@"NSCountKeyValueOperator"]; else NSLog([@"Can't initialize NSCountKeyValueOperator with object " stringByAppendingString:[NSCountKeyValueOperator description]]);
if ([NSCurrentLocaleDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSCurrentLocaleDidChangeNotification forKey:@"NSCurrentLocaleDidChangeNotification"]; else NSLog([@"Can't initialize NSCurrentLocaleDidChangeNotification with object " stringByAppendingString:[NSCurrentLocaleDidChangeNotification description]]);
if ([NSDecimalNumberDivideByZeroException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberDivideByZeroException forKey:@"NSDecimalNumberDivideByZeroException"]; else NSLog([@"Can't initialize NSDecimalNumberDivideByZeroException with object " stringByAppendingString:[NSDecimalNumberDivideByZeroException description]]);
if ([NSDecimalNumberExactnessException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberExactnessException forKey:@"NSDecimalNumberExactnessException"]; else NSLog([@"Can't initialize NSDecimalNumberExactnessException with object " stringByAppendingString:[NSDecimalNumberExactnessException description]]);
if ([NSDecimalNumberOverflowException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberOverflowException forKey:@"NSDecimalNumberOverflowException"]; else NSLog([@"Can't initialize NSDecimalNumberOverflowException with object " stringByAppendingString:[NSDecimalNumberOverflowException description]]);
if ([NSDecimalNumberUnderflowException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberUnderflowException forKey:@"NSDecimalNumberUnderflowException"]; else NSLog([@"Can't initialize NSDecimalNumberUnderflowException with object " stringByAppendingString:[NSDecimalNumberUnderflowException description]]);
if ([NSDefaultRunLoopMode isKindOfClass:[NSString class]]) [d setObject:NSDefaultRunLoopMode forKey:@"NSDefaultRunLoopMode"]; else NSLog([@"Can't initialize NSDefaultRunLoopMode with object " stringByAppendingString:[NSDefaultRunLoopMode description]]);
if ([NSDestinationInvalidException isKindOfClass:[NSString class]]) [d setObject:NSDestinationInvalidException forKey:@"NSDestinationInvalidException"]; else NSLog([@"Can't initialize NSDestinationInvalidException with object " stringByAppendingString:[NSDestinationInvalidException description]]);
if ([NSDidBecomeSingleThreadedNotification isKindOfClass:[NSString class]]) [d setObject:NSDidBecomeSingleThreadedNotification forKey:@"NSDidBecomeSingleThreadedNotification"]; else NSLog([@"Can't initialize NSDidBecomeSingleThreadedNotification with object " stringByAppendingString:[NSDidBecomeSingleThreadedNotification description]]);
if ([NSDistinctUnionOfArraysKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSDistinctUnionOfArraysKeyValueOperator forKey:@"NSDistinctUnionOfArraysKeyValueOperator"]; else NSLog([@"Can't initialize NSDistinctUnionOfArraysKeyValueOperator with object " stringByAppendingString:[NSDistinctUnionOfArraysKeyValueOperator description]]);
if ([NSDistinctUnionOfObjectsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSDistinctUnionOfObjectsKeyValueOperator forKey:@"NSDistinctUnionOfObjectsKeyValueOperator"]; else NSLog([@"Can't initialize NSDistinctUnionOfObjectsKeyValueOperator with object " stringByAppendingString:[NSDistinctUnionOfObjectsKeyValueOperator description]]);
if ([NSDistinctUnionOfSetsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSDistinctUnionOfSetsKeyValueOperator forKey:@"NSDistinctUnionOfSetsKeyValueOperator"]; else NSLog([@"Can't initialize NSDistinctUnionOfSetsKeyValueOperator with object " stringByAppendingString:[NSDistinctUnionOfSetsKeyValueOperator description]]);
if ([NSErrorFailingURLStringKey isKindOfClass:[NSString class]]) [d setObject:NSErrorFailingURLStringKey forKey:@"NSErrorFailingURLStringKey"]; else NSLog([@"Can't initialize NSErrorFailingURLStringKey with object " stringByAppendingString:[NSErrorFailingURLStringKey description]]);
if ([NSFailedAuthenticationException isKindOfClass:[NSString class]]) [d setObject:NSFailedAuthenticationException forKey:@"NSFailedAuthenticationException"]; else NSLog([@"Can't initialize NSFailedAuthenticationException with object " stringByAppendingString:[NSFailedAuthenticationException description]]);
if ([NSFileAppendOnly isKindOfClass:[NSString class]]) [d setObject:NSFileAppendOnly forKey:@"NSFileAppendOnly"]; else NSLog([@"Can't initialize NSFileAppendOnly with object " stringByAppendingString:[NSFileAppendOnly description]]);
if ([NSFileBusy isKindOfClass:[NSString class]]) [d setObject:NSFileBusy forKey:@"NSFileBusy"]; else NSLog([@"Can't initialize NSFileBusy with object " stringByAppendingString:[NSFileBusy description]]);
if ([NSFileCreationDate isKindOfClass:[NSString class]]) [d setObject:NSFileCreationDate forKey:@"NSFileCreationDate"]; else NSLog([@"Can't initialize NSFileCreationDate with object " stringByAppendingString:[NSFileCreationDate description]]);
if ([NSFileDeviceIdentifier isKindOfClass:[NSString class]]) [d setObject:NSFileDeviceIdentifier forKey:@"NSFileDeviceIdentifier"]; else NSLog([@"Can't initialize NSFileDeviceIdentifier with object " stringByAppendingString:[NSFileDeviceIdentifier description]]);
if ([NSFileExtensionHidden isKindOfClass:[NSString class]]) [d setObject:NSFileExtensionHidden forKey:@"NSFileExtensionHidden"]; else NSLog([@"Can't initialize NSFileExtensionHidden with object " stringByAppendingString:[NSFileExtensionHidden description]]);
if ([NSFileGroupOwnerAccountID isKindOfClass:[NSString class]]) [d setObject:NSFileGroupOwnerAccountID forKey:@"NSFileGroupOwnerAccountID"]; else NSLog([@"Can't initialize NSFileGroupOwnerAccountID with object " stringByAppendingString:[NSFileGroupOwnerAccountID description]]);
if ([NSFileGroupOwnerAccountName isKindOfClass:[NSString class]]) [d setObject:NSFileGroupOwnerAccountName forKey:@"NSFileGroupOwnerAccountName"]; else NSLog([@"Can't initialize NSFileGroupOwnerAccountName with object " stringByAppendingString:[NSFileGroupOwnerAccountName description]]);
if ([NSFileHFSCreatorCode isKindOfClass:[NSString class]]) [d setObject:NSFileHFSCreatorCode forKey:@"NSFileHFSCreatorCode"]; else NSLog([@"Can't initialize NSFileHFSCreatorCode with object " stringByAppendingString:[NSFileHFSCreatorCode description]]);
if ([NSFileHFSTypeCode isKindOfClass:[NSString class]]) [d setObject:NSFileHFSTypeCode forKey:@"NSFileHFSTypeCode"]; else NSLog([@"Can't initialize NSFileHFSTypeCode with object " stringByAppendingString:[NSFileHFSTypeCode description]]);
if ([NSFileHandleConnectionAcceptedNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleConnectionAcceptedNotification forKey:@"NSFileHandleConnectionAcceptedNotification"]; else NSLog([@"Can't initialize NSFileHandleConnectionAcceptedNotification with object " stringByAppendingString:[NSFileHandleConnectionAcceptedNotification description]]);
if ([NSFileHandleDataAvailableNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleDataAvailableNotification forKey:@"NSFileHandleDataAvailableNotification"]; else NSLog([@"Can't initialize NSFileHandleDataAvailableNotification with object " stringByAppendingString:[NSFileHandleDataAvailableNotification description]]);
if ([NSFileHandleNotificationDataItem isKindOfClass:[NSString class]]) [d setObject:NSFileHandleNotificationDataItem forKey:@"NSFileHandleNotificationDataItem"]; else NSLog([@"Can't initialize NSFileHandleNotificationDataItem with object " stringByAppendingString:[NSFileHandleNotificationDataItem description]]);
if ([NSFileHandleNotificationFileHandleItem isKindOfClass:[NSString class]]) [d setObject:NSFileHandleNotificationFileHandleItem forKey:@"NSFileHandleNotificationFileHandleItem"]; else NSLog([@"Can't initialize NSFileHandleNotificationFileHandleItem with object " stringByAppendingString:[NSFileHandleNotificationFileHandleItem description]]);
if ([NSFileHandleNotificationMonitorModes isKindOfClass:[NSString class]]) [d setObject:NSFileHandleNotificationMonitorModes forKey:@"NSFileHandleNotificationMonitorModes"]; else NSLog([@"Can't initialize NSFileHandleNotificationMonitorModes with object " stringByAppendingString:[NSFileHandleNotificationMonitorModes description]]);
if ([NSFileHandleOperationException isKindOfClass:[NSString class]]) [d setObject:NSFileHandleOperationException forKey:@"NSFileHandleOperationException"]; else NSLog([@"Can't initialize NSFileHandleOperationException with object " stringByAppendingString:[NSFileHandleOperationException description]]);
if ([NSFileHandleReadCompletionNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleReadCompletionNotification forKey:@"NSFileHandleReadCompletionNotification"]; else NSLog([@"Can't initialize NSFileHandleReadCompletionNotification with object " stringByAppendingString:[NSFileHandleReadCompletionNotification description]]);
if ([NSFileHandleReadToEndOfFileCompletionNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleReadToEndOfFileCompletionNotification forKey:@"NSFileHandleReadToEndOfFileCompletionNotification"]; else NSLog([@"Can't initialize NSFileHandleReadToEndOfFileCompletionNotification with object " stringByAppendingString:[NSFileHandleReadToEndOfFileCompletionNotification description]]);
if ([NSFileImmutable isKindOfClass:[NSString class]]) [d setObject:NSFileImmutable forKey:@"NSFileImmutable"]; else NSLog([@"Can't initialize NSFileImmutable with object " stringByAppendingString:[NSFileImmutable description]]);
if ([NSFileModificationDate isKindOfClass:[NSString class]]) [d setObject:NSFileModificationDate forKey:@"NSFileModificationDate"]; else NSLog([@"Can't initialize NSFileModificationDate with object " stringByAppendingString:[NSFileModificationDate description]]);
if ([NSFileOwnerAccountID isKindOfClass:[NSString class]]) [d setObject:NSFileOwnerAccountID forKey:@"NSFileOwnerAccountID"]; else NSLog([@"Can't initialize NSFileOwnerAccountID with object " stringByAppendingString:[NSFileOwnerAccountID description]]);
if ([NSFileOwnerAccountName isKindOfClass:[NSString class]]) [d setObject:NSFileOwnerAccountName forKey:@"NSFileOwnerAccountName"]; else NSLog([@"Can't initialize NSFileOwnerAccountName with object " stringByAppendingString:[NSFileOwnerAccountName description]]);
if ([NSFilePathErrorKey isKindOfClass:[NSString class]]) [d setObject:NSFilePathErrorKey forKey:@"NSFilePathErrorKey"]; else NSLog([@"Can't initialize NSFilePathErrorKey with object " stringByAppendingString:[NSFilePathErrorKey description]]);
if ([NSFilePosixPermissions isKindOfClass:[NSString class]]) [d setObject:NSFilePosixPermissions forKey:@"NSFilePosixPermissions"]; else NSLog([@"Can't initialize NSFilePosixPermissions with object " stringByAppendingString:[NSFilePosixPermissions description]]);
if ([NSFileReferenceCount isKindOfClass:[NSString class]]) [d setObject:NSFileReferenceCount forKey:@"NSFileReferenceCount"]; else NSLog([@"Can't initialize NSFileReferenceCount with object " stringByAppendingString:[NSFileReferenceCount description]]);
if ([NSFileSize isKindOfClass:[NSString class]]) [d setObject:NSFileSize forKey:@"NSFileSize"]; else NSLog([@"Can't initialize NSFileSize with object " stringByAppendingString:[NSFileSize description]]);
if ([NSFileSystemFileNumber isKindOfClass:[NSString class]]) [d setObject:NSFileSystemFileNumber forKey:@"NSFileSystemFileNumber"]; else NSLog([@"Can't initialize NSFileSystemFileNumber with object " stringByAppendingString:[NSFileSystemFileNumber description]]);
if ([NSFileSystemFreeNodes isKindOfClass:[NSString class]]) [d setObject:NSFileSystemFreeNodes forKey:@"NSFileSystemFreeNodes"]; else NSLog([@"Can't initialize NSFileSystemFreeNodes with object " stringByAppendingString:[NSFileSystemFreeNodes description]]);
if ([NSFileSystemFreeSize isKindOfClass:[NSString class]]) [d setObject:NSFileSystemFreeSize forKey:@"NSFileSystemFreeSize"]; else NSLog([@"Can't initialize NSFileSystemFreeSize with object " stringByAppendingString:[NSFileSystemFreeSize description]]);
if ([NSFileSystemNodes isKindOfClass:[NSString class]]) [d setObject:NSFileSystemNodes forKey:@"NSFileSystemNodes"]; else NSLog([@"Can't initialize NSFileSystemNodes with object " stringByAppendingString:[NSFileSystemNodes description]]);
if ([NSFileSystemNumber isKindOfClass:[NSString class]]) [d setObject:NSFileSystemNumber forKey:@"NSFileSystemNumber"]; else NSLog([@"Can't initialize NSFileSystemNumber with object " stringByAppendingString:[NSFileSystemNumber description]]);
if ([NSFileSystemSize isKindOfClass:[NSString class]]) [d setObject:NSFileSystemSize forKey:@"NSFileSystemSize"]; else NSLog([@"Can't initialize NSFileSystemSize with object " stringByAppendingString:[NSFileSystemSize description]]);
if ([NSFileType isKindOfClass:[NSString class]]) [d setObject:NSFileType forKey:@"NSFileType"]; else NSLog([@"Can't initialize NSFileType with object " stringByAppendingString:[NSFileType description]]);
if ([NSFileTypeBlockSpecial isKindOfClass:[NSString class]]) [d setObject:NSFileTypeBlockSpecial forKey:@"NSFileTypeBlockSpecial"]; else NSLog([@"Can't initialize NSFileTypeBlockSpecial with object " stringByAppendingString:[NSFileTypeBlockSpecial description]]);
if ([NSFileTypeCharacterSpecial isKindOfClass:[NSString class]]) [d setObject:NSFileTypeCharacterSpecial forKey:@"NSFileTypeCharacterSpecial"]; else NSLog([@"Can't initialize NSFileTypeCharacterSpecial with object " stringByAppendingString:[NSFileTypeCharacterSpecial description]]);
if ([NSFileTypeDirectory isKindOfClass:[NSString class]]) [d setObject:NSFileTypeDirectory forKey:@"NSFileTypeDirectory"]; else NSLog([@"Can't initialize NSFileTypeDirectory with object " stringByAppendingString:[NSFileTypeDirectory description]]);
if ([NSFileTypeRegular isKindOfClass:[NSString class]]) [d setObject:NSFileTypeRegular forKey:@"NSFileTypeRegular"]; else NSLog([@"Can't initialize NSFileTypeRegular with object " stringByAppendingString:[NSFileTypeRegular description]]);
if ([NSFileTypeSocket isKindOfClass:[NSString class]]) [d setObject:NSFileTypeSocket forKey:@"NSFileTypeSocket"]; else NSLog([@"Can't initialize NSFileTypeSocket with object " stringByAppendingString:[NSFileTypeSocket description]]);
if ([NSFileTypeSymbolicLink isKindOfClass:[NSString class]]) [d setObject:NSFileTypeSymbolicLink forKey:@"NSFileTypeSymbolicLink"]; else NSLog([@"Can't initialize NSFileTypeSymbolicLink with object " stringByAppendingString:[NSFileTypeSymbolicLink description]]);
if ([NSFileTypeUnknown isKindOfClass:[NSString class]]) [d setObject:NSFileTypeUnknown forKey:@"NSFileTypeUnknown"]; else NSLog([@"Can't initialize NSFileTypeUnknown with object " stringByAppendingString:[NSFileTypeUnknown description]]);
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber] forKey:@"NSFoundationVersionNumber"];
if ([NSGenericException isKindOfClass:[NSString class]]) [d setObject:NSGenericException forKey:@"NSGenericException"]; else NSLog([@"Can't initialize NSGenericException with object " stringByAppendingString:[NSGenericException description]]);
if ([NSGlobalDomain isKindOfClass:[NSString class]]) [d setObject:NSGlobalDomain forKey:@"NSGlobalDomain"]; else NSLog([@"Can't initialize NSGlobalDomain with object " stringByAppendingString:[NSGlobalDomain description]]);
if ([NSGrammarCorrections isKindOfClass:[NSString class]]) [d setObject:NSGrammarCorrections forKey:@"NSGrammarCorrections"]; else NSLog([@"Can't initialize NSGrammarCorrections with object " stringByAppendingString:[NSGrammarCorrections description]]);
if ([NSGrammarRange isKindOfClass:[NSString class]]) [d setObject:NSGrammarRange forKey:@"NSGrammarRange"]; else NSLog([@"Can't initialize NSGrammarRange with object " stringByAppendingString:[NSGrammarRange description]]);
if ([NSGrammarUserDescription isKindOfClass:[NSString class]]) [d setObject:NSGrammarUserDescription forKey:@"NSGrammarUserDescription"]; else NSLog([@"Can't initialize NSGrammarUserDescription with object " stringByAppendingString:[NSGrammarUserDescription description]]);
if ([NSGregorianCalendar isKindOfClass:[NSString class]]) [d setObject:NSGregorianCalendar forKey:@"NSGregorianCalendar"]; else NSLog([@"Can't initialize NSGregorianCalendar with object " stringByAppendingString:[NSGregorianCalendar description]]);
if ([NSHTTPCookieComment isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieComment forKey:@"NSHTTPCookieComment"]; else NSLog([@"Can't initialize NSHTTPCookieComment with object " stringByAppendingString:[NSHTTPCookieComment description]]);
if ([NSHTTPCookieCommentURL isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieCommentURL forKey:@"NSHTTPCookieCommentURL"]; else NSLog([@"Can't initialize NSHTTPCookieCommentURL with object " stringByAppendingString:[NSHTTPCookieCommentURL description]]);
if ([NSHTTPCookieDiscard isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieDiscard forKey:@"NSHTTPCookieDiscard"]; else NSLog([@"Can't initialize NSHTTPCookieDiscard with object " stringByAppendingString:[NSHTTPCookieDiscard description]]);
if ([NSHTTPCookieDomain isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieDomain forKey:@"NSHTTPCookieDomain"]; else NSLog([@"Can't initialize NSHTTPCookieDomain with object " stringByAppendingString:[NSHTTPCookieDomain description]]);
if ([NSHTTPCookieExpires isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieExpires forKey:@"NSHTTPCookieExpires"]; else NSLog([@"Can't initialize NSHTTPCookieExpires with object " stringByAppendingString:[NSHTTPCookieExpires description]]);
if ([NSHTTPCookieManagerAcceptPolicyChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieManagerAcceptPolicyChangedNotification forKey:@"NSHTTPCookieManagerAcceptPolicyChangedNotification"]; else NSLog([@"Can't initialize NSHTTPCookieManagerAcceptPolicyChangedNotification with object " stringByAppendingString:[NSHTTPCookieManagerAcceptPolicyChangedNotification description]]);
if ([NSHTTPCookieManagerCookiesChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieManagerCookiesChangedNotification forKey:@"NSHTTPCookieManagerCookiesChangedNotification"]; else NSLog([@"Can't initialize NSHTTPCookieManagerCookiesChangedNotification with object " stringByAppendingString:[NSHTTPCookieManagerCookiesChangedNotification description]]);
if ([NSHTTPCookieMaximumAge isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieMaximumAge forKey:@"NSHTTPCookieMaximumAge"]; else NSLog([@"Can't initialize NSHTTPCookieMaximumAge with object " stringByAppendingString:[NSHTTPCookieMaximumAge description]]);
if ([NSHTTPCookieName isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieName forKey:@"NSHTTPCookieName"]; else NSLog([@"Can't initialize NSHTTPCookieName with object " stringByAppendingString:[NSHTTPCookieName description]]);
if ([NSHTTPCookieOriginURL isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieOriginURL forKey:@"NSHTTPCookieOriginURL"]; else NSLog([@"Can't initialize NSHTTPCookieOriginURL with object " stringByAppendingString:[NSHTTPCookieOriginURL description]]);
if ([NSHTTPCookiePath isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookiePath forKey:@"NSHTTPCookiePath"]; else NSLog([@"Can't initialize NSHTTPCookiePath with object " stringByAppendingString:[NSHTTPCookiePath description]]);
if ([NSHTTPCookiePort isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookiePort forKey:@"NSHTTPCookiePort"]; else NSLog([@"Can't initialize NSHTTPCookiePort with object " stringByAppendingString:[NSHTTPCookiePort description]]);
if ([NSHTTPCookieSecure isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieSecure forKey:@"NSHTTPCookieSecure"]; else NSLog([@"Can't initialize NSHTTPCookieSecure with object " stringByAppendingString:[NSHTTPCookieSecure description]]);
if ([NSHTTPCookieValue isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieValue forKey:@"NSHTTPCookieValue"]; else NSLog([@"Can't initialize NSHTTPCookieValue with object " stringByAppendingString:[NSHTTPCookieValue description]]);
if ([NSHTTPCookieVersion isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieVersion forKey:@"NSHTTPCookieVersion"]; else NSLog([@"Can't initialize NSHTTPCookieVersion with object " stringByAppendingString:[NSHTTPCookieVersion description]]);
if ([NSHebrewCalendar isKindOfClass:[NSString class]]) [d setObject:NSHebrewCalendar forKey:@"NSHebrewCalendar"]; else NSLog([@"Can't initialize NSHebrewCalendar with object " stringByAppendingString:[NSHebrewCalendar description]]);
if ([NSInconsistentArchiveException isKindOfClass:[NSString class]]) [d setObject:NSInconsistentArchiveException forKey:@"NSInconsistentArchiveException"]; else NSLog([@"Can't initialize NSInconsistentArchiveException with object " stringByAppendingString:[NSInconsistentArchiveException description]]);
if ([NSInternalInconsistencyException isKindOfClass:[NSString class]]) [d setObject:NSInternalInconsistencyException forKey:@"NSInternalInconsistencyException"]; else NSLog([@"Can't initialize NSInternalInconsistencyException with object " stringByAppendingString:[NSInternalInconsistencyException description]]);
if ([NSInvalidArchiveOperationException isKindOfClass:[NSString class]]) [d setObject:NSInvalidArchiveOperationException forKey:@"NSInvalidArchiveOperationException"]; else NSLog([@"Can't initialize NSInvalidArchiveOperationException with object " stringByAppendingString:[NSInvalidArchiveOperationException description]]);
if ([NSInvalidArgumentException isKindOfClass:[NSString class]]) [d setObject:NSInvalidArgumentException forKey:@"NSInvalidArgumentException"]; else NSLog([@"Can't initialize NSInvalidArgumentException with object " stringByAppendingString:[NSInvalidArgumentException description]]);
if ([NSInvalidReceivePortException isKindOfClass:[NSString class]]) [d setObject:NSInvalidReceivePortException forKey:@"NSInvalidReceivePortException"]; else NSLog([@"Can't initialize NSInvalidReceivePortException with object " stringByAppendingString:[NSInvalidReceivePortException description]]);
if ([NSInvalidSendPortException isKindOfClass:[NSString class]]) [d setObject:NSInvalidSendPortException forKey:@"NSInvalidSendPortException"]; else NSLog([@"Can't initialize NSInvalidSendPortException with object " stringByAppendingString:[NSInvalidSendPortException description]]);
if ([NSInvalidUnarchiveOperationException isKindOfClass:[NSString class]]) [d setObject:NSInvalidUnarchiveOperationException forKey:@"NSInvalidUnarchiveOperationException"]; else NSLog([@"Can't initialize NSInvalidUnarchiveOperationException with object " stringByAppendingString:[NSInvalidUnarchiveOperationException description]]);
if ([NSInvocationOperationCancelledException isKindOfClass:[NSString class]]) [d setObject:NSInvocationOperationCancelledException forKey:@"NSInvocationOperationCancelledException"]; else NSLog([@"Can't initialize NSInvocationOperationCancelledException with object " stringByAppendingString:[NSInvocationOperationCancelledException description]]);
if ([NSInvocationOperationVoidResultException isKindOfClass:[NSString class]]) [d setObject:NSInvocationOperationVoidResultException forKey:@"NSInvocationOperationVoidResultException"]; else NSLog([@"Can't initialize NSInvocationOperationVoidResultException with object " stringByAppendingString:[NSInvocationOperationVoidResultException description]]);
if ([NSIsNilTransformerName isKindOfClass:[NSString class]]) [d setObject:NSIsNilTransformerName forKey:@"NSIsNilTransformerName"]; else NSLog([@"Can't initialize NSIsNilTransformerName with object " stringByAppendingString:[NSIsNilTransformerName description]]);
if ([NSIsNotNilTransformerName isKindOfClass:[NSString class]]) [d setObject:NSIsNotNilTransformerName forKey:@"NSIsNotNilTransformerName"]; else NSLog([@"Can't initialize NSIsNotNilTransformerName with object " stringByAppendingString:[NSIsNotNilTransformerName description]]);
if ([NSIslamicCalendar isKindOfClass:[NSString class]]) [d setObject:NSIslamicCalendar forKey:@"NSIslamicCalendar"]; else NSLog([@"Can't initialize NSIslamicCalendar with object " stringByAppendingString:[NSIslamicCalendar description]]);
if ([NSIslamicCivilCalendar isKindOfClass:[NSString class]]) [d setObject:NSIslamicCivilCalendar forKey:@"NSIslamicCivilCalendar"]; else NSLog([@"Can't initialize NSIslamicCivilCalendar with object " stringByAppendingString:[NSIslamicCivilCalendar description]]);
if ([NSJapaneseCalendar isKindOfClass:[NSString class]]) [d setObject:NSJapaneseCalendar forKey:@"NSJapaneseCalendar"]; else NSLog([@"Can't initialize NSJapaneseCalendar with object " stringByAppendingString:[NSJapaneseCalendar description]]);
if ([NSKeyValueChangeIndexesKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeIndexesKey forKey:@"NSKeyValueChangeIndexesKey"]; else NSLog([@"Can't initialize NSKeyValueChangeIndexesKey with object " stringByAppendingString:[NSKeyValueChangeIndexesKey description]]);
if ([NSKeyValueChangeKindKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeKindKey forKey:@"NSKeyValueChangeKindKey"]; else NSLog([@"Can't initialize NSKeyValueChangeKindKey with object " stringByAppendingString:[NSKeyValueChangeKindKey description]]);
if ([NSKeyValueChangeNewKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeNewKey forKey:@"NSKeyValueChangeNewKey"]; else NSLog([@"Can't initialize NSKeyValueChangeNewKey with object " stringByAppendingString:[NSKeyValueChangeNewKey description]]);
if ([NSKeyValueChangeNotificationIsPriorKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeNotificationIsPriorKey forKey:@"NSKeyValueChangeNotificationIsPriorKey"]; else NSLog([@"Can't initialize NSKeyValueChangeNotificationIsPriorKey with object " stringByAppendingString:[NSKeyValueChangeNotificationIsPriorKey description]]);
if ([NSKeyValueChangeOldKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeOldKey forKey:@"NSKeyValueChangeOldKey"]; else NSLog([@"Can't initialize NSKeyValueChangeOldKey with object " stringByAppendingString:[NSKeyValueChangeOldKey description]]);
if ([NSKeyedUnarchiveFromDataTransformerName isKindOfClass:[NSString class]]) [d setObject:NSKeyedUnarchiveFromDataTransformerName forKey:@"NSKeyedUnarchiveFromDataTransformerName"]; else NSLog([@"Can't initialize NSKeyedUnarchiveFromDataTransformerName with object " stringByAppendingString:[NSKeyedUnarchiveFromDataTransformerName description]]);
if ([NSLoadedClasses isKindOfClass:[NSString class]]) [d setObject:NSLoadedClasses forKey:@"NSLoadedClasses"]; else NSLog([@"Can't initialize NSLoadedClasses with object " stringByAppendingString:[NSLoadedClasses description]]);
if ([NSLocalNotificationCenterType isKindOfClass:[NSString class]]) [d setObject:NSLocalNotificationCenterType forKey:@"NSLocalNotificationCenterType"]; else NSLog([@"Can't initialize NSLocalNotificationCenterType with object " stringByAppendingString:[NSLocalNotificationCenterType description]]);
if ([NSLocaleCalendar isKindOfClass:[NSString class]]) [d setObject:NSLocaleCalendar forKey:@"NSLocaleCalendar"]; else NSLog([@"Can't initialize NSLocaleCalendar with object " stringByAppendingString:[NSLocaleCalendar description]]);
if ([NSLocaleCollationIdentifier isKindOfClass:[NSString class]]) [d setObject:NSLocaleCollationIdentifier forKey:@"NSLocaleCollationIdentifier"]; else NSLog([@"Can't initialize NSLocaleCollationIdentifier with object " stringByAppendingString:[NSLocaleCollationIdentifier description]]);
if ([NSLocaleCountryCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleCountryCode forKey:@"NSLocaleCountryCode"]; else NSLog([@"Can't initialize NSLocaleCountryCode with object " stringByAppendingString:[NSLocaleCountryCode description]]);
if ([NSLocaleCurrencyCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleCurrencyCode forKey:@"NSLocaleCurrencyCode"]; else NSLog([@"Can't initialize NSLocaleCurrencyCode with object " stringByAppendingString:[NSLocaleCurrencyCode description]]);
if ([NSLocaleCurrencySymbol isKindOfClass:[NSString class]]) [d setObject:NSLocaleCurrencySymbol forKey:@"NSLocaleCurrencySymbol"]; else NSLog([@"Can't initialize NSLocaleCurrencySymbol with object " stringByAppendingString:[NSLocaleCurrencySymbol description]]);
if ([NSLocaleDecimalSeparator isKindOfClass:[NSString class]]) [d setObject:NSLocaleDecimalSeparator forKey:@"NSLocaleDecimalSeparator"]; else NSLog([@"Can't initialize NSLocaleDecimalSeparator with object " stringByAppendingString:[NSLocaleDecimalSeparator description]]);
if ([NSLocaleExemplarCharacterSet isKindOfClass:[NSString class]]) [d setObject:NSLocaleExemplarCharacterSet forKey:@"NSLocaleExemplarCharacterSet"]; else NSLog([@"Can't initialize NSLocaleExemplarCharacterSet with object " stringByAppendingString:[NSLocaleExemplarCharacterSet description]]);
if ([NSLocaleGroupingSeparator isKindOfClass:[NSString class]]) [d setObject:NSLocaleGroupingSeparator forKey:@"NSLocaleGroupingSeparator"]; else NSLog([@"Can't initialize NSLocaleGroupingSeparator with object " stringByAppendingString:[NSLocaleGroupingSeparator description]]);
if ([NSLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSLocaleIdentifier forKey:@"NSLocaleIdentifier"]; else NSLog([@"Can't initialize NSLocaleIdentifier with object " stringByAppendingString:[NSLocaleIdentifier description]]);
if ([NSLocaleLanguageCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleLanguageCode forKey:@"NSLocaleLanguageCode"]; else NSLog([@"Can't initialize NSLocaleLanguageCode with object " stringByAppendingString:[NSLocaleLanguageCode description]]);
if ([NSLocaleMeasurementSystem isKindOfClass:[NSString class]]) [d setObject:NSLocaleMeasurementSystem forKey:@"NSLocaleMeasurementSystem"]; else NSLog([@"Can't initialize NSLocaleMeasurementSystem with object " stringByAppendingString:[NSLocaleMeasurementSystem description]]);
if ([NSLocaleScriptCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleScriptCode forKey:@"NSLocaleScriptCode"]; else NSLog([@"Can't initialize NSLocaleScriptCode with object " stringByAppendingString:[NSLocaleScriptCode description]]);
if ([NSLocaleUsesMetricSystem isKindOfClass:[NSString class]]) [d setObject:NSLocaleUsesMetricSystem forKey:@"NSLocaleUsesMetricSystem"]; else NSLog([@"Can't initialize NSLocaleUsesMetricSystem with object " stringByAppendingString:[NSLocaleUsesMetricSystem description]]);
if ([NSLocaleVariantCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleVariantCode forKey:@"NSLocaleVariantCode"]; else NSLog([@"Can't initialize NSLocaleVariantCode with object " stringByAppendingString:[NSLocaleVariantCode description]]);
if ([NSLocalizedDescriptionKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedDescriptionKey forKey:@"NSLocalizedDescriptionKey"]; else NSLog([@"Can't initialize NSLocalizedDescriptionKey with object " stringByAppendingString:[NSLocalizedDescriptionKey description]]);
if ([NSLocalizedFailureReasonErrorKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedFailureReasonErrorKey forKey:@"NSLocalizedFailureReasonErrorKey"]; else NSLog([@"Can't initialize NSLocalizedFailureReasonErrorKey with object " stringByAppendingString:[NSLocalizedFailureReasonErrorKey description]]);
if ([NSLocalizedRecoveryOptionsErrorKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedRecoveryOptionsErrorKey forKey:@"NSLocalizedRecoveryOptionsErrorKey"]; else NSLog([@"Can't initialize NSLocalizedRecoveryOptionsErrorKey with object " stringByAppendingString:[NSLocalizedRecoveryOptionsErrorKey description]]);
if ([NSLocalizedRecoverySuggestionErrorKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedRecoverySuggestionErrorKey forKey:@"NSLocalizedRecoverySuggestionErrorKey"]; else NSLog([@"Can't initialize NSLocalizedRecoverySuggestionErrorKey with object " stringByAppendingString:[NSLocalizedRecoverySuggestionErrorKey description]]);
if ([NSMachErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSMachErrorDomain forKey:@"NSMachErrorDomain"]; else NSLog([@"Can't initialize NSMachErrorDomain with object " stringByAppendingString:[NSMachErrorDomain description]]);
if ([NSMallocException isKindOfClass:[NSString class]]) [d setObject:NSMallocException forKey:@"NSMallocException"]; else NSLog([@"Can't initialize NSMallocException with object " stringByAppendingString:[NSMallocException description]]);
if ([NSMaximumKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSMaximumKeyValueOperator forKey:@"NSMaximumKeyValueOperator"]; else NSLog([@"Can't initialize NSMaximumKeyValueOperator with object " stringByAppendingString:[NSMaximumKeyValueOperator description]]);
if ([NSMetadataQueryDidFinishGatheringNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryDidFinishGatheringNotification forKey:@"NSMetadataQueryDidFinishGatheringNotification"]; else NSLog([@"Can't initialize NSMetadataQueryDidFinishGatheringNotification with object " stringByAppendingString:[NSMetadataQueryDidFinishGatheringNotification description]]);
if ([NSMetadataQueryDidStartGatheringNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryDidStartGatheringNotification forKey:@"NSMetadataQueryDidStartGatheringNotification"]; else NSLog([@"Can't initialize NSMetadataQueryDidStartGatheringNotification with object " stringByAppendingString:[NSMetadataQueryDidStartGatheringNotification description]]);
if ([NSMetadataQueryDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryDidUpdateNotification forKey:@"NSMetadataQueryDidUpdateNotification"]; else NSLog([@"Can't initialize NSMetadataQueryDidUpdateNotification with object " stringByAppendingString:[NSMetadataQueryDidUpdateNotification description]]);
if ([NSMetadataQueryGatheringProgressNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryGatheringProgressNotification forKey:@"NSMetadataQueryGatheringProgressNotification"]; else NSLog([@"Can't initialize NSMetadataQueryGatheringProgressNotification with object " stringByAppendingString:[NSMetadataQueryGatheringProgressNotification description]]);
if ([NSMetadataQueryLocalComputerScope isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryLocalComputerScope forKey:@"NSMetadataQueryLocalComputerScope"]; else NSLog([@"Can't initialize NSMetadataQueryLocalComputerScope with object " stringByAppendingString:[NSMetadataQueryLocalComputerScope description]]);
if ([NSMetadataQueryNetworkScope isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryNetworkScope forKey:@"NSMetadataQueryNetworkScope"]; else NSLog([@"Can't initialize NSMetadataQueryNetworkScope with object " stringByAppendingString:[NSMetadataQueryNetworkScope description]]);
if ([NSMetadataQueryResultContentRelevanceAttribute isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryResultContentRelevanceAttribute forKey:@"NSMetadataQueryResultContentRelevanceAttribute"]; else NSLog([@"Can't initialize NSMetadataQueryResultContentRelevanceAttribute with object " stringByAppendingString:[NSMetadataQueryResultContentRelevanceAttribute description]]);
if ([NSMetadataQueryUserHomeScope isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryUserHomeScope forKey:@"NSMetadataQueryUserHomeScope"]; else NSLog([@"Can't initialize NSMetadataQueryUserHomeScope with object " stringByAppendingString:[NSMetadataQueryUserHomeScope description]]);
if ([NSMinimumKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSMinimumKeyValueOperator forKey:@"NSMinimumKeyValueOperator"]; else NSLog([@"Can't initialize NSMinimumKeyValueOperator with object " stringByAppendingString:[NSMinimumKeyValueOperator description]]);
if ([NSNegateBooleanTransformerName isKindOfClass:[NSString class]]) [d setObject:NSNegateBooleanTransformerName forKey:@"NSNegateBooleanTransformerName"]; else NSLog([@"Can't initialize NSNegateBooleanTransformerName with object " stringByAppendingString:[NSNegateBooleanTransformerName description]]);
if ([NSNetServicesErrorCode isKindOfClass:[NSString class]]) [d setObject:NSNetServicesErrorCode forKey:@"NSNetServicesErrorCode"]; else NSLog([@"Can't initialize NSNetServicesErrorCode with object " stringByAppendingString:[NSNetServicesErrorCode description]]);
if ([NSNetServicesErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSNetServicesErrorDomain forKey:@"NSNetServicesErrorDomain"]; else NSLog([@"Can't initialize NSNetServicesErrorDomain with object " stringByAppendingString:[NSNetServicesErrorDomain description]]);
if ([NSOSStatusErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSOSStatusErrorDomain forKey:@"NSOSStatusErrorDomain"]; else NSLog([@"Can't initialize NSOSStatusErrorDomain with object " stringByAppendingString:[NSOSStatusErrorDomain description]]);
if ([NSObjectInaccessibleException isKindOfClass:[NSString class]]) [d setObject:NSObjectInaccessibleException forKey:@"NSObjectInaccessibleException"]; else NSLog([@"Can't initialize NSObjectInaccessibleException with object " stringByAppendingString:[NSObjectInaccessibleException description]]);
if ([NSObjectNotAvailableException isKindOfClass:[NSString class]]) [d setObject:NSObjectNotAvailableException forKey:@"NSObjectNotAvailableException"]; else NSLog([@"Can't initialize NSObjectNotAvailableException with object " stringByAppendingString:[NSObjectNotAvailableException description]]);
if ([NSOldStyleException isKindOfClass:[NSString class]]) [d setObject:NSOldStyleException forKey:@"NSOldStyleException"]; else NSLog([@"Can't initialize NSOldStyleException with object " stringByAppendingString:[NSOldStyleException description]]);
if ([NSOperationNotSupportedForKeyException isKindOfClass:[NSString class]]) [d setObject:NSOperationNotSupportedForKeyException forKey:@"NSOperationNotSupportedForKeyException"]; else NSLog([@"Can't initialize NSOperationNotSupportedForKeyException with object " stringByAppendingString:[NSOperationNotSupportedForKeyException description]]);
if ([NSPOSIXErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSPOSIXErrorDomain forKey:@"NSPOSIXErrorDomain"]; else NSLog([@"Can't initialize NSPOSIXErrorDomain with object " stringByAppendingString:[NSPOSIXErrorDomain description]]);
if ([NSParseErrorException isKindOfClass:[NSString class]]) [d setObject:NSParseErrorException forKey:@"NSParseErrorException"]; else NSLog([@"Can't initialize NSParseErrorException with object " stringByAppendingString:[NSParseErrorException description]]);
if ([NSPortDidBecomeInvalidNotification isKindOfClass:[NSString class]]) [d setObject:NSPortDidBecomeInvalidNotification forKey:@"NSPortDidBecomeInvalidNotification"]; else NSLog([@"Can't initialize NSPortDidBecomeInvalidNotification with object " stringByAppendingString:[NSPortDidBecomeInvalidNotification description]]);
if ([NSPortReceiveException isKindOfClass:[NSString class]]) [d setObject:NSPortReceiveException forKey:@"NSPortReceiveException"]; else NSLog([@"Can't initialize NSPortReceiveException with object " stringByAppendingString:[NSPortReceiveException description]]);
if ([NSPortSendException isKindOfClass:[NSString class]]) [d setObject:NSPortSendException forKey:@"NSPortSendException"]; else NSLog([@"Can't initialize NSPortSendException with object " stringByAppendingString:[NSPortSendException description]]);
if ([NSPortTimeoutException isKindOfClass:[NSString class]]) [d setObject:NSPortTimeoutException forKey:@"NSPortTimeoutException"]; else NSLog([@"Can't initialize NSPortTimeoutException with object " stringByAppendingString:[NSPortTimeoutException description]]);
if ([NSRangeException isKindOfClass:[NSString class]]) [d setObject:NSRangeException forKey:@"NSRangeException"]; else NSLog([@"Can't initialize NSRangeException with object " stringByAppendingString:[NSRangeException description]]);
if ([NSRecoveryAttempterErrorKey isKindOfClass:[NSString class]]) [d setObject:NSRecoveryAttempterErrorKey forKey:@"NSRecoveryAttempterErrorKey"]; else NSLog([@"Can't initialize NSRecoveryAttempterErrorKey with object " stringByAppendingString:[NSRecoveryAttempterErrorKey description]]);
if ([NSRegistrationDomain isKindOfClass:[NSString class]]) [d setObject:NSRegistrationDomain forKey:@"NSRegistrationDomain"]; else NSLog([@"Can't initialize NSRegistrationDomain with object " stringByAppendingString:[NSRegistrationDomain description]]);
if ([NSRunLoopCommonModes isKindOfClass:[NSString class]]) [d setObject:NSRunLoopCommonModes forKey:@"NSRunLoopCommonModes"]; else NSLog([@"Can't initialize NSRunLoopCommonModes with object " stringByAppendingString:[NSRunLoopCommonModes description]]);
if ([NSStreamDataWrittenToMemoryStreamKey isKindOfClass:[NSString class]]) [d setObject:NSStreamDataWrittenToMemoryStreamKey forKey:@"NSStreamDataWrittenToMemoryStreamKey"]; else NSLog([@"Can't initialize NSStreamDataWrittenToMemoryStreamKey with object " stringByAppendingString:[NSStreamDataWrittenToMemoryStreamKey description]]);
if ([NSStreamFileCurrentOffsetKey isKindOfClass:[NSString class]]) [d setObject:NSStreamFileCurrentOffsetKey forKey:@"NSStreamFileCurrentOffsetKey"]; else NSLog([@"Can't initialize NSStreamFileCurrentOffsetKey with object " stringByAppendingString:[NSStreamFileCurrentOffsetKey description]]);
if ([NSStreamSOCKSErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSErrorDomain forKey:@"NSStreamSOCKSErrorDomain"]; else NSLog([@"Can't initialize NSStreamSOCKSErrorDomain with object " stringByAppendingString:[NSStreamSOCKSErrorDomain description]]);
if ([NSStreamSOCKSProxyConfigurationKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyConfigurationKey forKey:@"NSStreamSOCKSProxyConfigurationKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyConfigurationKey with object " stringByAppendingString:[NSStreamSOCKSProxyConfigurationKey description]]);
if ([NSStreamSOCKSProxyHostKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyHostKey forKey:@"NSStreamSOCKSProxyHostKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyHostKey with object " stringByAppendingString:[NSStreamSOCKSProxyHostKey description]]);
if ([NSStreamSOCKSProxyPasswordKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyPasswordKey forKey:@"NSStreamSOCKSProxyPasswordKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyPasswordKey with object " stringByAppendingString:[NSStreamSOCKSProxyPasswordKey description]]);
if ([NSStreamSOCKSProxyPortKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyPortKey forKey:@"NSStreamSOCKSProxyPortKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyPortKey with object " stringByAppendingString:[NSStreamSOCKSProxyPortKey description]]);
if ([NSStreamSOCKSProxyUserKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyUserKey forKey:@"NSStreamSOCKSProxyUserKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyUserKey with object " stringByAppendingString:[NSStreamSOCKSProxyUserKey description]]);
if ([NSStreamSOCKSProxyVersion4 isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyVersion4 forKey:@"NSStreamSOCKSProxyVersion4"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyVersion4 with object " stringByAppendingString:[NSStreamSOCKSProxyVersion4 description]]);
if ([NSStreamSOCKSProxyVersion5 isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyVersion5 forKey:@"NSStreamSOCKSProxyVersion5"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyVersion5 with object " stringByAppendingString:[NSStreamSOCKSProxyVersion5 description]]);
if ([NSStreamSOCKSProxyVersionKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyVersionKey forKey:@"NSStreamSOCKSProxyVersionKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyVersionKey with object " stringByAppendingString:[NSStreamSOCKSProxyVersionKey description]]);
if ([NSStreamSocketSSLErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSSLErrorDomain forKey:@"NSStreamSocketSSLErrorDomain"]; else NSLog([@"Can't initialize NSStreamSocketSSLErrorDomain with object " stringByAppendingString:[NSStreamSocketSSLErrorDomain description]]);
if ([NSStreamSocketSecurityLevelKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelKey forKey:@"NSStreamSocketSecurityLevelKey"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelKey with object " stringByAppendingString:[NSStreamSocketSecurityLevelKey description]]);
if ([NSStreamSocketSecurityLevelNegotiatedSSL isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelNegotiatedSSL forKey:@"NSStreamSocketSecurityLevelNegotiatedSSL"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelNegotiatedSSL with object " stringByAppendingString:[NSStreamSocketSecurityLevelNegotiatedSSL description]]);
if ([NSStreamSocketSecurityLevelNone isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelNone forKey:@"NSStreamSocketSecurityLevelNone"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelNone with object " stringByAppendingString:[NSStreamSocketSecurityLevelNone description]]);
if ([NSStreamSocketSecurityLevelSSLv2 isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelSSLv2 forKey:@"NSStreamSocketSecurityLevelSSLv2"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelSSLv2 with object " stringByAppendingString:[NSStreamSocketSecurityLevelSSLv2 description]]);
if ([NSStreamSocketSecurityLevelSSLv3 isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelSSLv3 forKey:@"NSStreamSocketSecurityLevelSSLv3"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelSSLv3 with object " stringByAppendingString:[NSStreamSocketSecurityLevelSSLv3 description]]);
if ([NSStreamSocketSecurityLevelTLSv1 isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelTLSv1 forKey:@"NSStreamSocketSecurityLevelTLSv1"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelTLSv1 with object " stringByAppendingString:[NSStreamSocketSecurityLevelTLSv1 description]]);
if ([NSStringEncodingErrorKey isKindOfClass:[NSString class]]) [d setObject:NSStringEncodingErrorKey forKey:@"NSStringEncodingErrorKey"]; else NSLog([@"Can't initialize NSStringEncodingErrorKey with object " stringByAppendingString:[NSStringEncodingErrorKey description]]);
if ([NSSumKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSSumKeyValueOperator forKey:@"NSSumKeyValueOperator"]; else NSLog([@"Can't initialize NSSumKeyValueOperator with object " stringByAppendingString:[NSSumKeyValueOperator description]]);
if ([NSSystemTimeZoneDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSSystemTimeZoneDidChangeNotification forKey:@"NSSystemTimeZoneDidChangeNotification"]; else NSLog([@"Can't initialize NSSystemTimeZoneDidChangeNotification with object " stringByAppendingString:[NSSystemTimeZoneDidChangeNotification description]]);
if ([NSTaskDidTerminateNotification isKindOfClass:[NSString class]]) [d setObject:NSTaskDidTerminateNotification forKey:@"NSTaskDidTerminateNotification"]; else NSLog([@"Can't initialize NSTaskDidTerminateNotification with object " stringByAppendingString:[NSTaskDidTerminateNotification description]]);
if ([NSThreadWillExitNotification isKindOfClass:[NSString class]]) [d setObject:NSThreadWillExitNotification forKey:@"NSThreadWillExitNotification"]; else NSLog([@"Can't initialize NSThreadWillExitNotification with object " stringByAppendingString:[NSThreadWillExitNotification description]]);
if ([NSURLAuthenticationMethodDefault isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodDefault forKey:@"NSURLAuthenticationMethodDefault"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodDefault with object " stringByAppendingString:[NSURLAuthenticationMethodDefault description]]);
if ([NSURLAuthenticationMethodHTMLForm isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodHTMLForm forKey:@"NSURLAuthenticationMethodHTMLForm"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodHTMLForm with object " stringByAppendingString:[NSURLAuthenticationMethodHTMLForm description]]);
if ([NSURLAuthenticationMethodHTTPBasic isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodHTTPBasic forKey:@"NSURLAuthenticationMethodHTTPBasic"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodHTTPBasic with object " stringByAppendingString:[NSURLAuthenticationMethodHTTPBasic description]]);
if ([NSURLAuthenticationMethodHTTPDigest isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodHTTPDigest forKey:@"NSURLAuthenticationMethodHTTPDigest"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodHTTPDigest with object " stringByAppendingString:[NSURLAuthenticationMethodHTTPDigest description]]);
if ([NSURLCredentialStorageChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSURLCredentialStorageChangedNotification forKey:@"NSURLCredentialStorageChangedNotification"]; else NSLog([@"Can't initialize NSURLCredentialStorageChangedNotification with object " stringByAppendingString:[NSURLCredentialStorageChangedNotification description]]);
if ([NSURLErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSURLErrorDomain forKey:@"NSURLErrorDomain"]; else NSLog([@"Can't initialize NSURLErrorDomain with object " stringByAppendingString:[NSURLErrorDomain description]]);
if ([NSURLErrorKey isKindOfClass:[NSString class]]) [d setObject:NSURLErrorKey forKey:@"NSURLErrorKey"]; else NSLog([@"Can't initialize NSURLErrorKey with object " stringByAppendingString:[NSURLErrorKey description]]);
if ([NSURLFileScheme isKindOfClass:[NSString class]]) [d setObject:NSURLFileScheme forKey:@"NSURLFileScheme"]; else NSLog([@"Can't initialize NSURLFileScheme with object " stringByAppendingString:[NSURLFileScheme description]]);
if ([NSURLProtectionSpaceFTPProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceFTPProxy forKey:@"NSURLProtectionSpaceFTPProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceFTPProxy with object " stringByAppendingString:[NSURLProtectionSpaceFTPProxy description]]);
if ([NSURLProtectionSpaceHTTPProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceHTTPProxy forKey:@"NSURLProtectionSpaceHTTPProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceHTTPProxy with object " stringByAppendingString:[NSURLProtectionSpaceHTTPProxy description]]);
if ([NSURLProtectionSpaceHTTPSProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceHTTPSProxy forKey:@"NSURLProtectionSpaceHTTPSProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceHTTPSProxy with object " stringByAppendingString:[NSURLProtectionSpaceHTTPSProxy description]]);
if ([NSURLProtectionSpaceSOCKSProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceSOCKSProxy forKey:@"NSURLProtectionSpaceSOCKSProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceSOCKSProxy with object " stringByAppendingString:[NSURLProtectionSpaceSOCKSProxy description]]);
if ([NSUnarchiveFromDataTransformerName isKindOfClass:[NSString class]]) [d setObject:NSUnarchiveFromDataTransformerName forKey:@"NSUnarchiveFromDataTransformerName"]; else NSLog([@"Can't initialize NSUnarchiveFromDataTransformerName with object " stringByAppendingString:[NSUnarchiveFromDataTransformerName description]]);
if ([NSUndefinedKeyException isKindOfClass:[NSString class]]) [d setObject:NSUndefinedKeyException forKey:@"NSUndefinedKeyException"]; else NSLog([@"Can't initialize NSUndefinedKeyException with object " stringByAppendingString:[NSUndefinedKeyException description]]);
if ([NSUnderlyingErrorKey isKindOfClass:[NSString class]]) [d setObject:NSUnderlyingErrorKey forKey:@"NSUnderlyingErrorKey"]; else NSLog([@"Can't initialize NSUnderlyingErrorKey with object " stringByAppendingString:[NSUnderlyingErrorKey description]]);
if ([NSUndoManagerCheckpointNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerCheckpointNotification forKey:@"NSUndoManagerCheckpointNotification"]; else NSLog([@"Can't initialize NSUndoManagerCheckpointNotification with object " stringByAppendingString:[NSUndoManagerCheckpointNotification description]]);
if ([NSUndoManagerDidOpenUndoGroupNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerDidOpenUndoGroupNotification forKey:@"NSUndoManagerDidOpenUndoGroupNotification"]; else NSLog([@"Can't initialize NSUndoManagerDidOpenUndoGroupNotification with object " stringByAppendingString:[NSUndoManagerDidOpenUndoGroupNotification description]]);
if ([NSUndoManagerDidRedoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerDidRedoChangeNotification forKey:@"NSUndoManagerDidRedoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerDidRedoChangeNotification with object " stringByAppendingString:[NSUndoManagerDidRedoChangeNotification description]]);
if ([NSUndoManagerDidUndoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerDidUndoChangeNotification forKey:@"NSUndoManagerDidUndoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerDidUndoChangeNotification with object " stringByAppendingString:[NSUndoManagerDidUndoChangeNotification description]]);
if ([NSUndoManagerWillCloseUndoGroupNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerWillCloseUndoGroupNotification forKey:@"NSUndoManagerWillCloseUndoGroupNotification"]; else NSLog([@"Can't initialize NSUndoManagerWillCloseUndoGroupNotification with object " stringByAppendingString:[NSUndoManagerWillCloseUndoGroupNotification description]]);
if ([NSUndoManagerWillRedoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerWillRedoChangeNotification forKey:@"NSUndoManagerWillRedoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerWillRedoChangeNotification with object " stringByAppendingString:[NSUndoManagerWillRedoChangeNotification description]]);
if ([NSUndoManagerWillUndoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerWillUndoChangeNotification forKey:@"NSUndoManagerWillUndoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerWillUndoChangeNotification with object " stringByAppendingString:[NSUndoManagerWillUndoChangeNotification description]]);
if ([NSUnionOfArraysKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSUnionOfArraysKeyValueOperator forKey:@"NSUnionOfArraysKeyValueOperator"]; else NSLog([@"Can't initialize NSUnionOfArraysKeyValueOperator with object " stringByAppendingString:[NSUnionOfArraysKeyValueOperator description]]);
if ([NSUnionOfObjectsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSUnionOfObjectsKeyValueOperator forKey:@"NSUnionOfObjectsKeyValueOperator"]; else NSLog([@"Can't initialize NSUnionOfObjectsKeyValueOperator with object " stringByAppendingString:[NSUnionOfObjectsKeyValueOperator description]]);
if ([NSUnionOfSetsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSUnionOfSetsKeyValueOperator forKey:@"NSUnionOfSetsKeyValueOperator"]; else NSLog([@"Can't initialize NSUnionOfSetsKeyValueOperator with object " stringByAppendingString:[NSUnionOfSetsKeyValueOperator description]]);
if ([NSUserDefaultsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUserDefaultsDidChangeNotification forKey:@"NSUserDefaultsDidChangeNotification"]; else NSLog([@"Can't initialize NSUserDefaultsDidChangeNotification with object " stringByAppendingString:[NSUserDefaultsDidChangeNotification description]]);
if ([NSWillBecomeMultiThreadedNotification isKindOfClass:[NSString class]]) [d setObject:NSWillBecomeMultiThreadedNotification forKey:@"NSWillBecomeMultiThreadedNotification"]; else NSLog([@"Can't initialize NSWillBecomeMultiThreadedNotification with object " stringByAppendingString:[NSWillBecomeMultiThreadedNotification description]]);
if ([NSXMLParserErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSXMLParserErrorDomain forKey:@"NSXMLParserErrorDomain"]; else NSLog([@"Can't initialize NSXMLParserErrorDomain with object " stringByAppendingString:[NSXMLParserErrorDomain description]]);
[d setObject:[Number numberWithDouble:NSASCIIStringEncoding] forKey:@"NSASCIIStringEncoding"];
[d setObject:[Number numberWithDouble:NSAdminApplicationDirectory] forKey:@"NSAdminApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSAggregateExpressionType] forKey:@"NSAggregateExpressionType"];
[d setObject:[Number numberWithDouble:NSAllApplicationsDirectory] forKey:@"NSAllApplicationsDirectory"];
[d setObject:[Number numberWithDouble:NSAllDomainsMask] forKey:@"NSAllDomainsMask"];
[d setObject:[Number numberWithDouble:NSAllLibrariesDirectory] forKey:@"NSAllLibrariesDirectory"];
[d setObject:[Number numberWithDouble:NSAllPredicateModifier] forKey:@"NSAllPredicateModifier"];
[d setObject:[Number numberWithDouble:NSAnchoredSearch] forKey:@"NSAnchoredSearch"];
[d setObject:[Number numberWithDouble:NSAndPredicateType] forKey:@"NSAndPredicateType"];
[d setObject:[Number numberWithDouble:NSAnyPredicateModifier] forKey:@"NSAnyPredicateModifier"];
[d setObject:[Number numberWithDouble:NSApplicationDirectory] forKey:@"NSApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSApplicationSupportDirectory] forKey:@"NSApplicationSupportDirectory"];
[d setObject:[Number numberWithDouble:NSArgumentEvaluationScriptError] forKey:@"NSArgumentEvaluationScriptError"];
[d setObject:[Number numberWithDouble:NSArgumentsWrongScriptError] forKey:@"NSArgumentsWrongScriptError"];
[d setObject:[Number numberWithDouble:NSAtomicWrite] forKey:@"NSAtomicWrite"];
[d setObject:[Number numberWithDouble:NSBackwardsSearch] forKey:@"NSBackwardsSearch"];
[d setObject:[Number numberWithDouble:NSBeginsWithComparison] forKey:@"NSBeginsWithComparison"];
[d setObject:[Number numberWithDouble:NSBeginsWithPredicateOperatorType] forKey:@"NSBeginsWithPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSBetweenPredicateOperatorType] forKey:@"NSBetweenPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitectureI386] forKey:@"NSBundleExecutableArchitectureI386"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitecturePPC] forKey:@"NSBundleExecutableArchitecturePPC"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitecturePPC64] forKey:@"NSBundleExecutableArchitecturePPC64"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitectureX86_64] forKey:@"NSBundleExecutableArchitectureX86_64"];
[d setObject:[Number numberWithDouble:NSCachesDirectory] forKey:@"NSCachesDirectory"];
[d setObject:[Number numberWithDouble:NSCalculationDivideByZero] forKey:@"NSCalculationDivideByZero"];
[d setObject:[Number numberWithDouble:NSCalculationLossOfPrecision] forKey:@"NSCalculationLossOfPrecision"];
[d setObject:[Number numberWithDouble:NSCalculationNoError] forKey:@"NSCalculationNoError"];
[d setObject:[Number numberWithDouble:NSCalculationOverflow] forKey:@"NSCalculationOverflow"];
[d setObject:[Number numberWithDouble:NSCalculationUnderflow] forKey:@"NSCalculationUnderflow"];
[d setObject:[Number numberWithDouble:NSCannotCreateScriptCommandError] forKey:@"NSCannotCreateScriptCommandError"];
[d setObject:[Number numberWithDouble:NSCaseInsensitivePredicateOption] forKey:@"NSCaseInsensitivePredicateOption"];
[d setObject:[Number numberWithDouble:NSCaseInsensitiveSearch] forKey:@"NSCaseInsensitiveSearch"];
[d setObject:[Number numberWithDouble:NSCollectorDisabledOption] forKey:@"NSCollectorDisabledOption"];
[d setObject:[Number numberWithDouble:NSConstantValueExpressionType] forKey:@"NSConstantValueExpressionType"];
[d setObject:[Number numberWithDouble:NSContainerSpecifierError] forKey:@"NSContainerSpecifierError"];
[d setObject:[Number numberWithDouble:NSContainsComparison] forKey:@"NSContainsComparison"];
[d setObject:[Number numberWithDouble:NSContainsPredicateOperatorType] forKey:@"NSContainsPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSCoreServiceDirectory] forKey:@"NSCoreServiceDirectory"];
[d setObject:[Number numberWithDouble:NSCustomSelectorPredicateOperatorType] forKey:@"NSCustomSelectorPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSDateFormatterBehavior10_0] forKey:@"NSDateFormatterBehavior10_0"];
[d setObject:[Number numberWithDouble:NSDateFormatterBehavior10_4] forKey:@"NSDateFormatterBehavior10_4"];
[d setObject:[Number numberWithDouble:NSDateFormatterBehaviorDefault] forKey:@"NSDateFormatterBehaviorDefault"];
[d setObject:[Number numberWithDouble:NSDateFormatterFullStyle] forKey:@"NSDateFormatterFullStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterLongStyle] forKey:@"NSDateFormatterLongStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterMediumStyle] forKey:@"NSDateFormatterMediumStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterNoStyle] forKey:@"NSDateFormatterNoStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterShortStyle] forKey:@"NSDateFormatterShortStyle"];
[d setObject:[Number numberWithDouble:NSDayCalendarUnit] forKey:@"NSDayCalendarUnit"];
[d setObject:[Number numberWithDouble:NSDecimalMaxSize] forKey:@"NSDecimalMaxSize"];
[d setObject:[Number numberWithDouble:NSDecimalNoScale] forKey:@"NSDecimalNoScale"];
[d setObject:[Number numberWithDouble:NSDemoApplicationDirectory] forKey:@"NSDemoApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSDesktopDirectory] forKey:@"NSDesktopDirectory"];
[d setObject:[Number numberWithDouble:NSDeveloperApplicationDirectory] forKey:@"NSDeveloperApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSDeveloperDirectory] forKey:@"NSDeveloperDirectory"];
[d setObject:[Number numberWithDouble:NSDiacriticInsensitivePredicateOption] forKey:@"NSDiacriticInsensitivePredicateOption"];
[d setObject:[Number numberWithDouble:NSDiacriticInsensitiveSearch] forKey:@"NSDiacriticInsensitiveSearch"];
[d setObject:[Number numberWithDouble:NSDirectPredicateModifier] forKey:@"NSDirectPredicateModifier"];
[d setObject:[Number numberWithDouble:NSDocumentDirectory] forKey:@"NSDocumentDirectory"];
[d setObject:[Number numberWithDouble:NSDocumentationDirectory] forKey:@"NSDocumentationDirectory"];
[d setObject:[Number numberWithDouble:NSDownloadsDirectory] forKey:@"NSDownloadsDirectory"];
[d setObject:[Number numberWithDouble:NSEndsWithComparison] forKey:@"NSEndsWithComparison"];
[d setObject:[Number numberWithDouble:NSEndsWithPredicateOperatorType] forKey:@"NSEndsWithPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSEqualToComparison] forKey:@"NSEqualToComparison"];
[d setObject:[Number numberWithDouble:NSEqualToPredicateOperatorType] forKey:@"NSEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSEraCalendarUnit] forKey:@"NSEraCalendarUnit"];
[d setObject:[Number numberWithDouble:NSEvaluatedObjectExpressionType] forKey:@"NSEvaluatedObjectExpressionType"];
[d setObject:[Number numberWithDouble:NSEverySubelement] forKey:@"NSEverySubelement"];
[d setObject:[Number numberWithDouble:NSExecutableArchitectureMismatchError] forKey:@"NSExecutableArchitectureMismatchError"];
[d setObject:[Number numberWithDouble:NSExecutableErrorMaximum] forKey:@"NSExecutableErrorMaximum"];
[d setObject:[Number numberWithDouble:NSExecutableErrorMinimum] forKey:@"NSExecutableErrorMinimum"];
[d setObject:[Number numberWithDouble:NSExecutableLinkError] forKey:@"NSExecutableLinkError"];
[d setObject:[Number numberWithDouble:NSExecutableLoadError] forKey:@"NSExecutableLoadError"];
[d setObject:[Number numberWithDouble:NSExecutableNotLoadableError] forKey:@"NSExecutableNotLoadableError"];
[d setObject:[Number numberWithDouble:NSExecutableRuntimeMismatchError] forKey:@"NSExecutableRuntimeMismatchError"];
[d setObject:[Number numberWithDouble:NSFileErrorMaximum] forKey:@"NSFileErrorMaximum"];
[d setObject:[Number numberWithDouble:NSFileErrorMinimum] forKey:@"NSFileErrorMinimum"];
[d setObject:[Number numberWithDouble:NSFileLockingError] forKey:@"NSFileLockingError"];
[d setObject:[Number numberWithDouble:NSFileNoSuchFileError] forKey:@"NSFileNoSuchFileError"];
[d setObject:[Number numberWithDouble:NSFileReadCorruptFileError] forKey:@"NSFileReadCorruptFileError"];
[d setObject:[Number numberWithDouble:NSFileReadInapplicableStringEncodingError] forKey:@"NSFileReadInapplicableStringEncodingError"];
[d setObject:[Number numberWithDouble:NSFileReadInvalidFileNameError] forKey:@"NSFileReadInvalidFileNameError"];
[d setObject:[Number numberWithDouble:NSFileReadNoPermissionError] forKey:@"NSFileReadNoPermissionError"];
[d setObject:[Number numberWithDouble:NSFileReadNoSuchFileError] forKey:@"NSFileReadNoSuchFileError"];
[d setObject:[Number numberWithDouble:NSFileReadTooLargeError] forKey:@"NSFileReadTooLargeError"];
[d setObject:[Number numberWithDouble:NSFileReadUnknownError] forKey:@"NSFileReadUnknownError"];
[d setObject:[Number numberWithDouble:NSFileReadUnknownStringEncodingError] forKey:@"NSFileReadUnknownStringEncodingError"];
[d setObject:[Number numberWithDouble:NSFileReadUnsupportedSchemeError] forKey:@"NSFileReadUnsupportedSchemeError"];
[d setObject:[Number numberWithDouble:NSFileWriteInapplicableStringEncodingError] forKey:@"NSFileWriteInapplicableStringEncodingError"];
[d setObject:[Number numberWithDouble:NSFileWriteInvalidFileNameError] forKey:@"NSFileWriteInvalidFileNameError"];
[d setObject:[Number numberWithDouble:NSFileWriteNoPermissionError] forKey:@"NSFileWriteNoPermissionError"];
[d setObject:[Number numberWithDouble:NSFileWriteOutOfSpaceError] forKey:@"NSFileWriteOutOfSpaceError"];
[d setObject:[Number numberWithDouble:NSFileWriteUnknownError] forKey:@"NSFileWriteUnknownError"];
[d setObject:[Number numberWithDouble:NSFileWriteUnsupportedSchemeError] forKey:@"NSFileWriteUnsupportedSchemeError"];
[d setObject:[Number numberWithDouble:NSForcedOrderingSearch] forKey:@"NSForcedOrderingSearch"];
[d setObject:[Number numberWithDouble:NSFormattingError] forKey:@"NSFormattingError"];
[d setObject:[Number numberWithDouble:NSFormattingErrorMaximum] forKey:@"NSFormattingErrorMaximum"];
[d setObject:[Number numberWithDouble:NSFormattingErrorMinimum] forKey:@"NSFormattingErrorMinimum"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_0] forKey:@"NSFoundationVersionNumber10_0"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1] forKey:@"NSFoundationVersionNumber10_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_1] forKey:@"NSFoundationVersionNumber10_1_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_2] forKey:@"NSFoundationVersionNumber10_1_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_3] forKey:@"NSFoundationVersionNumber10_1_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_4] forKey:@"NSFoundationVersionNumber10_1_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2] forKey:@"NSFoundationVersionNumber10_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_1] forKey:@"NSFoundationVersionNumber10_2_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_2] forKey:@"NSFoundationVersionNumber10_2_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_3] forKey:@"NSFoundationVersionNumber10_2_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_4] forKey:@"NSFoundationVersionNumber10_2_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_5] forKey:@"NSFoundationVersionNumber10_2_5"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_6] forKey:@"NSFoundationVersionNumber10_2_6"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_7] forKey:@"NSFoundationVersionNumber10_2_7"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_8] forKey:@"NSFoundationVersionNumber10_2_8"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3] forKey:@"NSFoundationVersionNumber10_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_1] forKey:@"NSFoundationVersionNumber10_3_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_2] forKey:@"NSFoundationVersionNumber10_3_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_3] forKey:@"NSFoundationVersionNumber10_3_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_4] forKey:@"NSFoundationVersionNumber10_3_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_5] forKey:@"NSFoundationVersionNumber10_3_5"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_6] forKey:@"NSFoundationVersionNumber10_3_6"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_7] forKey:@"NSFoundationVersionNumber10_3_7"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_8] forKey:@"NSFoundationVersionNumber10_3_8"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_9] forKey:@"NSFoundationVersionNumber10_3_9"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4] forKey:@"NSFoundationVersionNumber10_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_1] forKey:@"NSFoundationVersionNumber10_4_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_10] forKey:@"NSFoundationVersionNumber10_4_10"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_11] forKey:@"NSFoundationVersionNumber10_4_11"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_2] forKey:@"NSFoundationVersionNumber10_4_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_3] forKey:@"NSFoundationVersionNumber10_4_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_4_Intel] forKey:@"NSFoundationVersionNumber10_4_4_Intel"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_4_PowerPC] forKey:@"NSFoundationVersionNumber10_4_4_PowerPC"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_5] forKey:@"NSFoundationVersionNumber10_4_5"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_6] forKey:@"NSFoundationVersionNumber10_4_6"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_7] forKey:@"NSFoundationVersionNumber10_4_7"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_8] forKey:@"NSFoundationVersionNumber10_4_8"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_9] forKey:@"NSFoundationVersionNumber10_4_9"];
[d setObject:[Number numberWithDouble:NSFoundationVersionWithFileManagerResourceForkSupport] forKey:@"NSFoundationVersionWithFileManagerResourceForkSupport"];
[d setObject:[Number numberWithDouble:NSFunctionExpressionType] forKey:@"NSFunctionExpressionType"];
[d setObject:[Number numberWithDouble:NSGreaterThanComparison] forKey:@"NSGreaterThanComparison"];
[d setObject:[Number numberWithDouble:NSGreaterThanOrEqualToComparison] forKey:@"NSGreaterThanOrEqualToComparison"];
[d setObject:[Number numberWithDouble:NSGreaterThanOrEqualToPredicateOperatorType] forKey:@"NSGreaterThanOrEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSGreaterThanPredicateOperatorType] forKey:@"NSGreaterThanPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSHPUXOperatingSystem] forKey:@"NSHPUXOperatingSystem"];
[d setObject:[Number numberWithDouble:NSHTTPCookieAcceptPolicyAlways] forKey:@"NSHTTPCookieAcceptPolicyAlways"];
[d setObject:[Number numberWithDouble:NSHTTPCookieAcceptPolicyNever] forKey:@"NSHTTPCookieAcceptPolicyNever"];
[d setObject:[Number numberWithDouble:NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain] forKey:@"NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain"];
[d setObject:[Number numberWithDouble:NSHashTableCopyIn] forKey:@"NSHashTableCopyIn"];
[d setObject:[Number numberWithDouble:NSHashTableObjectPointerPersonality] forKey:@"NSHashTableObjectPointerPersonality"];
[d setObject:[Number numberWithDouble:NSHashTableStrongMemory] forKey:@"NSHashTableStrongMemory"];
[d setObject:[Number numberWithDouble:NSHashTableZeroingWeakMemory] forKey:@"NSHashTableZeroingWeakMemory"];
[d setObject:[Number numberWithDouble:NSHourCalendarUnit] forKey:@"NSHourCalendarUnit"];
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:NSISO2022JPStringEncoding] forKey:@"NSISO2022JPStringEncoding"];
[d setObject:[Number numberWithDouble:NSISOLatin1StringEncoding] forKey:@"NSISOLatin1StringEncoding"];
[d setObject:[Number numberWithDouble:NSISOLatin2StringEncoding] forKey:@"NSISOLatin2StringEncoding"];
[d setObject:[Number numberWithDouble:NSInPredicateOperatorType] forKey:@"NSInPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSIndexSubelement] forKey:@"NSIndexSubelement"];
[d setObject:[Number numberWithDouble:NSInternalScriptError] forKey:@"NSInternalScriptError"];
[d setObject:[Number numberWithDouble:NSInternalSpecifierError] forKey:@"NSInternalSpecifierError"];
[d setObject:[Number numberWithDouble:NSIntersectSetExpressionType] forKey:@"NSIntersectSetExpressionType"];
[d setObject:[Number numberWithDouble:NSInvalidIndexSpecifierError] forKey:@"NSInvalidIndexSpecifierError"];
[d setObject:[Number numberWithDouble:NSJapaneseEUCStringEncoding] forKey:@"NSJapaneseEUCStringEncoding"];
[d setObject:[Number numberWithDouble:NSKeyPathExpressionType] forKey:@"NSKeyPathExpressionType"];
[d setObject:[Number numberWithDouble:NSKeySpecifierEvaluationScriptError] forKey:@"NSKeySpecifierEvaluationScriptError"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeInsertion] forKey:@"NSKeyValueChangeInsertion"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeRemoval] forKey:@"NSKeyValueChangeRemoval"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeReplacement] forKey:@"NSKeyValueChangeReplacement"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeSetting] forKey:@"NSKeyValueChangeSetting"];
[d setObject:[Number numberWithDouble:NSKeyValueIntersectSetMutation] forKey:@"NSKeyValueIntersectSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueMinusSetMutation] forKey:@"NSKeyValueMinusSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionInitial] forKey:@"NSKeyValueObservingOptionInitial"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionNew] forKey:@"NSKeyValueObservingOptionNew"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionOld] forKey:@"NSKeyValueObservingOptionOld"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionPrior] forKey:@"NSKeyValueObservingOptionPrior"];
[d setObject:[Number numberWithDouble:NSKeyValueSetSetMutation] forKey:@"NSKeyValueSetSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueUnionSetMutation] forKey:@"NSKeyValueUnionSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueValidationError] forKey:@"NSKeyValueValidationError"];
[d setObject:[Number numberWithDouble:NSLessThanComparison] forKey:@"NSLessThanComparison"];
[d setObject:[Number numberWithDouble:NSLessThanOrEqualToComparison] forKey:@"NSLessThanOrEqualToComparison"];
[d setObject:[Number numberWithDouble:NSLessThanOrEqualToPredicateOperatorType] forKey:@"NSLessThanOrEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSLessThanPredicateOperatorType] forKey:@"NSLessThanPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSLibraryDirectory] forKey:@"NSLibraryDirectory"];
[d setObject:[Number numberWithDouble:NSLikePredicateOperatorType] forKey:@"NSLikePredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSLiteralSearch] forKey:@"NSLiteralSearch"];
[d setObject:[Number numberWithDouble:NSLocalDomainMask] forKey:@"NSLocalDomainMask"];
[d setObject:[Number numberWithDouble:NSMACHOperatingSystem] forKey:@"NSMACHOperatingSystem"];
[d setObject:[Number numberWithDouble:NSMacOSRomanStringEncoding] forKey:@"NSMacOSRomanStringEncoding"];
[d setObject:[Number numberWithDouble:NSMachPortDeallocateNone] forKey:@"NSMachPortDeallocateNone"];
[d setObject:[Number numberWithDouble:NSMachPortDeallocateReceiveRight] forKey:@"NSMachPortDeallocateReceiveRight"];
[d setObject:[Number numberWithDouble:NSMachPortDeallocateSendRight] forKey:@"NSMachPortDeallocateSendRight"];
[d setObject:[Number numberWithDouble:NSMapTableCopyIn] forKey:@"NSMapTableCopyIn"];
[d setObject:[Number numberWithDouble:NSMapTableObjectPointerPersonality] forKey:@"NSMapTableObjectPointerPersonality"];
[d setObject:[Number numberWithDouble:NSMapTableStrongMemory] forKey:@"NSMapTableStrongMemory"];
[d setObject:[Number numberWithDouble:NSMapTableZeroingWeakMemory] forKey:@"NSMapTableZeroingWeakMemory"];
[d setObject:[Number numberWithDouble:NSMappedRead] forKey:@"NSMappedRead"];
[d setObject:[Number numberWithDouble:NSMatchesPredicateOperatorType] forKey:@"NSMatchesPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSMaxXEdge] forKey:@"NSMaxXEdge"];
[d setObject:[Number numberWithDouble:NSMaxYEdge] forKey:@"NSMaxYEdge"];
[d setObject:[Number numberWithDouble:NSMiddleSubelement] forKey:@"NSMiddleSubelement"];
[d setObject:[Number numberWithDouble:NSMinXEdge] forKey:@"NSMinXEdge"];
[d setObject:[Number numberWithDouble:NSMinYEdge] forKey:@"NSMinYEdge"];
[d setObject:[Number numberWithDouble:NSMinusSetExpressionType] forKey:@"NSMinusSetExpressionType"];
[d setObject:[Number numberWithDouble:NSMinuteCalendarUnit] forKey:@"NSMinuteCalendarUnit"];
[d setObject:[Number numberWithDouble:NSMonthCalendarUnit] forKey:@"NSMonthCalendarUnit"];
[d setObject:[Number numberWithDouble:NSNEXTSTEPStringEncoding] forKey:@"NSNEXTSTEPStringEncoding"];
[d setObject:[Number numberWithDouble:NSNetServiceNoAutoRename] forKey:@"NSNetServiceNoAutoRename"];
[d setObject:[Number numberWithDouble:NSNetServicesActivityInProgress] forKey:@"NSNetServicesActivityInProgress"];
[d setObject:[Number numberWithDouble:NSNetServicesBadArgumentError] forKey:@"NSNetServicesBadArgumentError"];
[d setObject:[Number numberWithDouble:NSNetServicesCancelledError] forKey:@"NSNetServicesCancelledError"];
[d setObject:[Number numberWithDouble:NSNetServicesCollisionError] forKey:@"NSNetServicesCollisionError"];
[d setObject:[Number numberWithDouble:NSNetServicesInvalidError] forKey:@"NSNetServicesInvalidError"];
[d setObject:[Number numberWithDouble:NSNetServicesNotFoundError] forKey:@"NSNetServicesNotFoundError"];
[d setObject:[Number numberWithDouble:NSNetServicesTimeoutError] forKey:@"NSNetServicesTimeoutError"];
[d setObject:[Number numberWithDouble:NSNetServicesUnknownError] forKey:@"NSNetServicesUnknownError"];
[d setObject:[Number numberWithDouble:NSNetworkDomainMask] forKey:@"NSNetworkDomainMask"];
[d setObject:[Number numberWithDouble:NSNoScriptError] forKey:@"NSNoScriptError"];
[d setObject:[Number numberWithDouble:NSNoSpecifierError] forKey:@"NSNoSpecifierError"];
[d setObject:[Number numberWithDouble:NSNoSubelement] forKey:@"NSNoSubelement"];
[d setObject:[Number numberWithDouble:NSNoTopLevelContainersSpecifierError] forKey:@"NSNoTopLevelContainersSpecifierError"];
[d setObject:[Number numberWithDouble:NSNonLossyASCIIStringEncoding] forKey:@"NSNonLossyASCIIStringEncoding"];
[d setObject:[Number numberWithDouble:NSNotEqualToPredicateOperatorType] forKey:@"NSNotEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSNotPredicateType] forKey:@"NSNotPredicateType"];
[d setObject:[Number numberWithDouble:NSNotificationCoalescingOnName] forKey:@"NSNotificationCoalescingOnName"];
[d setObject:[Number numberWithDouble:NSNotificationCoalescingOnSender] forKey:@"NSNotificationCoalescingOnSender"];
[d setObject:[Number numberWithDouble:NSNotificationDeliverImmediately] forKey:@"NSNotificationDeliverImmediately"];
[d setObject:[Number numberWithDouble:NSNotificationNoCoalescing] forKey:@"NSNotificationNoCoalescing"];
[d setObject:[Number numberWithDouble:NSNotificationPostToAllSessions] forKey:@"NSNotificationPostToAllSessions"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorCoalesce] forKey:@"NSNotificationSuspensionBehaviorCoalesce"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorDeliverImmediately] forKey:@"NSNotificationSuspensionBehaviorDeliverImmediately"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorDrop] forKey:@"NSNotificationSuspensionBehaviorDrop"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorHold] forKey:@"NSNotificationSuspensionBehaviorHold"];
[d setObject:[Number numberWithDouble:NSNumberFormatterBehavior10_0] forKey:@"NSNumberFormatterBehavior10_0"];
[d setObject:[Number numberWithDouble:NSNumberFormatterBehavior10_4] forKey:@"NSNumberFormatterBehavior10_4"];
[d setObject:[Number numberWithDouble:NSNumberFormatterBehaviorDefault] forKey:@"NSNumberFormatterBehaviorDefault"];
[d setObject:[Number numberWithDouble:NSNumberFormatterCurrencyStyle] forKey:@"NSNumberFormatterCurrencyStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterDecimalStyle] forKey:@"NSNumberFormatterDecimalStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterNoStyle] forKey:@"NSNumberFormatterNoStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadAfterPrefix] forKey:@"NSNumberFormatterPadAfterPrefix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadAfterSuffix] forKey:@"NSNumberFormatterPadAfterSuffix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadBeforePrefix] forKey:@"NSNumberFormatterPadBeforePrefix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadBeforeSuffix] forKey:@"NSNumberFormatterPadBeforeSuffix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPercentStyle] forKey:@"NSNumberFormatterPercentStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundCeiling] forKey:@"NSNumberFormatterRoundCeiling"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundDown] forKey:@"NSNumberFormatterRoundDown"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundFloor] forKey:@"NSNumberFormatterRoundFloor"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundHalfDown] forKey:@"NSNumberFormatterRoundHalfDown"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundHalfEven] forKey:@"NSNumberFormatterRoundHalfEven"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundHalfUp] forKey:@"NSNumberFormatterRoundHalfUp"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundUp] forKey:@"NSNumberFormatterRoundUp"];
[d setObject:[Number numberWithDouble:NSNumberFormatterScientificStyle] forKey:@"NSNumberFormatterScientificStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterSpellOutStyle] forKey:@"NSNumberFormatterSpellOutStyle"];
[d setObject:[Number numberWithDouble:NSNumericSearch] forKey:@"NSNumericSearch"];
[d setObject:[Number numberWithDouble:NSOSF1OperatingSystem] forKey:@"NSOSF1OperatingSystem"];
[d setObject:[Number numberWithDouble:NSObjCArrayType] forKey:@"NSObjCArrayType"];
[d setObject:[Number numberWithDouble:NSObjCBitfield] forKey:@"NSObjCBitfield"];
[d setObject:[Number numberWithDouble:NSObjCBoolType] forKey:@"NSObjCBoolType"];
[d setObject:[Number numberWithDouble:NSObjCCharType] forKey:@"NSObjCCharType"];
[d setObject:[Number numberWithDouble:NSObjCDoubleType] forKey:@"NSObjCDoubleType"];
[d setObject:[Number numberWithDouble:NSObjCFloatType] forKey:@"NSObjCFloatType"];
[d setObject:[Number numberWithDouble:NSObjCLongType] forKey:@"NSObjCLongType"];
[d setObject:[Number numberWithDouble:NSObjCLonglongType] forKey:@"NSObjCLonglongType"];
[d setObject:[Number numberWithDouble:NSObjCNoType] forKey:@"NSObjCNoType"];
[d setObject:[Number numberWithDouble:NSObjCObjectType] forKey:@"NSObjCObjectType"];
[d setObject:[Number numberWithDouble:NSObjCPointerType] forKey:@"NSObjCPointerType"];
[d setObject:[Number numberWithDouble:NSObjCSelectorType] forKey:@"NSObjCSelectorType"];
[d setObject:[Number numberWithDouble:NSObjCShortType] forKey:@"NSObjCShortType"];
[d setObject:[Number numberWithDouble:NSObjCStringType] forKey:@"NSObjCStringType"];
[d setObject:[Number numberWithDouble:NSObjCStructType] forKey:@"NSObjCStructType"];
[d setObject:[Number numberWithDouble:NSObjCUnionType] forKey:@"NSObjCUnionType"];
[d setObject:[Number numberWithDouble:NSObjCVoidType] forKey:@"NSObjCVoidType"];
[d setObject:[Number numberWithDouble:NSObjectAutoreleasedEvent] forKey:@"NSObjectAutoreleasedEvent"];
[d setObject:[Number numberWithDouble:NSObjectExtraRefDecrementedEvent] forKey:@"NSObjectExtraRefDecrementedEvent"];
[d setObject:[Number numberWithDouble:NSObjectExtraRefIncrementedEvent] forKey:@"NSObjectExtraRefIncrementedEvent"];
[d setObject:[Number numberWithDouble:NSObjectInternalRefDecrementedEvent] forKey:@"NSObjectInternalRefDecrementedEvent"];
[d setObject:[Number numberWithDouble:NSObjectInternalRefIncrementedEvent] forKey:@"NSObjectInternalRefIncrementedEvent"];
[d setObject:[Number numberWithDouble:NSOpenStepUnicodeReservedBase] forKey:@"NSOpenStepUnicodeReservedBase"];
[d setObject:[Number numberWithDouble:NSOperationNotSupportedForKeyScriptError] forKey:@"NSOperationNotSupportedForKeyScriptError"];
[d setObject:[Number numberWithDouble:NSOperationNotSupportedForKeySpecifierError] forKey:@"NSOperationNotSupportedForKeySpecifierError"];
[d setObject:[Number numberWithDouble:NSOperationQueueDefaultMaxConcurrentOperationCount] forKey:@"NSOperationQueueDefaultMaxConcurrentOperationCount"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityHigh] forKey:@"NSOperationQueuePriorityHigh"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityLow] forKey:@"NSOperationQueuePriorityLow"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityNormal] forKey:@"NSOperationQueuePriorityNormal"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityVeryHigh] forKey:@"NSOperationQueuePriorityVeryHigh"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityVeryLow] forKey:@"NSOperationQueuePriorityVeryLow"];
[d setObject:[Number numberWithDouble:NSOrPredicateType] forKey:@"NSOrPredicateType"];
[d setObject:[Number numberWithDouble:NSOrderedAscending] forKey:@"NSOrderedAscending"];
[d setObject:[Number numberWithDouble:NSOrderedDescending] forKey:@"NSOrderedDescending"];
[d setObject:[Number numberWithDouble:NSOrderedSame] forKey:@"NSOrderedSame"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsCStringPersonality] forKey:@"NSPointerFunctionsCStringPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsCopyIn] forKey:@"NSPointerFunctionsCopyIn"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsIntegerPersonality] forKey:@"NSPointerFunctionsIntegerPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsMachVirtualMemory] forKey:@"NSPointerFunctionsMachVirtualMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsMallocMemory] forKey:@"NSPointerFunctionsMallocMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsObjectPersonality] forKey:@"NSPointerFunctionsObjectPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsObjectPointerPersonality] forKey:@"NSPointerFunctionsObjectPointerPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsOpaqueMemory] forKey:@"NSPointerFunctionsOpaqueMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsOpaquePersonality] forKey:@"NSPointerFunctionsOpaquePersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsStrongMemory] forKey:@"NSPointerFunctionsStrongMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsStructPersonality] forKey:@"NSPointerFunctionsStructPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsZeroingWeakMemory] forKey:@"NSPointerFunctionsZeroingWeakMemory"];
[d setObject:[Number numberWithDouble:NSPositionAfter] forKey:@"NSPositionAfter"];
[d setObject:[Number numberWithDouble:NSPositionBefore] forKey:@"NSPositionBefore"];
[d setObject:[Number numberWithDouble:NSPositionBeginning] forKey:@"NSPositionBeginning"];
[d setObject:[Number numberWithDouble:NSPositionEnd] forKey:@"NSPositionEnd"];
[d setObject:[Number numberWithDouble:NSPositionReplace] forKey:@"NSPositionReplace"];
[d setObject:[Number numberWithDouble:NSPostASAP] forKey:@"NSPostASAP"];
[d setObject:[Number numberWithDouble:NSPostNow] forKey:@"NSPostNow"];
[d setObject:[Number numberWithDouble:NSPostWhenIdle] forKey:@"NSPostWhenIdle"];
[d setObject:[Number numberWithDouble:NSPropertyListBinaryFormat_v1_0] forKey:@"NSPropertyListBinaryFormat_v1_0"];
[d setObject:[Number numberWithDouble:NSPropertyListImmutable] forKey:@"NSPropertyListImmutable"];
[d setObject:[Number numberWithDouble:NSPropertyListMutableContainers] forKey:@"NSPropertyListMutableContainers"];
[d setObject:[Number numberWithDouble:NSPropertyListMutableContainersAndLeaves] forKey:@"NSPropertyListMutableContainersAndLeaves"];
[d setObject:[Number numberWithDouble:NSPropertyListOpenStepFormat] forKey:@"NSPropertyListOpenStepFormat"];
[d setObject:[Number numberWithDouble:NSPropertyListXMLFormat_v1_0] forKey:@"NSPropertyListXMLFormat_v1_0"];
[d setObject:[Number numberWithDouble:NSRandomSubelement] forKey:@"NSRandomSubelement"];
[d setObject:[Number numberWithDouble:NSReceiverEvaluationScriptError] forKey:@"NSReceiverEvaluationScriptError"];
[d setObject:[Number numberWithDouble:NSReceiversCantHandleCommandScriptError] forKey:@"NSReceiversCantHandleCommandScriptError"];
[d setObject:[Number numberWithDouble:NSRelativeAfter] forKey:@"NSRelativeAfter"];
[d setObject:[Number numberWithDouble:NSRelativeBefore] forKey:@"NSRelativeBefore"];
[d setObject:[Number numberWithDouble:NSRequiredArgumentsMissingScriptError] forKey:@"NSRequiredArgumentsMissingScriptError"];
[d setObject:[Number numberWithDouble:NSRoundBankers] forKey:@"NSRoundBankers"];
[d setObject:[Number numberWithDouble:NSRoundDown] forKey:@"NSRoundDown"];
[d setObject:[Number numberWithDouble:NSRoundPlain] forKey:@"NSRoundPlain"];
[d setObject:[Number numberWithDouble:NSRoundUp] forKey:@"NSRoundUp"];
[d setObject:[Number numberWithDouble:NSSaveOptionsAsk] forKey:@"NSSaveOptionsAsk"];
[d setObject:[Number numberWithDouble:NSSaveOptionsNo] forKey:@"NSSaveOptionsNo"];
[d setObject:[Number numberWithDouble:NSSaveOptionsYes] forKey:@"NSSaveOptionsYes"];
[d setObject:[Number numberWithDouble:NSScannedOption] forKey:@"NSScannedOption"];
[d setObject:[Number numberWithDouble:NSSecondCalendarUnit] forKey:@"NSSecondCalendarUnit"];
[d setObject:[Number numberWithDouble:NSShiftJISStringEncoding] forKey:@"NSShiftJISStringEncoding"];
[d setObject:[Number numberWithDouble:NSSolarisOperatingSystem] forKey:@"NSSolarisOperatingSystem"];
[d setObject:[Number numberWithDouble:NSStreamEventEndEncountered] forKey:@"NSStreamEventEndEncountered"];
[d setObject:[Number numberWithDouble:NSStreamEventErrorOccurred] forKey:@"NSStreamEventErrorOccurred"];
[d setObject:[Number numberWithDouble:NSStreamEventHasBytesAvailable] forKey:@"NSStreamEventHasBytesAvailable"];
[d setObject:[Number numberWithDouble:NSStreamEventHasSpaceAvailable] forKey:@"NSStreamEventHasSpaceAvailable"];
[d setObject:[Number numberWithDouble:NSStreamEventNone] forKey:@"NSStreamEventNone"];
[d setObject:[Number numberWithDouble:NSStreamEventOpenCompleted] forKey:@"NSStreamEventOpenCompleted"];
[d setObject:[Number numberWithDouble:NSStreamStatusAtEnd] forKey:@"NSStreamStatusAtEnd"];
[d setObject:[Number numberWithDouble:NSStreamStatusClosed] forKey:@"NSStreamStatusClosed"];
[d setObject:[Number numberWithDouble:NSStreamStatusError] forKey:@"NSStreamStatusError"];
[d setObject:[Number numberWithDouble:NSStreamStatusNotOpen] forKey:@"NSStreamStatusNotOpen"];
[d setObject:[Number numberWithDouble:NSStreamStatusOpen] forKey:@"NSStreamStatusOpen"];
[d setObject:[Number numberWithDouble:NSStreamStatusOpening] forKey:@"NSStreamStatusOpening"];
[d setObject:[Number numberWithDouble:NSStreamStatusReading] forKey:@"NSStreamStatusReading"];
[d setObject:[Number numberWithDouble:NSStreamStatusWriting] forKey:@"NSStreamStatusWriting"];
[d setObject:[Number numberWithDouble:NSStringEncodingConversionAllowLossy] forKey:@"NSStringEncodingConversionAllowLossy"];
[d setObject:[Number numberWithDouble:NSStringEncodingConversionExternalRepresentation] forKey:@"NSStringEncodingConversionExternalRepresentation"];
[d setObject:[Number numberWithDouble:NSSubqueryExpressionType] forKey:@"NSSubqueryExpressionType"];
[d setObject:[Number numberWithDouble:NSSunOSOperatingSystem] forKey:@"NSSunOSOperatingSystem"];
[d setObject:[Number numberWithDouble:NSSymbolStringEncoding] forKey:@"NSSymbolStringEncoding"];
[d setObject:[Number numberWithDouble:NSSystemDomainMask] forKey:@"NSSystemDomainMask"];
[d setObject:[Number numberWithDouble:NSTimeIntervalSince1970] forKey:@"NSTimeIntervalSince1970"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleDaylightSaving] forKey:@"NSTimeZoneNameStyleDaylightSaving"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleShortDaylightSaving] forKey:@"NSTimeZoneNameStyleShortDaylightSaving"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleShortStandard] forKey:@"NSTimeZoneNameStyleShortStandard"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleStandard] forKey:@"NSTimeZoneNameStyleStandard"];
[d setObject:[Number numberWithDouble:NSURLCacheStorageAllowed] forKey:@"NSURLCacheStorageAllowed"];
[d setObject:[Number numberWithDouble:NSURLCacheStorageAllowedInMemoryOnly] forKey:@"NSURLCacheStorageAllowedInMemoryOnly"];
[d setObject:[Number numberWithDouble:NSURLCacheStorageNotAllowed] forKey:@"NSURLCacheStorageNotAllowed"];
[d setObject:[Number numberWithDouble:NSURLCredentialPersistenceForSession] forKey:@"NSURLCredentialPersistenceForSession"];
[d setObject:[Number numberWithDouble:NSURLCredentialPersistenceNone] forKey:@"NSURLCredentialPersistenceNone"];
[d setObject:[Number numberWithDouble:NSURLCredentialPersistencePermanent] forKey:@"NSURLCredentialPersistencePermanent"];
[d setObject:[Number numberWithDouble:NSURLErrorBadServerResponse] forKey:@"NSURLErrorBadServerResponse"];
[d setObject:[Number numberWithDouble:NSURLErrorBadURL] forKey:@"NSURLErrorBadURL"];
[d setObject:[Number numberWithDouble:NSURLErrorCancelled] forKey:@"NSURLErrorCancelled"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotCloseFile] forKey:@"NSURLErrorCannotCloseFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotConnectToHost] forKey:@"NSURLErrorCannotConnectToHost"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotCreateFile] forKey:@"NSURLErrorCannotCreateFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotDecodeContentData] forKey:@"NSURLErrorCannotDecodeContentData"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotDecodeRawData] forKey:@"NSURLErrorCannotDecodeRawData"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotFindHost] forKey:@"NSURLErrorCannotFindHost"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotLoadFromNetwork] forKey:@"NSURLErrorCannotLoadFromNetwork"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotMoveFile] forKey:@"NSURLErrorCannotMoveFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotOpenFile] forKey:@"NSURLErrorCannotOpenFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotParseResponse] forKey:@"NSURLErrorCannotParseResponse"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotRemoveFile] forKey:@"NSURLErrorCannotRemoveFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotWriteToFile] forKey:@"NSURLErrorCannotWriteToFile"];
[d setObject:[Number numberWithDouble:NSURLErrorClientCertificateRejected] forKey:@"NSURLErrorClientCertificateRejected"];
[d setObject:[Number numberWithDouble:NSURLErrorDNSLookupFailed] forKey:@"NSURLErrorDNSLookupFailed"];
[d setObject:[Number numberWithDouble:NSURLErrorDataLengthExceedsMaximum] forKey:@"NSURLErrorDataLengthExceedsMaximum"];
[d setObject:[Number numberWithDouble:NSURLErrorDownloadDecodingFailedMidStream] forKey:@"NSURLErrorDownloadDecodingFailedMidStream"];
[d setObject:[Number numberWithDouble:NSURLErrorDownloadDecodingFailedToComplete] forKey:@"NSURLErrorDownloadDecodingFailedToComplete"];
[d setObject:[Number numberWithDouble:NSURLErrorFileDoesNotExist] forKey:@"NSURLErrorFileDoesNotExist"];
[d setObject:[Number numberWithDouble:NSURLErrorFileIsDirectory] forKey:@"NSURLErrorFileIsDirectory"];
[d setObject:[Number numberWithDouble:NSURLErrorHTTPTooManyRedirects] forKey:@"NSURLErrorHTTPTooManyRedirects"];
[d setObject:[Number numberWithDouble:NSURLErrorNetworkConnectionLost] forKey:@"NSURLErrorNetworkConnectionLost"];
[d setObject:[Number numberWithDouble:NSURLErrorNoPermissionsToReadFile] forKey:@"NSURLErrorNoPermissionsToReadFile"];
[d setObject:[Number numberWithDouble:NSURLErrorNotConnectedToInternet] forKey:@"NSURLErrorNotConnectedToInternet"];
[d setObject:[Number numberWithDouble:NSURLErrorRedirectToNonExistentLocation] forKey:@"NSURLErrorRedirectToNonExistentLocation"];
[d setObject:[Number numberWithDouble:NSURLErrorResourceUnavailable] forKey:@"NSURLErrorResourceUnavailable"];
[d setObject:[Number numberWithDouble:NSURLErrorSecureConnectionFailed] forKey:@"NSURLErrorSecureConnectionFailed"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateHasBadDate] forKey:@"NSURLErrorServerCertificateHasBadDate"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateHasUnknownRoot] forKey:@"NSURLErrorServerCertificateHasUnknownRoot"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateNotYetValid] forKey:@"NSURLErrorServerCertificateNotYetValid"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateUntrusted] forKey:@"NSURLErrorServerCertificateUntrusted"];
[d setObject:[Number numberWithDouble:NSURLErrorTimedOut] forKey:@"NSURLErrorTimedOut"];
[d setObject:[Number numberWithDouble:NSURLErrorUnknown] forKey:@"NSURLErrorUnknown"];
[d setObject:[Number numberWithDouble:NSURLErrorUnsupportedURL] forKey:@"NSURLErrorUnsupportedURL"];
[d setObject:[Number numberWithDouble:NSURLErrorUserAuthenticationRequired] forKey:@"NSURLErrorUserAuthenticationRequired"];
[d setObject:[Number numberWithDouble:NSURLErrorUserCancelledAuthentication] forKey:@"NSURLErrorUserCancelledAuthentication"];
[d setObject:[Number numberWithDouble:NSURLErrorZeroByteResource] forKey:@"NSURLErrorZeroByteResource"];
[d setObject:[Number numberWithDouble:NSURLHandleLoadFailed] forKey:@"NSURLHandleLoadFailed"];
[d setObject:[Number numberWithDouble:NSURLHandleLoadInProgress] forKey:@"NSURLHandleLoadInProgress"];
[d setObject:[Number numberWithDouble:NSURLHandleLoadSucceeded] forKey:@"NSURLHandleLoadSucceeded"];
[d setObject:[Number numberWithDouble:NSURLHandleNotLoaded] forKey:@"NSURLHandleNotLoaded"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadIgnoringCacheData] forKey:@"NSURLRequestReloadIgnoringCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadIgnoringLocalAndRemoteCacheData] forKey:@"NSURLRequestReloadIgnoringLocalAndRemoteCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadIgnoringLocalCacheData] forKey:@"NSURLRequestReloadIgnoringLocalCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadRevalidatingCacheData] forKey:@"NSURLRequestReloadRevalidatingCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReturnCacheDataDontLoad] forKey:@"NSURLRequestReturnCacheDataDontLoad"];
[d setObject:[Number numberWithDouble:NSURLRequestReturnCacheDataElseLoad] forKey:@"NSURLRequestReturnCacheDataElseLoad"];
[d setObject:[Number numberWithDouble:NSURLRequestUseProtocolCachePolicy] forKey:@"NSURLRequestUseProtocolCachePolicy"];
[d setObject:[Number numberWithDouble:NSUTF16BigEndianStringEncoding] forKey:@"NSUTF16BigEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF16LittleEndianStringEncoding] forKey:@"NSUTF16LittleEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF16StringEncoding] forKey:@"NSUTF16StringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF32BigEndianStringEncoding] forKey:@"NSUTF32BigEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF32LittleEndianStringEncoding] forKey:@"NSUTF32LittleEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF32StringEncoding] forKey:@"NSUTF32StringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF8StringEncoding] forKey:@"NSUTF8StringEncoding"];
[d setObject:[Number numberWithDouble:NSUncachedRead] forKey:@"NSUncachedRead"];
[d setObject:[Number numberWithDouble:NSUndoCloseGroupingRunLoopOrdering] forKey:@"NSUndoCloseGroupingRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSUnicodeStringEncoding] forKey:@"NSUnicodeStringEncoding"];
[d setObject:[Number numberWithDouble:NSUnionSetExpressionType] forKey:@"NSUnionSetExpressionType"];
[d setObject:[Number numberWithDouble:NSUnknownKeyScriptError] forKey:@"NSUnknownKeyScriptError"];
[d setObject:[Number numberWithDouble:NSUnknownKeySpecifierError] forKey:@"NSUnknownKeySpecifierError"];
[d setObject:[Number numberWithDouble:NSUserCancelledError] forKey:@"NSUserCancelledError"];
[d setObject:[Number numberWithDouble:NSUserDirectory] forKey:@"NSUserDirectory"];
[d setObject:[Number numberWithDouble:NSUserDomainMask] forKey:@"NSUserDomainMask"];
[d setObject:[Number numberWithDouble:NSValidationErrorMaximum] forKey:@"NSValidationErrorMaximum"];
[d setObject:[Number numberWithDouble:NSValidationErrorMinimum] forKey:@"NSValidationErrorMinimum"];
[d setObject:[Number numberWithDouble:NSVariableExpressionType] forKey:@"NSVariableExpressionType"];
[d setObject:[Number numberWithDouble:NSWeekCalendarUnit] forKey:@"NSWeekCalendarUnit"];
[d setObject:[Number numberWithDouble:NSWeekdayCalendarUnit] forKey:@"NSWeekdayCalendarUnit"];
[d setObject:[Number numberWithDouble:NSWeekdayOrdinalCalendarUnit] forKey:@"NSWeekdayOrdinalCalendarUnit"];
[d setObject:[Number numberWithDouble:NSWidthInsensitiveSearch] forKey:@"NSWidthInsensitiveSearch"];
[d setObject:[Number numberWithDouble:NSWindows95OperatingSystem] forKey:@"NSWindows95OperatingSystem"];
[d setObject:[Number numberWithDouble:NSWindowsCP1250StringEncoding] forKey:@"NSWindowsCP1250StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1251StringEncoding] forKey:@"NSWindowsCP1251StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1252StringEncoding] forKey:@"NSWindowsCP1252StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1253StringEncoding] forKey:@"NSWindowsCP1253StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1254StringEncoding] forKey:@"NSWindowsCP1254StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsNTOperatingSystem] forKey:@"NSWindowsNTOperatingSystem"];
[d setObject:[Number numberWithDouble:NSWrapCalendarComponents] forKey:@"NSWrapCalendarComponents"];
[d setObject:[Number numberWithDouble:NSXMLAttributeCDATAKind] forKey:@"NSXMLAttributeCDATAKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeDeclarationKind] forKey:@"NSXMLAttributeDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeEntitiesKind] forKey:@"NSXMLAttributeEntitiesKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeEntityKind] forKey:@"NSXMLAttributeEntityKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeEnumerationKind] forKey:@"NSXMLAttributeEnumerationKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeIDKind] forKey:@"NSXMLAttributeIDKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeIDRefKind] forKey:@"NSXMLAttributeIDRefKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeIDRefsKind] forKey:@"NSXMLAttributeIDRefsKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeKind] forKey:@"NSXMLAttributeKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeNMTokenKind] forKey:@"NSXMLAttributeNMTokenKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeNMTokensKind] forKey:@"NSXMLAttributeNMTokensKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeNotationKind] forKey:@"NSXMLAttributeNotationKind"];
[d setObject:[Number numberWithDouble:NSXMLCommentKind] forKey:@"NSXMLCommentKind"];
[d setObject:[Number numberWithDouble:NSXMLDTDKind] forKey:@"NSXMLDTDKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentHTMLKind] forKey:@"NSXMLDocumentHTMLKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentIncludeContentTypeDeclaration] forKey:@"NSXMLDocumentIncludeContentTypeDeclaration"];
[d setObject:[Number numberWithDouble:NSXMLDocumentKind] forKey:@"NSXMLDocumentKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentTextKind] forKey:@"NSXMLDocumentTextKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentTidyHTML] forKey:@"NSXMLDocumentTidyHTML"];
[d setObject:[Number numberWithDouble:NSXMLDocumentTidyXML] forKey:@"NSXMLDocumentTidyXML"];
[d setObject:[Number numberWithDouble:NSXMLDocumentValidate] forKey:@"NSXMLDocumentValidate"];
[d setObject:[Number numberWithDouble:NSXMLDocumentXHTMLKind] forKey:@"NSXMLDocumentXHTMLKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentXInclude] forKey:@"NSXMLDocumentXInclude"];
[d setObject:[Number numberWithDouble:NSXMLDocumentXMLKind] forKey:@"NSXMLDocumentXMLKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationAnyKind] forKey:@"NSXMLElementDeclarationAnyKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationElementKind] forKey:@"NSXMLElementDeclarationElementKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationEmptyKind] forKey:@"NSXMLElementDeclarationEmptyKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationKind] forKey:@"NSXMLElementDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationMixedKind] forKey:@"NSXMLElementDeclarationMixedKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationUndefinedKind] forKey:@"NSXMLElementDeclarationUndefinedKind"];
[d setObject:[Number numberWithDouble:NSXMLElementKind] forKey:@"NSXMLElementKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityDeclarationKind] forKey:@"NSXMLEntityDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityGeneralKind] forKey:@"NSXMLEntityGeneralKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityParameterKind] forKey:@"NSXMLEntityParameterKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityParsedKind] forKey:@"NSXMLEntityParsedKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityPredefined] forKey:@"NSXMLEntityPredefined"];
[d setObject:[Number numberWithDouble:NSXMLEntityUnparsedKind] forKey:@"NSXMLEntityUnparsedKind"];
[d setObject:[Number numberWithDouble:NSXMLInvalidKind] forKey:@"NSXMLInvalidKind"];
[d setObject:[Number numberWithDouble:NSXMLNamespaceKind] forKey:@"NSXMLNamespaceKind"];
[d setObject:[Number numberWithDouble:NSXMLNodeCompactEmptyElement] forKey:@"NSXMLNodeCompactEmptyElement"];
[d setObject:[Number numberWithDouble:NSXMLNodeExpandEmptyElement] forKey:@"NSXMLNodeExpandEmptyElement"];
[d setObject:[Number numberWithDouble:NSXMLNodeIsCDATA] forKey:@"NSXMLNodeIsCDATA"];
[d setObject:[Number numberWithDouble:NSXMLNodeOptionsNone] forKey:@"NSXMLNodeOptionsNone"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveAll] forKey:@"NSXMLNodePreserveAll"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveAttributeOrder] forKey:@"NSXMLNodePreserveAttributeOrder"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveCDATA] forKey:@"NSXMLNodePreserveCDATA"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveCharacterReferences] forKey:@"NSXMLNodePreserveCharacterReferences"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveDTD] forKey:@"NSXMLNodePreserveDTD"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveEmptyElements] forKey:@"NSXMLNodePreserveEmptyElements"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveEntities] forKey:@"NSXMLNodePreserveEntities"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveNamespaceOrder] forKey:@"NSXMLNodePreserveNamespaceOrder"];
[d setObject:[Number numberWithDouble:NSXMLNodePreservePrefixes] forKey:@"NSXMLNodePreservePrefixes"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveQuotes] forKey:@"NSXMLNodePreserveQuotes"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveWhitespace] forKey:@"NSXMLNodePreserveWhitespace"];
[d setObject:[Number numberWithDouble:NSXMLNodePrettyPrint] forKey:@"NSXMLNodePrettyPrint"];
[d setObject:[Number numberWithDouble:NSXMLNodeUseDoubleQuotes] forKey:@"NSXMLNodeUseDoubleQuotes"];
[d setObject:[Number numberWithDouble:NSXMLNodeUseSingleQuotes] forKey:@"NSXMLNodeUseSingleQuotes"];
[d setObject:[Number numberWithDouble:NSXMLNotationDeclarationKind] forKey:@"NSXMLNotationDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeHasNoValueError] forKey:@"NSXMLParserAttributeHasNoValueError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeListNotFinishedError] forKey:@"NSXMLParserAttributeListNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeListNotStartedError] forKey:@"NSXMLParserAttributeListNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeNotFinishedError] forKey:@"NSXMLParserAttributeNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeNotStartedError] forKey:@"NSXMLParserAttributeNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeRedefinedError] forKey:@"NSXMLParserAttributeRedefinedError"];
[d setObject:[Number numberWithDouble:NSXMLParserCDATANotFinishedError] forKey:@"NSXMLParserCDATANotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefAtEOFError] forKey:@"NSXMLParserCharacterRefAtEOFError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefInDTDError] forKey:@"NSXMLParserCharacterRefInDTDError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefInEpilogError] forKey:@"NSXMLParserCharacterRefInEpilogError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefInPrologError] forKey:@"NSXMLParserCharacterRefInPrologError"];
[d setObject:[Number numberWithDouble:NSXMLParserCommentContainsDoubleHyphenError] forKey:@"NSXMLParserCommentContainsDoubleHyphenError"];
[d setObject:[Number numberWithDouble:NSXMLParserCommentNotFinishedError] forKey:@"NSXMLParserCommentNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserConditionalSectionNotFinishedError] forKey:@"NSXMLParserConditionalSectionNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserConditionalSectionNotStartedError] forKey:@"NSXMLParserConditionalSectionNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserDOCTYPEDeclNotFinishedError] forKey:@"NSXMLParserDOCTYPEDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserDelegateAbortedParseError] forKey:@"NSXMLParserDelegateAbortedParseError"];
[d setObject:[Number numberWithDouble:NSXMLParserDocumentStartError] forKey:@"NSXMLParserDocumentStartError"];
[d setObject:[Number numberWithDouble:NSXMLParserElementContentDeclNotFinishedError] forKey:@"NSXMLParserElementContentDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserElementContentDeclNotStartedError] forKey:@"NSXMLParserElementContentDeclNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEmptyDocumentError] forKey:@"NSXMLParserEmptyDocumentError"];
[d setObject:[Number numberWithDouble:NSXMLParserEncodingNotSupportedError] forKey:@"NSXMLParserEncodingNotSupportedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityBoundaryError] forKey:@"NSXMLParserEntityBoundaryError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityIsExternalError] forKey:@"NSXMLParserEntityIsExternalError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityIsParameterError] forKey:@"NSXMLParserEntityIsParameterError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityNotFinishedError] forKey:@"NSXMLParserEntityNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityNotStartedError] forKey:@"NSXMLParserEntityNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefAtEOFError] forKey:@"NSXMLParserEntityRefAtEOFError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefInDTDError] forKey:@"NSXMLParserEntityRefInDTDError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefInEpilogError] forKey:@"NSXMLParserEntityRefInEpilogError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefInPrologError] forKey:@"NSXMLParserEntityRefInPrologError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefLoopError] forKey:@"NSXMLParserEntityRefLoopError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityReferenceMissingSemiError] forKey:@"NSXMLParserEntityReferenceMissingSemiError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityReferenceWithoutNameError] forKey:@"NSXMLParserEntityReferenceWithoutNameError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityValueRequiredError] forKey:@"NSXMLParserEntityValueRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserEqualExpectedError] forKey:@"NSXMLParserEqualExpectedError"];
[d setObject:[Number numberWithDouble:NSXMLParserExternalStandaloneEntityError] forKey:@"NSXMLParserExternalStandaloneEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserExternalSubsetNotFinishedError] forKey:@"NSXMLParserExternalSubsetNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserExtraContentError] forKey:@"NSXMLParserExtraContentError"];
[d setObject:[Number numberWithDouble:NSXMLParserGTRequiredError] forKey:@"NSXMLParserGTRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserInternalError] forKey:@"NSXMLParserInternalError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidCharacterError] forKey:@"NSXMLParserInvalidCharacterError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidCharacterInEntityError] forKey:@"NSXMLParserInvalidCharacterInEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidCharacterRefError] forKey:@"NSXMLParserInvalidCharacterRefError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidConditionalSectionError] forKey:@"NSXMLParserInvalidConditionalSectionError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidDecimalCharacterRefError] forKey:@"NSXMLParserInvalidDecimalCharacterRefError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidEncodingError] forKey:@"NSXMLParserInvalidEncodingError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidEncodingNameError] forKey:@"NSXMLParserInvalidEncodingNameError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidHexCharacterRefError] forKey:@"NSXMLParserInvalidHexCharacterRefError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidURIError] forKey:@"NSXMLParserInvalidURIError"];
[d setObject:[Number numberWithDouble:NSXMLParserLTRequiredError] forKey:@"NSXMLParserLTRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserLTSlashRequiredError] forKey:@"NSXMLParserLTSlashRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserLessThanSymbolInAttributeError] forKey:@"NSXMLParserLessThanSymbolInAttributeError"];
[d setObject:[Number numberWithDouble:NSXMLParserLiteralNotFinishedError] forKey:@"NSXMLParserLiteralNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserLiteralNotStartedError] forKey:@"NSXMLParserLiteralNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserMisplacedCDATAEndStringError] forKey:@"NSXMLParserMisplacedCDATAEndStringError"];
[d setObject:[Number numberWithDouble:NSXMLParserMisplacedXMLDeclarationError] forKey:@"NSXMLParserMisplacedXMLDeclarationError"];
[d setObject:[Number numberWithDouble:NSXMLParserMixedContentDeclNotFinishedError] forKey:@"NSXMLParserMixedContentDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserMixedContentDeclNotStartedError] forKey:@"NSXMLParserMixedContentDeclNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserNAMERequiredError] forKey:@"NSXMLParserNAMERequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserNMTOKENRequiredError] forKey:@"NSXMLParserNMTOKENRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserNamespaceDeclarationError] forKey:@"NSXMLParserNamespaceDeclarationError"];
[d setObject:[Number numberWithDouble:NSXMLParserNoDTDError] forKey:@"NSXMLParserNoDTDError"];
[d setObject:[Number numberWithDouble:NSXMLParserNotWellBalancedError] forKey:@"NSXMLParserNotWellBalancedError"];
[d setObject:[Number numberWithDouble:NSXMLParserNotationNotFinishedError] forKey:@"NSXMLParserNotationNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserNotationNotStartedError] forKey:@"NSXMLParserNotationNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserOutOfMemoryError] forKey:@"NSXMLParserOutOfMemoryError"];
[d setObject:[Number numberWithDouble:NSXMLParserPCDATARequiredError] forKey:@"NSXMLParserPCDATARequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefAtEOFError] forKey:@"NSXMLParserParsedEntityRefAtEOFError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInEpilogError] forKey:@"NSXMLParserParsedEntityRefInEpilogError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInInternalError] forKey:@"NSXMLParserParsedEntityRefInInternalError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInInternalSubsetError] forKey:@"NSXMLParserParsedEntityRefInInternalSubsetError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInPrologError] forKey:@"NSXMLParserParsedEntityRefInPrologError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefMissingSemiError] forKey:@"NSXMLParserParsedEntityRefMissingSemiError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefNoNameError] forKey:@"NSXMLParserParsedEntityRefNoNameError"];
[d setObject:[Number numberWithDouble:NSXMLParserPrematureDocumentEndError] forKey:@"NSXMLParserPrematureDocumentEndError"];
[d setObject:[Number numberWithDouble:NSXMLParserProcessingInstructionNotFinishedError] forKey:@"NSXMLParserProcessingInstructionNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserProcessingInstructionNotStartedError] forKey:@"NSXMLParserProcessingInstructionNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserPublicIdentifierRequiredError] forKey:@"NSXMLParserPublicIdentifierRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserSeparatorRequiredError] forKey:@"NSXMLParserSeparatorRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserSpaceRequiredError] forKey:@"NSXMLParserSpaceRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserStandaloneValueError] forKey:@"NSXMLParserStandaloneValueError"];
[d setObject:[Number numberWithDouble:NSXMLParserStringNotClosedError] forKey:@"NSXMLParserStringNotClosedError"];
[d setObject:[Number numberWithDouble:NSXMLParserStringNotStartedError] forKey:@"NSXMLParserStringNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserTagNameMismatchError] forKey:@"NSXMLParserTagNameMismatchError"];
[d setObject:[Number numberWithDouble:NSXMLParserURIFragmentError] forKey:@"NSXMLParserURIFragmentError"];
[d setObject:[Number numberWithDouble:NSXMLParserURIRequiredError] forKey:@"NSXMLParserURIRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserUndeclaredEntityError] forKey:@"NSXMLParserUndeclaredEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserUnfinishedTagError] forKey:@"NSXMLParserUnfinishedTagError"];
[d setObject:[Number numberWithDouble:NSXMLParserUnknownEncodingError] forKey:@"NSXMLParserUnknownEncodingError"];
[d setObject:[Number numberWithDouble:NSXMLParserUnparsedEntityError] forKey:@"NSXMLParserUnparsedEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserXMLDeclNotFinishedError] forKey:@"NSXMLParserXMLDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserXMLDeclNotStartedError] forKey:@"NSXMLParserXMLDeclNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLProcessingInstructionKind] forKey:@"NSXMLProcessingInstructionKind"];
[d setObject:[Number numberWithDouble:NSXMLTextKind] forKey:@"NSXMLTextKind"];
[d setObject:[Number numberWithDouble:NSYearCalendarUnit] forKey:@"NSYearCalendarUnit"];
[d setObject:[Number numberWithDouble:NS_BigEndian] forKey:@"NS_BigEndian"];
[d setObject:[Number numberWithDouble:NS_LittleEndian] forKey:@"NS_LittleEndian"];
[d setObject:[Number numberWithDouble:NS_UNICHAR_IS_EIGHT_BIT] forKey:@"NS_UNICHAR_IS_EIGHT_BIT"];
[d setObject:[Number numberWithDouble:NS_UnknownByteOrder] forKey:@"NS_UnknownByteOrder"];
if ([NSAppleEventManagerWillProcessFirstEventNotification isKindOfClass:[NSString class]]) [d setObject:NSAppleEventManagerWillProcessFirstEventNotification forKey:@"NSAppleEventManagerWillProcessFirstEventNotification"]; else NSLog([@"Can't initialize NSAppleEventManagerWillProcessFirstEventNotification with object " stringByAppendingString:[NSAppleEventManagerWillProcessFirstEventNotification description]]);
[d setObject:[Number numberWithDouble:NSAppleEventTimeOutDefault] forKey:@"NSAppleEventTimeOutDefault"];
[d setObject:[Number numberWithDouble:NSAppleEventTimeOutNone] forKey:@"NSAppleEventTimeOutNone"];
if ([NSAppleScriptErrorAppName isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorAppName forKey:@"NSAppleScriptErrorAppName"]; else NSLog([@"Can't initialize NSAppleScriptErrorAppName with object " stringByAppendingString:[NSAppleScriptErrorAppName description]]);
if ([NSAppleScriptErrorBriefMessage isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorBriefMessage forKey:@"NSAppleScriptErrorBriefMessage"]; else NSLog([@"Can't initialize NSAppleScriptErrorBriefMessage with object " stringByAppendingString:[NSAppleScriptErrorBriefMessage description]]);
if ([NSAppleScriptErrorMessage isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorMessage forKey:@"NSAppleScriptErrorMessage"]; else NSLog([@"Can't initialize NSAppleScriptErrorMessage with object " stringByAppendingString:[NSAppleScriptErrorMessage description]]);
if ([NSAppleScriptErrorNumber isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorNumber forKey:@"NSAppleScriptErrorNumber"]; else NSLog([@"Can't initialize NSAppleScriptErrorNumber with object " stringByAppendingString:[NSAppleScriptErrorNumber description]]);
if ([NSAppleScriptErrorRange isKindOfClass:[NSString class]]) [d setObject:NSAppleScriptErrorRange forKey:@"NSAppleScriptErrorRange"]; else NSLog([@"Can't initialize NSAppleScriptErrorRange with object " stringByAppendingString:[NSAppleScriptErrorRange description]]);
if ([NSArgumentDomain isKindOfClass:[NSString class]]) [d setObject:NSArgumentDomain forKey:@"NSArgumentDomain"]; else NSLog([@"Can't initialize NSArgumentDomain with object " stringByAppendingString:[NSArgumentDomain description]]);
if ([NSAverageKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSAverageKeyValueOperator forKey:@"NSAverageKeyValueOperator"]; else NSLog([@"Can't initialize NSAverageKeyValueOperator with object " stringByAppendingString:[NSAverageKeyValueOperator description]]);
if ([NSBuddhistCalendar isKindOfClass:[NSString class]]) [d setObject:NSBuddhistCalendar forKey:@"NSBuddhistCalendar"]; else NSLog([@"Can't initialize NSBuddhistCalendar with object " stringByAppendingString:[NSBuddhistCalendar description]]);
if ([NSBundleDidLoadNotification isKindOfClass:[NSString class]]) [d setObject:NSBundleDidLoadNotification forKey:@"NSBundleDidLoadNotification"]; else NSLog([@"Can't initialize NSBundleDidLoadNotification with object " stringByAppendingString:[NSBundleDidLoadNotification description]]);
if ([NSCharacterConversionException isKindOfClass:[NSString class]]) [d setObject:NSCharacterConversionException forKey:@"NSCharacterConversionException"]; else NSLog([@"Can't initialize NSCharacterConversionException with object " stringByAppendingString:[NSCharacterConversionException description]]);
if ([NSChineseCalendar isKindOfClass:[NSString class]]) [d setObject:NSChineseCalendar forKey:@"NSChineseCalendar"]; else NSLog([@"Can't initialize NSChineseCalendar with object " stringByAppendingString:[NSChineseCalendar description]]);
if ([NSClassDescriptionNeededForClassNotification isKindOfClass:[NSString class]]) [d setObject:NSClassDescriptionNeededForClassNotification forKey:@"NSClassDescriptionNeededForClassNotification"]; else NSLog([@"Can't initialize NSClassDescriptionNeededForClassNotification with object " stringByAppendingString:[NSClassDescriptionNeededForClassNotification description]]);
if ([NSCocoaErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSCocoaErrorDomain forKey:@"NSCocoaErrorDomain"]; else NSLog([@"Can't initialize NSCocoaErrorDomain with object " stringByAppendingString:[NSCocoaErrorDomain description]]);
if ([NSConnectionDidDieNotification isKindOfClass:[NSString class]]) [d setObject:NSConnectionDidDieNotification forKey:@"NSConnectionDidDieNotification"]; else NSLog([@"Can't initialize NSConnectionDidDieNotification with object " stringByAppendingString:[NSConnectionDidDieNotification description]]);
if ([NSConnectionDidInitializeNotification isKindOfClass:[NSString class]]) [d setObject:NSConnectionDidInitializeNotification forKey:@"NSConnectionDidInitializeNotification"]; else NSLog([@"Can't initialize NSConnectionDidInitializeNotification with object " stringByAppendingString:[NSConnectionDidInitializeNotification description]]);
if ([NSConnectionReplyMode isKindOfClass:[NSString class]]) [d setObject:NSConnectionReplyMode forKey:@"NSConnectionReplyMode"]; else NSLog([@"Can't initialize NSConnectionReplyMode with object " stringByAppendingString:[NSConnectionReplyMode description]]);
if ([NSCountKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSCountKeyValueOperator forKey:@"NSCountKeyValueOperator"]; else NSLog([@"Can't initialize NSCountKeyValueOperator with object " stringByAppendingString:[NSCountKeyValueOperator description]]);
if ([NSCurrentLocaleDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSCurrentLocaleDidChangeNotification forKey:@"NSCurrentLocaleDidChangeNotification"]; else NSLog([@"Can't initialize NSCurrentLocaleDidChangeNotification with object " stringByAppendingString:[NSCurrentLocaleDidChangeNotification description]]);
if ([NSDecimalNumberDivideByZeroException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberDivideByZeroException forKey:@"NSDecimalNumberDivideByZeroException"]; else NSLog([@"Can't initialize NSDecimalNumberDivideByZeroException with object " stringByAppendingString:[NSDecimalNumberDivideByZeroException description]]);
if ([NSDecimalNumberExactnessException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberExactnessException forKey:@"NSDecimalNumberExactnessException"]; else NSLog([@"Can't initialize NSDecimalNumberExactnessException with object " stringByAppendingString:[NSDecimalNumberExactnessException description]]);
if ([NSDecimalNumberOverflowException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberOverflowException forKey:@"NSDecimalNumberOverflowException"]; else NSLog([@"Can't initialize NSDecimalNumberOverflowException with object " stringByAppendingString:[NSDecimalNumberOverflowException description]]);
if ([NSDecimalNumberUnderflowException isKindOfClass:[NSString class]]) [d setObject:NSDecimalNumberUnderflowException forKey:@"NSDecimalNumberUnderflowException"]; else NSLog([@"Can't initialize NSDecimalNumberUnderflowException with object " stringByAppendingString:[NSDecimalNumberUnderflowException description]]);
if ([NSDefaultRunLoopMode isKindOfClass:[NSString class]]) [d setObject:NSDefaultRunLoopMode forKey:@"NSDefaultRunLoopMode"]; else NSLog([@"Can't initialize NSDefaultRunLoopMode with object " stringByAppendingString:[NSDefaultRunLoopMode description]]);
if ([NSDestinationInvalidException isKindOfClass:[NSString class]]) [d setObject:NSDestinationInvalidException forKey:@"NSDestinationInvalidException"]; else NSLog([@"Can't initialize NSDestinationInvalidException with object " stringByAppendingString:[NSDestinationInvalidException description]]);
if ([NSDidBecomeSingleThreadedNotification isKindOfClass:[NSString class]]) [d setObject:NSDidBecomeSingleThreadedNotification forKey:@"NSDidBecomeSingleThreadedNotification"]; else NSLog([@"Can't initialize NSDidBecomeSingleThreadedNotification with object " stringByAppendingString:[NSDidBecomeSingleThreadedNotification description]]);
if ([NSDistinctUnionOfArraysKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSDistinctUnionOfArraysKeyValueOperator forKey:@"NSDistinctUnionOfArraysKeyValueOperator"]; else NSLog([@"Can't initialize NSDistinctUnionOfArraysKeyValueOperator with object " stringByAppendingString:[NSDistinctUnionOfArraysKeyValueOperator description]]);
if ([NSDistinctUnionOfObjectsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSDistinctUnionOfObjectsKeyValueOperator forKey:@"NSDistinctUnionOfObjectsKeyValueOperator"]; else NSLog([@"Can't initialize NSDistinctUnionOfObjectsKeyValueOperator with object " stringByAppendingString:[NSDistinctUnionOfObjectsKeyValueOperator description]]);
if ([NSDistinctUnionOfSetsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSDistinctUnionOfSetsKeyValueOperator forKey:@"NSDistinctUnionOfSetsKeyValueOperator"]; else NSLog([@"Can't initialize NSDistinctUnionOfSetsKeyValueOperator with object " stringByAppendingString:[NSDistinctUnionOfSetsKeyValueOperator description]]);
if ([NSErrorFailingURLStringKey isKindOfClass:[NSString class]]) [d setObject:NSErrorFailingURLStringKey forKey:@"NSErrorFailingURLStringKey"]; else NSLog([@"Can't initialize NSErrorFailingURLStringKey with object " stringByAppendingString:[NSErrorFailingURLStringKey description]]);
if ([NSFailedAuthenticationException isKindOfClass:[NSString class]]) [d setObject:NSFailedAuthenticationException forKey:@"NSFailedAuthenticationException"]; else NSLog([@"Can't initialize NSFailedAuthenticationException with object " stringByAppendingString:[NSFailedAuthenticationException description]]);
if ([NSFileAppendOnly isKindOfClass:[NSString class]]) [d setObject:NSFileAppendOnly forKey:@"NSFileAppendOnly"]; else NSLog([@"Can't initialize NSFileAppendOnly with object " stringByAppendingString:[NSFileAppendOnly description]]);
if ([NSFileBusy isKindOfClass:[NSString class]]) [d setObject:NSFileBusy forKey:@"NSFileBusy"]; else NSLog([@"Can't initialize NSFileBusy with object " stringByAppendingString:[NSFileBusy description]]);
if ([NSFileCreationDate isKindOfClass:[NSString class]]) [d setObject:NSFileCreationDate forKey:@"NSFileCreationDate"]; else NSLog([@"Can't initialize NSFileCreationDate with object " stringByAppendingString:[NSFileCreationDate description]]);
if ([NSFileDeviceIdentifier isKindOfClass:[NSString class]]) [d setObject:NSFileDeviceIdentifier forKey:@"NSFileDeviceIdentifier"]; else NSLog([@"Can't initialize NSFileDeviceIdentifier with object " stringByAppendingString:[NSFileDeviceIdentifier description]]);
if ([NSFileExtensionHidden isKindOfClass:[NSString class]]) [d setObject:NSFileExtensionHidden forKey:@"NSFileExtensionHidden"]; else NSLog([@"Can't initialize NSFileExtensionHidden with object " stringByAppendingString:[NSFileExtensionHidden description]]);
if ([NSFileGroupOwnerAccountID isKindOfClass:[NSString class]]) [d setObject:NSFileGroupOwnerAccountID forKey:@"NSFileGroupOwnerAccountID"]; else NSLog([@"Can't initialize NSFileGroupOwnerAccountID with object " stringByAppendingString:[NSFileGroupOwnerAccountID description]]);
if ([NSFileGroupOwnerAccountName isKindOfClass:[NSString class]]) [d setObject:NSFileGroupOwnerAccountName forKey:@"NSFileGroupOwnerAccountName"]; else NSLog([@"Can't initialize NSFileGroupOwnerAccountName with object " stringByAppendingString:[NSFileGroupOwnerAccountName description]]);
if ([NSFileHFSCreatorCode isKindOfClass:[NSString class]]) [d setObject:NSFileHFSCreatorCode forKey:@"NSFileHFSCreatorCode"]; else NSLog([@"Can't initialize NSFileHFSCreatorCode with object " stringByAppendingString:[NSFileHFSCreatorCode description]]);
if ([NSFileHFSTypeCode isKindOfClass:[NSString class]]) [d setObject:NSFileHFSTypeCode forKey:@"NSFileHFSTypeCode"]; else NSLog([@"Can't initialize NSFileHFSTypeCode with object " stringByAppendingString:[NSFileHFSTypeCode description]]);
if ([NSFileHandleConnectionAcceptedNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleConnectionAcceptedNotification forKey:@"NSFileHandleConnectionAcceptedNotification"]; else NSLog([@"Can't initialize NSFileHandleConnectionAcceptedNotification with object " stringByAppendingString:[NSFileHandleConnectionAcceptedNotification description]]);
if ([NSFileHandleDataAvailableNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleDataAvailableNotification forKey:@"NSFileHandleDataAvailableNotification"]; else NSLog([@"Can't initialize NSFileHandleDataAvailableNotification with object " stringByAppendingString:[NSFileHandleDataAvailableNotification description]]);
if ([NSFileHandleNotificationDataItem isKindOfClass:[NSString class]]) [d setObject:NSFileHandleNotificationDataItem forKey:@"NSFileHandleNotificationDataItem"]; else NSLog([@"Can't initialize NSFileHandleNotificationDataItem with object " stringByAppendingString:[NSFileHandleNotificationDataItem description]]);
if ([NSFileHandleNotificationFileHandleItem isKindOfClass:[NSString class]]) [d setObject:NSFileHandleNotificationFileHandleItem forKey:@"NSFileHandleNotificationFileHandleItem"]; else NSLog([@"Can't initialize NSFileHandleNotificationFileHandleItem with object " stringByAppendingString:[NSFileHandleNotificationFileHandleItem description]]);
if ([NSFileHandleNotificationMonitorModes isKindOfClass:[NSString class]]) [d setObject:NSFileHandleNotificationMonitorModes forKey:@"NSFileHandleNotificationMonitorModes"]; else NSLog([@"Can't initialize NSFileHandleNotificationMonitorModes with object " stringByAppendingString:[NSFileHandleNotificationMonitorModes description]]);
if ([NSFileHandleOperationException isKindOfClass:[NSString class]]) [d setObject:NSFileHandleOperationException forKey:@"NSFileHandleOperationException"]; else NSLog([@"Can't initialize NSFileHandleOperationException with object " stringByAppendingString:[NSFileHandleOperationException description]]);
if ([NSFileHandleReadCompletionNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleReadCompletionNotification forKey:@"NSFileHandleReadCompletionNotification"]; else NSLog([@"Can't initialize NSFileHandleReadCompletionNotification with object " stringByAppendingString:[NSFileHandleReadCompletionNotification description]]);
if ([NSFileHandleReadToEndOfFileCompletionNotification isKindOfClass:[NSString class]]) [d setObject:NSFileHandleReadToEndOfFileCompletionNotification forKey:@"NSFileHandleReadToEndOfFileCompletionNotification"]; else NSLog([@"Can't initialize NSFileHandleReadToEndOfFileCompletionNotification with object " stringByAppendingString:[NSFileHandleReadToEndOfFileCompletionNotification description]]);
if ([NSFileImmutable isKindOfClass:[NSString class]]) [d setObject:NSFileImmutable forKey:@"NSFileImmutable"]; else NSLog([@"Can't initialize NSFileImmutable with object " stringByAppendingString:[NSFileImmutable description]]);
if ([NSFileModificationDate isKindOfClass:[NSString class]]) [d setObject:NSFileModificationDate forKey:@"NSFileModificationDate"]; else NSLog([@"Can't initialize NSFileModificationDate with object " stringByAppendingString:[NSFileModificationDate description]]);
if ([NSFileOwnerAccountID isKindOfClass:[NSString class]]) [d setObject:NSFileOwnerAccountID forKey:@"NSFileOwnerAccountID"]; else NSLog([@"Can't initialize NSFileOwnerAccountID with object " stringByAppendingString:[NSFileOwnerAccountID description]]);
if ([NSFileOwnerAccountName isKindOfClass:[NSString class]]) [d setObject:NSFileOwnerAccountName forKey:@"NSFileOwnerAccountName"]; else NSLog([@"Can't initialize NSFileOwnerAccountName with object " stringByAppendingString:[NSFileOwnerAccountName description]]);
if ([NSFilePathErrorKey isKindOfClass:[NSString class]]) [d setObject:NSFilePathErrorKey forKey:@"NSFilePathErrorKey"]; else NSLog([@"Can't initialize NSFilePathErrorKey with object " stringByAppendingString:[NSFilePathErrorKey description]]);
if ([NSFilePosixPermissions isKindOfClass:[NSString class]]) [d setObject:NSFilePosixPermissions forKey:@"NSFilePosixPermissions"]; else NSLog([@"Can't initialize NSFilePosixPermissions with object " stringByAppendingString:[NSFilePosixPermissions description]]);
if ([NSFileReferenceCount isKindOfClass:[NSString class]]) [d setObject:NSFileReferenceCount forKey:@"NSFileReferenceCount"]; else NSLog([@"Can't initialize NSFileReferenceCount with object " stringByAppendingString:[NSFileReferenceCount description]]);
if ([NSFileSize isKindOfClass:[NSString class]]) [d setObject:NSFileSize forKey:@"NSFileSize"]; else NSLog([@"Can't initialize NSFileSize with object " stringByAppendingString:[NSFileSize description]]);
if ([NSFileSystemFileNumber isKindOfClass:[NSString class]]) [d setObject:NSFileSystemFileNumber forKey:@"NSFileSystemFileNumber"]; else NSLog([@"Can't initialize NSFileSystemFileNumber with object " stringByAppendingString:[NSFileSystemFileNumber description]]);
if ([NSFileSystemFreeNodes isKindOfClass:[NSString class]]) [d setObject:NSFileSystemFreeNodes forKey:@"NSFileSystemFreeNodes"]; else NSLog([@"Can't initialize NSFileSystemFreeNodes with object " stringByAppendingString:[NSFileSystemFreeNodes description]]);
if ([NSFileSystemFreeSize isKindOfClass:[NSString class]]) [d setObject:NSFileSystemFreeSize forKey:@"NSFileSystemFreeSize"]; else NSLog([@"Can't initialize NSFileSystemFreeSize with object " stringByAppendingString:[NSFileSystemFreeSize description]]);
if ([NSFileSystemNodes isKindOfClass:[NSString class]]) [d setObject:NSFileSystemNodes forKey:@"NSFileSystemNodes"]; else NSLog([@"Can't initialize NSFileSystemNodes with object " stringByAppendingString:[NSFileSystemNodes description]]);
if ([NSFileSystemNumber isKindOfClass:[NSString class]]) [d setObject:NSFileSystemNumber forKey:@"NSFileSystemNumber"]; else NSLog([@"Can't initialize NSFileSystemNumber with object " stringByAppendingString:[NSFileSystemNumber description]]);
if ([NSFileSystemSize isKindOfClass:[NSString class]]) [d setObject:NSFileSystemSize forKey:@"NSFileSystemSize"]; else NSLog([@"Can't initialize NSFileSystemSize with object " stringByAppendingString:[NSFileSystemSize description]]);
if ([NSFileType isKindOfClass:[NSString class]]) [d setObject:NSFileType forKey:@"NSFileType"]; else NSLog([@"Can't initialize NSFileType with object " stringByAppendingString:[NSFileType description]]);
if ([NSFileTypeBlockSpecial isKindOfClass:[NSString class]]) [d setObject:NSFileTypeBlockSpecial forKey:@"NSFileTypeBlockSpecial"]; else NSLog([@"Can't initialize NSFileTypeBlockSpecial with object " stringByAppendingString:[NSFileTypeBlockSpecial description]]);
if ([NSFileTypeCharacterSpecial isKindOfClass:[NSString class]]) [d setObject:NSFileTypeCharacterSpecial forKey:@"NSFileTypeCharacterSpecial"]; else NSLog([@"Can't initialize NSFileTypeCharacterSpecial with object " stringByAppendingString:[NSFileTypeCharacterSpecial description]]);
if ([NSFileTypeDirectory isKindOfClass:[NSString class]]) [d setObject:NSFileTypeDirectory forKey:@"NSFileTypeDirectory"]; else NSLog([@"Can't initialize NSFileTypeDirectory with object " stringByAppendingString:[NSFileTypeDirectory description]]);
if ([NSFileTypeRegular isKindOfClass:[NSString class]]) [d setObject:NSFileTypeRegular forKey:@"NSFileTypeRegular"]; else NSLog([@"Can't initialize NSFileTypeRegular with object " stringByAppendingString:[NSFileTypeRegular description]]);
if ([NSFileTypeSocket isKindOfClass:[NSString class]]) [d setObject:NSFileTypeSocket forKey:@"NSFileTypeSocket"]; else NSLog([@"Can't initialize NSFileTypeSocket with object " stringByAppendingString:[NSFileTypeSocket description]]);
if ([NSFileTypeSymbolicLink isKindOfClass:[NSString class]]) [d setObject:NSFileTypeSymbolicLink forKey:@"NSFileTypeSymbolicLink"]; else NSLog([@"Can't initialize NSFileTypeSymbolicLink with object " stringByAppendingString:[NSFileTypeSymbolicLink description]]);
if ([NSFileTypeUnknown isKindOfClass:[NSString class]]) [d setObject:NSFileTypeUnknown forKey:@"NSFileTypeUnknown"]; else NSLog([@"Can't initialize NSFileTypeUnknown with object " stringByAppendingString:[NSFileTypeUnknown description]]);
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber] forKey:@"NSFoundationVersionNumber"];
if ([NSGenericException isKindOfClass:[NSString class]]) [d setObject:NSGenericException forKey:@"NSGenericException"]; else NSLog([@"Can't initialize NSGenericException with object " stringByAppendingString:[NSGenericException description]]);
if ([NSGlobalDomain isKindOfClass:[NSString class]]) [d setObject:NSGlobalDomain forKey:@"NSGlobalDomain"]; else NSLog([@"Can't initialize NSGlobalDomain with object " stringByAppendingString:[NSGlobalDomain description]]);
if ([NSGrammarCorrections isKindOfClass:[NSString class]]) [d setObject:NSGrammarCorrections forKey:@"NSGrammarCorrections"]; else NSLog([@"Can't initialize NSGrammarCorrections with object " stringByAppendingString:[NSGrammarCorrections description]]);
if ([NSGrammarRange isKindOfClass:[NSString class]]) [d setObject:NSGrammarRange forKey:@"NSGrammarRange"]; else NSLog([@"Can't initialize NSGrammarRange with object " stringByAppendingString:[NSGrammarRange description]]);
if ([NSGrammarUserDescription isKindOfClass:[NSString class]]) [d setObject:NSGrammarUserDescription forKey:@"NSGrammarUserDescription"]; else NSLog([@"Can't initialize NSGrammarUserDescription with object " stringByAppendingString:[NSGrammarUserDescription description]]);
if ([NSGregorianCalendar isKindOfClass:[NSString class]]) [d setObject:NSGregorianCalendar forKey:@"NSGregorianCalendar"]; else NSLog([@"Can't initialize NSGregorianCalendar with object " stringByAppendingString:[NSGregorianCalendar description]]);
if ([NSHTTPCookieComment isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieComment forKey:@"NSHTTPCookieComment"]; else NSLog([@"Can't initialize NSHTTPCookieComment with object " stringByAppendingString:[NSHTTPCookieComment description]]);
if ([NSHTTPCookieCommentURL isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieCommentURL forKey:@"NSHTTPCookieCommentURL"]; else NSLog([@"Can't initialize NSHTTPCookieCommentURL with object " stringByAppendingString:[NSHTTPCookieCommentURL description]]);
if ([NSHTTPCookieDiscard isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieDiscard forKey:@"NSHTTPCookieDiscard"]; else NSLog([@"Can't initialize NSHTTPCookieDiscard with object " stringByAppendingString:[NSHTTPCookieDiscard description]]);
if ([NSHTTPCookieDomain isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieDomain forKey:@"NSHTTPCookieDomain"]; else NSLog([@"Can't initialize NSHTTPCookieDomain with object " stringByAppendingString:[NSHTTPCookieDomain description]]);
if ([NSHTTPCookieExpires isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieExpires forKey:@"NSHTTPCookieExpires"]; else NSLog([@"Can't initialize NSHTTPCookieExpires with object " stringByAppendingString:[NSHTTPCookieExpires description]]);
if ([NSHTTPCookieManagerAcceptPolicyChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieManagerAcceptPolicyChangedNotification forKey:@"NSHTTPCookieManagerAcceptPolicyChangedNotification"]; else NSLog([@"Can't initialize NSHTTPCookieManagerAcceptPolicyChangedNotification with object " stringByAppendingString:[NSHTTPCookieManagerAcceptPolicyChangedNotification description]]);
if ([NSHTTPCookieManagerCookiesChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieManagerCookiesChangedNotification forKey:@"NSHTTPCookieManagerCookiesChangedNotification"]; else NSLog([@"Can't initialize NSHTTPCookieManagerCookiesChangedNotification with object " stringByAppendingString:[NSHTTPCookieManagerCookiesChangedNotification description]]);
if ([NSHTTPCookieMaximumAge isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieMaximumAge forKey:@"NSHTTPCookieMaximumAge"]; else NSLog([@"Can't initialize NSHTTPCookieMaximumAge with object " stringByAppendingString:[NSHTTPCookieMaximumAge description]]);
if ([NSHTTPCookieName isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieName forKey:@"NSHTTPCookieName"]; else NSLog([@"Can't initialize NSHTTPCookieName with object " stringByAppendingString:[NSHTTPCookieName description]]);
if ([NSHTTPCookieOriginURL isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieOriginURL forKey:@"NSHTTPCookieOriginURL"]; else NSLog([@"Can't initialize NSHTTPCookieOriginURL with object " stringByAppendingString:[NSHTTPCookieOriginURL description]]);
if ([NSHTTPCookiePath isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookiePath forKey:@"NSHTTPCookiePath"]; else NSLog([@"Can't initialize NSHTTPCookiePath with object " stringByAppendingString:[NSHTTPCookiePath description]]);
if ([NSHTTPCookiePort isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookiePort forKey:@"NSHTTPCookiePort"]; else NSLog([@"Can't initialize NSHTTPCookiePort with object " stringByAppendingString:[NSHTTPCookiePort description]]);
if ([NSHTTPCookieSecure isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieSecure forKey:@"NSHTTPCookieSecure"]; else NSLog([@"Can't initialize NSHTTPCookieSecure with object " stringByAppendingString:[NSHTTPCookieSecure description]]);
if ([NSHTTPCookieValue isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieValue forKey:@"NSHTTPCookieValue"]; else NSLog([@"Can't initialize NSHTTPCookieValue with object " stringByAppendingString:[NSHTTPCookieValue description]]);
if ([NSHTTPCookieVersion isKindOfClass:[NSString class]]) [d setObject:NSHTTPCookieVersion forKey:@"NSHTTPCookieVersion"]; else NSLog([@"Can't initialize NSHTTPCookieVersion with object " stringByAppendingString:[NSHTTPCookieVersion description]]);
if ([NSHebrewCalendar isKindOfClass:[NSString class]]) [d setObject:NSHebrewCalendar forKey:@"NSHebrewCalendar"]; else NSLog([@"Can't initialize NSHebrewCalendar with object " stringByAppendingString:[NSHebrewCalendar description]]);
if ([NSInconsistentArchiveException isKindOfClass:[NSString class]]) [d setObject:NSInconsistentArchiveException forKey:@"NSInconsistentArchiveException"]; else NSLog([@"Can't initialize NSInconsistentArchiveException with object " stringByAppendingString:[NSInconsistentArchiveException description]]);
if ([NSInternalInconsistencyException isKindOfClass:[NSString class]]) [d setObject:NSInternalInconsistencyException forKey:@"NSInternalInconsistencyException"]; else NSLog([@"Can't initialize NSInternalInconsistencyException with object " stringByAppendingString:[NSInternalInconsistencyException description]]);
if ([NSInvalidArchiveOperationException isKindOfClass:[NSString class]]) [d setObject:NSInvalidArchiveOperationException forKey:@"NSInvalidArchiveOperationException"]; else NSLog([@"Can't initialize NSInvalidArchiveOperationException with object " stringByAppendingString:[NSInvalidArchiveOperationException description]]);
if ([NSInvalidArgumentException isKindOfClass:[NSString class]]) [d setObject:NSInvalidArgumentException forKey:@"NSInvalidArgumentException"]; else NSLog([@"Can't initialize NSInvalidArgumentException with object " stringByAppendingString:[NSInvalidArgumentException description]]);
if ([NSInvalidReceivePortException isKindOfClass:[NSString class]]) [d setObject:NSInvalidReceivePortException forKey:@"NSInvalidReceivePortException"]; else NSLog([@"Can't initialize NSInvalidReceivePortException with object " stringByAppendingString:[NSInvalidReceivePortException description]]);
if ([NSInvalidSendPortException isKindOfClass:[NSString class]]) [d setObject:NSInvalidSendPortException forKey:@"NSInvalidSendPortException"]; else NSLog([@"Can't initialize NSInvalidSendPortException with object " stringByAppendingString:[NSInvalidSendPortException description]]);
if ([NSInvalidUnarchiveOperationException isKindOfClass:[NSString class]]) [d setObject:NSInvalidUnarchiveOperationException forKey:@"NSInvalidUnarchiveOperationException"]; else NSLog([@"Can't initialize NSInvalidUnarchiveOperationException with object " stringByAppendingString:[NSInvalidUnarchiveOperationException description]]);
if ([NSInvocationOperationCancelledException isKindOfClass:[NSString class]]) [d setObject:NSInvocationOperationCancelledException forKey:@"NSInvocationOperationCancelledException"]; else NSLog([@"Can't initialize NSInvocationOperationCancelledException with object " stringByAppendingString:[NSInvocationOperationCancelledException description]]);
if ([NSInvocationOperationVoidResultException isKindOfClass:[NSString class]]) [d setObject:NSInvocationOperationVoidResultException forKey:@"NSInvocationOperationVoidResultException"]; else NSLog([@"Can't initialize NSInvocationOperationVoidResultException with object " stringByAppendingString:[NSInvocationOperationVoidResultException description]]);
if ([NSIsNilTransformerName isKindOfClass:[NSString class]]) [d setObject:NSIsNilTransformerName forKey:@"NSIsNilTransformerName"]; else NSLog([@"Can't initialize NSIsNilTransformerName with object " stringByAppendingString:[NSIsNilTransformerName description]]);
if ([NSIsNotNilTransformerName isKindOfClass:[NSString class]]) [d setObject:NSIsNotNilTransformerName forKey:@"NSIsNotNilTransformerName"]; else NSLog([@"Can't initialize NSIsNotNilTransformerName with object " stringByAppendingString:[NSIsNotNilTransformerName description]]);
if ([NSIslamicCalendar isKindOfClass:[NSString class]]) [d setObject:NSIslamicCalendar forKey:@"NSIslamicCalendar"]; else NSLog([@"Can't initialize NSIslamicCalendar with object " stringByAppendingString:[NSIslamicCalendar description]]);
if ([NSIslamicCivilCalendar isKindOfClass:[NSString class]]) [d setObject:NSIslamicCivilCalendar forKey:@"NSIslamicCivilCalendar"]; else NSLog([@"Can't initialize NSIslamicCivilCalendar with object " stringByAppendingString:[NSIslamicCivilCalendar description]]);
if ([NSJapaneseCalendar isKindOfClass:[NSString class]]) [d setObject:NSJapaneseCalendar forKey:@"NSJapaneseCalendar"]; else NSLog([@"Can't initialize NSJapaneseCalendar with object " stringByAppendingString:[NSJapaneseCalendar description]]);
if ([NSKeyValueChangeIndexesKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeIndexesKey forKey:@"NSKeyValueChangeIndexesKey"]; else NSLog([@"Can't initialize NSKeyValueChangeIndexesKey with object " stringByAppendingString:[NSKeyValueChangeIndexesKey description]]);
if ([NSKeyValueChangeKindKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeKindKey forKey:@"NSKeyValueChangeKindKey"]; else NSLog([@"Can't initialize NSKeyValueChangeKindKey with object " stringByAppendingString:[NSKeyValueChangeKindKey description]]);
if ([NSKeyValueChangeNewKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeNewKey forKey:@"NSKeyValueChangeNewKey"]; else NSLog([@"Can't initialize NSKeyValueChangeNewKey with object " stringByAppendingString:[NSKeyValueChangeNewKey description]]);
if ([NSKeyValueChangeNotificationIsPriorKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeNotificationIsPriorKey forKey:@"NSKeyValueChangeNotificationIsPriorKey"]; else NSLog([@"Can't initialize NSKeyValueChangeNotificationIsPriorKey with object " stringByAppendingString:[NSKeyValueChangeNotificationIsPriorKey description]]);
if ([NSKeyValueChangeOldKey isKindOfClass:[NSString class]]) [d setObject:NSKeyValueChangeOldKey forKey:@"NSKeyValueChangeOldKey"]; else NSLog([@"Can't initialize NSKeyValueChangeOldKey with object " stringByAppendingString:[NSKeyValueChangeOldKey description]]);
if ([NSKeyedUnarchiveFromDataTransformerName isKindOfClass:[NSString class]]) [d setObject:NSKeyedUnarchiveFromDataTransformerName forKey:@"NSKeyedUnarchiveFromDataTransformerName"]; else NSLog([@"Can't initialize NSKeyedUnarchiveFromDataTransformerName with object " stringByAppendingString:[NSKeyedUnarchiveFromDataTransformerName description]]);
if ([NSLoadedClasses isKindOfClass:[NSString class]]) [d setObject:NSLoadedClasses forKey:@"NSLoadedClasses"]; else NSLog([@"Can't initialize NSLoadedClasses with object " stringByAppendingString:[NSLoadedClasses description]]);
if ([NSLocalNotificationCenterType isKindOfClass:[NSString class]]) [d setObject:NSLocalNotificationCenterType forKey:@"NSLocalNotificationCenterType"]; else NSLog([@"Can't initialize NSLocalNotificationCenterType with object " stringByAppendingString:[NSLocalNotificationCenterType description]]);
if ([NSLocaleCalendar isKindOfClass:[NSString class]]) [d setObject:NSLocaleCalendar forKey:@"NSLocaleCalendar"]; else NSLog([@"Can't initialize NSLocaleCalendar with object " stringByAppendingString:[NSLocaleCalendar description]]);
if ([NSLocaleCollationIdentifier isKindOfClass:[NSString class]]) [d setObject:NSLocaleCollationIdentifier forKey:@"NSLocaleCollationIdentifier"]; else NSLog([@"Can't initialize NSLocaleCollationIdentifier with object " stringByAppendingString:[NSLocaleCollationIdentifier description]]);
if ([NSLocaleCountryCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleCountryCode forKey:@"NSLocaleCountryCode"]; else NSLog([@"Can't initialize NSLocaleCountryCode with object " stringByAppendingString:[NSLocaleCountryCode description]]);
if ([NSLocaleCurrencyCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleCurrencyCode forKey:@"NSLocaleCurrencyCode"]; else NSLog([@"Can't initialize NSLocaleCurrencyCode with object " stringByAppendingString:[NSLocaleCurrencyCode description]]);
if ([NSLocaleCurrencySymbol isKindOfClass:[NSString class]]) [d setObject:NSLocaleCurrencySymbol forKey:@"NSLocaleCurrencySymbol"]; else NSLog([@"Can't initialize NSLocaleCurrencySymbol with object " stringByAppendingString:[NSLocaleCurrencySymbol description]]);
if ([NSLocaleDecimalSeparator isKindOfClass:[NSString class]]) [d setObject:NSLocaleDecimalSeparator forKey:@"NSLocaleDecimalSeparator"]; else NSLog([@"Can't initialize NSLocaleDecimalSeparator with object " stringByAppendingString:[NSLocaleDecimalSeparator description]]);
if ([NSLocaleExemplarCharacterSet isKindOfClass:[NSString class]]) [d setObject:NSLocaleExemplarCharacterSet forKey:@"NSLocaleExemplarCharacterSet"]; else NSLog([@"Can't initialize NSLocaleExemplarCharacterSet with object " stringByAppendingString:[NSLocaleExemplarCharacterSet description]]);
if ([NSLocaleGroupingSeparator isKindOfClass:[NSString class]]) [d setObject:NSLocaleGroupingSeparator forKey:@"NSLocaleGroupingSeparator"]; else NSLog([@"Can't initialize NSLocaleGroupingSeparator with object " stringByAppendingString:[NSLocaleGroupingSeparator description]]);
if ([NSLocaleIdentifier isKindOfClass:[NSString class]]) [d setObject:NSLocaleIdentifier forKey:@"NSLocaleIdentifier"]; else NSLog([@"Can't initialize NSLocaleIdentifier with object " stringByAppendingString:[NSLocaleIdentifier description]]);
if ([NSLocaleLanguageCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleLanguageCode forKey:@"NSLocaleLanguageCode"]; else NSLog([@"Can't initialize NSLocaleLanguageCode with object " stringByAppendingString:[NSLocaleLanguageCode description]]);
if ([NSLocaleMeasurementSystem isKindOfClass:[NSString class]]) [d setObject:NSLocaleMeasurementSystem forKey:@"NSLocaleMeasurementSystem"]; else NSLog([@"Can't initialize NSLocaleMeasurementSystem with object " stringByAppendingString:[NSLocaleMeasurementSystem description]]);
if ([NSLocaleScriptCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleScriptCode forKey:@"NSLocaleScriptCode"]; else NSLog([@"Can't initialize NSLocaleScriptCode with object " stringByAppendingString:[NSLocaleScriptCode description]]);
if ([NSLocaleUsesMetricSystem isKindOfClass:[NSString class]]) [d setObject:NSLocaleUsesMetricSystem forKey:@"NSLocaleUsesMetricSystem"]; else NSLog([@"Can't initialize NSLocaleUsesMetricSystem with object " stringByAppendingString:[NSLocaleUsesMetricSystem description]]);
if ([NSLocaleVariantCode isKindOfClass:[NSString class]]) [d setObject:NSLocaleVariantCode forKey:@"NSLocaleVariantCode"]; else NSLog([@"Can't initialize NSLocaleVariantCode with object " stringByAppendingString:[NSLocaleVariantCode description]]);
if ([NSLocalizedDescriptionKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedDescriptionKey forKey:@"NSLocalizedDescriptionKey"]; else NSLog([@"Can't initialize NSLocalizedDescriptionKey with object " stringByAppendingString:[NSLocalizedDescriptionKey description]]);
if ([NSLocalizedFailureReasonErrorKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedFailureReasonErrorKey forKey:@"NSLocalizedFailureReasonErrorKey"]; else NSLog([@"Can't initialize NSLocalizedFailureReasonErrorKey with object " stringByAppendingString:[NSLocalizedFailureReasonErrorKey description]]);
if ([NSLocalizedRecoveryOptionsErrorKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedRecoveryOptionsErrorKey forKey:@"NSLocalizedRecoveryOptionsErrorKey"]; else NSLog([@"Can't initialize NSLocalizedRecoveryOptionsErrorKey with object " stringByAppendingString:[NSLocalizedRecoveryOptionsErrorKey description]]);
if ([NSLocalizedRecoverySuggestionErrorKey isKindOfClass:[NSString class]]) [d setObject:NSLocalizedRecoverySuggestionErrorKey forKey:@"NSLocalizedRecoverySuggestionErrorKey"]; else NSLog([@"Can't initialize NSLocalizedRecoverySuggestionErrorKey with object " stringByAppendingString:[NSLocalizedRecoverySuggestionErrorKey description]]);
if ([NSMachErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSMachErrorDomain forKey:@"NSMachErrorDomain"]; else NSLog([@"Can't initialize NSMachErrorDomain with object " stringByAppendingString:[NSMachErrorDomain description]]);
if ([NSMallocException isKindOfClass:[NSString class]]) [d setObject:NSMallocException forKey:@"NSMallocException"]; else NSLog([@"Can't initialize NSMallocException with object " stringByAppendingString:[NSMallocException description]]);
if ([NSMaximumKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSMaximumKeyValueOperator forKey:@"NSMaximumKeyValueOperator"]; else NSLog([@"Can't initialize NSMaximumKeyValueOperator with object " stringByAppendingString:[NSMaximumKeyValueOperator description]]);
if ([NSMetadataQueryDidFinishGatheringNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryDidFinishGatheringNotification forKey:@"NSMetadataQueryDidFinishGatheringNotification"]; else NSLog([@"Can't initialize NSMetadataQueryDidFinishGatheringNotification with object " stringByAppendingString:[NSMetadataQueryDidFinishGatheringNotification description]]);
if ([NSMetadataQueryDidStartGatheringNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryDidStartGatheringNotification forKey:@"NSMetadataQueryDidStartGatheringNotification"]; else NSLog([@"Can't initialize NSMetadataQueryDidStartGatheringNotification with object " stringByAppendingString:[NSMetadataQueryDidStartGatheringNotification description]]);
if ([NSMetadataQueryDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryDidUpdateNotification forKey:@"NSMetadataQueryDidUpdateNotification"]; else NSLog([@"Can't initialize NSMetadataQueryDidUpdateNotification with object " stringByAppendingString:[NSMetadataQueryDidUpdateNotification description]]);
if ([NSMetadataQueryGatheringProgressNotification isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryGatheringProgressNotification forKey:@"NSMetadataQueryGatheringProgressNotification"]; else NSLog([@"Can't initialize NSMetadataQueryGatheringProgressNotification with object " stringByAppendingString:[NSMetadataQueryGatheringProgressNotification description]]);
if ([NSMetadataQueryLocalComputerScope isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryLocalComputerScope forKey:@"NSMetadataQueryLocalComputerScope"]; else NSLog([@"Can't initialize NSMetadataQueryLocalComputerScope with object " stringByAppendingString:[NSMetadataQueryLocalComputerScope description]]);
if ([NSMetadataQueryNetworkScope isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryNetworkScope forKey:@"NSMetadataQueryNetworkScope"]; else NSLog([@"Can't initialize NSMetadataQueryNetworkScope with object " stringByAppendingString:[NSMetadataQueryNetworkScope description]]);
if ([NSMetadataQueryResultContentRelevanceAttribute isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryResultContentRelevanceAttribute forKey:@"NSMetadataQueryResultContentRelevanceAttribute"]; else NSLog([@"Can't initialize NSMetadataQueryResultContentRelevanceAttribute with object " stringByAppendingString:[NSMetadataQueryResultContentRelevanceAttribute description]]);
if ([NSMetadataQueryUserHomeScope isKindOfClass:[NSString class]]) [d setObject:NSMetadataQueryUserHomeScope forKey:@"NSMetadataQueryUserHomeScope"]; else NSLog([@"Can't initialize NSMetadataQueryUserHomeScope with object " stringByAppendingString:[NSMetadataQueryUserHomeScope description]]);
if ([NSMinimumKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSMinimumKeyValueOperator forKey:@"NSMinimumKeyValueOperator"]; else NSLog([@"Can't initialize NSMinimumKeyValueOperator with object " stringByAppendingString:[NSMinimumKeyValueOperator description]]);
if ([NSNegateBooleanTransformerName isKindOfClass:[NSString class]]) [d setObject:NSNegateBooleanTransformerName forKey:@"NSNegateBooleanTransformerName"]; else NSLog([@"Can't initialize NSNegateBooleanTransformerName with object " stringByAppendingString:[NSNegateBooleanTransformerName description]]);
if ([NSNetServicesErrorCode isKindOfClass:[NSString class]]) [d setObject:NSNetServicesErrorCode forKey:@"NSNetServicesErrorCode"]; else NSLog([@"Can't initialize NSNetServicesErrorCode with object " stringByAppendingString:[NSNetServicesErrorCode description]]);
if ([NSNetServicesErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSNetServicesErrorDomain forKey:@"NSNetServicesErrorDomain"]; else NSLog([@"Can't initialize NSNetServicesErrorDomain with object " stringByAppendingString:[NSNetServicesErrorDomain description]]);
if ([NSOSStatusErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSOSStatusErrorDomain forKey:@"NSOSStatusErrorDomain"]; else NSLog([@"Can't initialize NSOSStatusErrorDomain with object " stringByAppendingString:[NSOSStatusErrorDomain description]]);
if ([NSObjectInaccessibleException isKindOfClass:[NSString class]]) [d setObject:NSObjectInaccessibleException forKey:@"NSObjectInaccessibleException"]; else NSLog([@"Can't initialize NSObjectInaccessibleException with object " stringByAppendingString:[NSObjectInaccessibleException description]]);
if ([NSObjectNotAvailableException isKindOfClass:[NSString class]]) [d setObject:NSObjectNotAvailableException forKey:@"NSObjectNotAvailableException"]; else NSLog([@"Can't initialize NSObjectNotAvailableException with object " stringByAppendingString:[NSObjectNotAvailableException description]]);
if ([NSOldStyleException isKindOfClass:[NSString class]]) [d setObject:NSOldStyleException forKey:@"NSOldStyleException"]; else NSLog([@"Can't initialize NSOldStyleException with object " stringByAppendingString:[NSOldStyleException description]]);
if ([NSOperationNotSupportedForKeyException isKindOfClass:[NSString class]]) [d setObject:NSOperationNotSupportedForKeyException forKey:@"NSOperationNotSupportedForKeyException"]; else NSLog([@"Can't initialize NSOperationNotSupportedForKeyException with object " stringByAppendingString:[NSOperationNotSupportedForKeyException description]]);
if ([NSPOSIXErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSPOSIXErrorDomain forKey:@"NSPOSIXErrorDomain"]; else NSLog([@"Can't initialize NSPOSIXErrorDomain with object " stringByAppendingString:[NSPOSIXErrorDomain description]]);
if ([NSParseErrorException isKindOfClass:[NSString class]]) [d setObject:NSParseErrorException forKey:@"NSParseErrorException"]; else NSLog([@"Can't initialize NSParseErrorException with object " stringByAppendingString:[NSParseErrorException description]]);
if ([NSPortDidBecomeInvalidNotification isKindOfClass:[NSString class]]) [d setObject:NSPortDidBecomeInvalidNotification forKey:@"NSPortDidBecomeInvalidNotification"]; else NSLog([@"Can't initialize NSPortDidBecomeInvalidNotification with object " stringByAppendingString:[NSPortDidBecomeInvalidNotification description]]);
if ([NSPortReceiveException isKindOfClass:[NSString class]]) [d setObject:NSPortReceiveException forKey:@"NSPortReceiveException"]; else NSLog([@"Can't initialize NSPortReceiveException with object " stringByAppendingString:[NSPortReceiveException description]]);
if ([NSPortSendException isKindOfClass:[NSString class]]) [d setObject:NSPortSendException forKey:@"NSPortSendException"]; else NSLog([@"Can't initialize NSPortSendException with object " stringByAppendingString:[NSPortSendException description]]);
if ([NSPortTimeoutException isKindOfClass:[NSString class]]) [d setObject:NSPortTimeoutException forKey:@"NSPortTimeoutException"]; else NSLog([@"Can't initialize NSPortTimeoutException with object " stringByAppendingString:[NSPortTimeoutException description]]);
if ([NSRangeException isKindOfClass:[NSString class]]) [d setObject:NSRangeException forKey:@"NSRangeException"]; else NSLog([@"Can't initialize NSRangeException with object " stringByAppendingString:[NSRangeException description]]);
if ([NSRecoveryAttempterErrorKey isKindOfClass:[NSString class]]) [d setObject:NSRecoveryAttempterErrorKey forKey:@"NSRecoveryAttempterErrorKey"]; else NSLog([@"Can't initialize NSRecoveryAttempterErrorKey with object " stringByAppendingString:[NSRecoveryAttempterErrorKey description]]);
if ([NSRegistrationDomain isKindOfClass:[NSString class]]) [d setObject:NSRegistrationDomain forKey:@"NSRegistrationDomain"]; else NSLog([@"Can't initialize NSRegistrationDomain with object " stringByAppendingString:[NSRegistrationDomain description]]);
if ([NSRunLoopCommonModes isKindOfClass:[NSString class]]) [d setObject:NSRunLoopCommonModes forKey:@"NSRunLoopCommonModes"]; else NSLog([@"Can't initialize NSRunLoopCommonModes with object " stringByAppendingString:[NSRunLoopCommonModes description]]);
if ([NSStreamDataWrittenToMemoryStreamKey isKindOfClass:[NSString class]]) [d setObject:NSStreamDataWrittenToMemoryStreamKey forKey:@"NSStreamDataWrittenToMemoryStreamKey"]; else NSLog([@"Can't initialize NSStreamDataWrittenToMemoryStreamKey with object " stringByAppendingString:[NSStreamDataWrittenToMemoryStreamKey description]]);
if ([NSStreamFileCurrentOffsetKey isKindOfClass:[NSString class]]) [d setObject:NSStreamFileCurrentOffsetKey forKey:@"NSStreamFileCurrentOffsetKey"]; else NSLog([@"Can't initialize NSStreamFileCurrentOffsetKey with object " stringByAppendingString:[NSStreamFileCurrentOffsetKey description]]);
if ([NSStreamSOCKSErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSErrorDomain forKey:@"NSStreamSOCKSErrorDomain"]; else NSLog([@"Can't initialize NSStreamSOCKSErrorDomain with object " stringByAppendingString:[NSStreamSOCKSErrorDomain description]]);
if ([NSStreamSOCKSProxyConfigurationKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyConfigurationKey forKey:@"NSStreamSOCKSProxyConfigurationKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyConfigurationKey with object " stringByAppendingString:[NSStreamSOCKSProxyConfigurationKey description]]);
if ([NSStreamSOCKSProxyHostKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyHostKey forKey:@"NSStreamSOCKSProxyHostKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyHostKey with object " stringByAppendingString:[NSStreamSOCKSProxyHostKey description]]);
if ([NSStreamSOCKSProxyPasswordKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyPasswordKey forKey:@"NSStreamSOCKSProxyPasswordKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyPasswordKey with object " stringByAppendingString:[NSStreamSOCKSProxyPasswordKey description]]);
if ([NSStreamSOCKSProxyPortKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyPortKey forKey:@"NSStreamSOCKSProxyPortKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyPortKey with object " stringByAppendingString:[NSStreamSOCKSProxyPortKey description]]);
if ([NSStreamSOCKSProxyUserKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyUserKey forKey:@"NSStreamSOCKSProxyUserKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyUserKey with object " stringByAppendingString:[NSStreamSOCKSProxyUserKey description]]);
if ([NSStreamSOCKSProxyVersion4 isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyVersion4 forKey:@"NSStreamSOCKSProxyVersion4"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyVersion4 with object " stringByAppendingString:[NSStreamSOCKSProxyVersion4 description]]);
if ([NSStreamSOCKSProxyVersion5 isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyVersion5 forKey:@"NSStreamSOCKSProxyVersion5"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyVersion5 with object " stringByAppendingString:[NSStreamSOCKSProxyVersion5 description]]);
if ([NSStreamSOCKSProxyVersionKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSOCKSProxyVersionKey forKey:@"NSStreamSOCKSProxyVersionKey"]; else NSLog([@"Can't initialize NSStreamSOCKSProxyVersionKey with object " stringByAppendingString:[NSStreamSOCKSProxyVersionKey description]]);
if ([NSStreamSocketSSLErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSSLErrorDomain forKey:@"NSStreamSocketSSLErrorDomain"]; else NSLog([@"Can't initialize NSStreamSocketSSLErrorDomain with object " stringByAppendingString:[NSStreamSocketSSLErrorDomain description]]);
if ([NSStreamSocketSecurityLevelKey isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelKey forKey:@"NSStreamSocketSecurityLevelKey"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelKey with object " stringByAppendingString:[NSStreamSocketSecurityLevelKey description]]);
if ([NSStreamSocketSecurityLevelNegotiatedSSL isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelNegotiatedSSL forKey:@"NSStreamSocketSecurityLevelNegotiatedSSL"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelNegotiatedSSL with object " stringByAppendingString:[NSStreamSocketSecurityLevelNegotiatedSSL description]]);
if ([NSStreamSocketSecurityLevelNone isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelNone forKey:@"NSStreamSocketSecurityLevelNone"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelNone with object " stringByAppendingString:[NSStreamSocketSecurityLevelNone description]]);
if ([NSStreamSocketSecurityLevelSSLv2 isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelSSLv2 forKey:@"NSStreamSocketSecurityLevelSSLv2"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelSSLv2 with object " stringByAppendingString:[NSStreamSocketSecurityLevelSSLv2 description]]);
if ([NSStreamSocketSecurityLevelSSLv3 isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelSSLv3 forKey:@"NSStreamSocketSecurityLevelSSLv3"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelSSLv3 with object " stringByAppendingString:[NSStreamSocketSecurityLevelSSLv3 description]]);
if ([NSStreamSocketSecurityLevelTLSv1 isKindOfClass:[NSString class]]) [d setObject:NSStreamSocketSecurityLevelTLSv1 forKey:@"NSStreamSocketSecurityLevelTLSv1"]; else NSLog([@"Can't initialize NSStreamSocketSecurityLevelTLSv1 with object " stringByAppendingString:[NSStreamSocketSecurityLevelTLSv1 description]]);
if ([NSStringEncodingErrorKey isKindOfClass:[NSString class]]) [d setObject:NSStringEncodingErrorKey forKey:@"NSStringEncodingErrorKey"]; else NSLog([@"Can't initialize NSStringEncodingErrorKey with object " stringByAppendingString:[NSStringEncodingErrorKey description]]);
if ([NSSumKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSSumKeyValueOperator forKey:@"NSSumKeyValueOperator"]; else NSLog([@"Can't initialize NSSumKeyValueOperator with object " stringByAppendingString:[NSSumKeyValueOperator description]]);
if ([NSSystemTimeZoneDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSSystemTimeZoneDidChangeNotification forKey:@"NSSystemTimeZoneDidChangeNotification"]; else NSLog([@"Can't initialize NSSystemTimeZoneDidChangeNotification with object " stringByAppendingString:[NSSystemTimeZoneDidChangeNotification description]]);
if ([NSTaskDidTerminateNotification isKindOfClass:[NSString class]]) [d setObject:NSTaskDidTerminateNotification forKey:@"NSTaskDidTerminateNotification"]; else NSLog([@"Can't initialize NSTaskDidTerminateNotification with object " stringByAppendingString:[NSTaskDidTerminateNotification description]]);
if ([NSThreadWillExitNotification isKindOfClass:[NSString class]]) [d setObject:NSThreadWillExitNotification forKey:@"NSThreadWillExitNotification"]; else NSLog([@"Can't initialize NSThreadWillExitNotification with object " stringByAppendingString:[NSThreadWillExitNotification description]]);
if ([NSURLAuthenticationMethodDefault isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodDefault forKey:@"NSURLAuthenticationMethodDefault"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodDefault with object " stringByAppendingString:[NSURLAuthenticationMethodDefault description]]);
if ([NSURLAuthenticationMethodHTMLForm isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodHTMLForm forKey:@"NSURLAuthenticationMethodHTMLForm"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodHTMLForm with object " stringByAppendingString:[NSURLAuthenticationMethodHTMLForm description]]);
if ([NSURLAuthenticationMethodHTTPBasic isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodHTTPBasic forKey:@"NSURLAuthenticationMethodHTTPBasic"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodHTTPBasic with object " stringByAppendingString:[NSURLAuthenticationMethodHTTPBasic description]]);
if ([NSURLAuthenticationMethodHTTPDigest isKindOfClass:[NSString class]]) [d setObject:NSURLAuthenticationMethodHTTPDigest forKey:@"NSURLAuthenticationMethodHTTPDigest"]; else NSLog([@"Can't initialize NSURLAuthenticationMethodHTTPDigest with object " stringByAppendingString:[NSURLAuthenticationMethodHTTPDigest description]]);
if ([NSURLCredentialStorageChangedNotification isKindOfClass:[NSString class]]) [d setObject:NSURLCredentialStorageChangedNotification forKey:@"NSURLCredentialStorageChangedNotification"]; else NSLog([@"Can't initialize NSURLCredentialStorageChangedNotification with object " stringByAppendingString:[NSURLCredentialStorageChangedNotification description]]);
if ([NSURLErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSURLErrorDomain forKey:@"NSURLErrorDomain"]; else NSLog([@"Can't initialize NSURLErrorDomain with object " stringByAppendingString:[NSURLErrorDomain description]]);
if ([NSURLErrorKey isKindOfClass:[NSString class]]) [d setObject:NSURLErrorKey forKey:@"NSURLErrorKey"]; else NSLog([@"Can't initialize NSURLErrorKey with object " stringByAppendingString:[NSURLErrorKey description]]);
if ([NSURLFileScheme isKindOfClass:[NSString class]]) [d setObject:NSURLFileScheme forKey:@"NSURLFileScheme"]; else NSLog([@"Can't initialize NSURLFileScheme with object " stringByAppendingString:[NSURLFileScheme description]]);
if ([NSURLProtectionSpaceFTPProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceFTPProxy forKey:@"NSURLProtectionSpaceFTPProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceFTPProxy with object " stringByAppendingString:[NSURLProtectionSpaceFTPProxy description]]);
if ([NSURLProtectionSpaceHTTPProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceHTTPProxy forKey:@"NSURLProtectionSpaceHTTPProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceHTTPProxy with object " stringByAppendingString:[NSURLProtectionSpaceHTTPProxy description]]);
if ([NSURLProtectionSpaceHTTPSProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceHTTPSProxy forKey:@"NSURLProtectionSpaceHTTPSProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceHTTPSProxy with object " stringByAppendingString:[NSURLProtectionSpaceHTTPSProxy description]]);
if ([NSURLProtectionSpaceSOCKSProxy isKindOfClass:[NSString class]]) [d setObject:NSURLProtectionSpaceSOCKSProxy forKey:@"NSURLProtectionSpaceSOCKSProxy"]; else NSLog([@"Can't initialize NSURLProtectionSpaceSOCKSProxy with object " stringByAppendingString:[NSURLProtectionSpaceSOCKSProxy description]]);
if ([NSUnarchiveFromDataTransformerName isKindOfClass:[NSString class]]) [d setObject:NSUnarchiveFromDataTransformerName forKey:@"NSUnarchiveFromDataTransformerName"]; else NSLog([@"Can't initialize NSUnarchiveFromDataTransformerName with object " stringByAppendingString:[NSUnarchiveFromDataTransformerName description]]);
if ([NSUndefinedKeyException isKindOfClass:[NSString class]]) [d setObject:NSUndefinedKeyException forKey:@"NSUndefinedKeyException"]; else NSLog([@"Can't initialize NSUndefinedKeyException with object " stringByAppendingString:[NSUndefinedKeyException description]]);
if ([NSUnderlyingErrorKey isKindOfClass:[NSString class]]) [d setObject:NSUnderlyingErrorKey forKey:@"NSUnderlyingErrorKey"]; else NSLog([@"Can't initialize NSUnderlyingErrorKey with object " stringByAppendingString:[NSUnderlyingErrorKey description]]);
if ([NSUndoManagerCheckpointNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerCheckpointNotification forKey:@"NSUndoManagerCheckpointNotification"]; else NSLog([@"Can't initialize NSUndoManagerCheckpointNotification with object " stringByAppendingString:[NSUndoManagerCheckpointNotification description]]);
if ([NSUndoManagerDidOpenUndoGroupNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerDidOpenUndoGroupNotification forKey:@"NSUndoManagerDidOpenUndoGroupNotification"]; else NSLog([@"Can't initialize NSUndoManagerDidOpenUndoGroupNotification with object " stringByAppendingString:[NSUndoManagerDidOpenUndoGroupNotification description]]);
if ([NSUndoManagerDidRedoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerDidRedoChangeNotification forKey:@"NSUndoManagerDidRedoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerDidRedoChangeNotification with object " stringByAppendingString:[NSUndoManagerDidRedoChangeNotification description]]);
if ([NSUndoManagerDidUndoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerDidUndoChangeNotification forKey:@"NSUndoManagerDidUndoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerDidUndoChangeNotification with object " stringByAppendingString:[NSUndoManagerDidUndoChangeNotification description]]);
if ([NSUndoManagerWillCloseUndoGroupNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerWillCloseUndoGroupNotification forKey:@"NSUndoManagerWillCloseUndoGroupNotification"]; else NSLog([@"Can't initialize NSUndoManagerWillCloseUndoGroupNotification with object " stringByAppendingString:[NSUndoManagerWillCloseUndoGroupNotification description]]);
if ([NSUndoManagerWillRedoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerWillRedoChangeNotification forKey:@"NSUndoManagerWillRedoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerWillRedoChangeNotification with object " stringByAppendingString:[NSUndoManagerWillRedoChangeNotification description]]);
if ([NSUndoManagerWillUndoChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUndoManagerWillUndoChangeNotification forKey:@"NSUndoManagerWillUndoChangeNotification"]; else NSLog([@"Can't initialize NSUndoManagerWillUndoChangeNotification with object " stringByAppendingString:[NSUndoManagerWillUndoChangeNotification description]]);
if ([NSUnionOfArraysKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSUnionOfArraysKeyValueOperator forKey:@"NSUnionOfArraysKeyValueOperator"]; else NSLog([@"Can't initialize NSUnionOfArraysKeyValueOperator with object " stringByAppendingString:[NSUnionOfArraysKeyValueOperator description]]);
if ([NSUnionOfObjectsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSUnionOfObjectsKeyValueOperator forKey:@"NSUnionOfObjectsKeyValueOperator"]; else NSLog([@"Can't initialize NSUnionOfObjectsKeyValueOperator with object " stringByAppendingString:[NSUnionOfObjectsKeyValueOperator description]]);
if ([NSUnionOfSetsKeyValueOperator isKindOfClass:[NSString class]]) [d setObject:NSUnionOfSetsKeyValueOperator forKey:@"NSUnionOfSetsKeyValueOperator"]; else NSLog([@"Can't initialize NSUnionOfSetsKeyValueOperator with object " stringByAppendingString:[NSUnionOfSetsKeyValueOperator description]]);
if ([NSUserDefaultsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:NSUserDefaultsDidChangeNotification forKey:@"NSUserDefaultsDidChangeNotification"]; else NSLog([@"Can't initialize NSUserDefaultsDidChangeNotification with object " stringByAppendingString:[NSUserDefaultsDidChangeNotification description]]);
if ([NSWillBecomeMultiThreadedNotification isKindOfClass:[NSString class]]) [d setObject:NSWillBecomeMultiThreadedNotification forKey:@"NSWillBecomeMultiThreadedNotification"]; else NSLog([@"Can't initialize NSWillBecomeMultiThreadedNotification with object " stringByAppendingString:[NSWillBecomeMultiThreadedNotification description]]);
if ([NSXMLParserErrorDomain isKindOfClass:[NSString class]]) [d setObject:NSXMLParserErrorDomain forKey:@"NSXMLParserErrorDomain"]; else NSLog([@"Can't initialize NSXMLParserErrorDomain with object " stringByAppendingString:[NSXMLParserErrorDomain description]]);
[d setObject:[Number numberWithDouble:NSASCIIStringEncoding] forKey:@"NSASCIIStringEncoding"];
[d setObject:[Number numberWithDouble:NSAdminApplicationDirectory] forKey:@"NSAdminApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSAggregateExpressionType] forKey:@"NSAggregateExpressionType"];
[d setObject:[Number numberWithDouble:NSAllApplicationsDirectory] forKey:@"NSAllApplicationsDirectory"];
[d setObject:[Number numberWithDouble:NSAllDomainsMask] forKey:@"NSAllDomainsMask"];
[d setObject:[Number numberWithDouble:NSAllLibrariesDirectory] forKey:@"NSAllLibrariesDirectory"];
[d setObject:[Number numberWithDouble:NSAllPredicateModifier] forKey:@"NSAllPredicateModifier"];
[d setObject:[Number numberWithDouble:NSAnchoredSearch] forKey:@"NSAnchoredSearch"];
[d setObject:[Number numberWithDouble:NSAndPredicateType] forKey:@"NSAndPredicateType"];
[d setObject:[Number numberWithDouble:NSAnyPredicateModifier] forKey:@"NSAnyPredicateModifier"];
[d setObject:[Number numberWithDouble:NSApplicationDirectory] forKey:@"NSApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSApplicationSupportDirectory] forKey:@"NSApplicationSupportDirectory"];
[d setObject:[Number numberWithDouble:NSArgumentEvaluationScriptError] forKey:@"NSArgumentEvaluationScriptError"];
[d setObject:[Number numberWithDouble:NSArgumentsWrongScriptError] forKey:@"NSArgumentsWrongScriptError"];
[d setObject:[Number numberWithDouble:NSAtomicWrite] forKey:@"NSAtomicWrite"];
[d setObject:[Number numberWithDouble:NSBackwardsSearch] forKey:@"NSBackwardsSearch"];
[d setObject:[Number numberWithDouble:NSBeginsWithComparison] forKey:@"NSBeginsWithComparison"];
[d setObject:[Number numberWithDouble:NSBeginsWithPredicateOperatorType] forKey:@"NSBeginsWithPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSBetweenPredicateOperatorType] forKey:@"NSBetweenPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitectureI386] forKey:@"NSBundleExecutableArchitectureI386"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitecturePPC] forKey:@"NSBundleExecutableArchitecturePPC"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitecturePPC64] forKey:@"NSBundleExecutableArchitecturePPC64"];
[d setObject:[Number numberWithDouble:NSBundleExecutableArchitectureX86_64] forKey:@"NSBundleExecutableArchitectureX86_64"];
[d setObject:[Number numberWithDouble:NSCachesDirectory] forKey:@"NSCachesDirectory"];
[d setObject:[Number numberWithDouble:NSCalculationDivideByZero] forKey:@"NSCalculationDivideByZero"];
[d setObject:[Number numberWithDouble:NSCalculationLossOfPrecision] forKey:@"NSCalculationLossOfPrecision"];
[d setObject:[Number numberWithDouble:NSCalculationNoError] forKey:@"NSCalculationNoError"];
[d setObject:[Number numberWithDouble:NSCalculationOverflow] forKey:@"NSCalculationOverflow"];
[d setObject:[Number numberWithDouble:NSCalculationUnderflow] forKey:@"NSCalculationUnderflow"];
[d setObject:[Number numberWithDouble:NSCannotCreateScriptCommandError] forKey:@"NSCannotCreateScriptCommandError"];
[d setObject:[Number numberWithDouble:NSCaseInsensitivePredicateOption] forKey:@"NSCaseInsensitivePredicateOption"];
[d setObject:[Number numberWithDouble:NSCaseInsensitiveSearch] forKey:@"NSCaseInsensitiveSearch"];
[d setObject:[Number numberWithDouble:NSCollectorDisabledOption] forKey:@"NSCollectorDisabledOption"];
[d setObject:[Number numberWithDouble:NSConstantValueExpressionType] forKey:@"NSConstantValueExpressionType"];
[d setObject:[Number numberWithDouble:NSContainerSpecifierError] forKey:@"NSContainerSpecifierError"];
[d setObject:[Number numberWithDouble:NSContainsComparison] forKey:@"NSContainsComparison"];
[d setObject:[Number numberWithDouble:NSContainsPredicateOperatorType] forKey:@"NSContainsPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSCoreServiceDirectory] forKey:@"NSCoreServiceDirectory"];
[d setObject:[Number numberWithDouble:NSCustomSelectorPredicateOperatorType] forKey:@"NSCustomSelectorPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSDateFormatterBehavior10_0] forKey:@"NSDateFormatterBehavior10_0"];
[d setObject:[Number numberWithDouble:NSDateFormatterBehavior10_4] forKey:@"NSDateFormatterBehavior10_4"];
[d setObject:[Number numberWithDouble:NSDateFormatterBehaviorDefault] forKey:@"NSDateFormatterBehaviorDefault"];
[d setObject:[Number numberWithDouble:NSDateFormatterFullStyle] forKey:@"NSDateFormatterFullStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterLongStyle] forKey:@"NSDateFormatterLongStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterMediumStyle] forKey:@"NSDateFormatterMediumStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterNoStyle] forKey:@"NSDateFormatterNoStyle"];
[d setObject:[Number numberWithDouble:NSDateFormatterShortStyle] forKey:@"NSDateFormatterShortStyle"];
[d setObject:[Number numberWithDouble:NSDayCalendarUnit] forKey:@"NSDayCalendarUnit"];
[d setObject:[Number numberWithDouble:NSDecimalMaxSize] forKey:@"NSDecimalMaxSize"];
[d setObject:[Number numberWithDouble:NSDecimalNoScale] forKey:@"NSDecimalNoScale"];
[d setObject:[Number numberWithDouble:NSDemoApplicationDirectory] forKey:@"NSDemoApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSDesktopDirectory] forKey:@"NSDesktopDirectory"];
[d setObject:[Number numberWithDouble:NSDeveloperApplicationDirectory] forKey:@"NSDeveloperApplicationDirectory"];
[d setObject:[Number numberWithDouble:NSDeveloperDirectory] forKey:@"NSDeveloperDirectory"];
[d setObject:[Number numberWithDouble:NSDiacriticInsensitivePredicateOption] forKey:@"NSDiacriticInsensitivePredicateOption"];
[d setObject:[Number numberWithDouble:NSDiacriticInsensitiveSearch] forKey:@"NSDiacriticInsensitiveSearch"];
[d setObject:[Number numberWithDouble:NSDirectPredicateModifier] forKey:@"NSDirectPredicateModifier"];
[d setObject:[Number numberWithDouble:NSDocumentDirectory] forKey:@"NSDocumentDirectory"];
[d setObject:[Number numberWithDouble:NSDocumentationDirectory] forKey:@"NSDocumentationDirectory"];
[d setObject:[Number numberWithDouble:NSDownloadsDirectory] forKey:@"NSDownloadsDirectory"];
[d setObject:[Number numberWithDouble:NSEndsWithComparison] forKey:@"NSEndsWithComparison"];
[d setObject:[Number numberWithDouble:NSEndsWithPredicateOperatorType] forKey:@"NSEndsWithPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSEqualToComparison] forKey:@"NSEqualToComparison"];
[d setObject:[Number numberWithDouble:NSEqualToPredicateOperatorType] forKey:@"NSEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSEraCalendarUnit] forKey:@"NSEraCalendarUnit"];
[d setObject:[Number numberWithDouble:NSEvaluatedObjectExpressionType] forKey:@"NSEvaluatedObjectExpressionType"];
[d setObject:[Number numberWithDouble:NSEverySubelement] forKey:@"NSEverySubelement"];
[d setObject:[Number numberWithDouble:NSExecutableArchitectureMismatchError] forKey:@"NSExecutableArchitectureMismatchError"];
[d setObject:[Number numberWithDouble:NSExecutableErrorMaximum] forKey:@"NSExecutableErrorMaximum"];
[d setObject:[Number numberWithDouble:NSExecutableErrorMinimum] forKey:@"NSExecutableErrorMinimum"];
[d setObject:[Number numberWithDouble:NSExecutableLinkError] forKey:@"NSExecutableLinkError"];
[d setObject:[Number numberWithDouble:NSExecutableLoadError] forKey:@"NSExecutableLoadError"];
[d setObject:[Number numberWithDouble:NSExecutableNotLoadableError] forKey:@"NSExecutableNotLoadableError"];
[d setObject:[Number numberWithDouble:NSExecutableRuntimeMismatchError] forKey:@"NSExecutableRuntimeMismatchError"];
[d setObject:[Number numberWithDouble:NSFileErrorMaximum] forKey:@"NSFileErrorMaximum"];
[d setObject:[Number numberWithDouble:NSFileErrorMinimum] forKey:@"NSFileErrorMinimum"];
[d setObject:[Number numberWithDouble:NSFileLockingError] forKey:@"NSFileLockingError"];
[d setObject:[Number numberWithDouble:NSFileNoSuchFileError] forKey:@"NSFileNoSuchFileError"];
[d setObject:[Number numberWithDouble:NSFileReadCorruptFileError] forKey:@"NSFileReadCorruptFileError"];
[d setObject:[Number numberWithDouble:NSFileReadInapplicableStringEncodingError] forKey:@"NSFileReadInapplicableStringEncodingError"];
[d setObject:[Number numberWithDouble:NSFileReadInvalidFileNameError] forKey:@"NSFileReadInvalidFileNameError"];
[d setObject:[Number numberWithDouble:NSFileReadNoPermissionError] forKey:@"NSFileReadNoPermissionError"];
[d setObject:[Number numberWithDouble:NSFileReadNoSuchFileError] forKey:@"NSFileReadNoSuchFileError"];
[d setObject:[Number numberWithDouble:NSFileReadTooLargeError] forKey:@"NSFileReadTooLargeError"];
[d setObject:[Number numberWithDouble:NSFileReadUnknownError] forKey:@"NSFileReadUnknownError"];
[d setObject:[Number numberWithDouble:NSFileReadUnknownStringEncodingError] forKey:@"NSFileReadUnknownStringEncodingError"];
[d setObject:[Number numberWithDouble:NSFileReadUnsupportedSchemeError] forKey:@"NSFileReadUnsupportedSchemeError"];
[d setObject:[Number numberWithDouble:NSFileWriteInapplicableStringEncodingError] forKey:@"NSFileWriteInapplicableStringEncodingError"];
[d setObject:[Number numberWithDouble:NSFileWriteInvalidFileNameError] forKey:@"NSFileWriteInvalidFileNameError"];
[d setObject:[Number numberWithDouble:NSFileWriteNoPermissionError] forKey:@"NSFileWriteNoPermissionError"];
[d setObject:[Number numberWithDouble:NSFileWriteOutOfSpaceError] forKey:@"NSFileWriteOutOfSpaceError"];
[d setObject:[Number numberWithDouble:NSFileWriteUnknownError] forKey:@"NSFileWriteUnknownError"];
[d setObject:[Number numberWithDouble:NSFileWriteUnsupportedSchemeError] forKey:@"NSFileWriteUnsupportedSchemeError"];
[d setObject:[Number numberWithDouble:NSForcedOrderingSearch] forKey:@"NSForcedOrderingSearch"];
[d setObject:[Number numberWithDouble:NSFormattingError] forKey:@"NSFormattingError"];
[d setObject:[Number numberWithDouble:NSFormattingErrorMaximum] forKey:@"NSFormattingErrorMaximum"];
[d setObject:[Number numberWithDouble:NSFormattingErrorMinimum] forKey:@"NSFormattingErrorMinimum"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_0] forKey:@"NSFoundationVersionNumber10_0"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1] forKey:@"NSFoundationVersionNumber10_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_1] forKey:@"NSFoundationVersionNumber10_1_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_2] forKey:@"NSFoundationVersionNumber10_1_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_3] forKey:@"NSFoundationVersionNumber10_1_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_1_4] forKey:@"NSFoundationVersionNumber10_1_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2] forKey:@"NSFoundationVersionNumber10_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_1] forKey:@"NSFoundationVersionNumber10_2_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_2] forKey:@"NSFoundationVersionNumber10_2_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_3] forKey:@"NSFoundationVersionNumber10_2_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_4] forKey:@"NSFoundationVersionNumber10_2_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_5] forKey:@"NSFoundationVersionNumber10_2_5"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_6] forKey:@"NSFoundationVersionNumber10_2_6"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_7] forKey:@"NSFoundationVersionNumber10_2_7"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_2_8] forKey:@"NSFoundationVersionNumber10_2_8"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3] forKey:@"NSFoundationVersionNumber10_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_1] forKey:@"NSFoundationVersionNumber10_3_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_2] forKey:@"NSFoundationVersionNumber10_3_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_3] forKey:@"NSFoundationVersionNumber10_3_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_4] forKey:@"NSFoundationVersionNumber10_3_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_5] forKey:@"NSFoundationVersionNumber10_3_5"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_6] forKey:@"NSFoundationVersionNumber10_3_6"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_7] forKey:@"NSFoundationVersionNumber10_3_7"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_8] forKey:@"NSFoundationVersionNumber10_3_8"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_3_9] forKey:@"NSFoundationVersionNumber10_3_9"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4] forKey:@"NSFoundationVersionNumber10_4"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_1] forKey:@"NSFoundationVersionNumber10_4_1"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_10] forKey:@"NSFoundationVersionNumber10_4_10"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_11] forKey:@"NSFoundationVersionNumber10_4_11"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_2] forKey:@"NSFoundationVersionNumber10_4_2"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_3] forKey:@"NSFoundationVersionNumber10_4_3"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_4_Intel] forKey:@"NSFoundationVersionNumber10_4_4_Intel"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_4_PowerPC] forKey:@"NSFoundationVersionNumber10_4_4_PowerPC"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_5] forKey:@"NSFoundationVersionNumber10_4_5"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_6] forKey:@"NSFoundationVersionNumber10_4_6"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_7] forKey:@"NSFoundationVersionNumber10_4_7"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_8] forKey:@"NSFoundationVersionNumber10_4_8"];
[d setObject:[Number numberWithDouble:NSFoundationVersionNumber10_4_9] forKey:@"NSFoundationVersionNumber10_4_9"];
[d setObject:[Number numberWithDouble:NSFoundationVersionWithFileManagerResourceForkSupport] forKey:@"NSFoundationVersionWithFileManagerResourceForkSupport"];
[d setObject:[Number numberWithDouble:NSFunctionExpressionType] forKey:@"NSFunctionExpressionType"];
[d setObject:[Number numberWithDouble:NSGreaterThanComparison] forKey:@"NSGreaterThanComparison"];
[d setObject:[Number numberWithDouble:NSGreaterThanOrEqualToComparison] forKey:@"NSGreaterThanOrEqualToComparison"];
[d setObject:[Number numberWithDouble:NSGreaterThanOrEqualToPredicateOperatorType] forKey:@"NSGreaterThanOrEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSGreaterThanPredicateOperatorType] forKey:@"NSGreaterThanPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSHPUXOperatingSystem] forKey:@"NSHPUXOperatingSystem"];
[d setObject:[Number numberWithDouble:NSHTTPCookieAcceptPolicyAlways] forKey:@"NSHTTPCookieAcceptPolicyAlways"];
[d setObject:[Number numberWithDouble:NSHTTPCookieAcceptPolicyNever] forKey:@"NSHTTPCookieAcceptPolicyNever"];
[d setObject:[Number numberWithDouble:NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain] forKey:@"NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain"];
[d setObject:[Number numberWithDouble:NSHashTableCopyIn] forKey:@"NSHashTableCopyIn"];
[d setObject:[Number numberWithDouble:NSHashTableObjectPointerPersonality] forKey:@"NSHashTableObjectPointerPersonality"];
[d setObject:[Number numberWithDouble:NSHashTableStrongMemory] forKey:@"NSHashTableStrongMemory"];
[d setObject:[Number numberWithDouble:NSHashTableZeroingWeakMemory] forKey:@"NSHashTableZeroingWeakMemory"];
[d setObject:[Number numberWithDouble:NSHourCalendarUnit] forKey:@"NSHourCalendarUnit"];
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:NSISO2022JPStringEncoding] forKey:@"NSISO2022JPStringEncoding"];
[d setObject:[Number numberWithDouble:NSISOLatin1StringEncoding] forKey:@"NSISOLatin1StringEncoding"];
[d setObject:[Number numberWithDouble:NSISOLatin2StringEncoding] forKey:@"NSISOLatin2StringEncoding"];
[d setObject:[Number numberWithDouble:NSInPredicateOperatorType] forKey:@"NSInPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSIndexSubelement] forKey:@"NSIndexSubelement"];
[d setObject:[Number numberWithDouble:NSInternalScriptError] forKey:@"NSInternalScriptError"];
[d setObject:[Number numberWithDouble:NSInternalSpecifierError] forKey:@"NSInternalSpecifierError"];
[d setObject:[Number numberWithDouble:NSIntersectSetExpressionType] forKey:@"NSIntersectSetExpressionType"];
[d setObject:[Number numberWithDouble:NSInvalidIndexSpecifierError] forKey:@"NSInvalidIndexSpecifierError"];
[d setObject:[Number numberWithDouble:NSJapaneseEUCStringEncoding] forKey:@"NSJapaneseEUCStringEncoding"];
[d setObject:[Number numberWithDouble:NSKeyPathExpressionType] forKey:@"NSKeyPathExpressionType"];
[d setObject:[Number numberWithDouble:NSKeySpecifierEvaluationScriptError] forKey:@"NSKeySpecifierEvaluationScriptError"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeInsertion] forKey:@"NSKeyValueChangeInsertion"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeRemoval] forKey:@"NSKeyValueChangeRemoval"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeReplacement] forKey:@"NSKeyValueChangeReplacement"];
[d setObject:[Number numberWithDouble:NSKeyValueChangeSetting] forKey:@"NSKeyValueChangeSetting"];
[d setObject:[Number numberWithDouble:NSKeyValueIntersectSetMutation] forKey:@"NSKeyValueIntersectSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueMinusSetMutation] forKey:@"NSKeyValueMinusSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionInitial] forKey:@"NSKeyValueObservingOptionInitial"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionNew] forKey:@"NSKeyValueObservingOptionNew"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionOld] forKey:@"NSKeyValueObservingOptionOld"];
[d setObject:[Number numberWithDouble:NSKeyValueObservingOptionPrior] forKey:@"NSKeyValueObservingOptionPrior"];
[d setObject:[Number numberWithDouble:NSKeyValueSetSetMutation] forKey:@"NSKeyValueSetSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueUnionSetMutation] forKey:@"NSKeyValueUnionSetMutation"];
[d setObject:[Number numberWithDouble:NSKeyValueValidationError] forKey:@"NSKeyValueValidationError"];
[d setObject:[Number numberWithDouble:NSLessThanComparison] forKey:@"NSLessThanComparison"];
[d setObject:[Number numberWithDouble:NSLessThanOrEqualToComparison] forKey:@"NSLessThanOrEqualToComparison"];
[d setObject:[Number numberWithDouble:NSLessThanOrEqualToPredicateOperatorType] forKey:@"NSLessThanOrEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSLessThanPredicateOperatorType] forKey:@"NSLessThanPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSLibraryDirectory] forKey:@"NSLibraryDirectory"];
[d setObject:[Number numberWithDouble:NSLikePredicateOperatorType] forKey:@"NSLikePredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSLiteralSearch] forKey:@"NSLiteralSearch"];
[d setObject:[Number numberWithDouble:NSLocalDomainMask] forKey:@"NSLocalDomainMask"];
[d setObject:[Number numberWithDouble:NSMACHOperatingSystem] forKey:@"NSMACHOperatingSystem"];
[d setObject:[Number numberWithDouble:NSMacOSRomanStringEncoding] forKey:@"NSMacOSRomanStringEncoding"];
[d setObject:[Number numberWithDouble:NSMachPortDeallocateNone] forKey:@"NSMachPortDeallocateNone"];
[d setObject:[Number numberWithDouble:NSMachPortDeallocateReceiveRight] forKey:@"NSMachPortDeallocateReceiveRight"];
[d setObject:[Number numberWithDouble:NSMachPortDeallocateSendRight] forKey:@"NSMachPortDeallocateSendRight"];
[d setObject:[Number numberWithDouble:NSMapTableCopyIn] forKey:@"NSMapTableCopyIn"];
[d setObject:[Number numberWithDouble:NSMapTableObjectPointerPersonality] forKey:@"NSMapTableObjectPointerPersonality"];
[d setObject:[Number numberWithDouble:NSMapTableStrongMemory] forKey:@"NSMapTableStrongMemory"];
[d setObject:[Number numberWithDouble:NSMapTableZeroingWeakMemory] forKey:@"NSMapTableZeroingWeakMemory"];
[d setObject:[Number numberWithDouble:NSMappedRead] forKey:@"NSMappedRead"];
[d setObject:[Number numberWithDouble:NSMatchesPredicateOperatorType] forKey:@"NSMatchesPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSMaxXEdge] forKey:@"NSMaxXEdge"];
[d setObject:[Number numberWithDouble:NSMaxYEdge] forKey:@"NSMaxYEdge"];
[d setObject:[Number numberWithDouble:NSMiddleSubelement] forKey:@"NSMiddleSubelement"];
[d setObject:[Number numberWithDouble:NSMinXEdge] forKey:@"NSMinXEdge"];
[d setObject:[Number numberWithDouble:NSMinYEdge] forKey:@"NSMinYEdge"];
[d setObject:[Number numberWithDouble:NSMinusSetExpressionType] forKey:@"NSMinusSetExpressionType"];
[d setObject:[Number numberWithDouble:NSMinuteCalendarUnit] forKey:@"NSMinuteCalendarUnit"];
[d setObject:[Number numberWithDouble:NSMonthCalendarUnit] forKey:@"NSMonthCalendarUnit"];
[d setObject:[Number numberWithDouble:NSNEXTSTEPStringEncoding] forKey:@"NSNEXTSTEPStringEncoding"];
[d setObject:[Number numberWithDouble:NSNetServiceNoAutoRename] forKey:@"NSNetServiceNoAutoRename"];
[d setObject:[Number numberWithDouble:NSNetServicesActivityInProgress] forKey:@"NSNetServicesActivityInProgress"];
[d setObject:[Number numberWithDouble:NSNetServicesBadArgumentError] forKey:@"NSNetServicesBadArgumentError"];
[d setObject:[Number numberWithDouble:NSNetServicesCancelledError] forKey:@"NSNetServicesCancelledError"];
[d setObject:[Number numberWithDouble:NSNetServicesCollisionError] forKey:@"NSNetServicesCollisionError"];
[d setObject:[Number numberWithDouble:NSNetServicesInvalidError] forKey:@"NSNetServicesInvalidError"];
[d setObject:[Number numberWithDouble:NSNetServicesNotFoundError] forKey:@"NSNetServicesNotFoundError"];
[d setObject:[Number numberWithDouble:NSNetServicesTimeoutError] forKey:@"NSNetServicesTimeoutError"];
[d setObject:[Number numberWithDouble:NSNetServicesUnknownError] forKey:@"NSNetServicesUnknownError"];
[d setObject:[Number numberWithDouble:NSNetworkDomainMask] forKey:@"NSNetworkDomainMask"];
[d setObject:[Number numberWithDouble:NSNoScriptError] forKey:@"NSNoScriptError"];
[d setObject:[Number numberWithDouble:NSNoSpecifierError] forKey:@"NSNoSpecifierError"];
[d setObject:[Number numberWithDouble:NSNoSubelement] forKey:@"NSNoSubelement"];
[d setObject:[Number numberWithDouble:NSNoTopLevelContainersSpecifierError] forKey:@"NSNoTopLevelContainersSpecifierError"];
[d setObject:[Number numberWithDouble:NSNonLossyASCIIStringEncoding] forKey:@"NSNonLossyASCIIStringEncoding"];
[d setObject:[Number numberWithDouble:NSNotEqualToPredicateOperatorType] forKey:@"NSNotEqualToPredicateOperatorType"];
[d setObject:[Number numberWithDouble:NSNotPredicateType] forKey:@"NSNotPredicateType"];
[d setObject:[Number numberWithDouble:NSNotificationCoalescingOnName] forKey:@"NSNotificationCoalescingOnName"];
[d setObject:[Number numberWithDouble:NSNotificationCoalescingOnSender] forKey:@"NSNotificationCoalescingOnSender"];
[d setObject:[Number numberWithDouble:NSNotificationDeliverImmediately] forKey:@"NSNotificationDeliverImmediately"];
[d setObject:[Number numberWithDouble:NSNotificationNoCoalescing] forKey:@"NSNotificationNoCoalescing"];
[d setObject:[Number numberWithDouble:NSNotificationPostToAllSessions] forKey:@"NSNotificationPostToAllSessions"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorCoalesce] forKey:@"NSNotificationSuspensionBehaviorCoalesce"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorDeliverImmediately] forKey:@"NSNotificationSuspensionBehaviorDeliverImmediately"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorDrop] forKey:@"NSNotificationSuspensionBehaviorDrop"];
[d setObject:[Number numberWithDouble:NSNotificationSuspensionBehaviorHold] forKey:@"NSNotificationSuspensionBehaviorHold"];
[d setObject:[Number numberWithDouble:NSNumberFormatterBehavior10_0] forKey:@"NSNumberFormatterBehavior10_0"];
[d setObject:[Number numberWithDouble:NSNumberFormatterBehavior10_4] forKey:@"NSNumberFormatterBehavior10_4"];
[d setObject:[Number numberWithDouble:NSNumberFormatterBehaviorDefault] forKey:@"NSNumberFormatterBehaviorDefault"];
[d setObject:[Number numberWithDouble:NSNumberFormatterCurrencyStyle] forKey:@"NSNumberFormatterCurrencyStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterDecimalStyle] forKey:@"NSNumberFormatterDecimalStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterNoStyle] forKey:@"NSNumberFormatterNoStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadAfterPrefix] forKey:@"NSNumberFormatterPadAfterPrefix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadAfterSuffix] forKey:@"NSNumberFormatterPadAfterSuffix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadBeforePrefix] forKey:@"NSNumberFormatterPadBeforePrefix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPadBeforeSuffix] forKey:@"NSNumberFormatterPadBeforeSuffix"];
[d setObject:[Number numberWithDouble:NSNumberFormatterPercentStyle] forKey:@"NSNumberFormatterPercentStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundCeiling] forKey:@"NSNumberFormatterRoundCeiling"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundDown] forKey:@"NSNumberFormatterRoundDown"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundFloor] forKey:@"NSNumberFormatterRoundFloor"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundHalfDown] forKey:@"NSNumberFormatterRoundHalfDown"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundHalfEven] forKey:@"NSNumberFormatterRoundHalfEven"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundHalfUp] forKey:@"NSNumberFormatterRoundHalfUp"];
[d setObject:[Number numberWithDouble:NSNumberFormatterRoundUp] forKey:@"NSNumberFormatterRoundUp"];
[d setObject:[Number numberWithDouble:NSNumberFormatterScientificStyle] forKey:@"NSNumberFormatterScientificStyle"];
[d setObject:[Number numberWithDouble:NSNumberFormatterSpellOutStyle] forKey:@"NSNumberFormatterSpellOutStyle"];
[d setObject:[Number numberWithDouble:NSNumericSearch] forKey:@"NSNumericSearch"];
[d setObject:[Number numberWithDouble:NSOSF1OperatingSystem] forKey:@"NSOSF1OperatingSystem"];
[d setObject:[Number numberWithDouble:NSObjCArrayType] forKey:@"NSObjCArrayType"];
[d setObject:[Number numberWithDouble:NSObjCBitfield] forKey:@"NSObjCBitfield"];
[d setObject:[Number numberWithDouble:NSObjCBoolType] forKey:@"NSObjCBoolType"];
[d setObject:[Number numberWithDouble:NSObjCCharType] forKey:@"NSObjCCharType"];
[d setObject:[Number numberWithDouble:NSObjCDoubleType] forKey:@"NSObjCDoubleType"];
[d setObject:[Number numberWithDouble:NSObjCFloatType] forKey:@"NSObjCFloatType"];
[d setObject:[Number numberWithDouble:NSObjCLongType] forKey:@"NSObjCLongType"];
[d setObject:[Number numberWithDouble:NSObjCLonglongType] forKey:@"NSObjCLonglongType"];
[d setObject:[Number numberWithDouble:NSObjCNoType] forKey:@"NSObjCNoType"];
[d setObject:[Number numberWithDouble:NSObjCObjectType] forKey:@"NSObjCObjectType"];
[d setObject:[Number numberWithDouble:NSObjCPointerType] forKey:@"NSObjCPointerType"];
[d setObject:[Number numberWithDouble:NSObjCSelectorType] forKey:@"NSObjCSelectorType"];
[d setObject:[Number numberWithDouble:NSObjCShortType] forKey:@"NSObjCShortType"];
[d setObject:[Number numberWithDouble:NSObjCStringType] forKey:@"NSObjCStringType"];
[d setObject:[Number numberWithDouble:NSObjCStructType] forKey:@"NSObjCStructType"];
[d setObject:[Number numberWithDouble:NSObjCUnionType] forKey:@"NSObjCUnionType"];
[d setObject:[Number numberWithDouble:NSObjCVoidType] forKey:@"NSObjCVoidType"];
[d setObject:[Number numberWithDouble:NSObjectAutoreleasedEvent] forKey:@"NSObjectAutoreleasedEvent"];
[d setObject:[Number numberWithDouble:NSObjectExtraRefDecrementedEvent] forKey:@"NSObjectExtraRefDecrementedEvent"];
[d setObject:[Number numberWithDouble:NSObjectExtraRefIncrementedEvent] forKey:@"NSObjectExtraRefIncrementedEvent"];
[d setObject:[Number numberWithDouble:NSObjectInternalRefDecrementedEvent] forKey:@"NSObjectInternalRefDecrementedEvent"];
[d setObject:[Number numberWithDouble:NSObjectInternalRefIncrementedEvent] forKey:@"NSObjectInternalRefIncrementedEvent"];
[d setObject:[Number numberWithDouble:NSOpenStepUnicodeReservedBase] forKey:@"NSOpenStepUnicodeReservedBase"];
[d setObject:[Number numberWithDouble:NSOperationNotSupportedForKeyScriptError] forKey:@"NSOperationNotSupportedForKeyScriptError"];
[d setObject:[Number numberWithDouble:NSOperationNotSupportedForKeySpecifierError] forKey:@"NSOperationNotSupportedForKeySpecifierError"];
[d setObject:[Number numberWithDouble:NSOperationQueueDefaultMaxConcurrentOperationCount] forKey:@"NSOperationQueueDefaultMaxConcurrentOperationCount"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityHigh] forKey:@"NSOperationQueuePriorityHigh"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityLow] forKey:@"NSOperationQueuePriorityLow"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityNormal] forKey:@"NSOperationQueuePriorityNormal"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityVeryHigh] forKey:@"NSOperationQueuePriorityVeryHigh"];
[d setObject:[Number numberWithDouble:NSOperationQueuePriorityVeryLow] forKey:@"NSOperationQueuePriorityVeryLow"];
[d setObject:[Number numberWithDouble:NSOrPredicateType] forKey:@"NSOrPredicateType"];
[d setObject:[Number numberWithDouble:NSOrderedAscending] forKey:@"NSOrderedAscending"];
[d setObject:[Number numberWithDouble:NSOrderedDescending] forKey:@"NSOrderedDescending"];
[d setObject:[Number numberWithDouble:NSOrderedSame] forKey:@"NSOrderedSame"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsCStringPersonality] forKey:@"NSPointerFunctionsCStringPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsCopyIn] forKey:@"NSPointerFunctionsCopyIn"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsIntegerPersonality] forKey:@"NSPointerFunctionsIntegerPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsMachVirtualMemory] forKey:@"NSPointerFunctionsMachVirtualMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsMallocMemory] forKey:@"NSPointerFunctionsMallocMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsObjectPersonality] forKey:@"NSPointerFunctionsObjectPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsObjectPointerPersonality] forKey:@"NSPointerFunctionsObjectPointerPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsOpaqueMemory] forKey:@"NSPointerFunctionsOpaqueMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsOpaquePersonality] forKey:@"NSPointerFunctionsOpaquePersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsStrongMemory] forKey:@"NSPointerFunctionsStrongMemory"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsStructPersonality] forKey:@"NSPointerFunctionsStructPersonality"];
[d setObject:[Number numberWithDouble:NSPointerFunctionsZeroingWeakMemory] forKey:@"NSPointerFunctionsZeroingWeakMemory"];
[d setObject:[Number numberWithDouble:NSPositionAfter] forKey:@"NSPositionAfter"];
[d setObject:[Number numberWithDouble:NSPositionBefore] forKey:@"NSPositionBefore"];
[d setObject:[Number numberWithDouble:NSPositionBeginning] forKey:@"NSPositionBeginning"];
[d setObject:[Number numberWithDouble:NSPositionEnd] forKey:@"NSPositionEnd"];
[d setObject:[Number numberWithDouble:NSPositionReplace] forKey:@"NSPositionReplace"];
[d setObject:[Number numberWithDouble:NSPostASAP] forKey:@"NSPostASAP"];
[d setObject:[Number numberWithDouble:NSPostNow] forKey:@"NSPostNow"];
[d setObject:[Number numberWithDouble:NSPostWhenIdle] forKey:@"NSPostWhenIdle"];
[d setObject:[Number numberWithDouble:NSPropertyListBinaryFormat_v1_0] forKey:@"NSPropertyListBinaryFormat_v1_0"];
[d setObject:[Number numberWithDouble:NSPropertyListImmutable] forKey:@"NSPropertyListImmutable"];
[d setObject:[Number numberWithDouble:NSPropertyListMutableContainers] forKey:@"NSPropertyListMutableContainers"];
[d setObject:[Number numberWithDouble:NSPropertyListMutableContainersAndLeaves] forKey:@"NSPropertyListMutableContainersAndLeaves"];
[d setObject:[Number numberWithDouble:NSPropertyListOpenStepFormat] forKey:@"NSPropertyListOpenStepFormat"];
[d setObject:[Number numberWithDouble:NSPropertyListXMLFormat_v1_0] forKey:@"NSPropertyListXMLFormat_v1_0"];
[d setObject:[Number numberWithDouble:NSRandomSubelement] forKey:@"NSRandomSubelement"];
[d setObject:[Number numberWithDouble:NSReceiverEvaluationScriptError] forKey:@"NSReceiverEvaluationScriptError"];
[d setObject:[Number numberWithDouble:NSReceiversCantHandleCommandScriptError] forKey:@"NSReceiversCantHandleCommandScriptError"];
[d setObject:[Number numberWithDouble:NSRelativeAfter] forKey:@"NSRelativeAfter"];
[d setObject:[Number numberWithDouble:NSRelativeBefore] forKey:@"NSRelativeBefore"];
[d setObject:[Number numberWithDouble:NSRequiredArgumentsMissingScriptError] forKey:@"NSRequiredArgumentsMissingScriptError"];
[d setObject:[Number numberWithDouble:NSRoundBankers] forKey:@"NSRoundBankers"];
[d setObject:[Number numberWithDouble:NSRoundDown] forKey:@"NSRoundDown"];
[d setObject:[Number numberWithDouble:NSRoundPlain] forKey:@"NSRoundPlain"];
[d setObject:[Number numberWithDouble:NSRoundUp] forKey:@"NSRoundUp"];
[d setObject:[Number numberWithDouble:NSSaveOptionsAsk] forKey:@"NSSaveOptionsAsk"];
[d setObject:[Number numberWithDouble:NSSaveOptionsNo] forKey:@"NSSaveOptionsNo"];
[d setObject:[Number numberWithDouble:NSSaveOptionsYes] forKey:@"NSSaveOptionsYes"];
[d setObject:[Number numberWithDouble:NSScannedOption] forKey:@"NSScannedOption"];
[d setObject:[Number numberWithDouble:NSSecondCalendarUnit] forKey:@"NSSecondCalendarUnit"];
[d setObject:[Number numberWithDouble:NSShiftJISStringEncoding] forKey:@"NSShiftJISStringEncoding"];
[d setObject:[Number numberWithDouble:NSSolarisOperatingSystem] forKey:@"NSSolarisOperatingSystem"];
[d setObject:[Number numberWithDouble:NSStreamEventEndEncountered] forKey:@"NSStreamEventEndEncountered"];
[d setObject:[Number numberWithDouble:NSStreamEventErrorOccurred] forKey:@"NSStreamEventErrorOccurred"];
[d setObject:[Number numberWithDouble:NSStreamEventHasBytesAvailable] forKey:@"NSStreamEventHasBytesAvailable"];
[d setObject:[Number numberWithDouble:NSStreamEventHasSpaceAvailable] forKey:@"NSStreamEventHasSpaceAvailable"];
[d setObject:[Number numberWithDouble:NSStreamEventNone] forKey:@"NSStreamEventNone"];
[d setObject:[Number numberWithDouble:NSStreamEventOpenCompleted] forKey:@"NSStreamEventOpenCompleted"];
[d setObject:[Number numberWithDouble:NSStreamStatusAtEnd] forKey:@"NSStreamStatusAtEnd"];
[d setObject:[Number numberWithDouble:NSStreamStatusClosed] forKey:@"NSStreamStatusClosed"];
[d setObject:[Number numberWithDouble:NSStreamStatusError] forKey:@"NSStreamStatusError"];
[d setObject:[Number numberWithDouble:NSStreamStatusNotOpen] forKey:@"NSStreamStatusNotOpen"];
[d setObject:[Number numberWithDouble:NSStreamStatusOpen] forKey:@"NSStreamStatusOpen"];
[d setObject:[Number numberWithDouble:NSStreamStatusOpening] forKey:@"NSStreamStatusOpening"];
[d setObject:[Number numberWithDouble:NSStreamStatusReading] forKey:@"NSStreamStatusReading"];
[d setObject:[Number numberWithDouble:NSStreamStatusWriting] forKey:@"NSStreamStatusWriting"];
[d setObject:[Number numberWithDouble:NSStringEncodingConversionAllowLossy] forKey:@"NSStringEncodingConversionAllowLossy"];
[d setObject:[Number numberWithDouble:NSStringEncodingConversionExternalRepresentation] forKey:@"NSStringEncodingConversionExternalRepresentation"];
[d setObject:[Number numberWithDouble:NSSubqueryExpressionType] forKey:@"NSSubqueryExpressionType"];
[d setObject:[Number numberWithDouble:NSSunOSOperatingSystem] forKey:@"NSSunOSOperatingSystem"];
[d setObject:[Number numberWithDouble:NSSymbolStringEncoding] forKey:@"NSSymbolStringEncoding"];
[d setObject:[Number numberWithDouble:NSSystemDomainMask] forKey:@"NSSystemDomainMask"];
[d setObject:[Number numberWithDouble:NSTimeIntervalSince1970] forKey:@"NSTimeIntervalSince1970"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleDaylightSaving] forKey:@"NSTimeZoneNameStyleDaylightSaving"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleShortDaylightSaving] forKey:@"NSTimeZoneNameStyleShortDaylightSaving"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleShortStandard] forKey:@"NSTimeZoneNameStyleShortStandard"];
[d setObject:[Number numberWithDouble:NSTimeZoneNameStyleStandard] forKey:@"NSTimeZoneNameStyleStandard"];
[d setObject:[Number numberWithDouble:NSURLCacheStorageAllowed] forKey:@"NSURLCacheStorageAllowed"];
[d setObject:[Number numberWithDouble:NSURLCacheStorageAllowedInMemoryOnly] forKey:@"NSURLCacheStorageAllowedInMemoryOnly"];
[d setObject:[Number numberWithDouble:NSURLCacheStorageNotAllowed] forKey:@"NSURLCacheStorageNotAllowed"];
[d setObject:[Number numberWithDouble:NSURLCredentialPersistenceForSession] forKey:@"NSURLCredentialPersistenceForSession"];
[d setObject:[Number numberWithDouble:NSURLCredentialPersistenceNone] forKey:@"NSURLCredentialPersistenceNone"];
[d setObject:[Number numberWithDouble:NSURLCredentialPersistencePermanent] forKey:@"NSURLCredentialPersistencePermanent"];
[d setObject:[Number numberWithDouble:NSURLErrorBadServerResponse] forKey:@"NSURLErrorBadServerResponse"];
[d setObject:[Number numberWithDouble:NSURLErrorBadURL] forKey:@"NSURLErrorBadURL"];
[d setObject:[Number numberWithDouble:NSURLErrorCancelled] forKey:@"NSURLErrorCancelled"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotCloseFile] forKey:@"NSURLErrorCannotCloseFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotConnectToHost] forKey:@"NSURLErrorCannotConnectToHost"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotCreateFile] forKey:@"NSURLErrorCannotCreateFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotDecodeContentData] forKey:@"NSURLErrorCannotDecodeContentData"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotDecodeRawData] forKey:@"NSURLErrorCannotDecodeRawData"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotFindHost] forKey:@"NSURLErrorCannotFindHost"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotLoadFromNetwork] forKey:@"NSURLErrorCannotLoadFromNetwork"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotMoveFile] forKey:@"NSURLErrorCannotMoveFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotOpenFile] forKey:@"NSURLErrorCannotOpenFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotParseResponse] forKey:@"NSURLErrorCannotParseResponse"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotRemoveFile] forKey:@"NSURLErrorCannotRemoveFile"];
[d setObject:[Number numberWithDouble:NSURLErrorCannotWriteToFile] forKey:@"NSURLErrorCannotWriteToFile"];
[d setObject:[Number numberWithDouble:NSURLErrorClientCertificateRejected] forKey:@"NSURLErrorClientCertificateRejected"];
[d setObject:[Number numberWithDouble:NSURLErrorDNSLookupFailed] forKey:@"NSURLErrorDNSLookupFailed"];
[d setObject:[Number numberWithDouble:NSURLErrorDataLengthExceedsMaximum] forKey:@"NSURLErrorDataLengthExceedsMaximum"];
[d setObject:[Number numberWithDouble:NSURLErrorDownloadDecodingFailedMidStream] forKey:@"NSURLErrorDownloadDecodingFailedMidStream"];
[d setObject:[Number numberWithDouble:NSURLErrorDownloadDecodingFailedToComplete] forKey:@"NSURLErrorDownloadDecodingFailedToComplete"];
[d setObject:[Number numberWithDouble:NSURLErrorFileDoesNotExist] forKey:@"NSURLErrorFileDoesNotExist"];
[d setObject:[Number numberWithDouble:NSURLErrorFileIsDirectory] forKey:@"NSURLErrorFileIsDirectory"];
[d setObject:[Number numberWithDouble:NSURLErrorHTTPTooManyRedirects] forKey:@"NSURLErrorHTTPTooManyRedirects"];
[d setObject:[Number numberWithDouble:NSURLErrorNetworkConnectionLost] forKey:@"NSURLErrorNetworkConnectionLost"];
[d setObject:[Number numberWithDouble:NSURLErrorNoPermissionsToReadFile] forKey:@"NSURLErrorNoPermissionsToReadFile"];
[d setObject:[Number numberWithDouble:NSURLErrorNotConnectedToInternet] forKey:@"NSURLErrorNotConnectedToInternet"];
[d setObject:[Number numberWithDouble:NSURLErrorRedirectToNonExistentLocation] forKey:@"NSURLErrorRedirectToNonExistentLocation"];
[d setObject:[Number numberWithDouble:NSURLErrorResourceUnavailable] forKey:@"NSURLErrorResourceUnavailable"];
[d setObject:[Number numberWithDouble:NSURLErrorSecureConnectionFailed] forKey:@"NSURLErrorSecureConnectionFailed"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateHasBadDate] forKey:@"NSURLErrorServerCertificateHasBadDate"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateHasUnknownRoot] forKey:@"NSURLErrorServerCertificateHasUnknownRoot"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateNotYetValid] forKey:@"NSURLErrorServerCertificateNotYetValid"];
[d setObject:[Number numberWithDouble:NSURLErrorServerCertificateUntrusted] forKey:@"NSURLErrorServerCertificateUntrusted"];
[d setObject:[Number numberWithDouble:NSURLErrorTimedOut] forKey:@"NSURLErrorTimedOut"];
[d setObject:[Number numberWithDouble:NSURLErrorUnknown] forKey:@"NSURLErrorUnknown"];
[d setObject:[Number numberWithDouble:NSURLErrorUnsupportedURL] forKey:@"NSURLErrorUnsupportedURL"];
[d setObject:[Number numberWithDouble:NSURLErrorUserAuthenticationRequired] forKey:@"NSURLErrorUserAuthenticationRequired"];
[d setObject:[Number numberWithDouble:NSURLErrorUserCancelledAuthentication] forKey:@"NSURLErrorUserCancelledAuthentication"];
[d setObject:[Number numberWithDouble:NSURLErrorZeroByteResource] forKey:@"NSURLErrorZeroByteResource"];
[d setObject:[Number numberWithDouble:NSURLHandleLoadFailed] forKey:@"NSURLHandleLoadFailed"];
[d setObject:[Number numberWithDouble:NSURLHandleLoadInProgress] forKey:@"NSURLHandleLoadInProgress"];
[d setObject:[Number numberWithDouble:NSURLHandleLoadSucceeded] forKey:@"NSURLHandleLoadSucceeded"];
[d setObject:[Number numberWithDouble:NSURLHandleNotLoaded] forKey:@"NSURLHandleNotLoaded"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadIgnoringCacheData] forKey:@"NSURLRequestReloadIgnoringCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadIgnoringLocalAndRemoteCacheData] forKey:@"NSURLRequestReloadIgnoringLocalAndRemoteCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadIgnoringLocalCacheData] forKey:@"NSURLRequestReloadIgnoringLocalCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReloadRevalidatingCacheData] forKey:@"NSURLRequestReloadRevalidatingCacheData"];
[d setObject:[Number numberWithDouble:NSURLRequestReturnCacheDataDontLoad] forKey:@"NSURLRequestReturnCacheDataDontLoad"];
[d setObject:[Number numberWithDouble:NSURLRequestReturnCacheDataElseLoad] forKey:@"NSURLRequestReturnCacheDataElseLoad"];
[d setObject:[Number numberWithDouble:NSURLRequestUseProtocolCachePolicy] forKey:@"NSURLRequestUseProtocolCachePolicy"];
[d setObject:[Number numberWithDouble:NSUTF16BigEndianStringEncoding] forKey:@"NSUTF16BigEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF16LittleEndianStringEncoding] forKey:@"NSUTF16LittleEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF16StringEncoding] forKey:@"NSUTF16StringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF32BigEndianStringEncoding] forKey:@"NSUTF32BigEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF32LittleEndianStringEncoding] forKey:@"NSUTF32LittleEndianStringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF32StringEncoding] forKey:@"NSUTF32StringEncoding"];
[d setObject:[Number numberWithDouble:NSUTF8StringEncoding] forKey:@"NSUTF8StringEncoding"];
[d setObject:[Number numberWithDouble:NSUncachedRead] forKey:@"NSUncachedRead"];
[d setObject:[Number numberWithDouble:NSUndoCloseGroupingRunLoopOrdering] forKey:@"NSUndoCloseGroupingRunLoopOrdering"];
[d setObject:[Number numberWithDouble:NSUnicodeStringEncoding] forKey:@"NSUnicodeStringEncoding"];
[d setObject:[Number numberWithDouble:NSUnionSetExpressionType] forKey:@"NSUnionSetExpressionType"];
[d setObject:[Number numberWithDouble:NSUnknownKeyScriptError] forKey:@"NSUnknownKeyScriptError"];
[d setObject:[Number numberWithDouble:NSUnknownKeySpecifierError] forKey:@"NSUnknownKeySpecifierError"];
[d setObject:[Number numberWithDouble:NSUserCancelledError] forKey:@"NSUserCancelledError"];
[d setObject:[Number numberWithDouble:NSUserDirectory] forKey:@"NSUserDirectory"];
[d setObject:[Number numberWithDouble:NSUserDomainMask] forKey:@"NSUserDomainMask"];
[d setObject:[Number numberWithDouble:NSValidationErrorMaximum] forKey:@"NSValidationErrorMaximum"];
[d setObject:[Number numberWithDouble:NSValidationErrorMinimum] forKey:@"NSValidationErrorMinimum"];
[d setObject:[Number numberWithDouble:NSVariableExpressionType] forKey:@"NSVariableExpressionType"];
[d setObject:[Number numberWithDouble:NSWeekCalendarUnit] forKey:@"NSWeekCalendarUnit"];
[d setObject:[Number numberWithDouble:NSWeekdayCalendarUnit] forKey:@"NSWeekdayCalendarUnit"];
[d setObject:[Number numberWithDouble:NSWeekdayOrdinalCalendarUnit] forKey:@"NSWeekdayOrdinalCalendarUnit"];
[d setObject:[Number numberWithDouble:NSWidthInsensitiveSearch] forKey:@"NSWidthInsensitiveSearch"];
[d setObject:[Number numberWithDouble:NSWindows95OperatingSystem] forKey:@"NSWindows95OperatingSystem"];
[d setObject:[Number numberWithDouble:NSWindowsCP1250StringEncoding] forKey:@"NSWindowsCP1250StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1251StringEncoding] forKey:@"NSWindowsCP1251StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1252StringEncoding] forKey:@"NSWindowsCP1252StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1253StringEncoding] forKey:@"NSWindowsCP1253StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsCP1254StringEncoding] forKey:@"NSWindowsCP1254StringEncoding"];
[d setObject:[Number numberWithDouble:NSWindowsNTOperatingSystem] forKey:@"NSWindowsNTOperatingSystem"];
[d setObject:[Number numberWithDouble:NSWrapCalendarComponents] forKey:@"NSWrapCalendarComponents"];
[d setObject:[Number numberWithDouble:NSXMLAttributeCDATAKind] forKey:@"NSXMLAttributeCDATAKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeDeclarationKind] forKey:@"NSXMLAttributeDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeEntitiesKind] forKey:@"NSXMLAttributeEntitiesKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeEntityKind] forKey:@"NSXMLAttributeEntityKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeEnumerationKind] forKey:@"NSXMLAttributeEnumerationKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeIDKind] forKey:@"NSXMLAttributeIDKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeIDRefKind] forKey:@"NSXMLAttributeIDRefKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeIDRefsKind] forKey:@"NSXMLAttributeIDRefsKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeKind] forKey:@"NSXMLAttributeKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeNMTokenKind] forKey:@"NSXMLAttributeNMTokenKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeNMTokensKind] forKey:@"NSXMLAttributeNMTokensKind"];
[d setObject:[Number numberWithDouble:NSXMLAttributeNotationKind] forKey:@"NSXMLAttributeNotationKind"];
[d setObject:[Number numberWithDouble:NSXMLCommentKind] forKey:@"NSXMLCommentKind"];
[d setObject:[Number numberWithDouble:NSXMLDTDKind] forKey:@"NSXMLDTDKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentHTMLKind] forKey:@"NSXMLDocumentHTMLKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentIncludeContentTypeDeclaration] forKey:@"NSXMLDocumentIncludeContentTypeDeclaration"];
[d setObject:[Number numberWithDouble:NSXMLDocumentKind] forKey:@"NSXMLDocumentKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentTextKind] forKey:@"NSXMLDocumentTextKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentTidyHTML] forKey:@"NSXMLDocumentTidyHTML"];
[d setObject:[Number numberWithDouble:NSXMLDocumentTidyXML] forKey:@"NSXMLDocumentTidyXML"];
[d setObject:[Number numberWithDouble:NSXMLDocumentValidate] forKey:@"NSXMLDocumentValidate"];
[d setObject:[Number numberWithDouble:NSXMLDocumentXHTMLKind] forKey:@"NSXMLDocumentXHTMLKind"];
[d setObject:[Number numberWithDouble:NSXMLDocumentXInclude] forKey:@"NSXMLDocumentXInclude"];
[d setObject:[Number numberWithDouble:NSXMLDocumentXMLKind] forKey:@"NSXMLDocumentXMLKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationAnyKind] forKey:@"NSXMLElementDeclarationAnyKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationElementKind] forKey:@"NSXMLElementDeclarationElementKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationEmptyKind] forKey:@"NSXMLElementDeclarationEmptyKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationKind] forKey:@"NSXMLElementDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationMixedKind] forKey:@"NSXMLElementDeclarationMixedKind"];
[d setObject:[Number numberWithDouble:NSXMLElementDeclarationUndefinedKind] forKey:@"NSXMLElementDeclarationUndefinedKind"];
[d setObject:[Number numberWithDouble:NSXMLElementKind] forKey:@"NSXMLElementKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityDeclarationKind] forKey:@"NSXMLEntityDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityGeneralKind] forKey:@"NSXMLEntityGeneralKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityParameterKind] forKey:@"NSXMLEntityParameterKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityParsedKind] forKey:@"NSXMLEntityParsedKind"];
[d setObject:[Number numberWithDouble:NSXMLEntityPredefined] forKey:@"NSXMLEntityPredefined"];
[d setObject:[Number numberWithDouble:NSXMLEntityUnparsedKind] forKey:@"NSXMLEntityUnparsedKind"];
[d setObject:[Number numberWithDouble:NSXMLInvalidKind] forKey:@"NSXMLInvalidKind"];
[d setObject:[Number numberWithDouble:NSXMLNamespaceKind] forKey:@"NSXMLNamespaceKind"];
[d setObject:[Number numberWithDouble:NSXMLNodeCompactEmptyElement] forKey:@"NSXMLNodeCompactEmptyElement"];
[d setObject:[Number numberWithDouble:NSXMLNodeExpandEmptyElement] forKey:@"NSXMLNodeExpandEmptyElement"];
[d setObject:[Number numberWithDouble:NSXMLNodeIsCDATA] forKey:@"NSXMLNodeIsCDATA"];
[d setObject:[Number numberWithDouble:NSXMLNodeOptionsNone] forKey:@"NSXMLNodeOptionsNone"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveAll] forKey:@"NSXMLNodePreserveAll"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveAttributeOrder] forKey:@"NSXMLNodePreserveAttributeOrder"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveCDATA] forKey:@"NSXMLNodePreserveCDATA"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveCharacterReferences] forKey:@"NSXMLNodePreserveCharacterReferences"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveDTD] forKey:@"NSXMLNodePreserveDTD"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveEmptyElements] forKey:@"NSXMLNodePreserveEmptyElements"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveEntities] forKey:@"NSXMLNodePreserveEntities"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveNamespaceOrder] forKey:@"NSXMLNodePreserveNamespaceOrder"];
[d setObject:[Number numberWithDouble:NSXMLNodePreservePrefixes] forKey:@"NSXMLNodePreservePrefixes"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveQuotes] forKey:@"NSXMLNodePreserveQuotes"];
[d setObject:[Number numberWithDouble:NSXMLNodePreserveWhitespace] forKey:@"NSXMLNodePreserveWhitespace"];
[d setObject:[Number numberWithDouble:NSXMLNodePrettyPrint] forKey:@"NSXMLNodePrettyPrint"];
[d setObject:[Number numberWithDouble:NSXMLNodeUseDoubleQuotes] forKey:@"NSXMLNodeUseDoubleQuotes"];
[d setObject:[Number numberWithDouble:NSXMLNodeUseSingleQuotes] forKey:@"NSXMLNodeUseSingleQuotes"];
[d setObject:[Number numberWithDouble:NSXMLNotationDeclarationKind] forKey:@"NSXMLNotationDeclarationKind"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeHasNoValueError] forKey:@"NSXMLParserAttributeHasNoValueError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeListNotFinishedError] forKey:@"NSXMLParserAttributeListNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeListNotStartedError] forKey:@"NSXMLParserAttributeListNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeNotFinishedError] forKey:@"NSXMLParserAttributeNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeNotStartedError] forKey:@"NSXMLParserAttributeNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserAttributeRedefinedError] forKey:@"NSXMLParserAttributeRedefinedError"];
[d setObject:[Number numberWithDouble:NSXMLParserCDATANotFinishedError] forKey:@"NSXMLParserCDATANotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefAtEOFError] forKey:@"NSXMLParserCharacterRefAtEOFError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefInDTDError] forKey:@"NSXMLParserCharacterRefInDTDError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefInEpilogError] forKey:@"NSXMLParserCharacterRefInEpilogError"];
[d setObject:[Number numberWithDouble:NSXMLParserCharacterRefInPrologError] forKey:@"NSXMLParserCharacterRefInPrologError"];
[d setObject:[Number numberWithDouble:NSXMLParserCommentContainsDoubleHyphenError] forKey:@"NSXMLParserCommentContainsDoubleHyphenError"];
[d setObject:[Number numberWithDouble:NSXMLParserCommentNotFinishedError] forKey:@"NSXMLParserCommentNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserConditionalSectionNotFinishedError] forKey:@"NSXMLParserConditionalSectionNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserConditionalSectionNotStartedError] forKey:@"NSXMLParserConditionalSectionNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserDOCTYPEDeclNotFinishedError] forKey:@"NSXMLParserDOCTYPEDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserDelegateAbortedParseError] forKey:@"NSXMLParserDelegateAbortedParseError"];
[d setObject:[Number numberWithDouble:NSXMLParserDocumentStartError] forKey:@"NSXMLParserDocumentStartError"];
[d setObject:[Number numberWithDouble:NSXMLParserElementContentDeclNotFinishedError] forKey:@"NSXMLParserElementContentDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserElementContentDeclNotStartedError] forKey:@"NSXMLParserElementContentDeclNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEmptyDocumentError] forKey:@"NSXMLParserEmptyDocumentError"];
[d setObject:[Number numberWithDouble:NSXMLParserEncodingNotSupportedError] forKey:@"NSXMLParserEncodingNotSupportedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityBoundaryError] forKey:@"NSXMLParserEntityBoundaryError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityIsExternalError] forKey:@"NSXMLParserEntityIsExternalError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityIsParameterError] forKey:@"NSXMLParserEntityIsParameterError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityNotFinishedError] forKey:@"NSXMLParserEntityNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityNotStartedError] forKey:@"NSXMLParserEntityNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefAtEOFError] forKey:@"NSXMLParserEntityRefAtEOFError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefInDTDError] forKey:@"NSXMLParserEntityRefInDTDError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefInEpilogError] forKey:@"NSXMLParserEntityRefInEpilogError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefInPrologError] forKey:@"NSXMLParserEntityRefInPrologError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityRefLoopError] forKey:@"NSXMLParserEntityRefLoopError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityReferenceMissingSemiError] forKey:@"NSXMLParserEntityReferenceMissingSemiError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityReferenceWithoutNameError] forKey:@"NSXMLParserEntityReferenceWithoutNameError"];
[d setObject:[Number numberWithDouble:NSXMLParserEntityValueRequiredError] forKey:@"NSXMLParserEntityValueRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserEqualExpectedError] forKey:@"NSXMLParserEqualExpectedError"];
[d setObject:[Number numberWithDouble:NSXMLParserExternalStandaloneEntityError] forKey:@"NSXMLParserExternalStandaloneEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserExternalSubsetNotFinishedError] forKey:@"NSXMLParserExternalSubsetNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserExtraContentError] forKey:@"NSXMLParserExtraContentError"];
[d setObject:[Number numberWithDouble:NSXMLParserGTRequiredError] forKey:@"NSXMLParserGTRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserInternalError] forKey:@"NSXMLParserInternalError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidCharacterError] forKey:@"NSXMLParserInvalidCharacterError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidCharacterInEntityError] forKey:@"NSXMLParserInvalidCharacterInEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidCharacterRefError] forKey:@"NSXMLParserInvalidCharacterRefError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidConditionalSectionError] forKey:@"NSXMLParserInvalidConditionalSectionError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidDecimalCharacterRefError] forKey:@"NSXMLParserInvalidDecimalCharacterRefError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidEncodingError] forKey:@"NSXMLParserInvalidEncodingError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidEncodingNameError] forKey:@"NSXMLParserInvalidEncodingNameError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidHexCharacterRefError] forKey:@"NSXMLParserInvalidHexCharacterRefError"];
[d setObject:[Number numberWithDouble:NSXMLParserInvalidURIError] forKey:@"NSXMLParserInvalidURIError"];
[d setObject:[Number numberWithDouble:NSXMLParserLTRequiredError] forKey:@"NSXMLParserLTRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserLTSlashRequiredError] forKey:@"NSXMLParserLTSlashRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserLessThanSymbolInAttributeError] forKey:@"NSXMLParserLessThanSymbolInAttributeError"];
[d setObject:[Number numberWithDouble:NSXMLParserLiteralNotFinishedError] forKey:@"NSXMLParserLiteralNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserLiteralNotStartedError] forKey:@"NSXMLParserLiteralNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserMisplacedCDATAEndStringError] forKey:@"NSXMLParserMisplacedCDATAEndStringError"];
[d setObject:[Number numberWithDouble:NSXMLParserMisplacedXMLDeclarationError] forKey:@"NSXMLParserMisplacedXMLDeclarationError"];
[d setObject:[Number numberWithDouble:NSXMLParserMixedContentDeclNotFinishedError] forKey:@"NSXMLParserMixedContentDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserMixedContentDeclNotStartedError] forKey:@"NSXMLParserMixedContentDeclNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserNAMERequiredError] forKey:@"NSXMLParserNAMERequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserNMTOKENRequiredError] forKey:@"NSXMLParserNMTOKENRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserNamespaceDeclarationError] forKey:@"NSXMLParserNamespaceDeclarationError"];
[d setObject:[Number numberWithDouble:NSXMLParserNoDTDError] forKey:@"NSXMLParserNoDTDError"];
[d setObject:[Number numberWithDouble:NSXMLParserNotWellBalancedError] forKey:@"NSXMLParserNotWellBalancedError"];
[d setObject:[Number numberWithDouble:NSXMLParserNotationNotFinishedError] forKey:@"NSXMLParserNotationNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserNotationNotStartedError] forKey:@"NSXMLParserNotationNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserOutOfMemoryError] forKey:@"NSXMLParserOutOfMemoryError"];
[d setObject:[Number numberWithDouble:NSXMLParserPCDATARequiredError] forKey:@"NSXMLParserPCDATARequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefAtEOFError] forKey:@"NSXMLParserParsedEntityRefAtEOFError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInEpilogError] forKey:@"NSXMLParserParsedEntityRefInEpilogError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInInternalError] forKey:@"NSXMLParserParsedEntityRefInInternalError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInInternalSubsetError] forKey:@"NSXMLParserParsedEntityRefInInternalSubsetError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefInPrologError] forKey:@"NSXMLParserParsedEntityRefInPrologError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefMissingSemiError] forKey:@"NSXMLParserParsedEntityRefMissingSemiError"];
[d setObject:[Number numberWithDouble:NSXMLParserParsedEntityRefNoNameError] forKey:@"NSXMLParserParsedEntityRefNoNameError"];
[d setObject:[Number numberWithDouble:NSXMLParserPrematureDocumentEndError] forKey:@"NSXMLParserPrematureDocumentEndError"];
[d setObject:[Number numberWithDouble:NSXMLParserProcessingInstructionNotFinishedError] forKey:@"NSXMLParserProcessingInstructionNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserProcessingInstructionNotStartedError] forKey:@"NSXMLParserProcessingInstructionNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserPublicIdentifierRequiredError] forKey:@"NSXMLParserPublicIdentifierRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserSeparatorRequiredError] forKey:@"NSXMLParserSeparatorRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserSpaceRequiredError] forKey:@"NSXMLParserSpaceRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserStandaloneValueError] forKey:@"NSXMLParserStandaloneValueError"];
[d setObject:[Number numberWithDouble:NSXMLParserStringNotClosedError] forKey:@"NSXMLParserStringNotClosedError"];
[d setObject:[Number numberWithDouble:NSXMLParserStringNotStartedError] forKey:@"NSXMLParserStringNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLParserTagNameMismatchError] forKey:@"NSXMLParserTagNameMismatchError"];
[d setObject:[Number numberWithDouble:NSXMLParserURIFragmentError] forKey:@"NSXMLParserURIFragmentError"];
[d setObject:[Number numberWithDouble:NSXMLParserURIRequiredError] forKey:@"NSXMLParserURIRequiredError"];
[d setObject:[Number numberWithDouble:NSXMLParserUndeclaredEntityError] forKey:@"NSXMLParserUndeclaredEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserUnfinishedTagError] forKey:@"NSXMLParserUnfinishedTagError"];
[d setObject:[Number numberWithDouble:NSXMLParserUnknownEncodingError] forKey:@"NSXMLParserUnknownEncodingError"];
[d setObject:[Number numberWithDouble:NSXMLParserUnparsedEntityError] forKey:@"NSXMLParserUnparsedEntityError"];
[d setObject:[Number numberWithDouble:NSXMLParserXMLDeclNotFinishedError] forKey:@"NSXMLParserXMLDeclNotFinishedError"];
[d setObject:[Number numberWithDouble:NSXMLParserXMLDeclNotStartedError] forKey:@"NSXMLParserXMLDeclNotStartedError"];
[d setObject:[Number numberWithDouble:NSXMLProcessingInstructionKind] forKey:@"NSXMLProcessingInstructionKind"];
[d setObject:[Number numberWithDouble:NSXMLTextKind] forKey:@"NSXMLTextKind"];
[d setObject:[Number numberWithDouble:NSYearCalendarUnit] forKey:@"NSYearCalendarUnit"];
[d setObject:[Number numberWithDouble:NS_BigEndian] forKey:@"NS_BigEndian"];
[d setObject:[Number numberWithDouble:NS_LittleEndian] forKey:@"NS_LittleEndian"];
[d setObject:[Number numberWithDouble:NS_UNICHAR_IS_EIGHT_BIT] forKey:@"NS_UNICHAR_IS_EIGHT_BIT"];
[d setObject:[Number numberWithDouble:NS_UnknownByteOrder] forKey:@"NS_UnknownByteOrder"];
if ([IMKCandidatesOpacityAttributeName isKindOfClass:[NSString class]]) [d setObject:IMKCandidatesOpacityAttributeName forKey:@"IMKCandidatesOpacityAttributeName"]; else NSLog([@"Can't initialize IMKCandidatesOpacityAttributeName with object " stringByAppendingString:[IMKCandidatesOpacityAttributeName description]]);
if ([kIMKCommandClientName isKindOfClass:[NSString class]]) [d setObject:kIMKCommandClientName forKey:@"kIMKCommandClientName"]; else NSLog([@"Can't initialize kIMKCommandClientName with object " stringByAppendingString:[kIMKCommandClientName description]]);
if ([kIMKCommandMenuItemName isKindOfClass:[NSString class]]) [d setObject:kIMKCommandMenuItemName forKey:@"kIMKCommandMenuItemName"]; else NSLog([@"Can't initialize kIMKCommandMenuItemName with object " stringByAppendingString:[kIMKCommandMenuItemName description]]);
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesAboveHint] forKey:@"kIMKLocateCandidatesAboveHint"];
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesBelowHint] forKey:@"kIMKLocateCandidatesBelowHint"];
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesLeftHint] forKey:@"kIMKLocateCandidatesLeftHint"];
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesRightHint] forKey:@"kIMKLocateCandidatesRightHint"];
[d setObject:[Number numberWithDouble:kIMKScrollingGridCandidatePanel] forKey:@"kIMKScrollingGridCandidatePanel"];
[d setObject:[Number numberWithDouble:kIMKSingleColumnScrollingCandidatePanel] forKey:@"kIMKSingleColumnScrollingCandidatePanel"];
[d setObject:[Number numberWithDouble:kIMKSingleRowSteppingCandidatePanel] forKey:@"kIMKSingleRowSteppingCandidatePanel"];
if ([IMKCandidatesOpacityAttributeName isKindOfClass:[NSString class]]) [d setObject:IMKCandidatesOpacityAttributeName forKey:@"IMKCandidatesOpacityAttributeName"]; else NSLog([@"Can't initialize IMKCandidatesOpacityAttributeName with object " stringByAppendingString:[IMKCandidatesOpacityAttributeName description]]);
if ([kIMKCommandClientName isKindOfClass:[NSString class]]) [d setObject:kIMKCommandClientName forKey:@"kIMKCommandClientName"]; else NSLog([@"Can't initialize kIMKCommandClientName with object " stringByAppendingString:[kIMKCommandClientName description]]);
if ([kIMKCommandMenuItemName isKindOfClass:[NSString class]]) [d setObject:kIMKCommandMenuItemName forKey:@"kIMKCommandMenuItemName"]; else NSLog([@"Can't initialize kIMKCommandMenuItemName with object " stringByAppendingString:[kIMKCommandMenuItemName description]]);
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesAboveHint] forKey:@"kIMKLocateCandidatesAboveHint"];
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesBelowHint] forKey:@"kIMKLocateCandidatesBelowHint"];
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesLeftHint] forKey:@"kIMKLocateCandidatesLeftHint"];
[d setObject:[Number numberWithDouble:kIMKLocateCandidatesRightHint] forKey:@"kIMKLocateCandidatesRightHint"];
[d setObject:[Number numberWithDouble:kIMKScrollingGridCandidatePanel] forKey:@"kIMKScrollingGridCandidatePanel"];
[d setObject:[Number numberWithDouble:kIMKSingleColumnScrollingCandidatePanel] forKey:@"kIMKSingleColumnScrollingCandidatePanel"];
[d setObject:[Number numberWithDouble:kIMKSingleRowSteppingCandidatePanel] forKey:@"kIMKSingleRowSteppingCandidatePanel"];
if ([IMAVManagerStateChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMAVManagerStateChangedNotification forKey:@"IMAVManagerStateChangedNotification"]; else NSLog([@"Can't initialize IMAVManagerStateChangedNotification with object " stringByAppendingString:[IMAVManagerStateChangedNotification description]]);
if ([IMAVManagerURLToShareChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMAVManagerURLToShareChangedNotification forKey:@"IMAVManagerURLToShareChangedNotification"]; else NSLog([@"Can't initialize IMAVManagerURLToShareChangedNotification with object " stringByAppendingString:[IMAVManagerURLToShareChangedNotification description]]);
if ([IMCapabilityAudioConference isKindOfClass:[NSString class]]) [d setObject:IMCapabilityAudioConference forKey:@"IMCapabilityAudioConference"]; else NSLog([@"Can't initialize IMCapabilityAudioConference with object " stringByAppendingString:[IMCapabilityAudioConference description]]);
if ([IMCapabilityDirectIM isKindOfClass:[NSString class]]) [d setObject:IMCapabilityDirectIM forKey:@"IMCapabilityDirectIM"]; else NSLog([@"Can't initialize IMCapabilityDirectIM with object " stringByAppendingString:[IMCapabilityDirectIM description]]);
if ([IMCapabilityFileSharing isKindOfClass:[NSString class]]) [d setObject:IMCapabilityFileSharing forKey:@"IMCapabilityFileSharing"]; else NSLog([@"Can't initialize IMCapabilityFileSharing with object " stringByAppendingString:[IMCapabilityFileSharing description]]);
if ([IMCapabilityFileTransfer isKindOfClass:[NSString class]]) [d setObject:IMCapabilityFileTransfer forKey:@"IMCapabilityFileTransfer"]; else NSLog([@"Can't initialize IMCapabilityFileTransfer with object " stringByAppendingString:[IMCapabilityFileTransfer description]]);
if ([IMCapabilityText isKindOfClass:[NSString class]]) [d setObject:IMCapabilityText forKey:@"IMCapabilityText"]; else NSLog([@"Can't initialize IMCapabilityText with object " stringByAppendingString:[IMCapabilityText description]]);
if ([IMCapabilityVideoConference isKindOfClass:[NSString class]]) [d setObject:IMCapabilityVideoConference forKey:@"IMCapabilityVideoConference"]; else NSLog([@"Can't initialize IMCapabilityVideoConference with object " stringByAppendingString:[IMCapabilityVideoConference description]]);
if ([IMMyStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMMyStatusChangedNotification forKey:@"IMMyStatusChangedNotification"]; else NSLog([@"Can't initialize IMMyStatusChangedNotification with object " stringByAppendingString:[IMMyStatusChangedNotification description]]);
if ([IMPersonAVBusyKey isKindOfClass:[NSString class]]) [d setObject:IMPersonAVBusyKey forKey:@"IMPersonAVBusyKey"]; else NSLog([@"Can't initialize IMPersonAVBusyKey with object " stringByAppendingString:[IMPersonAVBusyKey description]]);
if ([IMPersonCapabilitiesKey isKindOfClass:[NSString class]]) [d setObject:IMPersonCapabilitiesKey forKey:@"IMPersonCapabilitiesKey"]; else NSLog([@"Can't initialize IMPersonCapabilitiesKey with object " stringByAppendingString:[IMPersonCapabilitiesKey description]]);
if ([IMPersonEmailKey isKindOfClass:[NSString class]]) [d setObject:IMPersonEmailKey forKey:@"IMPersonEmailKey"]; else NSLog([@"Can't initialize IMPersonEmailKey with object " stringByAppendingString:[IMPersonEmailKey description]]);
if ([IMPersonFirstNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonFirstNameKey forKey:@"IMPersonFirstNameKey"]; else NSLog([@"Can't initialize IMPersonFirstNameKey with object " stringByAppendingString:[IMPersonFirstNameKey description]]);
if ([IMPersonIdleSinceKey isKindOfClass:[NSString class]]) [d setObject:IMPersonIdleSinceKey forKey:@"IMPersonIdleSinceKey"]; else NSLog([@"Can't initialize IMPersonIdleSinceKey with object " stringByAppendingString:[IMPersonIdleSinceKey description]]);
if ([IMPersonInfoChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMPersonInfoChangedNotification forKey:@"IMPersonInfoChangedNotification"]; else NSLog([@"Can't initialize IMPersonInfoChangedNotification with object " stringByAppendingString:[IMPersonInfoChangedNotification description]]);
if ([IMPersonLastNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonLastNameKey forKey:@"IMPersonLastNameKey"]; else NSLog([@"Can't initialize IMPersonLastNameKey with object " stringByAppendingString:[IMPersonLastNameKey description]]);
if ([IMPersonPictureDataKey isKindOfClass:[NSString class]]) [d setObject:IMPersonPictureDataKey forKey:@"IMPersonPictureDataKey"]; else NSLog([@"Can't initialize IMPersonPictureDataKey with object " stringByAppendingString:[IMPersonPictureDataKey description]]);
if ([IMPersonScreenNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonScreenNameKey forKey:@"IMPersonScreenNameKey"]; else NSLog([@"Can't initialize IMPersonScreenNameKey with object " stringByAppendingString:[IMPersonScreenNameKey description]]);
if ([IMPersonServiceNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonServiceNameKey forKey:@"IMPersonServiceNameKey"]; else NSLog([@"Can't initialize IMPersonServiceNameKey with object " stringByAppendingString:[IMPersonServiceNameKey description]]);
if ([IMPersonStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMPersonStatusChangedNotification forKey:@"IMPersonStatusChangedNotification"]; else NSLog([@"Can't initialize IMPersonStatusChangedNotification with object " stringByAppendingString:[IMPersonStatusChangedNotification description]]);
if ([IMPersonStatusKey isKindOfClass:[NSString class]]) [d setObject:IMPersonStatusKey forKey:@"IMPersonStatusKey"]; else NSLog([@"Can't initialize IMPersonStatusKey with object " stringByAppendingString:[IMPersonStatusKey description]]);
if ([IMPersonStatusMessageKey isKindOfClass:[NSString class]]) [d setObject:IMPersonStatusMessageKey forKey:@"IMPersonStatusMessageKey"]; else NSLog([@"Can't initialize IMPersonStatusMessageKey with object " stringByAppendingString:[IMPersonStatusMessageKey description]]);
if ([IMServiceStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMServiceStatusChangedNotification forKey:@"IMServiceStatusChangedNotification"]; else NSLog([@"Can't initialize IMServiceStatusChangedNotification with object " stringByAppendingString:[IMServiceStatusChangedNotification description]]);
if ([IMStatusImagesChangedAppearanceNotification isKindOfClass:[NSString class]]) [d setObject:IMStatusImagesChangedAppearanceNotification forKey:@"IMStatusImagesChangedAppearanceNotification"]; else NSLog([@"Can't initialize IMStatusImagesChangedAppearanceNotification with object " stringByAppendingString:[IMStatusImagesChangedAppearanceNotification description]]);
[d setObject:[Number numberWithDouble:IMAVInactive] forKey:@"IMAVInactive"];
[d setObject:[Number numberWithDouble:IMAVPending] forKey:@"IMAVPending"];
[d setObject:[Number numberWithDouble:IMAVRequested] forKey:@"IMAVRequested"];
[d setObject:[Number numberWithDouble:IMAVRunning] forKey:@"IMAVRunning"];
[d setObject:[Number numberWithDouble:IMAVShuttingDown] forKey:@"IMAVShuttingDown"];
[d setObject:[Number numberWithDouble:IMAVStartingUp] forKey:@"IMAVStartingUp"];
[d setObject:[Number numberWithDouble:IMPersonStatusAvailable] forKey:@"IMPersonStatusAvailable"];
[d setObject:[Number numberWithDouble:IMPersonStatusAway] forKey:@"IMPersonStatusAway"];
[d setObject:[Number numberWithDouble:IMPersonStatusIdle] forKey:@"IMPersonStatusIdle"];
[d setObject:[Number numberWithDouble:IMPersonStatusNoStatus] forKey:@"IMPersonStatusNoStatus"];
[d setObject:[Number numberWithDouble:IMPersonStatusOffline] forKey:@"IMPersonStatusOffline"];
[d setObject:[Number numberWithDouble:IMPersonStatusUnknown] forKey:@"IMPersonStatusUnknown"];
[d setObject:[Number numberWithDouble:IMServiceStatusDisconnected] forKey:@"IMServiceStatusDisconnected"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggedIn] forKey:@"IMServiceStatusLoggedIn"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggedOut] forKey:@"IMServiceStatusLoggedOut"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggingIn] forKey:@"IMServiceStatusLoggingIn"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggingOut] forKey:@"IMServiceStatusLoggingOut"];
[d setObject:[Number numberWithDouble:IMVideoOptimizationDefault] forKey:@"IMVideoOptimizationDefault"];
[d setObject:[Number numberWithDouble:IMVideoOptimizationReplacement] forKey:@"IMVideoOptimizationReplacement"];
[d setObject:[Number numberWithDouble:IMVideoOptimizationStills] forKey:@"IMVideoOptimizationStills"];
if ([IMAVManagerStateChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMAVManagerStateChangedNotification forKey:@"IMAVManagerStateChangedNotification"]; else NSLog([@"Can't initialize IMAVManagerStateChangedNotification with object " stringByAppendingString:[IMAVManagerStateChangedNotification description]]);
if ([IMAVManagerURLToShareChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMAVManagerURLToShareChangedNotification forKey:@"IMAVManagerURLToShareChangedNotification"]; else NSLog([@"Can't initialize IMAVManagerURLToShareChangedNotification with object " stringByAppendingString:[IMAVManagerURLToShareChangedNotification description]]);
if ([IMCapabilityAudioConference isKindOfClass:[NSString class]]) [d setObject:IMCapabilityAudioConference forKey:@"IMCapabilityAudioConference"]; else NSLog([@"Can't initialize IMCapabilityAudioConference with object " stringByAppendingString:[IMCapabilityAudioConference description]]);
if ([IMCapabilityDirectIM isKindOfClass:[NSString class]]) [d setObject:IMCapabilityDirectIM forKey:@"IMCapabilityDirectIM"]; else NSLog([@"Can't initialize IMCapabilityDirectIM with object " stringByAppendingString:[IMCapabilityDirectIM description]]);
if ([IMCapabilityFileSharing isKindOfClass:[NSString class]]) [d setObject:IMCapabilityFileSharing forKey:@"IMCapabilityFileSharing"]; else NSLog([@"Can't initialize IMCapabilityFileSharing with object " stringByAppendingString:[IMCapabilityFileSharing description]]);
if ([IMCapabilityFileTransfer isKindOfClass:[NSString class]]) [d setObject:IMCapabilityFileTransfer forKey:@"IMCapabilityFileTransfer"]; else NSLog([@"Can't initialize IMCapabilityFileTransfer with object " stringByAppendingString:[IMCapabilityFileTransfer description]]);
if ([IMCapabilityText isKindOfClass:[NSString class]]) [d setObject:IMCapabilityText forKey:@"IMCapabilityText"]; else NSLog([@"Can't initialize IMCapabilityText with object " stringByAppendingString:[IMCapabilityText description]]);
if ([IMCapabilityVideoConference isKindOfClass:[NSString class]]) [d setObject:IMCapabilityVideoConference forKey:@"IMCapabilityVideoConference"]; else NSLog([@"Can't initialize IMCapabilityVideoConference with object " stringByAppendingString:[IMCapabilityVideoConference description]]);
if ([IMMyStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMMyStatusChangedNotification forKey:@"IMMyStatusChangedNotification"]; else NSLog([@"Can't initialize IMMyStatusChangedNotification with object " stringByAppendingString:[IMMyStatusChangedNotification description]]);
if ([IMPersonAVBusyKey isKindOfClass:[NSString class]]) [d setObject:IMPersonAVBusyKey forKey:@"IMPersonAVBusyKey"]; else NSLog([@"Can't initialize IMPersonAVBusyKey with object " stringByAppendingString:[IMPersonAVBusyKey description]]);
if ([IMPersonCapabilitiesKey isKindOfClass:[NSString class]]) [d setObject:IMPersonCapabilitiesKey forKey:@"IMPersonCapabilitiesKey"]; else NSLog([@"Can't initialize IMPersonCapabilitiesKey with object " stringByAppendingString:[IMPersonCapabilitiesKey description]]);
if ([IMPersonEmailKey isKindOfClass:[NSString class]]) [d setObject:IMPersonEmailKey forKey:@"IMPersonEmailKey"]; else NSLog([@"Can't initialize IMPersonEmailKey with object " stringByAppendingString:[IMPersonEmailKey description]]);
if ([IMPersonFirstNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonFirstNameKey forKey:@"IMPersonFirstNameKey"]; else NSLog([@"Can't initialize IMPersonFirstNameKey with object " stringByAppendingString:[IMPersonFirstNameKey description]]);
if ([IMPersonIdleSinceKey isKindOfClass:[NSString class]]) [d setObject:IMPersonIdleSinceKey forKey:@"IMPersonIdleSinceKey"]; else NSLog([@"Can't initialize IMPersonIdleSinceKey with object " stringByAppendingString:[IMPersonIdleSinceKey description]]);
if ([IMPersonInfoChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMPersonInfoChangedNotification forKey:@"IMPersonInfoChangedNotification"]; else NSLog([@"Can't initialize IMPersonInfoChangedNotification with object " stringByAppendingString:[IMPersonInfoChangedNotification description]]);
if ([IMPersonLastNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonLastNameKey forKey:@"IMPersonLastNameKey"]; else NSLog([@"Can't initialize IMPersonLastNameKey with object " stringByAppendingString:[IMPersonLastNameKey description]]);
if ([IMPersonPictureDataKey isKindOfClass:[NSString class]]) [d setObject:IMPersonPictureDataKey forKey:@"IMPersonPictureDataKey"]; else NSLog([@"Can't initialize IMPersonPictureDataKey with object " stringByAppendingString:[IMPersonPictureDataKey description]]);
if ([IMPersonScreenNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonScreenNameKey forKey:@"IMPersonScreenNameKey"]; else NSLog([@"Can't initialize IMPersonScreenNameKey with object " stringByAppendingString:[IMPersonScreenNameKey description]]);
if ([IMPersonServiceNameKey isKindOfClass:[NSString class]]) [d setObject:IMPersonServiceNameKey forKey:@"IMPersonServiceNameKey"]; else NSLog([@"Can't initialize IMPersonServiceNameKey with object " stringByAppendingString:[IMPersonServiceNameKey description]]);
if ([IMPersonStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMPersonStatusChangedNotification forKey:@"IMPersonStatusChangedNotification"]; else NSLog([@"Can't initialize IMPersonStatusChangedNotification with object " stringByAppendingString:[IMPersonStatusChangedNotification description]]);
if ([IMPersonStatusKey isKindOfClass:[NSString class]]) [d setObject:IMPersonStatusKey forKey:@"IMPersonStatusKey"]; else NSLog([@"Can't initialize IMPersonStatusKey with object " stringByAppendingString:[IMPersonStatusKey description]]);
if ([IMPersonStatusMessageKey isKindOfClass:[NSString class]]) [d setObject:IMPersonStatusMessageKey forKey:@"IMPersonStatusMessageKey"]; else NSLog([@"Can't initialize IMPersonStatusMessageKey with object " stringByAppendingString:[IMPersonStatusMessageKey description]]);
if ([IMServiceStatusChangedNotification isKindOfClass:[NSString class]]) [d setObject:IMServiceStatusChangedNotification forKey:@"IMServiceStatusChangedNotification"]; else NSLog([@"Can't initialize IMServiceStatusChangedNotification with object " stringByAppendingString:[IMServiceStatusChangedNotification description]]);
if ([IMStatusImagesChangedAppearanceNotification isKindOfClass:[NSString class]]) [d setObject:IMStatusImagesChangedAppearanceNotification forKey:@"IMStatusImagesChangedAppearanceNotification"]; else NSLog([@"Can't initialize IMStatusImagesChangedAppearanceNotification with object " stringByAppendingString:[IMStatusImagesChangedAppearanceNotification description]]);
[d setObject:[Number numberWithDouble:IMAVInactive] forKey:@"IMAVInactive"];
[d setObject:[Number numberWithDouble:IMAVPending] forKey:@"IMAVPending"];
[d setObject:[Number numberWithDouble:IMAVRequested] forKey:@"IMAVRequested"];
[d setObject:[Number numberWithDouble:IMAVRunning] forKey:@"IMAVRunning"];
[d setObject:[Number numberWithDouble:IMAVShuttingDown] forKey:@"IMAVShuttingDown"];
[d setObject:[Number numberWithDouble:IMAVStartingUp] forKey:@"IMAVStartingUp"];
[d setObject:[Number numberWithDouble:IMPersonStatusAvailable] forKey:@"IMPersonStatusAvailable"];
[d setObject:[Number numberWithDouble:IMPersonStatusAway] forKey:@"IMPersonStatusAway"];
[d setObject:[Number numberWithDouble:IMPersonStatusIdle] forKey:@"IMPersonStatusIdle"];
[d setObject:[Number numberWithDouble:IMPersonStatusNoStatus] forKey:@"IMPersonStatusNoStatus"];
[d setObject:[Number numberWithDouble:IMPersonStatusOffline] forKey:@"IMPersonStatusOffline"];
[d setObject:[Number numberWithDouble:IMPersonStatusUnknown] forKey:@"IMPersonStatusUnknown"];
[d setObject:[Number numberWithDouble:IMServiceStatusDisconnected] forKey:@"IMServiceStatusDisconnected"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggedIn] forKey:@"IMServiceStatusLoggedIn"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggedOut] forKey:@"IMServiceStatusLoggedOut"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggingIn] forKey:@"IMServiceStatusLoggingIn"];
[d setObject:[Number numberWithDouble:IMServiceStatusLoggingOut] forKey:@"IMServiceStatusLoggingOut"];
[d setObject:[Number numberWithDouble:IMVideoOptimizationDefault] forKey:@"IMVideoOptimizationDefault"];
[d setObject:[Number numberWithDouble:IMVideoOptimizationReplacement] forKey:@"IMVideoOptimizationReplacement"];
[d setObject:[Number numberWithDouble:IMVideoOptimizationStills] forKey:@"IMVideoOptimizationStills"];
[d setObject:(NSString *)kOBEXHeaderIDKeyAppParameters forKey:@"kOBEXHeaderIDKeyAppParameters"];
[d setObject:(NSString *)kOBEXHeaderIDKeyAuthorizationChallenge forKey:@"kOBEXHeaderIDKeyAuthorizationChallenge"];
[d setObject:(NSString *)kOBEXHeaderIDKeyAuthorizationResponse forKey:@"kOBEXHeaderIDKeyAuthorizationResponse"];
[d setObject:(NSString *)kOBEXHeaderIDKeyBody forKey:@"kOBEXHeaderIDKeyBody"];
[d setObject:(NSString *)kOBEXHeaderIDKeyByteSequence forKey:@"kOBEXHeaderIDKeyByteSequence"];
[d setObject:(NSString *)kOBEXHeaderIDKeyConnectionID forKey:@"kOBEXHeaderIDKeyConnectionID"];
[d setObject:(NSString *)kOBEXHeaderIDKeyCount forKey:@"kOBEXHeaderIDKeyCount"];
[d setObject:(NSString *)kOBEXHeaderIDKeyDescription forKey:@"kOBEXHeaderIDKeyDescription"];
[d setObject:(NSString *)kOBEXHeaderIDKeyEndOfBody forKey:@"kOBEXHeaderIDKeyEndOfBody"];
[d setObject:(NSString *)kOBEXHeaderIDKeyHTTP forKey:@"kOBEXHeaderIDKeyHTTP"];
[d setObject:(NSString *)kOBEXHeaderIDKeyLength forKey:@"kOBEXHeaderIDKeyLength"];
[d setObject:(NSString *)kOBEXHeaderIDKeyName forKey:@"kOBEXHeaderIDKeyName"];
[d setObject:(NSString *)kOBEXHeaderIDKeyObjectClass forKey:@"kOBEXHeaderIDKeyObjectClass"];
[d setObject:(NSString *)kOBEXHeaderIDKeyTarget forKey:@"kOBEXHeaderIDKeyTarget"];
[d setObject:(NSString *)kOBEXHeaderIDKeyTime4Byte forKey:@"kOBEXHeaderIDKeyTime4Byte"];
[d setObject:(NSString *)kOBEXHeaderIDKeyTimeISO forKey:@"kOBEXHeaderIDKeyTimeISO"];
[d setObject:(NSString *)kOBEXHeaderIDKeyType forKey:@"kOBEXHeaderIDKeyType"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknown1ByteQuantity forKey:@"kOBEXHeaderIDKeyUnknown1ByteQuantity"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknown4ByteQuantity forKey:@"kOBEXHeaderIDKeyUnknown4ByteQuantity"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknownByteSequence forKey:@"kOBEXHeaderIDKeyUnknownByteSequence"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknownUnicodeText forKey:@"kOBEXHeaderIDKeyUnknownUnicodeText"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUserDefined forKey:@"kOBEXHeaderIDKeyUserDefined"];
[d setObject:(NSString *)kOBEXHeaderIDKeyWho forKey:@"kOBEXHeaderIDKeyWho"];
[d setObject:kBluetoothTargetDoesNotRespondToCallbackExceptionName forKey:@"kBluetoothTargetDoesNotRespondToCallbackExceptionName"];
[d setObject:kIOBluetoothDeviceInquiryInfoChangedNotification forKey:@"kIOBluetoothDeviceInquiryInfoChangedNotification"];
[d setObject:kIOBluetoothDeviceNameChangedNotification forKey:@"kIOBluetoothDeviceNameChangedNotification"];
[d setObject:kIOBluetoothDeviceNotificationNameConnected forKey:@"kIOBluetoothDeviceNotificationNameConnected"];
[d setObject:kIOBluetoothDeviceNotificationNameDisconnected forKey:@"kIOBluetoothDeviceNotificationNameDisconnected"];
[d setObject:kIOBluetoothDeviceServicesChangedNotification forKey:@"kIOBluetoothDeviceServicesChangedNotification"];
[d setObject:kIOBluetoothL2CAPChannelDesiredOutgoingMTU forKey:@"kIOBluetoothL2CAPChannelDesiredOutgoingMTU"];
[d setObject:kIOBluetoothL2CAPChannelMaxAllowedIncomingMTU forKey:@"kIOBluetoothL2CAPChannelMaxAllowedIncomingMTU"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_0] forKey:@"BLUETOOTH_VERSION_1_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_0_0] forKey:@"BLUETOOTH_VERSION_1_0_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_0_1] forKey:@"BLUETOOTH_VERSION_1_0_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_1] forKey:@"BLUETOOTH_VERSION_1_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_1_0] forKey:@"BLUETOOTH_VERSION_1_1_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_2] forKey:@"BLUETOOTH_VERSION_1_2"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_2_0] forKey:@"BLUETOOTH_VERSION_1_2_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_2_1] forKey:@"BLUETOOTH_VERSION_1_2_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_3] forKey:@"BLUETOOTH_VERSION_1_3"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_3_0] forKey:@"BLUETOOTH_VERSION_1_3_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_3_1] forKey:@"BLUETOOTH_VERSION_1_3_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_6] forKey:@"BLUETOOTH_VERSION_1_6"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_6_0] forKey:@"BLUETOOTH_VERSION_1_6_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_6_3] forKey:@"BLUETOOTH_VERSION_1_6_3"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_2_0] forKey:@"BLUETOOTH_VERSION_2_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_2_0_0] forKey:@"BLUETOOTH_VERSION_2_0_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_CURRENT] forKey:@"BLUETOOTH_VERSION_CURRENT"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_MAX_ALLOWED] forKey:@"BLUETOOTH_VERSION_MAX_ALLOWED"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_MIN_REQUIRED] forKey:@"BLUETOOTH_VERSION_MIN_REQUIRED"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusFramingError] forKey:@"BluetoothRFCOMMLineStatusFramingError"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusNoError] forKey:@"BluetoothRFCOMMLineStatusNoError"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusOverrunError] forKey:@"BluetoothRFCOMMLineStatusOverrunError"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusParityError] forKey:@"BluetoothRFCOMMLineStatusParityError"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_1] forKey:@"MAC_OS_X_VERSION_10_2_1"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_2] forKey:@"MAC_OS_X_VERSION_10_2_2"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_3] forKey:@"MAC_OS_X_VERSION_10_2_3"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_4] forKey:@"MAC_OS_X_VERSION_10_2_4"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_5] forKey:@"MAC_OS_X_VERSION_10_2_5"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_6] forKey:@"MAC_OS_X_VERSION_10_2_6"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_7] forKey:@"MAC_OS_X_VERSION_10_2_7"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_MIN_REQUIRED] forKey:@"MAC_OS_X_VERSION_MIN_REQUIRED"];
[d setObject:[Number numberWithDouble:kAuthenticationDisabled] forKey:@"kAuthenticationDisabled"];
[d setObject:[Number numberWithDouble:kAuthenticationEnabled] forKey:@"kAuthenticationEnabled"];
[d setObject:[Number numberWithDouble:kBluetoothACLConnection] forKey:@"kBluetoothACLConnection"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelL2CAPContinue] forKey:@"kBluetoothACLLogicalChannelL2CAPContinue"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelL2CAPStart] forKey:@"kBluetoothACLLogicalChannelL2CAPStart"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelLMP] forKey:@"kBluetoothACLLogicalChannelLMP"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelReserved] forKey:@"kBluetoothACLLogicalChannelReserved"];
[d setObject:[Number numberWithDouble:kBluetoothAllowRoleSwitch] forKey:@"kBluetoothAllowRoleSwitch"];
[d setObject:[Number numberWithDouble:kBluetoothAuthenticationRequirementsMITMProtectionNotRequired] forKey:@"kBluetoothAuthenticationRequirementsMITMProtectionNotRequired"];
[d setObject:[Number numberWithDouble:kBluetoothAuthenticationRequirementsMITMProtectionRequired] forKey:@"kBluetoothAuthenticationRequirementsMITMProtectionRequired"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeDisplayOnly] forKey:@"kBluetoothCapabilityTypeDisplayOnly"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeDisplayYesNo] forKey:@"kBluetoothCapabilityTypeDisplayYesNo"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeKeyboardOnly] forKey:@"kBluetoothCapabilityTypeKeyboardOnly"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeNoInputNoOutput] forKey:@"kBluetoothCapabilityTypeNoInputNoOutput"];
[d setObject:[Number numberWithDouble:kBluetoothConnectionHandleNone] forKey:@"kBluetoothConnectionHandleNone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorAny] forKey:@"kBluetoothDeviceClassMajorAny"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorAudio] forKey:@"kBluetoothDeviceClassMajorAudio"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorComputer] forKey:@"kBluetoothDeviceClassMajorComputer"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorEnd] forKey:@"kBluetoothDeviceClassMajorEnd"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorImaging] forKey:@"kBluetoothDeviceClassMajorImaging"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorLANAccessPoint] forKey:@"kBluetoothDeviceClassMajorLANAccessPoint"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorMiscellaneous] forKey:@"kBluetoothDeviceClassMajorMiscellaneous"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorNone] forKey:@"kBluetoothDeviceClassMajorNone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorPeripheral] forKey:@"kBluetoothDeviceClassMajorPeripheral"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorPhone] forKey:@"kBluetoothDeviceClassMajorPhone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorUnclassified] forKey:@"kBluetoothDeviceClassMajorUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAny] forKey:@"kBluetoothDeviceClassMinorAny"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioCamcorder] forKey:@"kBluetoothDeviceClassMinorAudioCamcorder"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioCar] forKey:@"kBluetoothDeviceClassMinorAudioCar"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioGamingToy] forKey:@"kBluetoothDeviceClassMinorAudioGamingToy"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHandsFree] forKey:@"kBluetoothDeviceClassMinorAudioHandsFree"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHeadphones] forKey:@"kBluetoothDeviceClassMinorAudioHeadphones"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHeadset] forKey:@"kBluetoothDeviceClassMinorAudioHeadset"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHiFi] forKey:@"kBluetoothDeviceClassMinorAudioHiFi"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioLoudspeaker] forKey:@"kBluetoothDeviceClassMinorAudioLoudspeaker"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioMicrophone] forKey:@"kBluetoothDeviceClassMinorAudioMicrophone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioPortable] forKey:@"kBluetoothDeviceClassMinorAudioPortable"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioReserved1] forKey:@"kBluetoothDeviceClassMinorAudioReserved1"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioReserved2] forKey:@"kBluetoothDeviceClassMinorAudioReserved2"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioSetTopBox] forKey:@"kBluetoothDeviceClassMinorAudioSetTopBox"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioUnclassified] forKey:@"kBluetoothDeviceClassMinorAudioUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVCR] forKey:@"kBluetoothDeviceClassMinorAudioVCR"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoCamera] forKey:@"kBluetoothDeviceClassMinorAudioVideoCamera"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoConferencing] forKey:@"kBluetoothDeviceClassMinorAudioVideoConferencing"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoDisplayAndLoudspeaker] forKey:@"kBluetoothDeviceClassMinorAudioVideoDisplayAndLoudspeaker"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoMonitor] forKey:@"kBluetoothDeviceClassMinorAudioVideoMonitor"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerDesktopWorkstation] forKey:@"kBluetoothDeviceClassMinorComputerDesktopWorkstation"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerHandheld] forKey:@"kBluetoothDeviceClassMinorComputerHandheld"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerLaptop] forKey:@"kBluetoothDeviceClassMinorComputerLaptop"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerPalmSized] forKey:@"kBluetoothDeviceClassMinorComputerPalmSized"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerServer] forKey:@"kBluetoothDeviceClassMinorComputerServer"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerUnclassified] forKey:@"kBluetoothDeviceClassMinorComputerUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerWearable] forKey:@"kBluetoothDeviceClassMinorComputerWearable"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorEnd] forKey:@"kBluetoothDeviceClassMinorEnd"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Camera] forKey:@"kBluetoothDeviceClassMinorImaging1Camera"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Display] forKey:@"kBluetoothDeviceClassMinorImaging1Display"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Printer] forKey:@"kBluetoothDeviceClassMinorImaging1Printer"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Scanner] forKey:@"kBluetoothDeviceClassMinorImaging1Scanner"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging2Unclassified] forKey:@"kBluetoothDeviceClassMinorImaging2Unclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorNone] forKey:@"kBluetoothDeviceClassMinorNone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral1Combo] forKey:@"kBluetoothDeviceClassMinorPeripheral1Combo"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral1Keyboard] forKey:@"kBluetoothDeviceClassMinorPeripheral1Keyboard"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral1Pointing] forKey:@"kBluetoothDeviceClassMinorPeripheral1Pointing"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2Gamepad] forKey:@"kBluetoothDeviceClassMinorPeripheral2Gamepad"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2Joystick] forKey:@"kBluetoothDeviceClassMinorPeripheral2Joystick"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2RemoteControl] forKey:@"kBluetoothDeviceClassMinorPeripheral2RemoteControl"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2SensingDevice] forKey:@"kBluetoothDeviceClassMinorPeripheral2SensingDevice"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2Unclassified] forKey:@"kBluetoothDeviceClassMinorPeripheral2Unclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneCellular] forKey:@"kBluetoothDeviceClassMinorPhoneCellular"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneCommonISDNAccess] forKey:@"kBluetoothDeviceClassMinorPhoneCommonISDNAccess"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneCordless] forKey:@"kBluetoothDeviceClassMinorPhoneCordless"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneSmartPhone] forKey:@"kBluetoothDeviceClassMinorPhoneSmartPhone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneUnclassified] forKey:@"kBluetoothDeviceClassMinorPhoneUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneWiredModemOrVoiceGateway] forKey:@"kBluetoothDeviceClassMinorPhoneWiredModemOrVoiceGateway"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceNameMaxLength] forKey:@"kBluetoothDeviceNameMaxLength"];
[d setObject:[Number numberWithDouble:kBluetoothDontAllowRoleSwitch] forKey:@"kBluetoothDontAllowRoleSwitch"];
[d setObject:[Number numberWithDouble:kBluetoothESCOConnection] forKey:@"kBluetoothESCOConnection"];
[d setObject:[Number numberWithDouble:kBluetoothEncryptionEnableOff] forKey:@"kBluetoothEncryptionEnableOff"];
[d setObject:[Number numberWithDouble:kBluetoothEncryptionEnableOn] forKey:@"kBluetoothEncryptionEnableOn"];
[d setObject:[Number numberWithDouble:kBluetoothFeature3SlotEnhancedDataRateACLPackets] forKey:@"kBluetoothFeature3SlotEnhancedDataRateACLPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeature5SlotEnhancedDataRateACLPackets] forKey:@"kBluetoothFeature5SlotEnhancedDataRateACLPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHCapableMaster] forKey:@"kBluetoothFeatureAFHCapableMaster"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHCapableSlave] forKey:@"kBluetoothFeatureAFHCapableSlave"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHClassificationMaster] forKey:@"kBluetoothFeatureAFHClassificationMaster"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHClassificationSlave] forKey:@"kBluetoothFeatureAFHClassificationSlave"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureALawLog] forKey:@"kBluetoothFeatureALawLog"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAbsenceMasks] forKey:@"kBluetoothFeatureAbsenceMasks"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAliasAuhentication] forKey:@"kBluetoothFeatureAliasAuhentication"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAnonymityMode] forKey:@"kBluetoothFeatureAnonymityMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureBroadcastEncryption] forKey:@"kBluetoothFeatureBroadcastEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureCVSD] forKey:@"kBluetoothFeatureCVSD"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureChannelQuality] forKey:@"kBluetoothFeatureChannelQuality"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEV4Packets] forKey:@"kBluetoothFeatureEV4Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEV5Packets] forKey:@"kBluetoothFeatureEV5Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEncapsulatedPDU] forKey:@"kBluetoothFeatureEncapsulatedPDU"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEncryption] forKey:@"kBluetoothFeatureEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateACL2MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateACL2MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateACL3MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateACL3MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateeSCO2MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateeSCO2MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateeSCO3MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateeSCO3MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedInquiryScan] forKey:@"kBluetoothFeatureEnhancedInquiryScan"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureErroneousDataReporting] forKey:@"kBluetoothFeatureErroneousDataReporting"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureExtendedFeatures] forKey:@"kBluetoothFeatureExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureExtendedInquiryResponse] forKey:@"kBluetoothFeatureExtendedInquiryResponse"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureExtendedSCOLink] forKey:@"kBluetoothFeatureExtendedSCOLink"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFiveSlotPackets] forKey:@"kBluetoothFeatureFiveSlotPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFlowControlLagBit0] forKey:@"kBluetoothFeatureFlowControlLagBit0"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFlowControlLagBit1] forKey:@"kBluetoothFeatureFlowControlLagBit1"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFlowControlLagBit2] forKey:@"kBluetoothFeatureFlowControlLagBit2"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureHV2Packets] forKey:@"kBluetoothFeatureHV2Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureHV3Packets] forKey:@"kBluetoothFeatureHV3Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureHoldMode] forKey:@"kBluetoothFeatureHoldMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureInquiryTransmissionPowerLevel] forKey:@"kBluetoothFeatureInquiryTransmissionPowerLevel"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureInterlacedInquiryScan] forKey:@"kBluetoothFeatureInterlacedInquiryScan"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureInterlacedPageScan] forKey:@"kBluetoothFeatureInterlacedPageScan"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureLinkSupervisionTimeoutChangedEvent] forKey:@"kBluetoothFeatureLinkSupervisionTimeoutChangedEvent"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureNonFlushablePacketBoundaryFlag] forKey:@"kBluetoothFeatureNonFlushablePacketBoundaryFlag"];
[d setObject:[Number numberWithDouble:kBluetoothFeaturePagingScheme] forKey:@"kBluetoothFeaturePagingScheme"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureParkMode] forKey:@"kBluetoothFeatureParkMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeaturePauseEncryption] forKey:@"kBluetoothFeaturePauseEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothFeaturePowerControl] forKey:@"kBluetoothFeaturePowerControl"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureRSSI] forKey:@"kBluetoothFeatureRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureRSSIWithInquiryResult] forKey:@"kBluetoothFeatureRSSIWithInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureReserved1] forKey:@"kBluetoothFeatureReserved1"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureReserved2] forKey:@"kBluetoothFeatureReserved2"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSCOLink] forKey:@"kBluetoothFeatureSCOLink"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureScatterMode] forKey:@"kBluetoothFeatureScatterMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSecureSimplePairing] forKey:@"kBluetoothFeatureSecureSimplePairing"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSlotOffset] forKey:@"kBluetoothFeatureSlotOffset"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSniffMode] forKey:@"kBluetoothFeatureSniffMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSwitchRoles] forKey:@"kBluetoothFeatureSwitchRoles"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureThreeSlotPackets] forKey:@"kBluetoothFeatureThreeSlotPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureTimingAccuracy] forKey:@"kBluetoothFeatureTimingAccuracy"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureTransparentSCOData] forKey:@"kBluetoothFeatureTransparentSCOData"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureULawLog] forKey:@"kBluetoothFeatureULawLog"];
[d setObject:[Number numberWithDouble:kBluetoothGeneralInquiryAccessCodeIndex] forKey:@"kBluetoothGeneralInquiryAccessCodeIndex"];
[d setObject:[Number numberWithDouble:kBluetoothGeneralInquiryAccessCodeLAPValue] forKey:@"kBluetoothGeneralInquiryAccessCodeLAPValue"];
[d setObject:[Number numberWithDouble:kBluetoothHCIAddHIDDevice] forKey:@"kBluetoothHCIAddHIDDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAcceptConnectionRequest] forKey:@"kBluetoothHCICommandAcceptConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAcceptSniffRequest] forKey:@"kBluetoothHCICommandAcceptSniffRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAcceptSynchronousConnectionRequest] forKey:@"kBluetoothHCICommandAcceptSynchronousConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAddSCOConnection] forKey:@"kBluetoothHCICommandAddSCOConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAuthenticationRequested] forKey:@"kBluetoothHCICommandAuthenticationRequested"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandChangeConnectionLinkKey] forKey:@"kBluetoothHCICommandChangeConnectionLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandChangeConnectionPacketType] forKey:@"kBluetoothHCICommandChangeConnectionPacketType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandChangeLocalName] forKey:@"kBluetoothHCICommandChangeLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandCreateConnection] forKey:@"kBluetoothHCICommandCreateConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandCreateNewUnitKey] forKey:@"kBluetoothHCICommandCreateNewUnitKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandDeletePersistentSniffInterval] forKey:@"kBluetoothHCICommandDeletePersistentSniffInterval"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandDeleteStoredLinkKey] forKey:@"kBluetoothHCICommandDeleteStoredLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandDisconnect] forKey:@"kBluetoothHCICommandDisconnect"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnableDeviceUnderTestMode] forKey:@"kBluetoothHCICommandEnableDeviceUnderTestMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnableHIDEmulation] forKey:@"kBluetoothHCICommandEnableHIDEmulation"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnableRadio] forKey:@"kBluetoothHCICommandEnableRadio"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnhancedFlush] forKey:@"kBluetoothHCICommandEnhancedFlush"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandExitParkMode] forKey:@"kBluetoothHCICommandExitParkMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandExitPeriodicInquiryMode] forKey:@"kBluetoothHCICommandExitPeriodicInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandExitSniffMode] forKey:@"kBluetoothHCICommandExitSniffMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandFlowSpecification] forKey:@"kBluetoothHCICommandFlowSpecification"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandFlush] forKey:@"kBluetoothHCICommandFlush"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGetLinkQuality] forKey:@"kBluetoothHCICommandGetLinkQuality"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupHostController] forKey:@"kBluetoothHCICommandGroupHostController"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupInformational] forKey:@"kBluetoothHCICommandGroupInformational"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupLinkControl] forKey:@"kBluetoothHCICommandGroupLinkControl"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupLinkPolicy] forKey:@"kBluetoothHCICommandGroupLinkPolicy"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupLogoTesting] forKey:@"kBluetoothHCICommandGroupLogoTesting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupMax] forKey:@"kBluetoothHCICommandGroupMax"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupNoOp] forKey:@"kBluetoothHCICommandGroupNoOp"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupStatus] forKey:@"kBluetoothHCICommandGroupStatus"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupTesting] forKey:@"kBluetoothHCICommandGroupTesting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupVendorSpecific] forKey:@"kBluetoothHCICommandGroupVendorSpecific"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandHoldMode] forKey:@"kBluetoothHCICommandHoldMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandHostBufferSize] forKey:@"kBluetoothHCICommandHostBufferSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandHostNumberOfCompletedPackets] forKey:@"kBluetoothHCICommandHostNumberOfCompletedPackets"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandIOCapabilityResponse] forKey:@"kBluetoothHCICommandIOCapabilityResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandInquiry] forKey:@"kBluetoothHCICommandInquiry"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandInquiryCancel] forKey:@"kBluetoothHCICommandInquiryCancel"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandInvalidateFlashAndReboot] forKey:@"kBluetoothHCICommandInvalidateFlashAndReboot"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandLinkKeyRequestNegativeReply] forKey:@"kBluetoothHCICommandLinkKeyRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandLinkKeyRequestReply] forKey:@"kBluetoothHCICommandLinkKeyRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandMasterLinkKey] forKey:@"kBluetoothHCICommandMasterLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandMax] forKey:@"kBluetoothHCICommandMax"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandNoOp] forKey:@"kBluetoothHCICommandNoOp"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPINCodeRequestNegativeReply] forKey:@"kBluetoothHCICommandPINCodeRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPINCodeRequestReply] forKey:@"kBluetoothHCICommandPINCodeRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPacketHeaderSize] forKey:@"kBluetoothHCICommandPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPacketMaxDataSize] forKey:@"kBluetoothHCICommandPacketMaxDataSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandParkMode] forKey:@"kBluetoothHCICommandParkMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPeriodicInquiryMode] forKey:@"kBluetoothHCICommandPeriodicInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandQoSSetup] forKey:@"kBluetoothHCICommandQoSSetup"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAFHChannelAssessmentMode] forKey:@"kBluetoothHCICommandReadAFHChannelAssessmentMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAFHMappings] forKey:@"kBluetoothHCICommandReadAFHMappings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAuthenticationEnable] forKey:@"kBluetoothHCICommandReadAuthenticationEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAutomaticFlushTimeout] forKey:@"kBluetoothHCICommandReadAutomaticFlushTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadBufferSize] forKey:@"kBluetoothHCICommandReadBufferSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadClassOfDevice] forKey:@"kBluetoothHCICommandReadClassOfDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadClock] forKey:@"kBluetoothHCICommandReadClock"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadClockOffset] forKey:@"kBluetoothHCICommandReadClockOffset"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadConnectionAcceptTimeout] forKey:@"kBluetoothHCICommandReadConnectionAcceptTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadCountryCode] forKey:@"kBluetoothHCICommandReadCountryCode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadCurrentIACLAP] forKey:@"kBluetoothHCICommandReadCurrentIACLAP"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadDefaultErroneousDataReporting] forKey:@"kBluetoothHCICommandReadDefaultErroneousDataReporting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadDefaultLinkPolicySettings] forKey:@"kBluetoothHCICommandReadDefaultLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadDeviceAddress] forKey:@"kBluetoothHCICommandReadDeviceAddress"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadEncryptionMode] forKey:@"kBluetoothHCICommandReadEncryptionMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadExtendedInquiryResponse] forKey:@"kBluetoothHCICommandReadExtendedInquiryResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadFailedContactCounter] forKey:@"kBluetoothHCICommandReadFailedContactCounter"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadHoldModeActivity] forKey:@"kBluetoothHCICommandReadHoldModeActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryMode] forKey:@"kBluetoothHCICommandReadInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryResponseTransmitPower] forKey:@"kBluetoothHCICommandReadInquiryResponseTransmitPower"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryScanActivity] forKey:@"kBluetoothHCICommandReadInquiryScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryScanType] forKey:@"kBluetoothHCICommandReadInquiryScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLMPHandle] forKey:@"kBluetoothHCICommandReadLMPHandle"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLinkPolicySettings] forKey:@"kBluetoothHCICommandReadLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLinkSupervisionTimeout] forKey:@"kBluetoothHCICommandReadLinkSupervisionTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalExtendedFeatures] forKey:@"kBluetoothHCICommandReadLocalExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalName] forKey:@"kBluetoothHCICommandReadLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalOOBData] forKey:@"kBluetoothHCICommandReadLocalOOBData"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalSupportedCommands] forKey:@"kBluetoothHCICommandReadLocalSupportedCommands"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalSupportedFeatures] forKey:@"kBluetoothHCICommandReadLocalSupportedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalVersionInformation] forKey:@"kBluetoothHCICommandReadLocalVersionInformation"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLoopbackMode] forKey:@"kBluetoothHCICommandReadLoopbackMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadNumberOfBroadcastRetransmissions] forKey:@"kBluetoothHCICommandReadNumberOfBroadcastRetransmissions"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadNumberOfSupportedIAC] forKey:@"kBluetoothHCICommandReadNumberOfSupportedIAC"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPINType] forKey:@"kBluetoothHCICommandReadPINType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanActivity] forKey:@"kBluetoothHCICommandReadPageScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanMode] forKey:@"kBluetoothHCICommandReadPageScanMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanPeriodMode] forKey:@"kBluetoothHCICommandReadPageScanPeriodMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanType] forKey:@"kBluetoothHCICommandReadPageScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageTimeout] forKey:@"kBluetoothHCICommandReadPageTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPersistentSniffInterval] forKey:@"kBluetoothHCICommandReadPersistentSniffInterval"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadRSSI] forKey:@"kBluetoothHCICommandReadRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadRemoteSupportedFeatures] forKey:@"kBluetoothHCICommandReadRemoteSupportedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadRemoteVersionInformation] forKey:@"kBluetoothHCICommandReadRemoteVersionInformation"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadSCOFlowControlEnable] forKey:@"kBluetoothHCICommandReadSCOFlowControlEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadScanEnable] forKey:@"kBluetoothHCICommandReadScanEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadSimplePairingMode] forKey:@"kBluetoothHCICommandReadSimplePairingMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadStoredLinkKey] forKey:@"kBluetoothHCICommandReadStoredLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadTransmitPowerLevel] forKey:@"kBluetoothHCICommandReadTransmitPowerLevel"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadVoiceSetting] forKey:@"kBluetoothHCICommandReadVoiceSetting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRejectConnectionRequest] forKey:@"kBluetoothHCICommandRejectConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRejectSniffRequest] forKey:@"kBluetoothHCICommandRejectSniffRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRejectSynchronousConnectionRequest] forKey:@"kBluetoothHCICommandRejectSynchronousConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRemoteNameRequest] forKey:@"kBluetoothHCICommandRemoteNameRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRemoteOOBDataRequestNegativeReply] forKey:@"kBluetoothHCICommandRemoteOOBDataRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRemoteOOBDataRequestReply] forKey:@"kBluetoothHCICommandRemoteOOBDataRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReset] forKey:@"kBluetoothHCICommandReset"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandResetFailedContactCounter] forKey:@"kBluetoothHCICommandResetFailedContactCounter"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRoleDiscovery] forKey:@"kBluetoothHCICommandRoleDiscovery"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSendKeypressNotification] forKey:@"kBluetoothHCICommandSendKeypressNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetAFHClassification] forKey:@"kBluetoothHCICommandSetAFHClassification"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetConnectionEncryption] forKey:@"kBluetoothHCICommandSetConnectionEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetEventFilter] forKey:@"kBluetoothHCICommandSetEventFilter"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetEventMask] forKey:@"kBluetoothHCICommandSetEventMask"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetHostControllerToHostFlowControl] forKey:@"kBluetoothHCICommandSetHostControllerToHostFlowControl"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetMaxPower] forKey:@"kBluetoothHCICommandSetMaxPower"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetupSynchronousConnection] forKey:@"kBluetoothHCICommandSetupSynchronousConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSniffMode] forKey:@"kBluetoothHCICommandSniffMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSniffSubrating] forKey:@"kBluetoothHCICommandSniffSubrating"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSwitchRole] forKey:@"kBluetoothHCICommandSwitchRole"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserConfirmationRequestNegativeReply] forKey:@"kBluetoothHCICommandUserConfirmationRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserConfirmationRequestReply] forKey:@"kBluetoothHCICommandUserConfirmationRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserPasskeyRequestNegativeReply] forKey:@"kBluetoothHCICommandUserPasskeyRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserPasskeyRequestReply] forKey:@"kBluetoothHCICommandUserPasskeyRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteAFHChannelAssessmentMode] forKey:@"kBluetoothHCICommandWriteAFHChannelAssessmentMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteAuthenticationEnable] forKey:@"kBluetoothHCICommandWriteAuthenticationEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteAutomaticFlushTimeout] forKey:@"kBluetoothHCICommandWriteAutomaticFlushTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteClassOfDevice] forKey:@"kBluetoothHCICommandWriteClassOfDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteConnectionAcceptTimeout] forKey:@"kBluetoothHCICommandWriteConnectionAcceptTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteCurrentIACLAP] forKey:@"kBluetoothHCICommandWriteCurrentIACLAP"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteDefaultErroneousDataReporting] forKey:@"kBluetoothHCICommandWriteDefaultErroneousDataReporting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteDefaultLinkPolicySettings] forKey:@"kBluetoothHCICommandWriteDefaultLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteDeviceAddress] forKey:@"kBluetoothHCICommandWriteDeviceAddress"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteEncryptionMode] forKey:@"kBluetoothHCICommandWriteEncryptionMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteExtendedInquiryResponse] forKey:@"kBluetoothHCICommandWriteExtendedInquiryResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteHoldModeActivity] forKey:@"kBluetoothHCICommandWriteHoldModeActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteHoppingChannels] forKey:@"kBluetoothHCICommandWriteHoppingChannels"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryMode] forKey:@"kBluetoothHCICommandWriteInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryResponseTransmitPower] forKey:@"kBluetoothHCICommandWriteInquiryResponseTransmitPower"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryScanActivity] forKey:@"kBluetoothHCICommandWriteInquiryScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryScanType] forKey:@"kBluetoothHCICommandWriteInquiryScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteLinkPolicySettings] forKey:@"kBluetoothHCICommandWriteLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteLinkSupervisionTimeout] forKey:@"kBluetoothHCICommandWriteLinkSupervisionTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteLoopbackMode] forKey:@"kBluetoothHCICommandWriteLoopbackMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteNumberOfBroadcastRetransmissions] forKey:@"kBluetoothHCICommandWriteNumberOfBroadcastRetransmissions"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePINType] forKey:@"kBluetoothHCICommandWritePINType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanActivity] forKey:@"kBluetoothHCICommandWritePageScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanMode] forKey:@"kBluetoothHCICommandWritePageScanMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanPeriodMode] forKey:@"kBluetoothHCICommandWritePageScanPeriodMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanType] forKey:@"kBluetoothHCICommandWritePageScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageTimeout] forKey:@"kBluetoothHCICommandWritePageTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePersistentSniffInterval] forKey:@"kBluetoothHCICommandWritePersistentSniffInterval"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteSCOFlowControlEnable] forKey:@"kBluetoothHCICommandWriteSCOFlowControlEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteScanEnable] forKey:@"kBluetoothHCICommandWriteScanEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteSimplePairingDebugMode] forKey:@"kBluetoothHCICommandWriteSimplePairingDebugMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteSimplePairingMode] forKey:@"kBluetoothHCICommandWriteSimplePairingMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteStoredLinkKey] forKey:@"kBluetoothHCICommandWriteStoredLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteVoiceSetting] forKey:@"kBluetoothHCICommandWriteVoiceSetting"];
[d setObject:[Number numberWithDouble:kBluetoothHCIDataPacketHeaderSize] forKey:@"kBluetoothHCIDataPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIDataPacketMaxDataSize] forKey:@"kBluetoothHCIDataPacketMaxDataSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorACLConnectionAlreadyExists] forKey:@"kBluetoothHCIErrorACLConnectionAlreadyExists"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorAuthenticationFailure] forKey:@"kBluetoothHCIErrorAuthenticationFailure"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorChannelClassificationNotSupported] forKey:@"kBluetoothHCIErrorChannelClassificationNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorCommandDisallowed] forKey:@"kBluetoothHCIErrorCommandDisallowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorConnectionTerminatedByLocalHost] forKey:@"kBluetoothHCIErrorConnectionTerminatedByLocalHost"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorConnectionTimeout] forKey:@"kBluetoothHCIErrorConnectionTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorDifferentTransactionCollision] forKey:@"kBluetoothHCIErrorDifferentTransactionCollision"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorEncryptionModeNotAcceptable] forKey:@"kBluetoothHCIErrorEncryptionModeNotAcceptable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorExtendedInquiryResponseTooLarge] forKey:@"kBluetoothHCIErrorExtendedInquiryResponseTooLarge"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHardwareFailure] forKey:@"kBluetoothHCIErrorHardwareFailure"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedLimitedResources] forKey:@"kBluetoothHCIErrorHostRejectedLimitedResources"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedRemoteDeviceIsPersonal] forKey:@"kBluetoothHCIErrorHostRejectedRemoteDeviceIsPersonal"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedSecurityReasons] forKey:@"kBluetoothHCIErrorHostRejectedSecurityReasons"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedUnacceptableDeviceAddress] forKey:@"kBluetoothHCIErrorHostRejectedUnacceptableDeviceAddress"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostTimeout] forKey:@"kBluetoothHCIErrorHostTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInstantPassed] forKey:@"kBluetoothHCIErrorInstantPassed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInsufficientSecurity] forKey:@"kBluetoothHCIErrorInsufficientSecurity"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInvalidHCICommandParameters] forKey:@"kBluetoothHCIErrorInvalidHCICommandParameters"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInvalidLMPParameters] forKey:@"kBluetoothHCIErrorInvalidLMPParameters"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorKeyMissing] forKey:@"kBluetoothHCIErrorKeyMissing"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorLMPErrorTransactionCollision] forKey:@"kBluetoothHCIErrorLMPErrorTransactionCollision"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorLMPPDUNotAllowed] forKey:@"kBluetoothHCIErrorLMPPDUNotAllowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorLMPResponseTimeout] forKey:@"kBluetoothHCIErrorLMPResponseTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMax] forKey:@"kBluetoothHCIErrorMax"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMaxNumberOfConnections] forKey:@"kBluetoothHCIErrorMaxNumberOfConnections"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMaxNumberOfSCOConnectionsToADevice] forKey:@"kBluetoothHCIErrorMaxNumberOfSCOConnectionsToADevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMemoryFull] forKey:@"kBluetoothHCIErrorMemoryFull"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorNoConnection] forKey:@"kBluetoothHCIErrorNoConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorOtherEndTerminatedConnectionAboutToPowerOff] forKey:@"kBluetoothHCIErrorOtherEndTerminatedConnectionAboutToPowerOff"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorOtherEndTerminatedConnectionLowResources] forKey:@"kBluetoothHCIErrorOtherEndTerminatedConnectionLowResources"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorOtherEndTerminatedConnectionUserEnded] forKey:@"kBluetoothHCIErrorOtherEndTerminatedConnectionUserEnded"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPageTimeout] forKey:@"kBluetoothHCIErrorPageTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPairingNotAllowed] forKey:@"kBluetoothHCIErrorPairingNotAllowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPairingWithUnitKeyNotSupported] forKey:@"kBluetoothHCIErrorPairingWithUnitKeyNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorParameterOutOfMandatoryRange] forKey:@"kBluetoothHCIErrorParameterOutOfMandatoryRange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPowerIsOFF] forKey:@"kBluetoothHCIErrorPowerIsOFF"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorQoSNotSupported] forKey:@"kBluetoothHCIErrorQoSNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorQoSRejected] forKey:@"kBluetoothHCIErrorQoSRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorQoSUnacceptableParameter] forKey:@"kBluetoothHCIErrorQoSUnacceptableParameter"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRepeatedAttempts] forKey:@"kBluetoothHCIErrorRepeatedAttempts"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorReservedSlotViolation] forKey:@"kBluetoothHCIErrorReservedSlotViolation"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRoleChangeNotAllowed] forKey:@"kBluetoothHCIErrorRoleChangeNotAllowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRoleSwitchFailed] forKey:@"kBluetoothHCIErrorRoleSwitchFailed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRoleSwitchPending] forKey:@"kBluetoothHCIErrorRoleSwitchPending"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSCOAirModeRejected] forKey:@"kBluetoothHCIErrorSCOAirModeRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSCOIntervalRejected] forKey:@"kBluetoothHCIErrorSCOIntervalRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSCOOffsetRejected] forKey:@"kBluetoothHCIErrorSCOOffsetRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSecureSimplePairingNotSupportedByHost] forKey:@"kBluetoothHCIErrorSecureSimplePairingNotSupportedByHost"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSuccess] forKey:@"kBluetoothHCIErrorSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnitKeyUsed] forKey:@"kBluetoothHCIErrorUnitKeyUsed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnknownHCICommand] forKey:@"kBluetoothHCIErrorUnknownHCICommand"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnknownLMPPDU] forKey:@"kBluetoothHCIErrorUnknownLMPPDU"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnspecifiedError] forKey:@"kBluetoothHCIErrorUnspecifiedError"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnsupportedFeatureOrParameterValue] forKey:@"kBluetoothHCIErrorUnsupportedFeatureOrParameterValue"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnsupportedLMPParameterValue] forKey:@"kBluetoothHCIErrorUnsupportedLMPParameterValue"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnsupportedRemoteFeature] forKey:@"kBluetoothHCIErrorUnsupportedRemoteFeature"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventAuthenticationComplete] forKey:@"kBluetoothHCIEventAuthenticationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventChangeConnectionLinkKeyComplete] forKey:@"kBluetoothHCIEventChangeConnectionLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventCommandComplete] forKey:@"kBluetoothHCIEventCommandComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventCommandStatus] forKey:@"kBluetoothHCIEventCommandStatus"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventConnectionComplete] forKey:@"kBluetoothHCIEventConnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventConnectionPacketType] forKey:@"kBluetoothHCIEventConnectionPacketType"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventConnectionRequest] forKey:@"kBluetoothHCIEventConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventDataBufferOverflow] forKey:@"kBluetoothHCIEventDataBufferOverflow"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventDisconnectionComplete] forKey:@"kBluetoothHCIEventDisconnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventEncryptionChange] forKey:@"kBluetoothHCIEventEncryptionChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventEnhancedFlushComplete] forKey:@"kBluetoothHCIEventEnhancedFlushComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventExtendedInquiryResult] forKey:@"kBluetoothHCIEventExtendedInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventFlowSpecificationComplete] forKey:@"kBluetoothHCIEventFlowSpecificationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventFlushOccurred] forKey:@"kBluetoothHCIEventFlushOccurred"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventHardwareError] forKey:@"kBluetoothHCIEventHardwareError"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventIOCapabilityRequest] forKey:@"kBluetoothHCIEventIOCapabilityRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventIOCapabilityResponse] forKey:@"kBluetoothHCIEventIOCapabilityResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventInquiryComplete] forKey:@"kBluetoothHCIEventInquiryComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventInquiryResult] forKey:@"kBluetoothHCIEventInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventInquiryResultWithRSSI] forKey:@"kBluetoothHCIEventInquiryResultWithRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventKeypressNotification] forKey:@"kBluetoothHCIEventKeypressNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLinkKeyNotification] forKey:@"kBluetoothHCIEventLinkKeyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLinkKeyRequest] forKey:@"kBluetoothHCIEventLinkKeyRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLinkSupervisionTimeoutChanged] forKey:@"kBluetoothHCIEventLinkSupervisionTimeoutChanged"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLogoTesting] forKey:@"kBluetoothHCIEventLogoTesting"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLoopbackCommand] forKey:@"kBluetoothHCIEventLoopbackCommand"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskAll] forKey:@"kBluetoothHCIEventMaskAll"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskAll64Bit] forKey:@"kBluetoothHCIEventMaskAll64Bit"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskAuthenticationComplete] forKey:@"kBluetoothHCIEventMaskAuthenticationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskChangeConnectionLinkKeyComplete] forKey:@"kBluetoothHCIEventMaskChangeConnectionLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskCommandComplete] forKey:@"kBluetoothHCIEventMaskCommandComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskCommandStatus] forKey:@"kBluetoothHCIEventMaskCommandStatus"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskConnectionComplete] forKey:@"kBluetoothHCIEventMaskConnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskConnectionPacketTypeChanged] forKey:@"kBluetoothHCIEventMaskConnectionPacketTypeChanged"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskConnectionRequest] forKey:@"kBluetoothHCIEventMaskConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDataBufferOverflow] forKey:@"kBluetoothHCIEventMaskDataBufferOverflow"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDefault] forKey:@"kBluetoothHCIEventMaskDefault"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDefault64Bit] forKey:@"kBluetoothHCIEventMaskDefault64Bit"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDisconnectionComplete] forKey:@"kBluetoothHCIEventMaskDisconnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskEncryptionChange] forKey:@"kBluetoothHCIEventMaskEncryptionChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskEnhancedFlushCompleteEvent] forKey:@"kBluetoothHCIEventMaskEnhancedFlushCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskExtendedInquiryResultEvent] forKey:@"kBluetoothHCIEventMaskExtendedInquiryResultEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskFlowSpecificationCompleteEvent] forKey:@"kBluetoothHCIEventMaskFlowSpecificationCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskFlushOccurred] forKey:@"kBluetoothHCIEventMaskFlushOccurred"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskHardwareError] forKey:@"kBluetoothHCIEventMaskHardwareError"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskInquiryComplete] forKey:@"kBluetoothHCIEventMaskInquiryComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskInquiryResult] forKey:@"kBluetoothHCIEventMaskInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskInquiryResultWithRSSIEvent] forKey:@"kBluetoothHCIEventMaskInquiryResultWithRSSIEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLinkKeyNotification] forKey:@"kBluetoothHCIEventMaskLinkKeyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLinkKeyRequest] forKey:@"kBluetoothHCIEventMaskLinkKeyRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLinkSupervisionTimeoutChangedEvent] forKey:@"kBluetoothHCIEventMaskLinkSupervisionTimeoutChangedEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLoopbackCommand] forKey:@"kBluetoothHCIEventMaskLoopbackCommand"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskMasterLinkKeyComplete] forKey:@"kBluetoothHCIEventMaskMasterLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskMaxSlotsChange] forKey:@"kBluetoothHCIEventMaskMaxSlotsChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskModeChange] forKey:@"kBluetoothHCIEventMaskModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskNone] forKey:@"kBluetoothHCIEventMaskNone"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskNumberOfCompletedPackets] forKey:@"kBluetoothHCIEventMaskNumberOfCompletedPackets"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskPINCodeRequest] forKey:@"kBluetoothHCIEventMaskPINCodeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskPageScanModeChange] forKey:@"kBluetoothHCIEventMaskPageScanModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskPageScanRepetitionModeChange] forKey:@"kBluetoothHCIEventMaskPageScanRepetitionModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskQoSSetupComplete] forKey:@"kBluetoothHCIEventMaskQoSSetupComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskQoSViolation] forKey:@"kBluetoothHCIEventMaskQoSViolation"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadClockOffsetComplete] forKey:@"kBluetoothHCIEventMaskReadClockOffsetComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadRemoteExtendedFeaturesCompleteEvent] forKey:@"kBluetoothHCIEventMaskReadRemoteExtendedFeaturesCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadRemoteSupportedFeaturesComplete] forKey:@"kBluetoothHCIEventMaskReadRemoteSupportedFeaturesComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadRemoteVersionInformationComplete] forKey:@"kBluetoothHCIEventMaskReadRemoteVersionInformationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskRemoteNameRequestComplete] forKey:@"kBluetoothHCIEventMaskRemoteNameRequestComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReturnLinkKeys] forKey:@"kBluetoothHCIEventMaskReturnLinkKeys"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskRoleChange] forKey:@"kBluetoothHCIEventMaskRoleChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskSniffSubstrateEvent] forKey:@"kBluetoothHCIEventMaskSniffSubstrateEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskSynchronousConnectionChangedEvent] forKey:@"kBluetoothHCIEventMaskSynchronousConnectionChangedEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskSynchronousConnectionCompleteEvent] forKey:@"kBluetoothHCIEventMaskSynchronousConnectionCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMasterLinkKeyComplete] forKey:@"kBluetoothHCIEventMasterLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaxSlotsChange] forKey:@"kBluetoothHCIEventMaxSlotsChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventModeChange] forKey:@"kBluetoothHCIEventModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventNumberOfCompletedPackets] forKey:@"kBluetoothHCIEventNumberOfCompletedPackets"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPINCodeRequest] forKey:@"kBluetoothHCIEventPINCodeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPacketHeaderSize] forKey:@"kBluetoothHCIEventPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPacketMaxDataSize] forKey:@"kBluetoothHCIEventPacketMaxDataSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPageScanModeChange] forKey:@"kBluetoothHCIEventPageScanModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPageScanRepetitionModeChange] forKey:@"kBluetoothHCIEventPageScanRepetitionModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventQoSSetupComplete] forKey:@"kBluetoothHCIEventQoSSetupComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventQoSViolation] forKey:@"kBluetoothHCIEventQoSViolation"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadClockOffsetComplete] forKey:@"kBluetoothHCIEventReadClockOffsetComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadRemoteExtendedFeaturesComplete] forKey:@"kBluetoothHCIEventReadRemoteExtendedFeaturesComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadRemoteSupportedFeaturesComplete] forKey:@"kBluetoothHCIEventReadRemoteSupportedFeaturesComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadRemoteVersionInformationComplete] forKey:@"kBluetoothHCIEventReadRemoteVersionInformationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventRemoteNameRequestComplete] forKey:@"kBluetoothHCIEventRemoteNameRequestComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventRemoteOOBDataRequest] forKey:@"kBluetoothHCIEventRemoteOOBDataRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReturnLinkKeys] forKey:@"kBluetoothHCIEventReturnLinkKeys"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventRoleChange] forKey:@"kBluetoothHCIEventRoleChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSimplePairingComplete] forKey:@"kBluetoothHCIEventSimplePairingComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSniffRequest] forKey:@"kBluetoothHCIEventSniffRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSniffSubstrate] forKey:@"kBluetoothHCIEventSniffSubstrate"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSynchronousConnectionChanged] forKey:@"kBluetoothHCIEventSynchronousConnectionChanged"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSynchronousConnectionComplete] forKey:@"kBluetoothHCIEventSynchronousConnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventUserConfirmationRequest] forKey:@"kBluetoothHCIEventUserConfirmationRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventUserPasskeyNotification] forKey:@"kBluetoothHCIEventUserPasskeyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventUserPasskeyRequest] forKey:@"kBluetoothHCIEventUserPasskeyRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventVendorSpecific] forKey:@"kBluetoothHCIEventVendorSpecific"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsCompleteList] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsCompleteList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsWithMoreAvailable] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsWithMoreAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsCompleteList] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsCompleteList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsWithMoreAvailable] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsWithMoreAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsCompleteList] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsCompleteList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsWithMoreAvailable] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsWithMoreAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeCompleteLocalName] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeCompleteLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeFlags] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeFlags"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeManufacturerSpecificData] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeManufacturerSpecificData"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeShortenedLocalName] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeShortenedLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCIFECNotRequired] forKey:@"kBluetoothHCIFECNotRequired"];
[d setObject:[Number numberWithDouble:kBluetoothHCIFECRequired] forKey:@"kBluetoothHCIFECRequired"];
[d setObject:[Number numberWithDouble:kBluetoothHCIGetHIDDeviceList] forKey:@"kBluetoothHCIGetHIDDeviceList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIInquiryModeResultFormatStandard] forKey:@"kBluetoothHCIInquiryModeResultFormatStandard"];
[d setObject:[Number numberWithDouble:kBluetoothHCIInquiryModeResultFormatWithRSSI] forKey:@"kBluetoothHCIInquiryModeResultFormatWithRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothHCIInquiryModeResultFormatWithRSSIOrExtendedInquiryResultFormat] forKey:@"kBluetoothHCIInquiryModeResultFormatWithRSSIOrExtendedInquiryResultFormat"];
[d setObject:[Number numberWithDouble:kBluetoothHCILoopbackModeLocal] forKey:@"kBluetoothHCILoopbackModeLocal"];
[d setObject:[Number numberWithDouble:kBluetoothHCILoopbackModeOff] forKey:@"kBluetoothHCILoopbackModeOff"];
[d setObject:[Number numberWithDouble:kBluetoothHCILoopbackModeRemote] forKey:@"kBluetoothHCILoopbackModeRemote"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMasterRole] forKey:@"kBluetoothHCIMasterRole"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMaxCommandPacketSize] forKey:@"kBluetoothHCIMaxCommandPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMaxDataPacketSize] forKey:@"kBluetoothHCIMaxDataPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMaxEventPacketSize] forKey:@"kBluetoothHCIMaxEventPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIOpCodeNoOp] forKey:@"kBluetoothHCIOpCodeNoOp"];
[d setObject:[Number numberWithDouble:kBluetoothHCIPowerStateOFF] forKey:@"kBluetoothHCIPowerStateOFF"];
[d setObject:[Number numberWithDouble:kBluetoothHCIPowerStateON] forKey:@"kBluetoothHCIPowerStateON"];
[d setObject:[Number numberWithDouble:kBluetoothHCIPowerStateUnintialized] forKey:@"kBluetoothHCIPowerStateUnintialized"];
[d setObject:[Number numberWithDouble:kBluetoothHCIRemoveHIDDevice] forKey:@"kBluetoothHCIRemoveHIDDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingDebugModeDisabled] forKey:@"kBluetoothHCISimplePairingDebugModeDisabled"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingDebugModeEnabled] forKey:@"kBluetoothHCISimplePairingDebugModeEnabled"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingModeEnabled] forKey:@"kBluetoothHCISimplePairingModeEnabled"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingModeNotSet] forKey:@"kBluetoothHCISimplePairingModeNotSet"];
[d setObject:[Number numberWithDouble:kBluetoothHCISlaveRole] forKey:@"kBluetoothHCISlaveRole"];
[d setObject:[Number numberWithDouble:kBluetoothHCITransportUSBClassCode] forKey:@"kBluetoothHCITransportUSBClassCode"];
[d setObject:[Number numberWithDouble:kBluetoothHCITransportUSBProtocolCode] forKey:@"kBluetoothHCITransportUSBProtocolCode"];
[d setObject:[Number numberWithDouble:kBluetoothHCITransportUSBSubClassCode] forKey:@"kBluetoothHCITransportUSBSubClassCode"];
[d setObject:[Number numberWithDouble:kBluetoothKeyFlagSemiPermanent] forKey:@"kBluetoothKeyFlagSemiPermanent"];
[d setObject:[Number numberWithDouble:kBluetoothKeyFlagTemporary] forKey:@"kBluetoothKeyFlagTemporary"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeAuthenticatedCombination] forKey:@"kBluetoothKeyTypeAuthenticatedCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeChangedCombination] forKey:@"kBluetoothKeyTypeChangedCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeCombination] forKey:@"kBluetoothKeyTypeCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeDebugCombination] forKey:@"kBluetoothKeyTypeDebugCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeLocalUnit] forKey:@"kBluetoothKeyTypeLocalUnit"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeRemoteUnit] forKey:@"kBluetoothKeyTypeRemoteUnit"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeUnauthenticatedCombination] forKey:@"kBluetoothKeyTypeUnauthenticatedCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyCleared] forKey:@"kBluetoothKeypressNotificationTypePasskeyCleared"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyDigitEntered] forKey:@"kBluetoothKeypressNotificationTypePasskeyDigitEntered"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyDigitErased] forKey:@"kBluetoothKeypressNotificationTypePasskeyDigitErased"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyEntryCompleted] forKey:@"kBluetoothKeypressNotificationTypePasskeyEntryCompleted"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyEntryStarted] forKey:@"kBluetoothKeypressNotificationTypePasskeyEntryStarted"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelConnectionLessData] forKey:@"kBluetoothL2CAPChannelConnectionLessData"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelDynamicEnd] forKey:@"kBluetoothL2CAPChannelDynamicEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelDynamicStart] forKey:@"kBluetoothL2CAPChannelDynamicStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelEnd] forKey:@"kBluetoothL2CAPChannelEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelNull] forKey:@"kBluetoothL2CAPChannelNull"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelReservedEnd] forKey:@"kBluetoothL2CAPChannelReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelReservedStart] forKey:@"kBluetoothL2CAPChannelReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelSignalling] forKey:@"kBluetoothL2CAPChannelSignalling"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeCommandReject] forKey:@"kBluetoothL2CAPCommandCodeCommandReject"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConfigureRequest] forKey:@"kBluetoothL2CAPCommandCodeConfigureRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConfigureResponse] forKey:@"kBluetoothL2CAPCommandCodeConfigureResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConnectionRequest] forKey:@"kBluetoothL2CAPCommandCodeConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConnectionResponse] forKey:@"kBluetoothL2CAPCommandCodeConnectionResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeDisconnectionRequest] forKey:@"kBluetoothL2CAPCommandCodeDisconnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeDisconnectionResponse] forKey:@"kBluetoothL2CAPCommandCodeDisconnectionResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeEchoRequest] forKey:@"kBluetoothL2CAPCommandCodeEchoRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeEchoResponse] forKey:@"kBluetoothL2CAPCommandCodeEchoResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeInformationRequest] forKey:@"kBluetoothL2CAPCommandCodeInformationRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeInformationResponse] forKey:@"kBluetoothL2CAPCommandCodeInformationResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeReserved] forKey:@"kBluetoothL2CAPCommandCodeReserved"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandRejectReasonCommandNotUnderstood] forKey:@"kBluetoothL2CAPCommandRejectReasonCommandNotUnderstood"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandRejectReasonInvalidCIDInRequest] forKey:@"kBluetoothL2CAPCommandRejectReasonInvalidCIDInRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandRejectReasonSignallingMTUExceeded] forKey:@"kBluetoothL2CAPCommandRejectReasonSignallingMTUExceeded"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationBasicL2CAPModeFlag] forKey:@"kBluetoothL2CAPConfigurationBasicL2CAPModeFlag"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationFlowControlModeFlag] forKey:@"kBluetoothL2CAPConfigurationFlowControlModeFlag"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionFlushTimeout] forKey:@"kBluetoothL2CAPConfigurationOptionFlushTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionFlushTimeoutLength] forKey:@"kBluetoothL2CAPConfigurationOptionFlushTimeoutLength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionMTU] forKey:@"kBluetoothL2CAPConfigurationOptionMTU"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionMTULength] forKey:@"kBluetoothL2CAPConfigurationOptionMTULength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionQoS] forKey:@"kBluetoothL2CAPConfigurationOptionQoS"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionQoSLength] forKey:@"kBluetoothL2CAPConfigurationOptionQoSLength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControl] forKey:@"kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControl"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControlLength] forKey:@"kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControlLength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultRejected] forKey:@"kBluetoothL2CAPConfigurationResultRejected"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultSuccess] forKey:@"kBluetoothL2CAPConfigurationResultSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultUnacceptableParams] forKey:@"kBluetoothL2CAPConfigurationResultUnacceptableParams"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultUnknownOptions] forKey:@"kBluetoothL2CAPConfigurationResultUnknownOptions"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationRetransmissionModeFlag] forKey:@"kBluetoothL2CAPConfigurationRetransmissionModeFlag"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultPending] forKey:@"kBluetoothL2CAPConnectionResultPending"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultRefusedNoResources] forKey:@"kBluetoothL2CAPConnectionResultRefusedNoResources"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultRefusedPSMNotSupported] forKey:@"kBluetoothL2CAPConnectionResultRefusedPSMNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultRefusedSecurityBlock] forKey:@"kBluetoothL2CAPConnectionResultRefusedSecurityBlock"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultSuccessful] forKey:@"kBluetoothL2CAPConnectionResultSuccessful"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionStatusAuthenticationPending] forKey:@"kBluetoothL2CAPConnectionStatusAuthenticationPending"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionStatusAuthorizationPending] forKey:@"kBluetoothL2CAPConnectionStatusAuthorizationPending"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionStatusNoInfoAvailable] forKey:@"kBluetoothL2CAPConnectionStatusNoInfoAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutDefault] forKey:@"kBluetoothL2CAPFlushTimeoutDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutEnd] forKey:@"kBluetoothL2CAPFlushTimeoutEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutForever] forKey:@"kBluetoothL2CAPFlushTimeoutForever"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutImmediate] forKey:@"kBluetoothL2CAPFlushTimeoutImmediate"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutUseExisting] forKey:@"kBluetoothL2CAPFlushTimeoutUseExisting"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInfoTypeMaxConnectionlessMTUSize] forKey:@"kBluetoothL2CAPInfoTypeMaxConnectionlessMTUSize"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationBidirectionalQoS] forKey:@"kBluetoothL2CAPInformationBidirectionalQoS"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationFlowControlMode] forKey:@"kBluetoothL2CAPInformationFlowControlMode"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationNoExtendedFeatures] forKey:@"kBluetoothL2CAPInformationNoExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationResultNotSupported] forKey:@"kBluetoothL2CAPInformationResultNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationResultSuccess] forKey:@"kBluetoothL2CAPInformationResultSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationRetransmissionMode] forKey:@"kBluetoothL2CAPInformationRetransmissionMode"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationTypeConnectionlessMTU] forKey:@"kBluetoothL2CAPInformationTypeConnectionlessMTU"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationTypeExtendedFeatures] forKey:@"kBluetoothL2CAPInformationTypeExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUDefault] forKey:@"kBluetoothL2CAPMTUDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUMaximum] forKey:@"kBluetoothL2CAPMTUMaximum"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUMinimum] forKey:@"kBluetoothL2CAPMTUMinimum"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUSIG] forKey:@"kBluetoothL2CAPMTUSIG"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUStart] forKey:@"kBluetoothL2CAPMTUStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMaxPacketSize] forKey:@"kBluetoothL2CAPMaxPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMAVCTP] forKey:@"kBluetoothL2CAPPSMAVCTP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMAVDTP] forKey:@"kBluetoothL2CAPPSMAVDTP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMBNEP] forKey:@"kBluetoothL2CAPPSMBNEP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMDynamicEnd] forKey:@"kBluetoothL2CAPPSMDynamicEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMDynamicStart] forKey:@"kBluetoothL2CAPPSMDynamicStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMHIDControl] forKey:@"kBluetoothL2CAPPSMHIDControl"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMHIDInterrupt] forKey:@"kBluetoothL2CAPPSMHIDInterrupt"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMNone] forKey:@"kBluetoothL2CAPPSMNone"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMRFCOMM] forKey:@"kBluetoothL2CAPPSMRFCOMM"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMReservedEnd] forKey:@"kBluetoothL2CAPPSMReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMReservedStart] forKey:@"kBluetoothL2CAPPSMReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMSDP] forKey:@"kBluetoothL2CAPPSMSDP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMTCS_BIN] forKey:@"kBluetoothL2CAPPSMTCS_BIN"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMTCS_BIN_Cordless] forKey:@"kBluetoothL2CAPPSMTCS_BIN_Cordless"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMUID_C_Plane] forKey:@"kBluetoothL2CAPPSMUID_C_Plane"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPacketHeaderSize] forKey:@"kBluetoothL2CAPPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSDelayVariationDefault] forKey:@"kBluetoothL2CAPQoSDelayVariationDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSFlagsDefault] forKey:@"kBluetoothL2CAPQoSFlagsDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSLatencyDefault] forKey:@"kBluetoothL2CAPQoSLatencyDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSPeakBandwidthDefault] forKey:@"kBluetoothL2CAPQoSPeakBandwidthDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTokenBucketSizeDefault] forKey:@"kBluetoothL2CAPQoSTokenBucketSizeDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTokenRateDefault] forKey:@"kBluetoothL2CAPQoSTokenRateDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeBestEffort] forKey:@"kBluetoothL2CAPQoSTypeBestEffort"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeDefault] forKey:@"kBluetoothL2CAPQoSTypeDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeGuaranteed] forKey:@"kBluetoothL2CAPQoSTypeGuaranteed"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeNoTraffic] forKey:@"kBluetoothL2CAPQoSTypeNoTraffic"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConfigReq] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConfigReq"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConfigResp] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConfigResp"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConnectReq] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConnectReq"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConnectResp] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConnectResp"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_DisableCLT] forKey:@"kBluetoothL2CAPTCICommandL2CA_DisableCLT"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_DisconnectReq] forKey:@"kBluetoothL2CAPTCICommandL2CA_DisconnectReq"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_DisconnectResp] forKey:@"kBluetoothL2CAPTCICommandL2CA_DisconnectResp"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_EnableCLT] forKey:@"kBluetoothL2CAPTCICommandL2CA_EnableCLT"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GetInfo] forKey:@"kBluetoothL2CAPTCICommandL2CA_GetInfo"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupAddMember] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupAddMember"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupClose] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupClose"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupCreate] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupCreate"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupMembership] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupMembership"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupRemoveMember] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupRemoveMember"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_Ping] forKey:@"kBluetoothL2CAPTCICommandL2CA_Ping"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ReadData] forKey:@"kBluetoothL2CAPTCICommandL2CA_ReadData"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_Reserved1] forKey:@"kBluetoothL2CAPTCICommandL2CA_Reserved1"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_Reserved2] forKey:@"kBluetoothL2CAPTCICommandL2CA_Reserved2"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_WriteData] forKey:@"kBluetoothL2CAPTCICommandL2CA_WriteData"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandReserved] forKey:@"kBluetoothL2CAPTCICommandReserved"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_ConfigInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_ConfigInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_ConnectInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_ConnectInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_DisconnectInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_DisconnectInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_QoSViolationInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_QoSViolationInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_TimeOutInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_TimeOutInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDReserved] forKey:@"kBluetoothL2CAPTCIEventIDReserved"];
[d setObject:[Number numberWithDouble:kBluetoothLimitedInquiryAccessCodeEnd] forKey:@"kBluetoothLimitedInquiryAccessCodeEnd"];
[d setObject:[Number numberWithDouble:kBluetoothLimitedInquiryAccessCodeIndex] forKey:@"kBluetoothLimitedInquiryAccessCodeIndex"];
[d setObject:[Number numberWithDouble:kBluetoothLimitedInquiryAccessCodeLAPValue] forKey:@"kBluetoothLimitedInquiryAccessCodeLAPValue"];
[d setObject:[Number numberWithDouble:kBluetoothLinkTypeNone] forKey:@"kBluetoothLinkTypeNone"];
[d setObject:[Number numberWithDouble:kBluetoothOOBAuthenticationDataFromRemoteDevicePresent] forKey:@"kBluetoothOOBAuthenticationDataFromRemoteDevicePresent"];
[d setObject:[Number numberWithDouble:kBluetoothOOBAuthenticationDataNotPresent] forKey:@"kBluetoothOOBAuthenticationDataNotPresent"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeAUX] forKey:@"kBluetoothPacketTypeAUX"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDH1] forKey:@"kBluetoothPacketTypeDH1"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDH3] forKey:@"kBluetoothPacketTypeDH3"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDH5] forKey:@"kBluetoothPacketTypeDH5"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDM1] forKey:@"kBluetoothPacketTypeDM1"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDM3] forKey:@"kBluetoothPacketTypeDM3"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDM5] forKey:@"kBluetoothPacketTypeDM5"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDV] forKey:@"kBluetoothPacketTypeDV"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeEnd] forKey:@"kBluetoothPacketTypeEnd"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeHV1] forKey:@"kBluetoothPacketTypeHV1"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeHV2] forKey:@"kBluetoothPacketTypeHV2"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeHV3] forKey:@"kBluetoothPacketTypeHV3"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeMandatory] forKey:@"kBluetoothPageScanModeMandatory"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeOptional1] forKey:@"kBluetoothPageScanModeOptional1"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeOptional2] forKey:@"kBluetoothPageScanModeOptional2"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeOptional3] forKey:@"kBluetoothPageScanModeOptional3"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanPeriodModeP0] forKey:@"kBluetoothPageScanPeriodModeP0"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanPeriodModeP1] forKey:@"kBluetoothPageScanPeriodModeP1"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanPeriodModeP2] forKey:@"kBluetoothPageScanPeriodModeP2"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanRepetitionModeR0] forKey:@"kBluetoothPageScanRepetitionModeR0"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanRepetitionModeR1] forKey:@"kBluetoothPageScanRepetitionModeR1"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanRepetitionModeR2] forKey:@"kBluetoothPageScanRepetitionModeR2"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeEvenParity] forKey:@"kBluetoothRFCOMMParityTypeEvenParity"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeMaxParity] forKey:@"kBluetoothRFCOMMParityTypeMaxParity"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeNoParity] forKey:@"kBluetoothRFCOMMParityTypeNoParity"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeOddParity] forKey:@"kBluetoothRFCOMMParityTypeOddParity"];
[d setObject:[Number numberWithDouble:kBluetoothRoleBecomeMaster] forKey:@"kBluetoothRoleBecomeMaster"];
[d setObject:[Number numberWithDouble:kBluetoothRoleRemainSlave] forKey:@"kBluetoothRoleRemainSlave"];
[d setObject:[Number numberWithDouble:kBluetoothSCOConnection] forKey:@"kBluetoothSCOConnection"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierClientExecutableURL] forKey:@"kBluetoothSDPAttributeDeviceIdentifierClientExecutableURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierDocumentationURL] forKey:@"kBluetoothSDPAttributeDeviceIdentifierDocumentationURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierPrimaryRecord] forKey:@"kBluetoothSDPAttributeDeviceIdentifierPrimaryRecord"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierProductID] forKey:@"kBluetoothSDPAttributeDeviceIdentifierProductID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierReservedRangeEnd] forKey:@"kBluetoothSDPAttributeDeviceIdentifierReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierReservedRangeStart] forKey:@"kBluetoothSDPAttributeDeviceIdentifierReservedRangeStart"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierServiceDescription] forKey:@"kBluetoothSDPAttributeDeviceIdentifierServiceDescription"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierSpecificationID] forKey:@"kBluetoothSDPAttributeDeviceIdentifierSpecificationID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierVendorID] forKey:@"kBluetoothSDPAttributeDeviceIdentifierVendorID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierVendorIDSource] forKey:@"kBluetoothSDPAttributeDeviceIdentifierVendorIDSource"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierVersion] forKey:@"kBluetoothSDPAttributeDeviceIdentifierVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierAdditionalProtocolsDescriptorList] forKey:@"kBluetoothSDPAttributeIdentifierAdditionalProtocolsDescriptorList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierAudioFeedbackSupport] forKey:@"kBluetoothSDPAttributeIdentifierAudioFeedbackSupport"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierBluetoothProfileDescriptorList] forKey:@"kBluetoothSDPAttributeIdentifierBluetoothProfileDescriptorList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierBrowseGroupList] forKey:@"kBluetoothSDPAttributeIdentifierBrowseGroupList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierClientExecutableURL] forKey:@"kBluetoothSDPAttributeIdentifierClientExecutableURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierDocumentationURL] forKey:@"kBluetoothSDPAttributeIdentifierDocumentationURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierExternalNetwork] forKey:@"kBluetoothSDPAttributeIdentifierExternalNetwork"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierFaxClass1Support] forKey:@"kBluetoothSDPAttributeIdentifierFaxClass1Support"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierFaxClass2Support] forKey:@"kBluetoothSDPAttributeIdentifierFaxClass2Support"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierFaxClass2_0Support] forKey:@"kBluetoothSDPAttributeIdentifierFaxClass2_0Support"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierGroupID] forKey:@"kBluetoothSDPAttributeIdentifierGroupID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierHomepageURL] forKey:@"kBluetoothSDPAttributeIdentifierHomepageURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierIPSubnet] forKey:@"kBluetoothSDPAttributeIdentifierIPSubnet"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierIconURL] forKey:@"kBluetoothSDPAttributeIdentifierIconURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierLanguageBaseAttributeIDList] forKey:@"kBluetoothSDPAttributeIdentifierLanguageBaseAttributeIDList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierMaxNetAccessRate] forKey:@"kBluetoothSDPAttributeIdentifierMaxNetAccessRate"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierNetAccessType] forKey:@"kBluetoothSDPAttributeIdentifierNetAccessType"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierNetwork] forKey:@"kBluetoothSDPAttributeIdentifierNetwork"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierNetworkAddress] forKey:@"kBluetoothSDPAttributeIdentifierNetworkAddress"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierProtocolDescriptorList] forKey:@"kBluetoothSDPAttributeIdentifierProtocolDescriptorList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierProviderName] forKey:@"kBluetoothSDPAttributeIdentifierProviderName"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierRemoteAudioVolumeControl] forKey:@"kBluetoothSDPAttributeIdentifierRemoteAudioVolumeControl"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSecurityDescription] forKey:@"kBluetoothSDPAttributeIdentifierSecurityDescription"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceAvailability] forKey:@"kBluetoothSDPAttributeIdentifierServiceAvailability"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceClassIDList] forKey:@"kBluetoothSDPAttributeIdentifierServiceClassIDList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceDatabaseState] forKey:@"kBluetoothSDPAttributeIdentifierServiceDatabaseState"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceDescription] forKey:@"kBluetoothSDPAttributeIdentifierServiceDescription"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceID] forKey:@"kBluetoothSDPAttributeIdentifierServiceID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceInfoTimeToLive] forKey:@"kBluetoothSDPAttributeIdentifierServiceInfoTimeToLive"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceName] forKey:@"kBluetoothSDPAttributeIdentifierServiceName"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceRecordHandle] forKey:@"kBluetoothSDPAttributeIdentifierServiceRecordHandle"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceRecordState] forKey:@"kBluetoothSDPAttributeIdentifierServiceRecordState"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceVersion] forKey:@"kBluetoothSDPAttributeIdentifierServiceVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedCapabilities] forKey:@"kBluetoothSDPAttributeIdentifierSupportedCapabilities"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedDataStoresList] forKey:@"kBluetoothSDPAttributeIdentifierSupportedDataStoresList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedFeatures] forKey:@"kBluetoothSDPAttributeIdentifierSupportedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedFunctions] forKey:@"kBluetoothSDPAttributeIdentifierSupportedFunctions"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupporterFormatsList] forKey:@"kBluetoothSDPAttributeIdentifierSupporterFormatsList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierTotalImagingDataCapacity] forKey:@"kBluetoothSDPAttributeIdentifierTotalImagingDataCapacity"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierVersionNumberList] forKey:@"kBluetoothSDPAttributeIdentifierVersionNumberList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierWAPGateway] forKey:@"kBluetoothSDPAttributeIdentifierWAPGateway"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierWAPStackType] forKey:@"kBluetoothSDPAttributeIdentifierWAPStackType"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeBoolean] forKey:@"kBluetoothSDPDataElementTypeBoolean"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeDataElementAlternative] forKey:@"kBluetoothSDPDataElementTypeDataElementAlternative"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeDataElementSequence] forKey:@"kBluetoothSDPDataElementTypeDataElementSequence"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeNil] forKey:@"kBluetoothSDPDataElementTypeNil"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeReservedEnd] forKey:@"kBluetoothSDPDataElementTypeReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeReservedStart] forKey:@"kBluetoothSDPDataElementTypeReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeSignedInt] forKey:@"kBluetoothSDPDataElementTypeSignedInt"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeString] forKey:@"kBluetoothSDPDataElementTypeString"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeURL] forKey:@"kBluetoothSDPDataElementTypeURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeUUID] forKey:@"kBluetoothSDPDataElementTypeUUID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeUnsignedInt] forKey:@"kBluetoothSDPDataElementTypeUnsignedInt"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInsufficientResources] forKey:@"kBluetoothSDPErrorCodeInsufficientResources"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidContinuationState] forKey:@"kBluetoothSDPErrorCodeInvalidContinuationState"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidPDUSize] forKey:@"kBluetoothSDPErrorCodeInvalidPDUSize"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidRequestSyntax] forKey:@"kBluetoothSDPErrorCodeInvalidRequestSyntax"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidSDPVersion] forKey:@"kBluetoothSDPErrorCodeInvalidSDPVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidServiceRecordHandle] forKey:@"kBluetoothSDPErrorCodeInvalidServiceRecordHandle"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeReserved] forKey:@"kBluetoothSDPErrorCodeReserved"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeReservedEnd] forKey:@"kBluetoothSDPErrorCodeReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeReservedStart] forKey:@"kBluetoothSDPErrorCodeReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeSuccess] forKey:@"kBluetoothSDPErrorCodeSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDErrorResponse] forKey:@"kBluetoothSDPPDUIDErrorResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDReserved] forKey:@"kBluetoothSDPPDUIDReserved"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceAttributeRequest] forKey:@"kBluetoothSDPPDUIDServiceAttributeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceAttributeResponse] forKey:@"kBluetoothSDPPDUIDServiceAttributeResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchAttributeRequest] forKey:@"kBluetoothSDPPDUIDServiceSearchAttributeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchAttributeResponse] forKey:@"kBluetoothSDPPDUIDServiceSearchAttributeResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchRequest] forKey:@"kBluetoothSDPPDUIDServiceSearchRequest"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchResponse] forKey:@"kBluetoothSDPPDUIDServiceSearchResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterBNEPSupportedNetworkPacketTypeList] forKey:@"kBluetoothSDPProtocolParameterBNEPSupportedNetworkPacketTypeList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterBNEPVersion] forKey:@"kBluetoothSDPProtocolParameterBNEPVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterL2CAPPSM] forKey:@"kBluetoothSDPProtocolParameterL2CAPPSM"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterRFCOMMChannel] forKey:@"kBluetoothSDPProtocolParameterRFCOMMChannel"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterTCPPort] forKey:@"kBluetoothSDPProtocolParameterTCPPort"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterUDPPort] forKey:@"kBluetoothSDPProtocolParameterUDPPort"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16AVCTP] forKey:@"kBluetoothSDPUUID16AVCTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16AVDTP] forKey:@"kBluetoothSDPUUID16AVDTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16BNEP] forKey:@"kBluetoothSDPUUID16BNEP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16Base] forKey:@"kBluetoothSDPUUID16Base"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16CMPT] forKey:@"kBluetoothSDPUUID16CMPT"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16FTP] forKey:@"kBluetoothSDPUUID16FTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HIDP] forKey:@"kBluetoothSDPUUID16HIDP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HTTP] forKey:@"kBluetoothSDPUUID16HTTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HardcopyControlChannel] forKey:@"kBluetoothSDPUUID16HardcopyControlChannel"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HardcopyDataChannel] forKey:@"kBluetoothSDPUUID16HardcopyDataChannel"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HardcopyNotification] forKey:@"kBluetoothSDPUUID16HardcopyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16IP] forKey:@"kBluetoothSDPUUID16IP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16L2CAP] forKey:@"kBluetoothSDPUUID16L2CAP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16OBEX] forKey:@"kBluetoothSDPUUID16OBEX"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16RFCOMM] forKey:@"kBluetoothSDPUUID16RFCOMM"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16SDP] forKey:@"kBluetoothSDPUUID16SDP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAVRemoteControl] forKey:@"kBluetoothSDPUUID16ServiceClassAVRemoteControl"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAVRemoteControlTarget] forKey:@"kBluetoothSDPUUID16ServiceClassAVRemoteControlTarget"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAdvancedAudioDistribution] forKey:@"kBluetoothSDPUUID16ServiceClassAdvancedAudioDistribution"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAudioSink] forKey:@"kBluetoothSDPUUID16ServiceClassAudioSink"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAudioSource] forKey:@"kBluetoothSDPUUID16ServiceClassAudioSource"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassBasicPrinting] forKey:@"kBluetoothSDPUUID16ServiceClassBasicPrinting"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassBrowseGroupDescriptor] forKey:@"kBluetoothSDPUUID16ServiceClassBrowseGroupDescriptor"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassCommonISDNAccess] forKey:@"kBluetoothSDPUUID16ServiceClassCommonISDNAccess"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassCordlessTelephony] forKey:@"kBluetoothSDPUUID16ServiceClassCordlessTelephony"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassDialupNetworking] forKey:@"kBluetoothSDPUUID16ServiceClassDialupNetworking"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassDirectPrinting] forKey:@"kBluetoothSDPUUID16ServiceClassDirectPrinting"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassDirectPrintingReferenceObjectsService] forKey:@"kBluetoothSDPUUID16ServiceClassDirectPrintingReferenceObjectsService"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassFax] forKey:@"kBluetoothSDPUUID16ServiceClassFax"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGN] forKey:@"kBluetoothSDPUUID16ServiceClassGN"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericAudio] forKey:@"kBluetoothSDPUUID16ServiceClassGenericAudio"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericFileTransfer] forKey:@"kBluetoothSDPUUID16ServiceClassGenericFileTransfer"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericNetworking] forKey:@"kBluetoothSDPUUID16ServiceClassGenericNetworking"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericTelephony] forKey:@"kBluetoothSDPUUID16ServiceClassGenericTelephony"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHCR_Print] forKey:@"kBluetoothSDPUUID16ServiceClassHCR_Print"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHCR_Scan] forKey:@"kBluetoothSDPUUID16ServiceClassHCR_Scan"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHandsfree] forKey:@"kBluetoothSDPUUID16ServiceClassHandsfree"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHandsfreeAudioGateway] forKey:@"kBluetoothSDPUUID16ServiceClassHandsfreeAudioGateway"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHardcopyCableReplacement] forKey:@"kBluetoothSDPUUID16ServiceClassHardcopyCableReplacement"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHeadset] forKey:@"kBluetoothSDPUUID16ServiceClassHeadset"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHeadsetAudioGateway] forKey:@"kBluetoothSDPUUID16ServiceClassHeadsetAudioGateway"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHumanInterfaceDeviceService] forKey:@"kBluetoothSDPUUID16ServiceClassHumanInterfaceDeviceService"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImaging] forKey:@"kBluetoothSDPUUID16ServiceClassImaging"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImagingAutomaticArchive] forKey:@"kBluetoothSDPUUID16ServiceClassImagingAutomaticArchive"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImagingReferencedObjects] forKey:@"kBluetoothSDPUUID16ServiceClassImagingReferencedObjects"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImagingResponder] forKey:@"kBluetoothSDPUUID16ServiceClassImagingResponder"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassIntercom] forKey:@"kBluetoothSDPUUID16ServiceClassIntercom"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassIrMCSync] forKey:@"kBluetoothSDPUUID16ServiceClassIrMCSync"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassIrMCSyncCommand] forKey:@"kBluetoothSDPUUID16ServiceClassIrMCSyncCommand"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassLANAccessUsingPPP] forKey:@"kBluetoothSDPUUID16ServiceClassLANAccessUsingPPP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassNAP] forKey:@"kBluetoothSDPUUID16ServiceClassNAP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassOBEXFileTransfer] forKey:@"kBluetoothSDPUUID16ServiceClassOBEXFileTransfer"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassOBEXObjectPush] forKey:@"kBluetoothSDPUUID16ServiceClassOBEXObjectPush"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPANU] forKey:@"kBluetoothSDPUUID16ServiceClassPANU"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPnPInformation] forKey:@"kBluetoothSDPUUID16ServiceClassPnPInformation"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPrintingStatus] forKey:@"kBluetoothSDPUUID16ServiceClassPrintingStatus"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPublicBrowseGroup] forKey:@"kBluetoothSDPUUID16ServiceClassPublicBrowseGroup"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassReferencePrinting] forKey:@"kBluetoothSDPUUID16ServiceClassReferencePrinting"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassReflectedUI] forKey:@"kBluetoothSDPUUID16ServiceClassReflectedUI"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassSerialPort] forKey:@"kBluetoothSDPUUID16ServiceClassSerialPort"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassServiceDiscoveryServer] forKey:@"kBluetoothSDPUUID16ServiceClassServiceDiscoveryServer"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassUDI_MT] forKey:@"kBluetoothSDPUUID16ServiceClassUDI_MT"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassUDI_TA] forKey:@"kBluetoothSDPUUID16ServiceClassUDI_TA"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassVideoConferencing] forKey:@"kBluetoothSDPUUID16ServiceClassVideoConferencing"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassVideoConferencingGW] forKey:@"kBluetoothSDPUUID16ServiceClassVideoConferencingGW"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassWAP] forKey:@"kBluetoothSDPUUID16ServiceClassWAP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassWAPClient] forKey:@"kBluetoothSDPUUID16ServiceClassWAPClient"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16TCP] forKey:@"kBluetoothSDPUUID16TCP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16TCSAT] forKey:@"kBluetoothSDPUUID16TCSAT"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16TCSBIN] forKey:@"kBluetoothSDPUUID16TCSBIN"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16UDI_C_Plane] forKey:@"kBluetoothSDPUUID16UDI_C_Plane"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16UDP] forKey:@"kBluetoothSDPUUID16UDP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16UPNP] forKey:@"kBluetoothSDPUUID16UPNP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16WSP] forKey:@"kBluetoothSDPUUID16WSP"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorAny] forKey:@"kBluetoothServiceClassMajorAny"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorAudio] forKey:@"kBluetoothServiceClassMajorAudio"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorCapturing] forKey:@"kBluetoothServiceClassMajorCapturing"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorEnd] forKey:@"kBluetoothServiceClassMajorEnd"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorInformation] forKey:@"kBluetoothServiceClassMajorInformation"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorLimitedDiscoverableMode] forKey:@"kBluetoothServiceClassMajorLimitedDiscoverableMode"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorNetworking] forKey:@"kBluetoothServiceClassMajorNetworking"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorNone] forKey:@"kBluetoothServiceClassMajorNone"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorObjectTransfer] forKey:@"kBluetoothServiceClassMajorObjectTransfer"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorPositioning] forKey:@"kBluetoothServiceClassMajorPositioning"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorRendering] forKey:@"kBluetoothServiceClassMajorRendering"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorReserved1] forKey:@"kBluetoothServiceClassMajorReserved1"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorReserved2] forKey:@"kBluetoothServiceClassMajorReserved2"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorTelephony] forKey:@"kBluetoothServiceClassMajorTelephony"];
[d setObject:[Number numberWithDouble:kBluetoothTransportTypePCCard] forKey:@"kBluetoothTransportTypePCCard"];
[d setObject:[Number numberWithDouble:kBluetoothTransportTypePCICard] forKey:@"kBluetoothTransportTypePCICard"];
[d setObject:[Number numberWithDouble:kBluetoothTransportTypeUSB] forKey:@"kBluetoothTransportTypeUSB"];
[d setObject:[Number numberWithDouble:kConnectionActiveMode] forKey:@"kConnectionActiveMode"];
[d setObject:[Number numberWithDouble:kConnectionHoldMode] forKey:@"kConnectionHoldMode"];
[d setObject:[Number numberWithDouble:kConnectionModeReservedForFutureUse] forKey:@"kConnectionModeReservedForFutureUse"];
[d setObject:[Number numberWithDouble:kConnectionParkMode] forKey:@"kConnectionParkMode"];
[d setObject:[Number numberWithDouble:kConnectionSniffMode] forKey:@"kConnectionSniffMode"];
[d setObject:[Number numberWithDouble:kDefaultPageTimeout] forKey:@"kDefaultPageTimeout"];
[d setObject:[Number numberWithDouble:kDeleteAllStoredLinkKeys] forKey:@"kDeleteAllStoredLinkKeys"];
[d setObject:[Number numberWithDouble:kDeleteKeyForSpecifiedDeviceOnly] forKey:@"kDeleteKeyForSpecifiedDeviceOnly"];
[d setObject:[Number numberWithDouble:kDisableAllLMModes] forKey:@"kDisableAllLMModes"];
[d setObject:[Number numberWithDouble:kEnableHoldMode] forKey:@"kEnableHoldMode"];
[d setObject:[Number numberWithDouble:kEnableMasterSlaveSwitch] forKey:@"kEnableMasterSlaveSwitch"];
[d setObject:[Number numberWithDouble:kEnableParkMode] forKey:@"kEnableParkMode"];
[d setObject:[Number numberWithDouble:kEnableSniffMode] forKey:@"kEnableSniffMode"];
[d setObject:[Number numberWithDouble:kEncryptionDisabled] forKey:@"kEncryptionDisabled"];
[d setObject:[Number numberWithDouble:kEncryptionForBothPointToPointAndBroadcastPackets] forKey:@"kEncryptionForBothPointToPointAndBroadcastPackets"];
[d setObject:[Number numberWithDouble:kEncryptionOnlyForPointToPointPackets] forKey:@"kEncryptionOnlyForPointToPointPackets"];
[d setObject:[Number numberWithDouble:kHCIACLDataPacketsOffHCISCODataPacketsOn] forKey:@"kHCIACLDataPacketsOffHCISCODataPacketsOn"];
[d setObject:[Number numberWithDouble:kHCIACLDataPacketsOnHCISCODataPacketsOff] forKey:@"kHCIACLDataPacketsOnHCISCODataPacketsOff"];
[d setObject:[Number numberWithDouble:kHCIACLDataPacketsOnHCISCODataPacketsOn] forKey:@"kHCIACLDataPacketsOnHCISCODataPacketsOn"];
[d setObject:[Number numberWithDouble:kHostControllerToHostFlowControlOff] forKey:@"kHostControllerToHostFlowControlOff"];
[d setObject:[Number numberWithDouble:kIOBluetoothConnectionAlreadyExists] forKey:@"kIOBluetoothConnectionAlreadyExists"];
[d setObject:[Number numberWithDouble:kIOBluetoothDeviceResetError] forKey:@"kIOBluetoothDeviceResetError"];
[d setObject:[Number numberWithDouble:kIOBluetoothHCIPowerStatesNotSupported] forKey:@"kIOBluetoothHCIPowerStatesNotSupported"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeClosed] forKey:@"kIOBluetoothL2CAPChannelEventTypeClosed"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeData] forKey:@"kIOBluetoothL2CAPChannelEventTypeData"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeOpenComplete] forKey:@"kIOBluetoothL2CAPChannelEventTypeOpenComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeQueueSpaceAvailable] forKey:@"kIOBluetoothL2CAPChannelEventTypeQueueSpaceAvailable"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeReconfigured] forKey:@"kIOBluetoothL2CAPChannelEventTypeReconfigured"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeWriteComplete] forKey:@"kIOBluetoothL2CAPChannelEventTypeWriteComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothNoHCIController] forKey:@"kIOBluetoothNoHCIController"];
[d setObject:[Number numberWithDouble:kIOBluetoothObjectIDNULL] forKey:@"kIOBluetoothObjectIDNULL"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeClosed] forKey:@"kIOBluetoothRFCOMMChannelEventTypeClosed"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeControlSignalsChanged] forKey:@"kIOBluetoothRFCOMMChannelEventTypeControlSignalsChanged"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeData] forKey:@"kIOBluetoothRFCOMMChannelEventTypeData"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeFlowControlChanged] forKey:@"kIOBluetoothRFCOMMChannelEventTypeFlowControlChanged"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeOpenComplete] forKey:@"kIOBluetoothRFCOMMChannelEventTypeOpenComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeQueueSpaceAvailable] forKey:@"kIOBluetoothRFCOMMChannelEventTypeQueueSpaceAvailable"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeWriteComplete] forKey:@"kIOBluetoothRFCOMMChannelEventTypeWriteComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelFlowControlStatusIsOff] forKey:@"kIOBluetoothRFCOMMChannelFlowControlStatusIsOff"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelFlowControlStatusIsOn] forKey:@"kIOBluetoothRFCOMMChannelFlowControlStatusIsOn"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelTerminatedEvent] forKey:@"kIOBluetoothRFCOMMChannelTerminatedEvent"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMFlowControlChangedEvent] forKey:@"kIOBluetoothRFCOMMFlowControlChangedEvent"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMNewDataEvent] forKey:@"kIOBluetoothRFCOMMNewDataEvent"];
[d setObject:[Number numberWithDouble:kIOBluetoothUserNotificationChannelDirectionAny] forKey:@"kIOBluetoothUserNotificationChannelDirectionAny"];
[d setObject:[Number numberWithDouble:kIOBluetoothUserNotificationChannelDirectionIncoming] forKey:@"kIOBluetoothUserNotificationChannelDirectionIncoming"];
[d setObject:[Number numberWithDouble:kIOBluetoothUserNotificationChannelDirectionOutgoing] forKey:@"kIOBluetoothUserNotificationChannelDirectionOutgoing"];
[d setObject:[Number numberWithDouble:kInfoStringMaxLength] forKey:@"kInfoStringMaxLength"];
[d setObject:[Number numberWithDouble:kInquiryScanDisabledPageScanEnabled] forKey:@"kInquiryScanDisabledPageScanEnabled"];
[d setObject:[Number numberWithDouble:kInquiryScanEnabledPageScanDisabled] forKey:@"kInquiryScanEnabledPageScanDisabled"];
[d setObject:[Number numberWithDouble:kInquiryScanEnabledPageScanEnabled] forKey:@"kInquiryScanEnabledPageScanEnabled"];
[d setObject:[Number numberWithDouble:kMaintainCurrentPowerState] forKey:@"kMaintainCurrentPowerState"];
[d setObject:[Number numberWithDouble:kMandatoryPageScanMode] forKey:@"kMandatoryPageScanMode"];
[d setObject:[Number numberWithDouble:kMaxChannelIDPerSide] forKey:@"kMaxChannelIDPerSide"];
[d setObject:[Number numberWithDouble:kNoScansEnabled] forKey:@"kNoScansEnabled"];
[d setObject:[Number numberWithDouble:kOBEXBadArgumentError] forKey:@"kOBEXBadArgumentError"];
[d setObject:[Number numberWithDouble:kOBEXBadRequestError] forKey:@"kOBEXBadRequestError"];
[d setObject:[Number numberWithDouble:kOBEXCancelledError] forKey:@"kOBEXCancelledError"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag1Reserved] forKey:@"kOBEXConnectFlag1Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag2Reserved] forKey:@"kOBEXConnectFlag2Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag3Reserved] forKey:@"kOBEXConnectFlag3Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag4Reserved] forKey:@"kOBEXConnectFlag4Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag5Reserved] forKey:@"kOBEXConnectFlag5Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag6Reserved] forKey:@"kOBEXConnectFlag6Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag7Reserved] forKey:@"kOBEXConnectFlag7Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlagNone] forKey:@"kOBEXConnectFlagNone"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlagSupportMultipleItLMPConnections] forKey:@"kOBEXConnectFlagSupportMultipleItLMPConnections"];
[d setObject:[Number numberWithDouble:kOBEXErrorRangeMax] forKey:@"kOBEXErrorRangeMax"];
[d setObject:[Number numberWithDouble:kOBEXErrorRangeMin] forKey:@"kOBEXErrorRangeMin"];
[d setObject:[Number numberWithDouble:kOBEXGeneralError] forKey:@"kOBEXGeneralError"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDAppParameters] forKey:@"kOBEXHeaderIDAppParameters"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDAuthorizationChallenge] forKey:@"kOBEXHeaderIDAuthorizationChallenge"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDAuthorizationResponse] forKey:@"kOBEXHeaderIDAuthorizationResponse"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDBody] forKey:@"kOBEXHeaderIDBody"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDConnectionID] forKey:@"kOBEXHeaderIDConnectionID"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDCount] forKey:@"kOBEXHeaderIDCount"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDDescription] forKey:@"kOBEXHeaderIDDescription"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDEndOfBody] forKey:@"kOBEXHeaderIDEndOfBody"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDHTTP] forKey:@"kOBEXHeaderIDHTTP"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDLength] forKey:@"kOBEXHeaderIDLength"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDName] forKey:@"kOBEXHeaderIDName"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDObjectClass] forKey:@"kOBEXHeaderIDObjectClass"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDReservedRangeEnd] forKey:@"kOBEXHeaderIDReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDReservedRangeStart] forKey:@"kOBEXHeaderIDReservedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDTarget] forKey:@"kOBEXHeaderIDTarget"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDTime4Byte] forKey:@"kOBEXHeaderIDTime4Byte"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDTimeISO] forKey:@"kOBEXHeaderIDTimeISO"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDType] forKey:@"kOBEXHeaderIDType"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDUserDefinedRangeEnd] forKey:@"kOBEXHeaderIDUserDefinedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDUserDefinedRangeStart] forKey:@"kOBEXHeaderIDUserDefinedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDWho] forKey:@"kOBEXHeaderIDWho"];
[d setObject:[Number numberWithDouble:kOBEXInternalError] forKey:@"kOBEXInternalError"];
[d setObject:[Number numberWithDouble:kOBEXNoResourcesError] forKey:@"kOBEXNoResourcesError"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag2Reserved] forKey:@"kOBEXNonceFlag2Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag3Reserved] forKey:@"kOBEXNonceFlag3Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag4Reserved] forKey:@"kOBEXNonceFlag4Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag5Reserved] forKey:@"kOBEXNonceFlag5Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag6Reserved] forKey:@"kOBEXNonceFlag6Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag7Reserved] forKey:@"kOBEXNonceFlag7Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlagAccessModeReadOnly] forKey:@"kOBEXNonceFlagAccessModeReadOnly"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlagNone] forKey:@"kOBEXNonceFlagNone"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlagSendUserIDInResponse] forKey:@"kOBEXNonceFlagSendUserIDInResponse"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeAbort] forKey:@"kOBEXOpCodeAbort"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeConnect] forKey:@"kOBEXOpCodeConnect"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeDisconnect] forKey:@"kOBEXOpCodeDisconnect"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeGet] forKey:@"kOBEXOpCodeGet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeGetWithHighBitSet] forKey:@"kOBEXOpCodeGetWithHighBitSet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodePut] forKey:@"kOBEXOpCodePut"];
[d setObject:[Number numberWithDouble:kOBEXOpCodePutWithHighBitSet] forKey:@"kOBEXOpCodePutWithHighBitSet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReserved] forKey:@"kOBEXOpCodeReserved"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReservedRangeEnd] forKey:@"kOBEXOpCodeReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReservedRangeStart] forKey:@"kOBEXOpCodeReservedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReservedWithHighBitSet] forKey:@"kOBEXOpCodeReservedWithHighBitSet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeSetPath] forKey:@"kOBEXOpCodeSetPath"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeUserDefinedEnd] forKey:@"kOBEXOpCodeUserDefinedEnd"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeUserDefinedStart] forKey:@"kOBEXOpCodeUserDefinedStart"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag2Reserved] forKey:@"kOBEXPutFlag2Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag3Reserved] forKey:@"kOBEXPutFlag3Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag4Reserved] forKey:@"kOBEXPutFlag4Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag5Reserved] forKey:@"kOBEXPutFlag5Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag6Reserved] forKey:@"kOBEXPutFlag6Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag7Reserved] forKey:@"kOBEXPutFlag7Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlagDontCreateDirectory] forKey:@"kOBEXPutFlagDontCreateDirectory"];
[d setObject:[Number numberWithDouble:kOBEXPutFlagGoToParentDirFirst] forKey:@"kOBEXPutFlagGoToParentDirFirst"];
[d setObject:[Number numberWithDouble:kOBEXPutFlagNone] forKey:@"kOBEXPutFlagNone"];
[d setObject:[Number numberWithDouble:kOBEXRealmASCII] forKey:@"kOBEXRealmASCII"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88591] forKey:@"kOBEXRealmISO88591"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88592] forKey:@"kOBEXRealmISO88592"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88593] forKey:@"kOBEXRealmISO88593"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88594] forKey:@"kOBEXRealmISO88594"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88595] forKey:@"kOBEXRealmISO88595"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88596] forKey:@"kOBEXRealmISO88596"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88597] forKey:@"kOBEXRealmISO88597"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88598] forKey:@"kOBEXRealmISO88598"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88599] forKey:@"kOBEXRealmISO88599"];
[d setObject:[Number numberWithDouble:kOBEXRealmUNICODE] forKey:@"kOBEXRealmUNICODE"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeAccepted] forKey:@"kOBEXResponseCodeAccepted"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeAcceptedWithFinalBit] forKey:@"kOBEXResponseCodeAcceptedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadGateway] forKey:@"kOBEXResponseCodeBadGateway"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadGatewayWithFinalBit] forKey:@"kOBEXResponseCodeBadGatewayWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadRequest] forKey:@"kOBEXResponseCodeBadRequest"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadRequestWithFinalBit] forKey:@"kOBEXResponseCodeBadRequestWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeConflict] forKey:@"kOBEXResponseCodeConflict"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeConflictWithFinalBit] forKey:@"kOBEXResponseCodeConflictWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeContinue] forKey:@"kOBEXResponseCodeContinue"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeContinueWithFinalBit] forKey:@"kOBEXResponseCodeContinueWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeCreated] forKey:@"kOBEXResponseCodeCreated"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeCreatedWithFinalBit] forKey:@"kOBEXResponseCodeCreatedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseFull] forKey:@"kOBEXResponseCodeDatabaseFull"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseFullWithFinalBit] forKey:@"kOBEXResponseCodeDatabaseFullWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseLocked] forKey:@"kOBEXResponseCodeDatabaseLocked"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseLockedWithFinalBit] forKey:@"kOBEXResponseCodeDatabaseLockedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeForbidden] forKey:@"kOBEXResponseCodeForbidden"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeForbiddenWithFinalBit] forKey:@"kOBEXResponseCodeForbiddenWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGatewayTimeout] forKey:@"kOBEXResponseCodeGatewayTimeout"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGatewayTimeoutWithFinalBit] forKey:@"kOBEXResponseCodeGatewayTimeoutWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGone] forKey:@"kOBEXResponseCodeGone"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGoneWithFinalBit] forKey:@"kOBEXResponseCodeGoneWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeHTTPVersionNotSupported] forKey:@"kOBEXResponseCodeHTTPVersionNotSupported"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeHTTPVersionNotSupportedWithFinalBit] forKey:@"kOBEXResponseCodeHTTPVersionNotSupportedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeInternalServerError] forKey:@"kOBEXResponseCodeInternalServerError"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeInternalServerErrorWithFinalBit] forKey:@"kOBEXResponseCodeInternalServerErrorWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeLengthRequired] forKey:@"kOBEXResponseCodeLengthRequired"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeLengthRequiredFinalBit] forKey:@"kOBEXResponseCodeLengthRequiredFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMethodNotAllowed] forKey:@"kOBEXResponseCodeMethodNotAllowed"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMethodNotAllowedWithFinalBit] forKey:@"kOBEXResponseCodeMethodNotAllowedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedPermanently] forKey:@"kOBEXResponseCodeMovedPermanently"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedPermanentlyWithFinalBit] forKey:@"kOBEXResponseCodeMovedPermanentlyWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedTemporarily] forKey:@"kOBEXResponseCodeMovedTemporarily"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedTemporarilyWithFinalBit] forKey:@"kOBEXResponseCodeMovedTemporarilyWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMultipleChoices] forKey:@"kOBEXResponseCodeMultipleChoices"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMultipleChoicesWithFinalBit] forKey:@"kOBEXResponseCodeMultipleChoicesWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNoContent] forKey:@"kOBEXResponseCodeNoContent"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNoContentWithFinalBit] forKey:@"kOBEXResponseCodeNoContentWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNonAuthoritativeInfo] forKey:@"kOBEXResponseCodeNonAuthoritativeInfo"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNonAuthoritativeInfoWithFinalBit] forKey:@"kOBEXResponseCodeNonAuthoritativeInfoWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotAcceptable] forKey:@"kOBEXResponseCodeNotAcceptable"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotAcceptableWithFinalBit] forKey:@"kOBEXResponseCodeNotAcceptableWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotFound] forKey:@"kOBEXResponseCodeNotFound"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotFoundWithFinalBit] forKey:@"kOBEXResponseCodeNotFoundWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotImplemented] forKey:@"kOBEXResponseCodeNotImplemented"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotImplementedWithFinalBit] forKey:@"kOBEXResponseCodeNotImplementedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotModified] forKey:@"kOBEXResponseCodeNotModified"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotModifiedWithFinalBit] forKey:@"kOBEXResponseCodeNotModifiedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePartialContent] forKey:@"kOBEXResponseCodePartialContent"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePartialContentWithFinalBit] forKey:@"kOBEXResponseCodePartialContentWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePaymentRequired] forKey:@"kOBEXResponseCodePaymentRequired"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePaymentRequiredWithFinalBit] forKey:@"kOBEXResponseCodePaymentRequiredWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePreconditionFailed] forKey:@"kOBEXResponseCodePreconditionFailed"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePreconditionFailedWithFinalBit] forKey:@"kOBEXResponseCodePreconditionFailedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeProxyAuthenticationRequired] forKey:@"kOBEXResponseCodeProxyAuthenticationRequired"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeProxyAuthenticationRequiredWithFinalBit] forKey:@"kOBEXResponseCodeProxyAuthenticationRequiredWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestTimeOut] forKey:@"kOBEXResponseCodeRequestTimeOut"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestTimeOutWithFinalBit] forKey:@"kOBEXResponseCodeRequestTimeOutWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestURLTooLarge] forKey:@"kOBEXResponseCodeRequestURLTooLarge"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestURLTooLargeWithFinalBit] forKey:@"kOBEXResponseCodeRequestURLTooLargeWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestedEntityTooLarge] forKey:@"kOBEXResponseCodeRequestedEntityTooLarge"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestedEntityTooLargeWithFinalBit] forKey:@"kOBEXResponseCodeRequestedEntityTooLargeWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeReservedRangeEnd] forKey:@"kOBEXResponseCodeReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeReservedRangeStart] forKey:@"kOBEXResponseCodeReservedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeResetContent] forKey:@"kOBEXResponseCodeResetContent"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeResetContentWithFinalBit] forKey:@"kOBEXResponseCodeResetContentWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSeeOther] forKey:@"kOBEXResponseCodeSeeOther"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSeeOtherWithFinalBit] forKey:@"kOBEXResponseCodeSeeOtherWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeServiceUnavailable] forKey:@"kOBEXResponseCodeServiceUnavailable"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeServiceUnavailableWithFinalBit] forKey:@"kOBEXResponseCodeServiceUnavailableWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSuccess] forKey:@"kOBEXResponseCodeSuccess"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSuccessWithFinalBit] forKey:@"kOBEXResponseCodeSuccessWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnauthorized] forKey:@"kOBEXResponseCodeUnauthorized"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnauthorizedWithFinalBit] forKey:@"kOBEXResponseCodeUnauthorizedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnsupportedMediaType] forKey:@"kOBEXResponseCodeUnsupportedMediaType"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnsupportedMediaTypeWithFinalBit] forKey:@"kOBEXResponseCodeUnsupportedMediaTypeWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUseProxy] forKey:@"kOBEXResponseCodeUseProxy"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUseProxyWithFinalBit] forKey:@"kOBEXResponseCodeUseProxyWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXSessionAlreadyConnectedError] forKey:@"kOBEXSessionAlreadyConnectedError"];
[d setObject:[Number numberWithDouble:kOBEXSessionBadRequestError] forKey:@"kOBEXSessionBadRequestError"];
[d setObject:[Number numberWithDouble:kOBEXSessionBadResponseError] forKey:@"kOBEXSessionBadResponseError"];
[d setObject:[Number numberWithDouble:kOBEXSessionBusyError] forKey:@"kOBEXSessionBusyError"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeAbortCommandReceived] forKey:@"kOBEXSessionEventTypeAbortCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeAbortCommandResponseReceived] forKey:@"kOBEXSessionEventTypeAbortCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeConnectCommandReceived] forKey:@"kOBEXSessionEventTypeConnectCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeConnectCommandResponseReceived] forKey:@"kOBEXSessionEventTypeConnectCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeDisconnectCommandReceived] forKey:@"kOBEXSessionEventTypeDisconnectCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeDisconnectCommandResponseReceived] forKey:@"kOBEXSessionEventTypeDisconnectCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeError] forKey:@"kOBEXSessionEventTypeError"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeGetCommandReceived] forKey:@"kOBEXSessionEventTypeGetCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeGetCommandResponseReceived] forKey:@"kOBEXSessionEventTypeGetCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypePutCommandReceived] forKey:@"kOBEXSessionEventTypePutCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypePutCommandResponseReceived] forKey:@"kOBEXSessionEventTypePutCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeSetPathCommandReceived] forKey:@"kOBEXSessionEventTypeSetPathCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeSetPathCommandResponseReceived] forKey:@"kOBEXSessionEventTypeSetPathCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionNoTransportError] forKey:@"kOBEXSessionNoTransportError"];
[d setObject:[Number numberWithDouble:kOBEXSessionNotConnectedError] forKey:@"kOBEXSessionNotConnectedError"];
[d setObject:[Number numberWithDouble:kOBEXSessionTimeoutError] forKey:@"kOBEXSessionTimeoutError"];
[d setObject:[Number numberWithDouble:kOBEXSessionTransportDiedError] forKey:@"kOBEXSessionTransportDiedError"];
[d setObject:[Number numberWithDouble:kOBEXSuccess] forKey:@"kOBEXSuccess"];
[d setObject:[Number numberWithDouble:kOBEXTimeoutError] forKey:@"kOBEXTimeoutError"];
[d setObject:[Number numberWithDouble:kOBEXTransportEventTypeDataReceived] forKey:@"kOBEXTransportEventTypeDataReceived"];
[d setObject:[Number numberWithDouble:kOBEXTransportEventTypeStatus] forKey:@"kOBEXTransportEventTypeStatus"];
[d setObject:[Number numberWithDouble:kOBEXUnsupportedError] forKey:@"kOBEXUnsupportedError"];
[d setObject:[Number numberWithDouble:kOBEXVersion10] forKey:@"kOBEXVersion10"];
[d setObject:[Number numberWithDouble:kOptionalPageScanMode1] forKey:@"kOptionalPageScanMode1"];
[d setObject:[Number numberWithDouble:kOptionalPageScanMode2] forKey:@"kOptionalPageScanMode2"];
[d setObject:[Number numberWithDouble:kOptionalPageScanMode3] forKey:@"kOptionalPageScanMode3"];
[d setObject:[Number numberWithDouble:kP0Mode] forKey:@"kP0Mode"];
[d setObject:[Number numberWithDouble:kP1Mode] forKey:@"kP1Mode"];
[d setObject:[Number numberWithDouble:kP2Mode] forKey:@"kP2Mode"];
[d setObject:[Number numberWithDouble:kReadAllStoredLinkKeys] forKey:@"kReadAllStoredLinkKeys"];
[d setObject:[Number numberWithDouble:kReadCurrentTransmitPowerLevel] forKey:@"kReadCurrentTransmitPowerLevel"];
[d setObject:[Number numberWithDouble:kReadMaximumTransmitPowerLevel] forKey:@"kReadMaximumTransmitPowerLevel"];
[d setObject:[Number numberWithDouble:kReservedForFutureUse] forKey:@"kReservedForFutureUse"];
[d setObject:[Number numberWithDouble:kReturnLinkKeyForSpecifiedDeviceOnly] forKey:@"kReturnLinkKeyForSpecifiedDeviceOnly"];
[d setObject:[Number numberWithDouble:kSCOFlowControlDisabled] forKey:@"kSCOFlowControlDisabled"];
[d setObject:[Number numberWithDouble:kSCOFlowControlEnabled] forKey:@"kSCOFlowControlEnabled"];
[d setObject:[Number numberWithDouble:kSearchOptionsAlwaysStartInquiry] forKey:@"kSearchOptionsAlwaysStartInquiry"];
[d setObject:[Number numberWithDouble:kSearchOptionsDiscardCachedResults] forKey:@"kSearchOptionsDiscardCachedResults"];
[d setObject:[Number numberWithDouble:kSearchOptionsNone] forKey:@"kSearchOptionsNone"];
[d setObject:[Number numberWithDouble:kSuspendInquiryScan] forKey:@"kSuspendInquiryScan"];
[d setObject:[Number numberWithDouble:kSuspendPageScan] forKey:@"kSuspendPageScan"];
[d setObject:[Number numberWithDouble:kSuspendPeriodicInquiries] forKey:@"kSuspendPeriodicInquiries"];
[d setObject:[Number numberWithDouble:sub_iokit_bluetooth] forKey:@"sub_iokit_bluetooth"];
[d setObject:(NSString *)kOBEXHeaderIDKeyAppParameters forKey:@"kOBEXHeaderIDKeyAppParameters"];
[d setObject:(NSString *)kOBEXHeaderIDKeyAuthorizationChallenge forKey:@"kOBEXHeaderIDKeyAuthorizationChallenge"];
[d setObject:(NSString *)kOBEXHeaderIDKeyAuthorizationResponse forKey:@"kOBEXHeaderIDKeyAuthorizationResponse"];
[d setObject:(NSString *)kOBEXHeaderIDKeyBody forKey:@"kOBEXHeaderIDKeyBody"];
[d setObject:(NSString *)kOBEXHeaderIDKeyByteSequence forKey:@"kOBEXHeaderIDKeyByteSequence"];
[d setObject:(NSString *)kOBEXHeaderIDKeyConnectionID forKey:@"kOBEXHeaderIDKeyConnectionID"];
[d setObject:(NSString *)kOBEXHeaderIDKeyCount forKey:@"kOBEXHeaderIDKeyCount"];
[d setObject:(NSString *)kOBEXHeaderIDKeyDescription forKey:@"kOBEXHeaderIDKeyDescription"];
[d setObject:(NSString *)kOBEXHeaderIDKeyEndOfBody forKey:@"kOBEXHeaderIDKeyEndOfBody"];
[d setObject:(NSString *)kOBEXHeaderIDKeyHTTP forKey:@"kOBEXHeaderIDKeyHTTP"];
[d setObject:(NSString *)kOBEXHeaderIDKeyLength forKey:@"kOBEXHeaderIDKeyLength"];
[d setObject:(NSString *)kOBEXHeaderIDKeyName forKey:@"kOBEXHeaderIDKeyName"];
[d setObject:(NSString *)kOBEXHeaderIDKeyObjectClass forKey:@"kOBEXHeaderIDKeyObjectClass"];
[d setObject:(NSString *)kOBEXHeaderIDKeyTarget forKey:@"kOBEXHeaderIDKeyTarget"];
[d setObject:(NSString *)kOBEXHeaderIDKeyTime4Byte forKey:@"kOBEXHeaderIDKeyTime4Byte"];
[d setObject:(NSString *)kOBEXHeaderIDKeyTimeISO forKey:@"kOBEXHeaderIDKeyTimeISO"];
[d setObject:(NSString *)kOBEXHeaderIDKeyType forKey:@"kOBEXHeaderIDKeyType"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknown1ByteQuantity forKey:@"kOBEXHeaderIDKeyUnknown1ByteQuantity"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknown4ByteQuantity forKey:@"kOBEXHeaderIDKeyUnknown4ByteQuantity"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknownByteSequence forKey:@"kOBEXHeaderIDKeyUnknownByteSequence"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUnknownUnicodeText forKey:@"kOBEXHeaderIDKeyUnknownUnicodeText"];
[d setObject:(NSString *)kOBEXHeaderIDKeyUserDefined forKey:@"kOBEXHeaderIDKeyUserDefined"];
[d setObject:(NSString *)kOBEXHeaderIDKeyWho forKey:@"kOBEXHeaderIDKeyWho"];
[d setObject:kBluetoothTargetDoesNotRespondToCallbackExceptionName forKey:@"kBluetoothTargetDoesNotRespondToCallbackExceptionName"];
[d setObject:kIOBluetoothDeviceInquiryInfoChangedNotification forKey:@"kIOBluetoothDeviceInquiryInfoChangedNotification"];
[d setObject:kIOBluetoothDeviceNameChangedNotification forKey:@"kIOBluetoothDeviceNameChangedNotification"];
[d setObject:kIOBluetoothDeviceNotificationNameConnected forKey:@"kIOBluetoothDeviceNotificationNameConnected"];
[d setObject:kIOBluetoothDeviceNotificationNameDisconnected forKey:@"kIOBluetoothDeviceNotificationNameDisconnected"];
[d setObject:kIOBluetoothDeviceServicesChangedNotification forKey:@"kIOBluetoothDeviceServicesChangedNotification"];
[d setObject:kIOBluetoothL2CAPChannelDesiredOutgoingMTU forKey:@"kIOBluetoothL2CAPChannelDesiredOutgoingMTU"];
[d setObject:kIOBluetoothL2CAPChannelMaxAllowedIncomingMTU forKey:@"kIOBluetoothL2CAPChannelMaxAllowedIncomingMTU"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_0] forKey:@"BLUETOOTH_VERSION_1_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_0_0] forKey:@"BLUETOOTH_VERSION_1_0_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_0_1] forKey:@"BLUETOOTH_VERSION_1_0_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_1] forKey:@"BLUETOOTH_VERSION_1_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_1_0] forKey:@"BLUETOOTH_VERSION_1_1_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_2] forKey:@"BLUETOOTH_VERSION_1_2"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_2_0] forKey:@"BLUETOOTH_VERSION_1_2_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_2_1] forKey:@"BLUETOOTH_VERSION_1_2_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_3] forKey:@"BLUETOOTH_VERSION_1_3"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_3_0] forKey:@"BLUETOOTH_VERSION_1_3_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_3_1] forKey:@"BLUETOOTH_VERSION_1_3_1"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_6] forKey:@"BLUETOOTH_VERSION_1_6"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_6_0] forKey:@"BLUETOOTH_VERSION_1_6_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_1_6_3] forKey:@"BLUETOOTH_VERSION_1_6_3"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_2_0] forKey:@"BLUETOOTH_VERSION_2_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_2_0_0] forKey:@"BLUETOOTH_VERSION_2_0_0"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_CURRENT] forKey:@"BLUETOOTH_VERSION_CURRENT"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_MAX_ALLOWED] forKey:@"BLUETOOTH_VERSION_MAX_ALLOWED"];
[d setObject:[Number numberWithDouble:BLUETOOTH_VERSION_MIN_REQUIRED] forKey:@"BLUETOOTH_VERSION_MIN_REQUIRED"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusFramingError] forKey:@"BluetoothRFCOMMLineStatusFramingError"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusNoError] forKey:@"BluetoothRFCOMMLineStatusNoError"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusOverrunError] forKey:@"BluetoothRFCOMMLineStatusOverrunError"];
[d setObject:[Number numberWithDouble:BluetoothRFCOMMLineStatusParityError] forKey:@"BluetoothRFCOMMLineStatusParityError"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_1] forKey:@"MAC_OS_X_VERSION_10_2_1"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_2] forKey:@"MAC_OS_X_VERSION_10_2_2"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_3] forKey:@"MAC_OS_X_VERSION_10_2_3"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_4] forKey:@"MAC_OS_X_VERSION_10_2_4"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_5] forKey:@"MAC_OS_X_VERSION_10_2_5"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_6] forKey:@"MAC_OS_X_VERSION_10_2_6"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_2_7] forKey:@"MAC_OS_X_VERSION_10_2_7"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_MIN_REQUIRED] forKey:@"MAC_OS_X_VERSION_MIN_REQUIRED"];
[d setObject:[Number numberWithDouble:kAuthenticationDisabled] forKey:@"kAuthenticationDisabled"];
[d setObject:[Number numberWithDouble:kAuthenticationEnabled] forKey:@"kAuthenticationEnabled"];
[d setObject:[Number numberWithDouble:kBluetoothACLConnection] forKey:@"kBluetoothACLConnection"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelL2CAPContinue] forKey:@"kBluetoothACLLogicalChannelL2CAPContinue"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelL2CAPStart] forKey:@"kBluetoothACLLogicalChannelL2CAPStart"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelLMP] forKey:@"kBluetoothACLLogicalChannelLMP"];
[d setObject:[Number numberWithDouble:kBluetoothACLLogicalChannelReserved] forKey:@"kBluetoothACLLogicalChannelReserved"];
[d setObject:[Number numberWithDouble:kBluetoothAllowRoleSwitch] forKey:@"kBluetoothAllowRoleSwitch"];
[d setObject:[Number numberWithDouble:kBluetoothAuthenticationRequirementsMITMProtectionNotRequired] forKey:@"kBluetoothAuthenticationRequirementsMITMProtectionNotRequired"];
[d setObject:[Number numberWithDouble:kBluetoothAuthenticationRequirementsMITMProtectionRequired] forKey:@"kBluetoothAuthenticationRequirementsMITMProtectionRequired"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeDisplayOnly] forKey:@"kBluetoothCapabilityTypeDisplayOnly"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeDisplayYesNo] forKey:@"kBluetoothCapabilityTypeDisplayYesNo"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeKeyboardOnly] forKey:@"kBluetoothCapabilityTypeKeyboardOnly"];
[d setObject:[Number numberWithDouble:kBluetoothCapabilityTypeNoInputNoOutput] forKey:@"kBluetoothCapabilityTypeNoInputNoOutput"];
[d setObject:[Number numberWithDouble:kBluetoothConnectionHandleNone] forKey:@"kBluetoothConnectionHandleNone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorAny] forKey:@"kBluetoothDeviceClassMajorAny"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorAudio] forKey:@"kBluetoothDeviceClassMajorAudio"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorComputer] forKey:@"kBluetoothDeviceClassMajorComputer"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorEnd] forKey:@"kBluetoothDeviceClassMajorEnd"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorImaging] forKey:@"kBluetoothDeviceClassMajorImaging"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorLANAccessPoint] forKey:@"kBluetoothDeviceClassMajorLANAccessPoint"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorMiscellaneous] forKey:@"kBluetoothDeviceClassMajorMiscellaneous"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorNone] forKey:@"kBluetoothDeviceClassMajorNone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorPeripheral] forKey:@"kBluetoothDeviceClassMajorPeripheral"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorPhone] forKey:@"kBluetoothDeviceClassMajorPhone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMajorUnclassified] forKey:@"kBluetoothDeviceClassMajorUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAny] forKey:@"kBluetoothDeviceClassMinorAny"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioCamcorder] forKey:@"kBluetoothDeviceClassMinorAudioCamcorder"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioCar] forKey:@"kBluetoothDeviceClassMinorAudioCar"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioGamingToy] forKey:@"kBluetoothDeviceClassMinorAudioGamingToy"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHandsFree] forKey:@"kBluetoothDeviceClassMinorAudioHandsFree"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHeadphones] forKey:@"kBluetoothDeviceClassMinorAudioHeadphones"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHeadset] forKey:@"kBluetoothDeviceClassMinorAudioHeadset"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioHiFi] forKey:@"kBluetoothDeviceClassMinorAudioHiFi"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioLoudspeaker] forKey:@"kBluetoothDeviceClassMinorAudioLoudspeaker"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioMicrophone] forKey:@"kBluetoothDeviceClassMinorAudioMicrophone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioPortable] forKey:@"kBluetoothDeviceClassMinorAudioPortable"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioReserved1] forKey:@"kBluetoothDeviceClassMinorAudioReserved1"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioReserved2] forKey:@"kBluetoothDeviceClassMinorAudioReserved2"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioSetTopBox] forKey:@"kBluetoothDeviceClassMinorAudioSetTopBox"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioUnclassified] forKey:@"kBluetoothDeviceClassMinorAudioUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVCR] forKey:@"kBluetoothDeviceClassMinorAudioVCR"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoCamera] forKey:@"kBluetoothDeviceClassMinorAudioVideoCamera"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoConferencing] forKey:@"kBluetoothDeviceClassMinorAudioVideoConferencing"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoDisplayAndLoudspeaker] forKey:@"kBluetoothDeviceClassMinorAudioVideoDisplayAndLoudspeaker"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorAudioVideoMonitor] forKey:@"kBluetoothDeviceClassMinorAudioVideoMonitor"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerDesktopWorkstation] forKey:@"kBluetoothDeviceClassMinorComputerDesktopWorkstation"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerHandheld] forKey:@"kBluetoothDeviceClassMinorComputerHandheld"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerLaptop] forKey:@"kBluetoothDeviceClassMinorComputerLaptop"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerPalmSized] forKey:@"kBluetoothDeviceClassMinorComputerPalmSized"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerServer] forKey:@"kBluetoothDeviceClassMinorComputerServer"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerUnclassified] forKey:@"kBluetoothDeviceClassMinorComputerUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorComputerWearable] forKey:@"kBluetoothDeviceClassMinorComputerWearable"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorEnd] forKey:@"kBluetoothDeviceClassMinorEnd"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Camera] forKey:@"kBluetoothDeviceClassMinorImaging1Camera"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Display] forKey:@"kBluetoothDeviceClassMinorImaging1Display"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Printer] forKey:@"kBluetoothDeviceClassMinorImaging1Printer"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging1Scanner] forKey:@"kBluetoothDeviceClassMinorImaging1Scanner"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorImaging2Unclassified] forKey:@"kBluetoothDeviceClassMinorImaging2Unclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorNone] forKey:@"kBluetoothDeviceClassMinorNone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral1Combo] forKey:@"kBluetoothDeviceClassMinorPeripheral1Combo"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral1Keyboard] forKey:@"kBluetoothDeviceClassMinorPeripheral1Keyboard"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral1Pointing] forKey:@"kBluetoothDeviceClassMinorPeripheral1Pointing"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2Gamepad] forKey:@"kBluetoothDeviceClassMinorPeripheral2Gamepad"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2Joystick] forKey:@"kBluetoothDeviceClassMinorPeripheral2Joystick"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2RemoteControl] forKey:@"kBluetoothDeviceClassMinorPeripheral2RemoteControl"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2SensingDevice] forKey:@"kBluetoothDeviceClassMinorPeripheral2SensingDevice"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPeripheral2Unclassified] forKey:@"kBluetoothDeviceClassMinorPeripheral2Unclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneCellular] forKey:@"kBluetoothDeviceClassMinorPhoneCellular"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneCommonISDNAccess] forKey:@"kBluetoothDeviceClassMinorPhoneCommonISDNAccess"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneCordless] forKey:@"kBluetoothDeviceClassMinorPhoneCordless"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneSmartPhone] forKey:@"kBluetoothDeviceClassMinorPhoneSmartPhone"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneUnclassified] forKey:@"kBluetoothDeviceClassMinorPhoneUnclassified"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceClassMinorPhoneWiredModemOrVoiceGateway] forKey:@"kBluetoothDeviceClassMinorPhoneWiredModemOrVoiceGateway"];
[d setObject:[Number numberWithDouble:kBluetoothDeviceNameMaxLength] forKey:@"kBluetoothDeviceNameMaxLength"];
[d setObject:[Number numberWithDouble:kBluetoothDontAllowRoleSwitch] forKey:@"kBluetoothDontAllowRoleSwitch"];
[d setObject:[Number numberWithDouble:kBluetoothESCOConnection] forKey:@"kBluetoothESCOConnection"];
[d setObject:[Number numberWithDouble:kBluetoothEncryptionEnableOff] forKey:@"kBluetoothEncryptionEnableOff"];
[d setObject:[Number numberWithDouble:kBluetoothEncryptionEnableOn] forKey:@"kBluetoothEncryptionEnableOn"];
[d setObject:[Number numberWithDouble:kBluetoothFeature3SlotEnhancedDataRateACLPackets] forKey:@"kBluetoothFeature3SlotEnhancedDataRateACLPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeature5SlotEnhancedDataRateACLPackets] forKey:@"kBluetoothFeature5SlotEnhancedDataRateACLPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHCapableMaster] forKey:@"kBluetoothFeatureAFHCapableMaster"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHCapableSlave] forKey:@"kBluetoothFeatureAFHCapableSlave"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHClassificationMaster] forKey:@"kBluetoothFeatureAFHClassificationMaster"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAFHClassificationSlave] forKey:@"kBluetoothFeatureAFHClassificationSlave"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureALawLog] forKey:@"kBluetoothFeatureALawLog"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAbsenceMasks] forKey:@"kBluetoothFeatureAbsenceMasks"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAliasAuhentication] forKey:@"kBluetoothFeatureAliasAuhentication"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureAnonymityMode] forKey:@"kBluetoothFeatureAnonymityMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureBroadcastEncryption] forKey:@"kBluetoothFeatureBroadcastEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureCVSD] forKey:@"kBluetoothFeatureCVSD"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureChannelQuality] forKey:@"kBluetoothFeatureChannelQuality"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEV4Packets] forKey:@"kBluetoothFeatureEV4Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEV5Packets] forKey:@"kBluetoothFeatureEV5Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEncapsulatedPDU] forKey:@"kBluetoothFeatureEncapsulatedPDU"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEncryption] forKey:@"kBluetoothFeatureEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateACL2MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateACL2MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateACL3MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateACL3MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateeSCO2MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateeSCO2MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedDataRateeSCO3MbpsMode] forKey:@"kBluetoothFeatureEnhancedDataRateeSCO3MbpsMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureEnhancedInquiryScan] forKey:@"kBluetoothFeatureEnhancedInquiryScan"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureErroneousDataReporting] forKey:@"kBluetoothFeatureErroneousDataReporting"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureExtendedFeatures] forKey:@"kBluetoothFeatureExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureExtendedInquiryResponse] forKey:@"kBluetoothFeatureExtendedInquiryResponse"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureExtendedSCOLink] forKey:@"kBluetoothFeatureExtendedSCOLink"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFiveSlotPackets] forKey:@"kBluetoothFeatureFiveSlotPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFlowControlLagBit0] forKey:@"kBluetoothFeatureFlowControlLagBit0"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFlowControlLagBit1] forKey:@"kBluetoothFeatureFlowControlLagBit1"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureFlowControlLagBit2] forKey:@"kBluetoothFeatureFlowControlLagBit2"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureHV2Packets] forKey:@"kBluetoothFeatureHV2Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureHV3Packets] forKey:@"kBluetoothFeatureHV3Packets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureHoldMode] forKey:@"kBluetoothFeatureHoldMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureInquiryTransmissionPowerLevel] forKey:@"kBluetoothFeatureInquiryTransmissionPowerLevel"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureInterlacedInquiryScan] forKey:@"kBluetoothFeatureInterlacedInquiryScan"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureInterlacedPageScan] forKey:@"kBluetoothFeatureInterlacedPageScan"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureLinkSupervisionTimeoutChangedEvent] forKey:@"kBluetoothFeatureLinkSupervisionTimeoutChangedEvent"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureNonFlushablePacketBoundaryFlag] forKey:@"kBluetoothFeatureNonFlushablePacketBoundaryFlag"];
[d setObject:[Number numberWithDouble:kBluetoothFeaturePagingScheme] forKey:@"kBluetoothFeaturePagingScheme"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureParkMode] forKey:@"kBluetoothFeatureParkMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeaturePauseEncryption] forKey:@"kBluetoothFeaturePauseEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothFeaturePowerControl] forKey:@"kBluetoothFeaturePowerControl"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureRSSI] forKey:@"kBluetoothFeatureRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureRSSIWithInquiryResult] forKey:@"kBluetoothFeatureRSSIWithInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureReserved1] forKey:@"kBluetoothFeatureReserved1"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureReserved2] forKey:@"kBluetoothFeatureReserved2"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSCOLink] forKey:@"kBluetoothFeatureSCOLink"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureScatterMode] forKey:@"kBluetoothFeatureScatterMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSecureSimplePairing] forKey:@"kBluetoothFeatureSecureSimplePairing"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSlotOffset] forKey:@"kBluetoothFeatureSlotOffset"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSniffMode] forKey:@"kBluetoothFeatureSniffMode"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureSwitchRoles] forKey:@"kBluetoothFeatureSwitchRoles"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureThreeSlotPackets] forKey:@"kBluetoothFeatureThreeSlotPackets"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureTimingAccuracy] forKey:@"kBluetoothFeatureTimingAccuracy"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureTransparentSCOData] forKey:@"kBluetoothFeatureTransparentSCOData"];
[d setObject:[Number numberWithDouble:kBluetoothFeatureULawLog] forKey:@"kBluetoothFeatureULawLog"];
[d setObject:[Number numberWithDouble:kBluetoothGeneralInquiryAccessCodeIndex] forKey:@"kBluetoothGeneralInquiryAccessCodeIndex"];
[d setObject:[Number numberWithDouble:kBluetoothGeneralInquiryAccessCodeLAPValue] forKey:@"kBluetoothGeneralInquiryAccessCodeLAPValue"];
[d setObject:[Number numberWithDouble:kBluetoothHCIAddHIDDevice] forKey:@"kBluetoothHCIAddHIDDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAcceptConnectionRequest] forKey:@"kBluetoothHCICommandAcceptConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAcceptSniffRequest] forKey:@"kBluetoothHCICommandAcceptSniffRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAcceptSynchronousConnectionRequest] forKey:@"kBluetoothHCICommandAcceptSynchronousConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAddSCOConnection] forKey:@"kBluetoothHCICommandAddSCOConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandAuthenticationRequested] forKey:@"kBluetoothHCICommandAuthenticationRequested"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandChangeConnectionLinkKey] forKey:@"kBluetoothHCICommandChangeConnectionLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandChangeConnectionPacketType] forKey:@"kBluetoothHCICommandChangeConnectionPacketType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandChangeLocalName] forKey:@"kBluetoothHCICommandChangeLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandCreateConnection] forKey:@"kBluetoothHCICommandCreateConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandCreateNewUnitKey] forKey:@"kBluetoothHCICommandCreateNewUnitKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandDeletePersistentSniffInterval] forKey:@"kBluetoothHCICommandDeletePersistentSniffInterval"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandDeleteStoredLinkKey] forKey:@"kBluetoothHCICommandDeleteStoredLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandDisconnect] forKey:@"kBluetoothHCICommandDisconnect"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnableDeviceUnderTestMode] forKey:@"kBluetoothHCICommandEnableDeviceUnderTestMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnableHIDEmulation] forKey:@"kBluetoothHCICommandEnableHIDEmulation"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnableRadio] forKey:@"kBluetoothHCICommandEnableRadio"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandEnhancedFlush] forKey:@"kBluetoothHCICommandEnhancedFlush"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandExitParkMode] forKey:@"kBluetoothHCICommandExitParkMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandExitPeriodicInquiryMode] forKey:@"kBluetoothHCICommandExitPeriodicInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandExitSniffMode] forKey:@"kBluetoothHCICommandExitSniffMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandFlowSpecification] forKey:@"kBluetoothHCICommandFlowSpecification"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandFlush] forKey:@"kBluetoothHCICommandFlush"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGetLinkQuality] forKey:@"kBluetoothHCICommandGetLinkQuality"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupHostController] forKey:@"kBluetoothHCICommandGroupHostController"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupInformational] forKey:@"kBluetoothHCICommandGroupInformational"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupLinkControl] forKey:@"kBluetoothHCICommandGroupLinkControl"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupLinkPolicy] forKey:@"kBluetoothHCICommandGroupLinkPolicy"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupLogoTesting] forKey:@"kBluetoothHCICommandGroupLogoTesting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupMax] forKey:@"kBluetoothHCICommandGroupMax"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupNoOp] forKey:@"kBluetoothHCICommandGroupNoOp"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupStatus] forKey:@"kBluetoothHCICommandGroupStatus"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupTesting] forKey:@"kBluetoothHCICommandGroupTesting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandGroupVendorSpecific] forKey:@"kBluetoothHCICommandGroupVendorSpecific"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandHoldMode] forKey:@"kBluetoothHCICommandHoldMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandHostBufferSize] forKey:@"kBluetoothHCICommandHostBufferSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandHostNumberOfCompletedPackets] forKey:@"kBluetoothHCICommandHostNumberOfCompletedPackets"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandIOCapabilityResponse] forKey:@"kBluetoothHCICommandIOCapabilityResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandInquiry] forKey:@"kBluetoothHCICommandInquiry"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandInquiryCancel] forKey:@"kBluetoothHCICommandInquiryCancel"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandInvalidateFlashAndReboot] forKey:@"kBluetoothHCICommandInvalidateFlashAndReboot"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandLinkKeyRequestNegativeReply] forKey:@"kBluetoothHCICommandLinkKeyRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandLinkKeyRequestReply] forKey:@"kBluetoothHCICommandLinkKeyRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandMasterLinkKey] forKey:@"kBluetoothHCICommandMasterLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandMax] forKey:@"kBluetoothHCICommandMax"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandNoOp] forKey:@"kBluetoothHCICommandNoOp"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPINCodeRequestNegativeReply] forKey:@"kBluetoothHCICommandPINCodeRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPINCodeRequestReply] forKey:@"kBluetoothHCICommandPINCodeRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPacketHeaderSize] forKey:@"kBluetoothHCICommandPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPacketMaxDataSize] forKey:@"kBluetoothHCICommandPacketMaxDataSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandParkMode] forKey:@"kBluetoothHCICommandParkMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandPeriodicInquiryMode] forKey:@"kBluetoothHCICommandPeriodicInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandQoSSetup] forKey:@"kBluetoothHCICommandQoSSetup"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAFHChannelAssessmentMode] forKey:@"kBluetoothHCICommandReadAFHChannelAssessmentMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAFHMappings] forKey:@"kBluetoothHCICommandReadAFHMappings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAuthenticationEnable] forKey:@"kBluetoothHCICommandReadAuthenticationEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadAutomaticFlushTimeout] forKey:@"kBluetoothHCICommandReadAutomaticFlushTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadBufferSize] forKey:@"kBluetoothHCICommandReadBufferSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadClassOfDevice] forKey:@"kBluetoothHCICommandReadClassOfDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadClock] forKey:@"kBluetoothHCICommandReadClock"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadClockOffset] forKey:@"kBluetoothHCICommandReadClockOffset"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadConnectionAcceptTimeout] forKey:@"kBluetoothHCICommandReadConnectionAcceptTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadCountryCode] forKey:@"kBluetoothHCICommandReadCountryCode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadCurrentIACLAP] forKey:@"kBluetoothHCICommandReadCurrentIACLAP"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadDefaultErroneousDataReporting] forKey:@"kBluetoothHCICommandReadDefaultErroneousDataReporting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadDefaultLinkPolicySettings] forKey:@"kBluetoothHCICommandReadDefaultLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadDeviceAddress] forKey:@"kBluetoothHCICommandReadDeviceAddress"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadEncryptionMode] forKey:@"kBluetoothHCICommandReadEncryptionMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadExtendedInquiryResponse] forKey:@"kBluetoothHCICommandReadExtendedInquiryResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadFailedContactCounter] forKey:@"kBluetoothHCICommandReadFailedContactCounter"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadHoldModeActivity] forKey:@"kBluetoothHCICommandReadHoldModeActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryMode] forKey:@"kBluetoothHCICommandReadInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryResponseTransmitPower] forKey:@"kBluetoothHCICommandReadInquiryResponseTransmitPower"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryScanActivity] forKey:@"kBluetoothHCICommandReadInquiryScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadInquiryScanType] forKey:@"kBluetoothHCICommandReadInquiryScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLMPHandle] forKey:@"kBluetoothHCICommandReadLMPHandle"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLinkPolicySettings] forKey:@"kBluetoothHCICommandReadLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLinkSupervisionTimeout] forKey:@"kBluetoothHCICommandReadLinkSupervisionTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalExtendedFeatures] forKey:@"kBluetoothHCICommandReadLocalExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalName] forKey:@"kBluetoothHCICommandReadLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalOOBData] forKey:@"kBluetoothHCICommandReadLocalOOBData"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalSupportedCommands] forKey:@"kBluetoothHCICommandReadLocalSupportedCommands"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalSupportedFeatures] forKey:@"kBluetoothHCICommandReadLocalSupportedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLocalVersionInformation] forKey:@"kBluetoothHCICommandReadLocalVersionInformation"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadLoopbackMode] forKey:@"kBluetoothHCICommandReadLoopbackMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadNumberOfBroadcastRetransmissions] forKey:@"kBluetoothHCICommandReadNumberOfBroadcastRetransmissions"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadNumberOfSupportedIAC] forKey:@"kBluetoothHCICommandReadNumberOfSupportedIAC"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPINType] forKey:@"kBluetoothHCICommandReadPINType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanActivity] forKey:@"kBluetoothHCICommandReadPageScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanMode] forKey:@"kBluetoothHCICommandReadPageScanMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanPeriodMode] forKey:@"kBluetoothHCICommandReadPageScanPeriodMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageScanType] forKey:@"kBluetoothHCICommandReadPageScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPageTimeout] forKey:@"kBluetoothHCICommandReadPageTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadPersistentSniffInterval] forKey:@"kBluetoothHCICommandReadPersistentSniffInterval"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadRSSI] forKey:@"kBluetoothHCICommandReadRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadRemoteSupportedFeatures] forKey:@"kBluetoothHCICommandReadRemoteSupportedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadRemoteVersionInformation] forKey:@"kBluetoothHCICommandReadRemoteVersionInformation"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadSCOFlowControlEnable] forKey:@"kBluetoothHCICommandReadSCOFlowControlEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadScanEnable] forKey:@"kBluetoothHCICommandReadScanEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadSimplePairingMode] forKey:@"kBluetoothHCICommandReadSimplePairingMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadStoredLinkKey] forKey:@"kBluetoothHCICommandReadStoredLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadTransmitPowerLevel] forKey:@"kBluetoothHCICommandReadTransmitPowerLevel"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReadVoiceSetting] forKey:@"kBluetoothHCICommandReadVoiceSetting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRejectConnectionRequest] forKey:@"kBluetoothHCICommandRejectConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRejectSniffRequest] forKey:@"kBluetoothHCICommandRejectSniffRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRejectSynchronousConnectionRequest] forKey:@"kBluetoothHCICommandRejectSynchronousConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRemoteNameRequest] forKey:@"kBluetoothHCICommandRemoteNameRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRemoteOOBDataRequestNegativeReply] forKey:@"kBluetoothHCICommandRemoteOOBDataRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRemoteOOBDataRequestReply] forKey:@"kBluetoothHCICommandRemoteOOBDataRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandReset] forKey:@"kBluetoothHCICommandReset"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandResetFailedContactCounter] forKey:@"kBluetoothHCICommandResetFailedContactCounter"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandRoleDiscovery] forKey:@"kBluetoothHCICommandRoleDiscovery"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSendKeypressNotification] forKey:@"kBluetoothHCICommandSendKeypressNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetAFHClassification] forKey:@"kBluetoothHCICommandSetAFHClassification"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetConnectionEncryption] forKey:@"kBluetoothHCICommandSetConnectionEncryption"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetEventFilter] forKey:@"kBluetoothHCICommandSetEventFilter"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetEventMask] forKey:@"kBluetoothHCICommandSetEventMask"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetHostControllerToHostFlowControl] forKey:@"kBluetoothHCICommandSetHostControllerToHostFlowControl"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetMaxPower] forKey:@"kBluetoothHCICommandSetMaxPower"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSetupSynchronousConnection] forKey:@"kBluetoothHCICommandSetupSynchronousConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSniffMode] forKey:@"kBluetoothHCICommandSniffMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSniffSubrating] forKey:@"kBluetoothHCICommandSniffSubrating"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandSwitchRole] forKey:@"kBluetoothHCICommandSwitchRole"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserConfirmationRequestNegativeReply] forKey:@"kBluetoothHCICommandUserConfirmationRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserConfirmationRequestReply] forKey:@"kBluetoothHCICommandUserConfirmationRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserPasskeyRequestNegativeReply] forKey:@"kBluetoothHCICommandUserPasskeyRequestNegativeReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandUserPasskeyRequestReply] forKey:@"kBluetoothHCICommandUserPasskeyRequestReply"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteAFHChannelAssessmentMode] forKey:@"kBluetoothHCICommandWriteAFHChannelAssessmentMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteAuthenticationEnable] forKey:@"kBluetoothHCICommandWriteAuthenticationEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteAutomaticFlushTimeout] forKey:@"kBluetoothHCICommandWriteAutomaticFlushTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteClassOfDevice] forKey:@"kBluetoothHCICommandWriteClassOfDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteConnectionAcceptTimeout] forKey:@"kBluetoothHCICommandWriteConnectionAcceptTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteCurrentIACLAP] forKey:@"kBluetoothHCICommandWriteCurrentIACLAP"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteDefaultErroneousDataReporting] forKey:@"kBluetoothHCICommandWriteDefaultErroneousDataReporting"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteDefaultLinkPolicySettings] forKey:@"kBluetoothHCICommandWriteDefaultLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteDeviceAddress] forKey:@"kBluetoothHCICommandWriteDeviceAddress"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteEncryptionMode] forKey:@"kBluetoothHCICommandWriteEncryptionMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteExtendedInquiryResponse] forKey:@"kBluetoothHCICommandWriteExtendedInquiryResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteHoldModeActivity] forKey:@"kBluetoothHCICommandWriteHoldModeActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteHoppingChannels] forKey:@"kBluetoothHCICommandWriteHoppingChannels"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryMode] forKey:@"kBluetoothHCICommandWriteInquiryMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryResponseTransmitPower] forKey:@"kBluetoothHCICommandWriteInquiryResponseTransmitPower"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryScanActivity] forKey:@"kBluetoothHCICommandWriteInquiryScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteInquiryScanType] forKey:@"kBluetoothHCICommandWriteInquiryScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteLinkPolicySettings] forKey:@"kBluetoothHCICommandWriteLinkPolicySettings"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteLinkSupervisionTimeout] forKey:@"kBluetoothHCICommandWriteLinkSupervisionTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteLoopbackMode] forKey:@"kBluetoothHCICommandWriteLoopbackMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteNumberOfBroadcastRetransmissions] forKey:@"kBluetoothHCICommandWriteNumberOfBroadcastRetransmissions"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePINType] forKey:@"kBluetoothHCICommandWritePINType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanActivity] forKey:@"kBluetoothHCICommandWritePageScanActivity"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanMode] forKey:@"kBluetoothHCICommandWritePageScanMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanPeriodMode] forKey:@"kBluetoothHCICommandWritePageScanPeriodMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageScanType] forKey:@"kBluetoothHCICommandWritePageScanType"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePageTimeout] forKey:@"kBluetoothHCICommandWritePageTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWritePersistentSniffInterval] forKey:@"kBluetoothHCICommandWritePersistentSniffInterval"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteSCOFlowControlEnable] forKey:@"kBluetoothHCICommandWriteSCOFlowControlEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteScanEnable] forKey:@"kBluetoothHCICommandWriteScanEnable"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteSimplePairingDebugMode] forKey:@"kBluetoothHCICommandWriteSimplePairingDebugMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteSimplePairingMode] forKey:@"kBluetoothHCICommandWriteSimplePairingMode"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteStoredLinkKey] forKey:@"kBluetoothHCICommandWriteStoredLinkKey"];
[d setObject:[Number numberWithDouble:kBluetoothHCICommandWriteVoiceSetting] forKey:@"kBluetoothHCICommandWriteVoiceSetting"];
[d setObject:[Number numberWithDouble:kBluetoothHCIDataPacketHeaderSize] forKey:@"kBluetoothHCIDataPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIDataPacketMaxDataSize] forKey:@"kBluetoothHCIDataPacketMaxDataSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorACLConnectionAlreadyExists] forKey:@"kBluetoothHCIErrorACLConnectionAlreadyExists"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorAuthenticationFailure] forKey:@"kBluetoothHCIErrorAuthenticationFailure"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorChannelClassificationNotSupported] forKey:@"kBluetoothHCIErrorChannelClassificationNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorCommandDisallowed] forKey:@"kBluetoothHCIErrorCommandDisallowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorConnectionTerminatedByLocalHost] forKey:@"kBluetoothHCIErrorConnectionTerminatedByLocalHost"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorConnectionTimeout] forKey:@"kBluetoothHCIErrorConnectionTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorDifferentTransactionCollision] forKey:@"kBluetoothHCIErrorDifferentTransactionCollision"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorEncryptionModeNotAcceptable] forKey:@"kBluetoothHCIErrorEncryptionModeNotAcceptable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorExtendedInquiryResponseTooLarge] forKey:@"kBluetoothHCIErrorExtendedInquiryResponseTooLarge"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHardwareFailure] forKey:@"kBluetoothHCIErrorHardwareFailure"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedLimitedResources] forKey:@"kBluetoothHCIErrorHostRejectedLimitedResources"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedRemoteDeviceIsPersonal] forKey:@"kBluetoothHCIErrorHostRejectedRemoteDeviceIsPersonal"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedSecurityReasons] forKey:@"kBluetoothHCIErrorHostRejectedSecurityReasons"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostRejectedUnacceptableDeviceAddress] forKey:@"kBluetoothHCIErrorHostRejectedUnacceptableDeviceAddress"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorHostTimeout] forKey:@"kBluetoothHCIErrorHostTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInstantPassed] forKey:@"kBluetoothHCIErrorInstantPassed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInsufficientSecurity] forKey:@"kBluetoothHCIErrorInsufficientSecurity"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInvalidHCICommandParameters] forKey:@"kBluetoothHCIErrorInvalidHCICommandParameters"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorInvalidLMPParameters] forKey:@"kBluetoothHCIErrorInvalidLMPParameters"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorKeyMissing] forKey:@"kBluetoothHCIErrorKeyMissing"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorLMPErrorTransactionCollision] forKey:@"kBluetoothHCIErrorLMPErrorTransactionCollision"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorLMPPDUNotAllowed] forKey:@"kBluetoothHCIErrorLMPPDUNotAllowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorLMPResponseTimeout] forKey:@"kBluetoothHCIErrorLMPResponseTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMax] forKey:@"kBluetoothHCIErrorMax"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMaxNumberOfConnections] forKey:@"kBluetoothHCIErrorMaxNumberOfConnections"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMaxNumberOfSCOConnectionsToADevice] forKey:@"kBluetoothHCIErrorMaxNumberOfSCOConnectionsToADevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorMemoryFull] forKey:@"kBluetoothHCIErrorMemoryFull"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorNoConnection] forKey:@"kBluetoothHCIErrorNoConnection"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorOtherEndTerminatedConnectionAboutToPowerOff] forKey:@"kBluetoothHCIErrorOtherEndTerminatedConnectionAboutToPowerOff"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorOtherEndTerminatedConnectionLowResources] forKey:@"kBluetoothHCIErrorOtherEndTerminatedConnectionLowResources"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorOtherEndTerminatedConnectionUserEnded] forKey:@"kBluetoothHCIErrorOtherEndTerminatedConnectionUserEnded"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPageTimeout] forKey:@"kBluetoothHCIErrorPageTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPairingNotAllowed] forKey:@"kBluetoothHCIErrorPairingNotAllowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPairingWithUnitKeyNotSupported] forKey:@"kBluetoothHCIErrorPairingWithUnitKeyNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorParameterOutOfMandatoryRange] forKey:@"kBluetoothHCIErrorParameterOutOfMandatoryRange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorPowerIsOFF] forKey:@"kBluetoothHCIErrorPowerIsOFF"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorQoSNotSupported] forKey:@"kBluetoothHCIErrorQoSNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorQoSRejected] forKey:@"kBluetoothHCIErrorQoSRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorQoSUnacceptableParameter] forKey:@"kBluetoothHCIErrorQoSUnacceptableParameter"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRepeatedAttempts] forKey:@"kBluetoothHCIErrorRepeatedAttempts"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorReservedSlotViolation] forKey:@"kBluetoothHCIErrorReservedSlotViolation"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRoleChangeNotAllowed] forKey:@"kBluetoothHCIErrorRoleChangeNotAllowed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRoleSwitchFailed] forKey:@"kBluetoothHCIErrorRoleSwitchFailed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorRoleSwitchPending] forKey:@"kBluetoothHCIErrorRoleSwitchPending"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSCOAirModeRejected] forKey:@"kBluetoothHCIErrorSCOAirModeRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSCOIntervalRejected] forKey:@"kBluetoothHCIErrorSCOIntervalRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSCOOffsetRejected] forKey:@"kBluetoothHCIErrorSCOOffsetRejected"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSecureSimplePairingNotSupportedByHost] forKey:@"kBluetoothHCIErrorSecureSimplePairingNotSupportedByHost"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorSuccess] forKey:@"kBluetoothHCIErrorSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnitKeyUsed] forKey:@"kBluetoothHCIErrorUnitKeyUsed"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnknownHCICommand] forKey:@"kBluetoothHCIErrorUnknownHCICommand"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnknownLMPPDU] forKey:@"kBluetoothHCIErrorUnknownLMPPDU"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnspecifiedError] forKey:@"kBluetoothHCIErrorUnspecifiedError"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnsupportedFeatureOrParameterValue] forKey:@"kBluetoothHCIErrorUnsupportedFeatureOrParameterValue"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnsupportedLMPParameterValue] forKey:@"kBluetoothHCIErrorUnsupportedLMPParameterValue"];
[d setObject:[Number numberWithDouble:kBluetoothHCIErrorUnsupportedRemoteFeature] forKey:@"kBluetoothHCIErrorUnsupportedRemoteFeature"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventAuthenticationComplete] forKey:@"kBluetoothHCIEventAuthenticationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventChangeConnectionLinkKeyComplete] forKey:@"kBluetoothHCIEventChangeConnectionLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventCommandComplete] forKey:@"kBluetoothHCIEventCommandComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventCommandStatus] forKey:@"kBluetoothHCIEventCommandStatus"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventConnectionComplete] forKey:@"kBluetoothHCIEventConnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventConnectionPacketType] forKey:@"kBluetoothHCIEventConnectionPacketType"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventConnectionRequest] forKey:@"kBluetoothHCIEventConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventDataBufferOverflow] forKey:@"kBluetoothHCIEventDataBufferOverflow"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventDisconnectionComplete] forKey:@"kBluetoothHCIEventDisconnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventEncryptionChange] forKey:@"kBluetoothHCIEventEncryptionChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventEnhancedFlushComplete] forKey:@"kBluetoothHCIEventEnhancedFlushComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventExtendedInquiryResult] forKey:@"kBluetoothHCIEventExtendedInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventFlowSpecificationComplete] forKey:@"kBluetoothHCIEventFlowSpecificationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventFlushOccurred] forKey:@"kBluetoothHCIEventFlushOccurred"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventHardwareError] forKey:@"kBluetoothHCIEventHardwareError"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventIOCapabilityRequest] forKey:@"kBluetoothHCIEventIOCapabilityRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventIOCapabilityResponse] forKey:@"kBluetoothHCIEventIOCapabilityResponse"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventInquiryComplete] forKey:@"kBluetoothHCIEventInquiryComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventInquiryResult] forKey:@"kBluetoothHCIEventInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventInquiryResultWithRSSI] forKey:@"kBluetoothHCIEventInquiryResultWithRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventKeypressNotification] forKey:@"kBluetoothHCIEventKeypressNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLinkKeyNotification] forKey:@"kBluetoothHCIEventLinkKeyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLinkKeyRequest] forKey:@"kBluetoothHCIEventLinkKeyRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLinkSupervisionTimeoutChanged] forKey:@"kBluetoothHCIEventLinkSupervisionTimeoutChanged"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLogoTesting] forKey:@"kBluetoothHCIEventLogoTesting"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventLoopbackCommand] forKey:@"kBluetoothHCIEventLoopbackCommand"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskAll] forKey:@"kBluetoothHCIEventMaskAll"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskAll64Bit] forKey:@"kBluetoothHCIEventMaskAll64Bit"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskAuthenticationComplete] forKey:@"kBluetoothHCIEventMaskAuthenticationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskChangeConnectionLinkKeyComplete] forKey:@"kBluetoothHCIEventMaskChangeConnectionLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskCommandComplete] forKey:@"kBluetoothHCIEventMaskCommandComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskCommandStatus] forKey:@"kBluetoothHCIEventMaskCommandStatus"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskConnectionComplete] forKey:@"kBluetoothHCIEventMaskConnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskConnectionPacketTypeChanged] forKey:@"kBluetoothHCIEventMaskConnectionPacketTypeChanged"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskConnectionRequest] forKey:@"kBluetoothHCIEventMaskConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDataBufferOverflow] forKey:@"kBluetoothHCIEventMaskDataBufferOverflow"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDefault] forKey:@"kBluetoothHCIEventMaskDefault"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDefault64Bit] forKey:@"kBluetoothHCIEventMaskDefault64Bit"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskDisconnectionComplete] forKey:@"kBluetoothHCIEventMaskDisconnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskEncryptionChange] forKey:@"kBluetoothHCIEventMaskEncryptionChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskEnhancedFlushCompleteEvent] forKey:@"kBluetoothHCIEventMaskEnhancedFlushCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskExtendedInquiryResultEvent] forKey:@"kBluetoothHCIEventMaskExtendedInquiryResultEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskFlowSpecificationCompleteEvent] forKey:@"kBluetoothHCIEventMaskFlowSpecificationCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskFlushOccurred] forKey:@"kBluetoothHCIEventMaskFlushOccurred"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskHardwareError] forKey:@"kBluetoothHCIEventMaskHardwareError"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskInquiryComplete] forKey:@"kBluetoothHCIEventMaskInquiryComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskInquiryResult] forKey:@"kBluetoothHCIEventMaskInquiryResult"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskInquiryResultWithRSSIEvent] forKey:@"kBluetoothHCIEventMaskInquiryResultWithRSSIEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLinkKeyNotification] forKey:@"kBluetoothHCIEventMaskLinkKeyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLinkKeyRequest] forKey:@"kBluetoothHCIEventMaskLinkKeyRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLinkSupervisionTimeoutChangedEvent] forKey:@"kBluetoothHCIEventMaskLinkSupervisionTimeoutChangedEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskLoopbackCommand] forKey:@"kBluetoothHCIEventMaskLoopbackCommand"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskMasterLinkKeyComplete] forKey:@"kBluetoothHCIEventMaskMasterLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskMaxSlotsChange] forKey:@"kBluetoothHCIEventMaskMaxSlotsChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskModeChange] forKey:@"kBluetoothHCIEventMaskModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskNone] forKey:@"kBluetoothHCIEventMaskNone"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskNumberOfCompletedPackets] forKey:@"kBluetoothHCIEventMaskNumberOfCompletedPackets"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskPINCodeRequest] forKey:@"kBluetoothHCIEventMaskPINCodeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskPageScanModeChange] forKey:@"kBluetoothHCIEventMaskPageScanModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskPageScanRepetitionModeChange] forKey:@"kBluetoothHCIEventMaskPageScanRepetitionModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskQoSSetupComplete] forKey:@"kBluetoothHCIEventMaskQoSSetupComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskQoSViolation] forKey:@"kBluetoothHCIEventMaskQoSViolation"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadClockOffsetComplete] forKey:@"kBluetoothHCIEventMaskReadClockOffsetComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadRemoteExtendedFeaturesCompleteEvent] forKey:@"kBluetoothHCIEventMaskReadRemoteExtendedFeaturesCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadRemoteSupportedFeaturesComplete] forKey:@"kBluetoothHCIEventMaskReadRemoteSupportedFeaturesComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReadRemoteVersionInformationComplete] forKey:@"kBluetoothHCIEventMaskReadRemoteVersionInformationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskRemoteNameRequestComplete] forKey:@"kBluetoothHCIEventMaskRemoteNameRequestComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskReturnLinkKeys] forKey:@"kBluetoothHCIEventMaskReturnLinkKeys"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskRoleChange] forKey:@"kBluetoothHCIEventMaskRoleChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskSniffSubstrateEvent] forKey:@"kBluetoothHCIEventMaskSniffSubstrateEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskSynchronousConnectionChangedEvent] forKey:@"kBluetoothHCIEventMaskSynchronousConnectionChangedEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaskSynchronousConnectionCompleteEvent] forKey:@"kBluetoothHCIEventMaskSynchronousConnectionCompleteEvent"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMasterLinkKeyComplete] forKey:@"kBluetoothHCIEventMasterLinkKeyComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventMaxSlotsChange] forKey:@"kBluetoothHCIEventMaxSlotsChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventModeChange] forKey:@"kBluetoothHCIEventModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventNumberOfCompletedPackets] forKey:@"kBluetoothHCIEventNumberOfCompletedPackets"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPINCodeRequest] forKey:@"kBluetoothHCIEventPINCodeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPacketHeaderSize] forKey:@"kBluetoothHCIEventPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPacketMaxDataSize] forKey:@"kBluetoothHCIEventPacketMaxDataSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPageScanModeChange] forKey:@"kBluetoothHCIEventPageScanModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventPageScanRepetitionModeChange] forKey:@"kBluetoothHCIEventPageScanRepetitionModeChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventQoSSetupComplete] forKey:@"kBluetoothHCIEventQoSSetupComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventQoSViolation] forKey:@"kBluetoothHCIEventQoSViolation"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadClockOffsetComplete] forKey:@"kBluetoothHCIEventReadClockOffsetComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadRemoteExtendedFeaturesComplete] forKey:@"kBluetoothHCIEventReadRemoteExtendedFeaturesComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadRemoteSupportedFeaturesComplete] forKey:@"kBluetoothHCIEventReadRemoteSupportedFeaturesComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReadRemoteVersionInformationComplete] forKey:@"kBluetoothHCIEventReadRemoteVersionInformationComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventRemoteNameRequestComplete] forKey:@"kBluetoothHCIEventRemoteNameRequestComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventRemoteOOBDataRequest] forKey:@"kBluetoothHCIEventRemoteOOBDataRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventReturnLinkKeys] forKey:@"kBluetoothHCIEventReturnLinkKeys"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventRoleChange] forKey:@"kBluetoothHCIEventRoleChange"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSimplePairingComplete] forKey:@"kBluetoothHCIEventSimplePairingComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSniffRequest] forKey:@"kBluetoothHCIEventSniffRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSniffSubstrate] forKey:@"kBluetoothHCIEventSniffSubstrate"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSynchronousConnectionChanged] forKey:@"kBluetoothHCIEventSynchronousConnectionChanged"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventSynchronousConnectionComplete] forKey:@"kBluetoothHCIEventSynchronousConnectionComplete"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventUserConfirmationRequest] forKey:@"kBluetoothHCIEventUserConfirmationRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventUserPasskeyNotification] forKey:@"kBluetoothHCIEventUserPasskeyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventUserPasskeyRequest] forKey:@"kBluetoothHCIEventUserPasskeyRequest"];
[d setObject:[Number numberWithDouble:kBluetoothHCIEventVendorSpecific] forKey:@"kBluetoothHCIEventVendorSpecific"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsCompleteList] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsCompleteList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsWithMoreAvailable] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType128BitServiceClassUUIDsWithMoreAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsCompleteList] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsCompleteList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsWithMoreAvailable] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType16BitServiceClassUUIDsWithMoreAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsCompleteList] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsCompleteList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsWithMoreAvailable] forKey:@"kBluetoothHCIExtendedInquiryResponseDataType32BitServiceClassUUIDsWithMoreAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeCompleteLocalName] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeCompleteLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeFlags] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeFlags"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeManufacturerSpecificData] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeManufacturerSpecificData"];
[d setObject:[Number numberWithDouble:kBluetoothHCIExtendedInquiryResponseDataTypeShortenedLocalName] forKey:@"kBluetoothHCIExtendedInquiryResponseDataTypeShortenedLocalName"];
[d setObject:[Number numberWithDouble:kBluetoothHCIFECNotRequired] forKey:@"kBluetoothHCIFECNotRequired"];
[d setObject:[Number numberWithDouble:kBluetoothHCIFECRequired] forKey:@"kBluetoothHCIFECRequired"];
[d setObject:[Number numberWithDouble:kBluetoothHCIGetHIDDeviceList] forKey:@"kBluetoothHCIGetHIDDeviceList"];
[d setObject:[Number numberWithDouble:kBluetoothHCIInquiryModeResultFormatStandard] forKey:@"kBluetoothHCIInquiryModeResultFormatStandard"];
[d setObject:[Number numberWithDouble:kBluetoothHCIInquiryModeResultFormatWithRSSI] forKey:@"kBluetoothHCIInquiryModeResultFormatWithRSSI"];
[d setObject:[Number numberWithDouble:kBluetoothHCIInquiryModeResultFormatWithRSSIOrExtendedInquiryResultFormat] forKey:@"kBluetoothHCIInquiryModeResultFormatWithRSSIOrExtendedInquiryResultFormat"];
[d setObject:[Number numberWithDouble:kBluetoothHCILoopbackModeLocal] forKey:@"kBluetoothHCILoopbackModeLocal"];
[d setObject:[Number numberWithDouble:kBluetoothHCILoopbackModeOff] forKey:@"kBluetoothHCILoopbackModeOff"];
[d setObject:[Number numberWithDouble:kBluetoothHCILoopbackModeRemote] forKey:@"kBluetoothHCILoopbackModeRemote"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMasterRole] forKey:@"kBluetoothHCIMasterRole"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMaxCommandPacketSize] forKey:@"kBluetoothHCIMaxCommandPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMaxDataPacketSize] forKey:@"kBluetoothHCIMaxDataPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIMaxEventPacketSize] forKey:@"kBluetoothHCIMaxEventPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothHCIOpCodeNoOp] forKey:@"kBluetoothHCIOpCodeNoOp"];
[d setObject:[Number numberWithDouble:kBluetoothHCIPowerStateOFF] forKey:@"kBluetoothHCIPowerStateOFF"];
[d setObject:[Number numberWithDouble:kBluetoothHCIPowerStateON] forKey:@"kBluetoothHCIPowerStateON"];
[d setObject:[Number numberWithDouble:kBluetoothHCIPowerStateUnintialized] forKey:@"kBluetoothHCIPowerStateUnintialized"];
[d setObject:[Number numberWithDouble:kBluetoothHCIRemoveHIDDevice] forKey:@"kBluetoothHCIRemoveHIDDevice"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingDebugModeDisabled] forKey:@"kBluetoothHCISimplePairingDebugModeDisabled"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingDebugModeEnabled] forKey:@"kBluetoothHCISimplePairingDebugModeEnabled"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingModeEnabled] forKey:@"kBluetoothHCISimplePairingModeEnabled"];
[d setObject:[Number numberWithDouble:kBluetoothHCISimplePairingModeNotSet] forKey:@"kBluetoothHCISimplePairingModeNotSet"];
[d setObject:[Number numberWithDouble:kBluetoothHCISlaveRole] forKey:@"kBluetoothHCISlaveRole"];
[d setObject:[Number numberWithDouble:kBluetoothHCITransportUSBClassCode] forKey:@"kBluetoothHCITransportUSBClassCode"];
[d setObject:[Number numberWithDouble:kBluetoothHCITransportUSBProtocolCode] forKey:@"kBluetoothHCITransportUSBProtocolCode"];
[d setObject:[Number numberWithDouble:kBluetoothHCITransportUSBSubClassCode] forKey:@"kBluetoothHCITransportUSBSubClassCode"];
[d setObject:[Number numberWithDouble:kBluetoothKeyFlagSemiPermanent] forKey:@"kBluetoothKeyFlagSemiPermanent"];
[d setObject:[Number numberWithDouble:kBluetoothKeyFlagTemporary] forKey:@"kBluetoothKeyFlagTemporary"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeAuthenticatedCombination] forKey:@"kBluetoothKeyTypeAuthenticatedCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeChangedCombination] forKey:@"kBluetoothKeyTypeChangedCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeCombination] forKey:@"kBluetoothKeyTypeCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeDebugCombination] forKey:@"kBluetoothKeyTypeDebugCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeLocalUnit] forKey:@"kBluetoothKeyTypeLocalUnit"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeRemoteUnit] forKey:@"kBluetoothKeyTypeRemoteUnit"];
[d setObject:[Number numberWithDouble:kBluetoothKeyTypeUnauthenticatedCombination] forKey:@"kBluetoothKeyTypeUnauthenticatedCombination"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyCleared] forKey:@"kBluetoothKeypressNotificationTypePasskeyCleared"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyDigitEntered] forKey:@"kBluetoothKeypressNotificationTypePasskeyDigitEntered"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyDigitErased] forKey:@"kBluetoothKeypressNotificationTypePasskeyDigitErased"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyEntryCompleted] forKey:@"kBluetoothKeypressNotificationTypePasskeyEntryCompleted"];
[d setObject:[Number numberWithDouble:kBluetoothKeypressNotificationTypePasskeyEntryStarted] forKey:@"kBluetoothKeypressNotificationTypePasskeyEntryStarted"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelConnectionLessData] forKey:@"kBluetoothL2CAPChannelConnectionLessData"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelDynamicEnd] forKey:@"kBluetoothL2CAPChannelDynamicEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelDynamicStart] forKey:@"kBluetoothL2CAPChannelDynamicStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelEnd] forKey:@"kBluetoothL2CAPChannelEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelNull] forKey:@"kBluetoothL2CAPChannelNull"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelReservedEnd] forKey:@"kBluetoothL2CAPChannelReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelReservedStart] forKey:@"kBluetoothL2CAPChannelReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPChannelSignalling] forKey:@"kBluetoothL2CAPChannelSignalling"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeCommandReject] forKey:@"kBluetoothL2CAPCommandCodeCommandReject"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConfigureRequest] forKey:@"kBluetoothL2CAPCommandCodeConfigureRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConfigureResponse] forKey:@"kBluetoothL2CAPCommandCodeConfigureResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConnectionRequest] forKey:@"kBluetoothL2CAPCommandCodeConnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeConnectionResponse] forKey:@"kBluetoothL2CAPCommandCodeConnectionResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeDisconnectionRequest] forKey:@"kBluetoothL2CAPCommandCodeDisconnectionRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeDisconnectionResponse] forKey:@"kBluetoothL2CAPCommandCodeDisconnectionResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeEchoRequest] forKey:@"kBluetoothL2CAPCommandCodeEchoRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeEchoResponse] forKey:@"kBluetoothL2CAPCommandCodeEchoResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeInformationRequest] forKey:@"kBluetoothL2CAPCommandCodeInformationRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeInformationResponse] forKey:@"kBluetoothL2CAPCommandCodeInformationResponse"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandCodeReserved] forKey:@"kBluetoothL2CAPCommandCodeReserved"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandRejectReasonCommandNotUnderstood] forKey:@"kBluetoothL2CAPCommandRejectReasonCommandNotUnderstood"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandRejectReasonInvalidCIDInRequest] forKey:@"kBluetoothL2CAPCommandRejectReasonInvalidCIDInRequest"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPCommandRejectReasonSignallingMTUExceeded] forKey:@"kBluetoothL2CAPCommandRejectReasonSignallingMTUExceeded"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationBasicL2CAPModeFlag] forKey:@"kBluetoothL2CAPConfigurationBasicL2CAPModeFlag"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationFlowControlModeFlag] forKey:@"kBluetoothL2CAPConfigurationFlowControlModeFlag"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionFlushTimeout] forKey:@"kBluetoothL2CAPConfigurationOptionFlushTimeout"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionFlushTimeoutLength] forKey:@"kBluetoothL2CAPConfigurationOptionFlushTimeoutLength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionMTU] forKey:@"kBluetoothL2CAPConfigurationOptionMTU"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionMTULength] forKey:@"kBluetoothL2CAPConfigurationOptionMTULength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionQoS] forKey:@"kBluetoothL2CAPConfigurationOptionQoS"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionQoSLength] forKey:@"kBluetoothL2CAPConfigurationOptionQoSLength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControl] forKey:@"kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControl"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControlLength] forKey:@"kBluetoothL2CAPConfigurationOptionRetransmissionAndFlowControlLength"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultRejected] forKey:@"kBluetoothL2CAPConfigurationResultRejected"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultSuccess] forKey:@"kBluetoothL2CAPConfigurationResultSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultUnacceptableParams] forKey:@"kBluetoothL2CAPConfigurationResultUnacceptableParams"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationResultUnknownOptions] forKey:@"kBluetoothL2CAPConfigurationResultUnknownOptions"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConfigurationRetransmissionModeFlag] forKey:@"kBluetoothL2CAPConfigurationRetransmissionModeFlag"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultPending] forKey:@"kBluetoothL2CAPConnectionResultPending"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultRefusedNoResources] forKey:@"kBluetoothL2CAPConnectionResultRefusedNoResources"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultRefusedPSMNotSupported] forKey:@"kBluetoothL2CAPConnectionResultRefusedPSMNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultRefusedSecurityBlock] forKey:@"kBluetoothL2CAPConnectionResultRefusedSecurityBlock"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionResultSuccessful] forKey:@"kBluetoothL2CAPConnectionResultSuccessful"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionStatusAuthenticationPending] forKey:@"kBluetoothL2CAPConnectionStatusAuthenticationPending"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionStatusAuthorizationPending] forKey:@"kBluetoothL2CAPConnectionStatusAuthorizationPending"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPConnectionStatusNoInfoAvailable] forKey:@"kBluetoothL2CAPConnectionStatusNoInfoAvailable"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutDefault] forKey:@"kBluetoothL2CAPFlushTimeoutDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutEnd] forKey:@"kBluetoothL2CAPFlushTimeoutEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutForever] forKey:@"kBluetoothL2CAPFlushTimeoutForever"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutImmediate] forKey:@"kBluetoothL2CAPFlushTimeoutImmediate"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPFlushTimeoutUseExisting] forKey:@"kBluetoothL2CAPFlushTimeoutUseExisting"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInfoTypeMaxConnectionlessMTUSize] forKey:@"kBluetoothL2CAPInfoTypeMaxConnectionlessMTUSize"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationBidirectionalQoS] forKey:@"kBluetoothL2CAPInformationBidirectionalQoS"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationFlowControlMode] forKey:@"kBluetoothL2CAPInformationFlowControlMode"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationNoExtendedFeatures] forKey:@"kBluetoothL2CAPInformationNoExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationResultNotSupported] forKey:@"kBluetoothL2CAPInformationResultNotSupported"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationResultSuccess] forKey:@"kBluetoothL2CAPInformationResultSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationRetransmissionMode] forKey:@"kBluetoothL2CAPInformationRetransmissionMode"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationTypeConnectionlessMTU] forKey:@"kBluetoothL2CAPInformationTypeConnectionlessMTU"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPInformationTypeExtendedFeatures] forKey:@"kBluetoothL2CAPInformationTypeExtendedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUDefault] forKey:@"kBluetoothL2CAPMTUDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUMaximum] forKey:@"kBluetoothL2CAPMTUMaximum"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUMinimum] forKey:@"kBluetoothL2CAPMTUMinimum"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUSIG] forKey:@"kBluetoothL2CAPMTUSIG"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMTUStart] forKey:@"kBluetoothL2CAPMTUStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPMaxPacketSize] forKey:@"kBluetoothL2CAPMaxPacketSize"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMAVCTP] forKey:@"kBluetoothL2CAPPSMAVCTP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMAVDTP] forKey:@"kBluetoothL2CAPPSMAVDTP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMBNEP] forKey:@"kBluetoothL2CAPPSMBNEP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMDynamicEnd] forKey:@"kBluetoothL2CAPPSMDynamicEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMDynamicStart] forKey:@"kBluetoothL2CAPPSMDynamicStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMHIDControl] forKey:@"kBluetoothL2CAPPSMHIDControl"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMHIDInterrupt] forKey:@"kBluetoothL2CAPPSMHIDInterrupt"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMNone] forKey:@"kBluetoothL2CAPPSMNone"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMRFCOMM] forKey:@"kBluetoothL2CAPPSMRFCOMM"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMReservedEnd] forKey:@"kBluetoothL2CAPPSMReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMReservedStart] forKey:@"kBluetoothL2CAPPSMReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMSDP] forKey:@"kBluetoothL2CAPPSMSDP"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMTCS_BIN] forKey:@"kBluetoothL2CAPPSMTCS_BIN"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMTCS_BIN_Cordless] forKey:@"kBluetoothL2CAPPSMTCS_BIN_Cordless"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPSMUID_C_Plane] forKey:@"kBluetoothL2CAPPSMUID_C_Plane"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPPacketHeaderSize] forKey:@"kBluetoothL2CAPPacketHeaderSize"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSDelayVariationDefault] forKey:@"kBluetoothL2CAPQoSDelayVariationDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSFlagsDefault] forKey:@"kBluetoothL2CAPQoSFlagsDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSLatencyDefault] forKey:@"kBluetoothL2CAPQoSLatencyDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSPeakBandwidthDefault] forKey:@"kBluetoothL2CAPQoSPeakBandwidthDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTokenBucketSizeDefault] forKey:@"kBluetoothL2CAPQoSTokenBucketSizeDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTokenRateDefault] forKey:@"kBluetoothL2CAPQoSTokenRateDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeBestEffort] forKey:@"kBluetoothL2CAPQoSTypeBestEffort"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeDefault] forKey:@"kBluetoothL2CAPQoSTypeDefault"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeGuaranteed] forKey:@"kBluetoothL2CAPQoSTypeGuaranteed"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPQoSTypeNoTraffic] forKey:@"kBluetoothL2CAPQoSTypeNoTraffic"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConfigReq] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConfigReq"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConfigResp] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConfigResp"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConnectReq] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConnectReq"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ConnectResp] forKey:@"kBluetoothL2CAPTCICommandL2CA_ConnectResp"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_DisableCLT] forKey:@"kBluetoothL2CAPTCICommandL2CA_DisableCLT"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_DisconnectReq] forKey:@"kBluetoothL2CAPTCICommandL2CA_DisconnectReq"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_DisconnectResp] forKey:@"kBluetoothL2CAPTCICommandL2CA_DisconnectResp"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_EnableCLT] forKey:@"kBluetoothL2CAPTCICommandL2CA_EnableCLT"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GetInfo] forKey:@"kBluetoothL2CAPTCICommandL2CA_GetInfo"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupAddMember] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupAddMember"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupClose] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupClose"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupCreate] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupCreate"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupMembership] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupMembership"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_GroupRemoveMember] forKey:@"kBluetoothL2CAPTCICommandL2CA_GroupRemoveMember"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_Ping] forKey:@"kBluetoothL2CAPTCICommandL2CA_Ping"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_ReadData] forKey:@"kBluetoothL2CAPTCICommandL2CA_ReadData"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_Reserved1] forKey:@"kBluetoothL2CAPTCICommandL2CA_Reserved1"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_Reserved2] forKey:@"kBluetoothL2CAPTCICommandL2CA_Reserved2"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandL2CA_WriteData] forKey:@"kBluetoothL2CAPTCICommandL2CA_WriteData"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCICommandReserved] forKey:@"kBluetoothL2CAPTCICommandReserved"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_ConfigInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_ConfigInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_ConnectInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_ConnectInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_DisconnectInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_DisconnectInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_QoSViolationInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_QoSViolationInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDL2CA_TimeOutInd] forKey:@"kBluetoothL2CAPTCIEventIDL2CA_TimeOutInd"];
[d setObject:[Number numberWithDouble:kBluetoothL2CAPTCIEventIDReserved] forKey:@"kBluetoothL2CAPTCIEventIDReserved"];
[d setObject:[Number numberWithDouble:kBluetoothLimitedInquiryAccessCodeEnd] forKey:@"kBluetoothLimitedInquiryAccessCodeEnd"];
[d setObject:[Number numberWithDouble:kBluetoothLimitedInquiryAccessCodeIndex] forKey:@"kBluetoothLimitedInquiryAccessCodeIndex"];
[d setObject:[Number numberWithDouble:kBluetoothLimitedInquiryAccessCodeLAPValue] forKey:@"kBluetoothLimitedInquiryAccessCodeLAPValue"];
[d setObject:[Number numberWithDouble:kBluetoothLinkTypeNone] forKey:@"kBluetoothLinkTypeNone"];
[d setObject:[Number numberWithDouble:kBluetoothOOBAuthenticationDataFromRemoteDevicePresent] forKey:@"kBluetoothOOBAuthenticationDataFromRemoteDevicePresent"];
[d setObject:[Number numberWithDouble:kBluetoothOOBAuthenticationDataNotPresent] forKey:@"kBluetoothOOBAuthenticationDataNotPresent"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeAUX] forKey:@"kBluetoothPacketTypeAUX"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDH1] forKey:@"kBluetoothPacketTypeDH1"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDH3] forKey:@"kBluetoothPacketTypeDH3"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDH5] forKey:@"kBluetoothPacketTypeDH5"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDM1] forKey:@"kBluetoothPacketTypeDM1"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDM3] forKey:@"kBluetoothPacketTypeDM3"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDM5] forKey:@"kBluetoothPacketTypeDM5"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeDV] forKey:@"kBluetoothPacketTypeDV"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeEnd] forKey:@"kBluetoothPacketTypeEnd"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeHV1] forKey:@"kBluetoothPacketTypeHV1"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeHV2] forKey:@"kBluetoothPacketTypeHV2"];
[d setObject:[Number numberWithDouble:kBluetoothPacketTypeHV3] forKey:@"kBluetoothPacketTypeHV3"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeMandatory] forKey:@"kBluetoothPageScanModeMandatory"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeOptional1] forKey:@"kBluetoothPageScanModeOptional1"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeOptional2] forKey:@"kBluetoothPageScanModeOptional2"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanModeOptional3] forKey:@"kBluetoothPageScanModeOptional3"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanPeriodModeP0] forKey:@"kBluetoothPageScanPeriodModeP0"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanPeriodModeP1] forKey:@"kBluetoothPageScanPeriodModeP1"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanPeriodModeP2] forKey:@"kBluetoothPageScanPeriodModeP2"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanRepetitionModeR0] forKey:@"kBluetoothPageScanRepetitionModeR0"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanRepetitionModeR1] forKey:@"kBluetoothPageScanRepetitionModeR1"];
[d setObject:[Number numberWithDouble:kBluetoothPageScanRepetitionModeR2] forKey:@"kBluetoothPageScanRepetitionModeR2"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeEvenParity] forKey:@"kBluetoothRFCOMMParityTypeEvenParity"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeMaxParity] forKey:@"kBluetoothRFCOMMParityTypeMaxParity"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeNoParity] forKey:@"kBluetoothRFCOMMParityTypeNoParity"];
[d setObject:[Number numberWithDouble:kBluetoothRFCOMMParityTypeOddParity] forKey:@"kBluetoothRFCOMMParityTypeOddParity"];
[d setObject:[Number numberWithDouble:kBluetoothRoleBecomeMaster] forKey:@"kBluetoothRoleBecomeMaster"];
[d setObject:[Number numberWithDouble:kBluetoothRoleRemainSlave] forKey:@"kBluetoothRoleRemainSlave"];
[d setObject:[Number numberWithDouble:kBluetoothSCOConnection] forKey:@"kBluetoothSCOConnection"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierClientExecutableURL] forKey:@"kBluetoothSDPAttributeDeviceIdentifierClientExecutableURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierDocumentationURL] forKey:@"kBluetoothSDPAttributeDeviceIdentifierDocumentationURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierPrimaryRecord] forKey:@"kBluetoothSDPAttributeDeviceIdentifierPrimaryRecord"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierProductID] forKey:@"kBluetoothSDPAttributeDeviceIdentifierProductID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierReservedRangeEnd] forKey:@"kBluetoothSDPAttributeDeviceIdentifierReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierReservedRangeStart] forKey:@"kBluetoothSDPAttributeDeviceIdentifierReservedRangeStart"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierServiceDescription] forKey:@"kBluetoothSDPAttributeDeviceIdentifierServiceDescription"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierSpecificationID] forKey:@"kBluetoothSDPAttributeDeviceIdentifierSpecificationID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierVendorID] forKey:@"kBluetoothSDPAttributeDeviceIdentifierVendorID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierVendorIDSource] forKey:@"kBluetoothSDPAttributeDeviceIdentifierVendorIDSource"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeDeviceIdentifierVersion] forKey:@"kBluetoothSDPAttributeDeviceIdentifierVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierAdditionalProtocolsDescriptorList] forKey:@"kBluetoothSDPAttributeIdentifierAdditionalProtocolsDescriptorList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierAudioFeedbackSupport] forKey:@"kBluetoothSDPAttributeIdentifierAudioFeedbackSupport"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierBluetoothProfileDescriptorList] forKey:@"kBluetoothSDPAttributeIdentifierBluetoothProfileDescriptorList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierBrowseGroupList] forKey:@"kBluetoothSDPAttributeIdentifierBrowseGroupList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierClientExecutableURL] forKey:@"kBluetoothSDPAttributeIdentifierClientExecutableURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierDocumentationURL] forKey:@"kBluetoothSDPAttributeIdentifierDocumentationURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierExternalNetwork] forKey:@"kBluetoothSDPAttributeIdentifierExternalNetwork"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierFaxClass1Support] forKey:@"kBluetoothSDPAttributeIdentifierFaxClass1Support"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierFaxClass2Support] forKey:@"kBluetoothSDPAttributeIdentifierFaxClass2Support"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierFaxClass2_0Support] forKey:@"kBluetoothSDPAttributeIdentifierFaxClass2_0Support"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierGroupID] forKey:@"kBluetoothSDPAttributeIdentifierGroupID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierHomepageURL] forKey:@"kBluetoothSDPAttributeIdentifierHomepageURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierIPSubnet] forKey:@"kBluetoothSDPAttributeIdentifierIPSubnet"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierIconURL] forKey:@"kBluetoothSDPAttributeIdentifierIconURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierLanguageBaseAttributeIDList] forKey:@"kBluetoothSDPAttributeIdentifierLanguageBaseAttributeIDList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierMaxNetAccessRate] forKey:@"kBluetoothSDPAttributeIdentifierMaxNetAccessRate"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierNetAccessType] forKey:@"kBluetoothSDPAttributeIdentifierNetAccessType"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierNetwork] forKey:@"kBluetoothSDPAttributeIdentifierNetwork"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierNetworkAddress] forKey:@"kBluetoothSDPAttributeIdentifierNetworkAddress"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierProtocolDescriptorList] forKey:@"kBluetoothSDPAttributeIdentifierProtocolDescriptorList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierProviderName] forKey:@"kBluetoothSDPAttributeIdentifierProviderName"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierRemoteAudioVolumeControl] forKey:@"kBluetoothSDPAttributeIdentifierRemoteAudioVolumeControl"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSecurityDescription] forKey:@"kBluetoothSDPAttributeIdentifierSecurityDescription"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceAvailability] forKey:@"kBluetoothSDPAttributeIdentifierServiceAvailability"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceClassIDList] forKey:@"kBluetoothSDPAttributeIdentifierServiceClassIDList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceDatabaseState] forKey:@"kBluetoothSDPAttributeIdentifierServiceDatabaseState"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceDescription] forKey:@"kBluetoothSDPAttributeIdentifierServiceDescription"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceID] forKey:@"kBluetoothSDPAttributeIdentifierServiceID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceInfoTimeToLive] forKey:@"kBluetoothSDPAttributeIdentifierServiceInfoTimeToLive"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceName] forKey:@"kBluetoothSDPAttributeIdentifierServiceName"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceRecordHandle] forKey:@"kBluetoothSDPAttributeIdentifierServiceRecordHandle"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceRecordState] forKey:@"kBluetoothSDPAttributeIdentifierServiceRecordState"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierServiceVersion] forKey:@"kBluetoothSDPAttributeIdentifierServiceVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedCapabilities] forKey:@"kBluetoothSDPAttributeIdentifierSupportedCapabilities"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedDataStoresList] forKey:@"kBluetoothSDPAttributeIdentifierSupportedDataStoresList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedFeatures] forKey:@"kBluetoothSDPAttributeIdentifierSupportedFeatures"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupportedFunctions] forKey:@"kBluetoothSDPAttributeIdentifierSupportedFunctions"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierSupporterFormatsList] forKey:@"kBluetoothSDPAttributeIdentifierSupporterFormatsList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierTotalImagingDataCapacity] forKey:@"kBluetoothSDPAttributeIdentifierTotalImagingDataCapacity"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierVersionNumberList] forKey:@"kBluetoothSDPAttributeIdentifierVersionNumberList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierWAPGateway] forKey:@"kBluetoothSDPAttributeIdentifierWAPGateway"];
[d setObject:[Number numberWithDouble:kBluetoothSDPAttributeIdentifierWAPStackType] forKey:@"kBluetoothSDPAttributeIdentifierWAPStackType"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeBoolean] forKey:@"kBluetoothSDPDataElementTypeBoolean"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeDataElementAlternative] forKey:@"kBluetoothSDPDataElementTypeDataElementAlternative"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeDataElementSequence] forKey:@"kBluetoothSDPDataElementTypeDataElementSequence"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeNil] forKey:@"kBluetoothSDPDataElementTypeNil"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeReservedEnd] forKey:@"kBluetoothSDPDataElementTypeReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeReservedStart] forKey:@"kBluetoothSDPDataElementTypeReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeSignedInt] forKey:@"kBluetoothSDPDataElementTypeSignedInt"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeString] forKey:@"kBluetoothSDPDataElementTypeString"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeURL] forKey:@"kBluetoothSDPDataElementTypeURL"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeUUID] forKey:@"kBluetoothSDPDataElementTypeUUID"];
[d setObject:[Number numberWithDouble:kBluetoothSDPDataElementTypeUnsignedInt] forKey:@"kBluetoothSDPDataElementTypeUnsignedInt"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInsufficientResources] forKey:@"kBluetoothSDPErrorCodeInsufficientResources"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidContinuationState] forKey:@"kBluetoothSDPErrorCodeInvalidContinuationState"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidPDUSize] forKey:@"kBluetoothSDPErrorCodeInvalidPDUSize"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidRequestSyntax] forKey:@"kBluetoothSDPErrorCodeInvalidRequestSyntax"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidSDPVersion] forKey:@"kBluetoothSDPErrorCodeInvalidSDPVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeInvalidServiceRecordHandle] forKey:@"kBluetoothSDPErrorCodeInvalidServiceRecordHandle"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeReserved] forKey:@"kBluetoothSDPErrorCodeReserved"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeReservedEnd] forKey:@"kBluetoothSDPErrorCodeReservedEnd"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeReservedStart] forKey:@"kBluetoothSDPErrorCodeReservedStart"];
[d setObject:[Number numberWithDouble:kBluetoothSDPErrorCodeSuccess] forKey:@"kBluetoothSDPErrorCodeSuccess"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDErrorResponse] forKey:@"kBluetoothSDPPDUIDErrorResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDReserved] forKey:@"kBluetoothSDPPDUIDReserved"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceAttributeRequest] forKey:@"kBluetoothSDPPDUIDServiceAttributeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceAttributeResponse] forKey:@"kBluetoothSDPPDUIDServiceAttributeResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchAttributeRequest] forKey:@"kBluetoothSDPPDUIDServiceSearchAttributeRequest"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchAttributeResponse] forKey:@"kBluetoothSDPPDUIDServiceSearchAttributeResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchRequest] forKey:@"kBluetoothSDPPDUIDServiceSearchRequest"];
[d setObject:[Number numberWithDouble:kBluetoothSDPPDUIDServiceSearchResponse] forKey:@"kBluetoothSDPPDUIDServiceSearchResponse"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterBNEPSupportedNetworkPacketTypeList] forKey:@"kBluetoothSDPProtocolParameterBNEPSupportedNetworkPacketTypeList"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterBNEPVersion] forKey:@"kBluetoothSDPProtocolParameterBNEPVersion"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterL2CAPPSM] forKey:@"kBluetoothSDPProtocolParameterL2CAPPSM"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterRFCOMMChannel] forKey:@"kBluetoothSDPProtocolParameterRFCOMMChannel"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterTCPPort] forKey:@"kBluetoothSDPProtocolParameterTCPPort"];
[d setObject:[Number numberWithDouble:kBluetoothSDPProtocolParameterUDPPort] forKey:@"kBluetoothSDPProtocolParameterUDPPort"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16AVCTP] forKey:@"kBluetoothSDPUUID16AVCTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16AVDTP] forKey:@"kBluetoothSDPUUID16AVDTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16BNEP] forKey:@"kBluetoothSDPUUID16BNEP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16Base] forKey:@"kBluetoothSDPUUID16Base"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16CMPT] forKey:@"kBluetoothSDPUUID16CMPT"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16FTP] forKey:@"kBluetoothSDPUUID16FTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HIDP] forKey:@"kBluetoothSDPUUID16HIDP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HTTP] forKey:@"kBluetoothSDPUUID16HTTP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HardcopyControlChannel] forKey:@"kBluetoothSDPUUID16HardcopyControlChannel"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HardcopyDataChannel] forKey:@"kBluetoothSDPUUID16HardcopyDataChannel"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16HardcopyNotification] forKey:@"kBluetoothSDPUUID16HardcopyNotification"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16IP] forKey:@"kBluetoothSDPUUID16IP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16L2CAP] forKey:@"kBluetoothSDPUUID16L2CAP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16OBEX] forKey:@"kBluetoothSDPUUID16OBEX"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16RFCOMM] forKey:@"kBluetoothSDPUUID16RFCOMM"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16SDP] forKey:@"kBluetoothSDPUUID16SDP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAVRemoteControl] forKey:@"kBluetoothSDPUUID16ServiceClassAVRemoteControl"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAVRemoteControlTarget] forKey:@"kBluetoothSDPUUID16ServiceClassAVRemoteControlTarget"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAdvancedAudioDistribution] forKey:@"kBluetoothSDPUUID16ServiceClassAdvancedAudioDistribution"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAudioSink] forKey:@"kBluetoothSDPUUID16ServiceClassAudioSink"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassAudioSource] forKey:@"kBluetoothSDPUUID16ServiceClassAudioSource"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassBasicPrinting] forKey:@"kBluetoothSDPUUID16ServiceClassBasicPrinting"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassBrowseGroupDescriptor] forKey:@"kBluetoothSDPUUID16ServiceClassBrowseGroupDescriptor"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassCommonISDNAccess] forKey:@"kBluetoothSDPUUID16ServiceClassCommonISDNAccess"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassCordlessTelephony] forKey:@"kBluetoothSDPUUID16ServiceClassCordlessTelephony"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassDialupNetworking] forKey:@"kBluetoothSDPUUID16ServiceClassDialupNetworking"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassDirectPrinting] forKey:@"kBluetoothSDPUUID16ServiceClassDirectPrinting"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassDirectPrintingReferenceObjectsService] forKey:@"kBluetoothSDPUUID16ServiceClassDirectPrintingReferenceObjectsService"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassFax] forKey:@"kBluetoothSDPUUID16ServiceClassFax"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGN] forKey:@"kBluetoothSDPUUID16ServiceClassGN"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericAudio] forKey:@"kBluetoothSDPUUID16ServiceClassGenericAudio"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericFileTransfer] forKey:@"kBluetoothSDPUUID16ServiceClassGenericFileTransfer"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericNetworking] forKey:@"kBluetoothSDPUUID16ServiceClassGenericNetworking"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassGenericTelephony] forKey:@"kBluetoothSDPUUID16ServiceClassGenericTelephony"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHCR_Print] forKey:@"kBluetoothSDPUUID16ServiceClassHCR_Print"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHCR_Scan] forKey:@"kBluetoothSDPUUID16ServiceClassHCR_Scan"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHandsfree] forKey:@"kBluetoothSDPUUID16ServiceClassHandsfree"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHandsfreeAudioGateway] forKey:@"kBluetoothSDPUUID16ServiceClassHandsfreeAudioGateway"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHardcopyCableReplacement] forKey:@"kBluetoothSDPUUID16ServiceClassHardcopyCableReplacement"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHeadset] forKey:@"kBluetoothSDPUUID16ServiceClassHeadset"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHeadsetAudioGateway] forKey:@"kBluetoothSDPUUID16ServiceClassHeadsetAudioGateway"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassHumanInterfaceDeviceService] forKey:@"kBluetoothSDPUUID16ServiceClassHumanInterfaceDeviceService"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImaging] forKey:@"kBluetoothSDPUUID16ServiceClassImaging"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImagingAutomaticArchive] forKey:@"kBluetoothSDPUUID16ServiceClassImagingAutomaticArchive"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImagingReferencedObjects] forKey:@"kBluetoothSDPUUID16ServiceClassImagingReferencedObjects"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassImagingResponder] forKey:@"kBluetoothSDPUUID16ServiceClassImagingResponder"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassIntercom] forKey:@"kBluetoothSDPUUID16ServiceClassIntercom"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassIrMCSync] forKey:@"kBluetoothSDPUUID16ServiceClassIrMCSync"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassIrMCSyncCommand] forKey:@"kBluetoothSDPUUID16ServiceClassIrMCSyncCommand"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassLANAccessUsingPPP] forKey:@"kBluetoothSDPUUID16ServiceClassLANAccessUsingPPP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassNAP] forKey:@"kBluetoothSDPUUID16ServiceClassNAP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassOBEXFileTransfer] forKey:@"kBluetoothSDPUUID16ServiceClassOBEXFileTransfer"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassOBEXObjectPush] forKey:@"kBluetoothSDPUUID16ServiceClassOBEXObjectPush"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPANU] forKey:@"kBluetoothSDPUUID16ServiceClassPANU"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPnPInformation] forKey:@"kBluetoothSDPUUID16ServiceClassPnPInformation"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPrintingStatus] forKey:@"kBluetoothSDPUUID16ServiceClassPrintingStatus"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassPublicBrowseGroup] forKey:@"kBluetoothSDPUUID16ServiceClassPublicBrowseGroup"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassReferencePrinting] forKey:@"kBluetoothSDPUUID16ServiceClassReferencePrinting"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassReflectedUI] forKey:@"kBluetoothSDPUUID16ServiceClassReflectedUI"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassSerialPort] forKey:@"kBluetoothSDPUUID16ServiceClassSerialPort"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassServiceDiscoveryServer] forKey:@"kBluetoothSDPUUID16ServiceClassServiceDiscoveryServer"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassUDI_MT] forKey:@"kBluetoothSDPUUID16ServiceClassUDI_MT"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassUDI_TA] forKey:@"kBluetoothSDPUUID16ServiceClassUDI_TA"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassVideoConferencing] forKey:@"kBluetoothSDPUUID16ServiceClassVideoConferencing"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassVideoConferencingGW] forKey:@"kBluetoothSDPUUID16ServiceClassVideoConferencingGW"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassWAP] forKey:@"kBluetoothSDPUUID16ServiceClassWAP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16ServiceClassWAPClient] forKey:@"kBluetoothSDPUUID16ServiceClassWAPClient"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16TCP] forKey:@"kBluetoothSDPUUID16TCP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16TCSAT] forKey:@"kBluetoothSDPUUID16TCSAT"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16TCSBIN] forKey:@"kBluetoothSDPUUID16TCSBIN"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16UDI_C_Plane] forKey:@"kBluetoothSDPUUID16UDI_C_Plane"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16UDP] forKey:@"kBluetoothSDPUUID16UDP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16UPNP] forKey:@"kBluetoothSDPUUID16UPNP"];
[d setObject:[Number numberWithDouble:kBluetoothSDPUUID16WSP] forKey:@"kBluetoothSDPUUID16WSP"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorAny] forKey:@"kBluetoothServiceClassMajorAny"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorAudio] forKey:@"kBluetoothServiceClassMajorAudio"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorCapturing] forKey:@"kBluetoothServiceClassMajorCapturing"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorEnd] forKey:@"kBluetoothServiceClassMajorEnd"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorInformation] forKey:@"kBluetoothServiceClassMajorInformation"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorLimitedDiscoverableMode] forKey:@"kBluetoothServiceClassMajorLimitedDiscoverableMode"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorNetworking] forKey:@"kBluetoothServiceClassMajorNetworking"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorNone] forKey:@"kBluetoothServiceClassMajorNone"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorObjectTransfer] forKey:@"kBluetoothServiceClassMajorObjectTransfer"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorPositioning] forKey:@"kBluetoothServiceClassMajorPositioning"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorRendering] forKey:@"kBluetoothServiceClassMajorRendering"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorReserved1] forKey:@"kBluetoothServiceClassMajorReserved1"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorReserved2] forKey:@"kBluetoothServiceClassMajorReserved2"];
[d setObject:[Number numberWithDouble:kBluetoothServiceClassMajorTelephony] forKey:@"kBluetoothServiceClassMajorTelephony"];
[d setObject:[Number numberWithDouble:kBluetoothTransportTypePCCard] forKey:@"kBluetoothTransportTypePCCard"];
[d setObject:[Number numberWithDouble:kBluetoothTransportTypePCICard] forKey:@"kBluetoothTransportTypePCICard"];
[d setObject:[Number numberWithDouble:kBluetoothTransportTypeUSB] forKey:@"kBluetoothTransportTypeUSB"];
[d setObject:[Number numberWithDouble:kConnectionActiveMode] forKey:@"kConnectionActiveMode"];
[d setObject:[Number numberWithDouble:kConnectionHoldMode] forKey:@"kConnectionHoldMode"];
[d setObject:[Number numberWithDouble:kConnectionModeReservedForFutureUse] forKey:@"kConnectionModeReservedForFutureUse"];
[d setObject:[Number numberWithDouble:kConnectionParkMode] forKey:@"kConnectionParkMode"];
[d setObject:[Number numberWithDouble:kConnectionSniffMode] forKey:@"kConnectionSniffMode"];
[d setObject:[Number numberWithDouble:kDefaultPageTimeout] forKey:@"kDefaultPageTimeout"];
[d setObject:[Number numberWithDouble:kDeleteAllStoredLinkKeys] forKey:@"kDeleteAllStoredLinkKeys"];
[d setObject:[Number numberWithDouble:kDeleteKeyForSpecifiedDeviceOnly] forKey:@"kDeleteKeyForSpecifiedDeviceOnly"];
[d setObject:[Number numberWithDouble:kDisableAllLMModes] forKey:@"kDisableAllLMModes"];
[d setObject:[Number numberWithDouble:kEnableHoldMode] forKey:@"kEnableHoldMode"];
[d setObject:[Number numberWithDouble:kEnableMasterSlaveSwitch] forKey:@"kEnableMasterSlaveSwitch"];
[d setObject:[Number numberWithDouble:kEnableParkMode] forKey:@"kEnableParkMode"];
[d setObject:[Number numberWithDouble:kEnableSniffMode] forKey:@"kEnableSniffMode"];
[d setObject:[Number numberWithDouble:kEncryptionDisabled] forKey:@"kEncryptionDisabled"];
[d setObject:[Number numberWithDouble:kEncryptionForBothPointToPointAndBroadcastPackets] forKey:@"kEncryptionForBothPointToPointAndBroadcastPackets"];
[d setObject:[Number numberWithDouble:kEncryptionOnlyForPointToPointPackets] forKey:@"kEncryptionOnlyForPointToPointPackets"];
[d setObject:[Number numberWithDouble:kHCIACLDataPacketsOffHCISCODataPacketsOn] forKey:@"kHCIACLDataPacketsOffHCISCODataPacketsOn"];
[d setObject:[Number numberWithDouble:kHCIACLDataPacketsOnHCISCODataPacketsOff] forKey:@"kHCIACLDataPacketsOnHCISCODataPacketsOff"];
[d setObject:[Number numberWithDouble:kHCIACLDataPacketsOnHCISCODataPacketsOn] forKey:@"kHCIACLDataPacketsOnHCISCODataPacketsOn"];
[d setObject:[Number numberWithDouble:kHostControllerToHostFlowControlOff] forKey:@"kHostControllerToHostFlowControlOff"];
[d setObject:[Number numberWithDouble:kIOBluetoothConnectionAlreadyExists] forKey:@"kIOBluetoothConnectionAlreadyExists"];
[d setObject:[Number numberWithDouble:kIOBluetoothDeviceResetError] forKey:@"kIOBluetoothDeviceResetError"];
[d setObject:[Number numberWithDouble:kIOBluetoothHCIPowerStatesNotSupported] forKey:@"kIOBluetoothHCIPowerStatesNotSupported"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeClosed] forKey:@"kIOBluetoothL2CAPChannelEventTypeClosed"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeData] forKey:@"kIOBluetoothL2CAPChannelEventTypeData"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeOpenComplete] forKey:@"kIOBluetoothL2CAPChannelEventTypeOpenComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeQueueSpaceAvailable] forKey:@"kIOBluetoothL2CAPChannelEventTypeQueueSpaceAvailable"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeReconfigured] forKey:@"kIOBluetoothL2CAPChannelEventTypeReconfigured"];
[d setObject:[Number numberWithDouble:kIOBluetoothL2CAPChannelEventTypeWriteComplete] forKey:@"kIOBluetoothL2CAPChannelEventTypeWriteComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothNoHCIController] forKey:@"kIOBluetoothNoHCIController"];
[d setObject:[Number numberWithDouble:kIOBluetoothObjectIDNULL] forKey:@"kIOBluetoothObjectIDNULL"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeClosed] forKey:@"kIOBluetoothRFCOMMChannelEventTypeClosed"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeControlSignalsChanged] forKey:@"kIOBluetoothRFCOMMChannelEventTypeControlSignalsChanged"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeData] forKey:@"kIOBluetoothRFCOMMChannelEventTypeData"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeFlowControlChanged] forKey:@"kIOBluetoothRFCOMMChannelEventTypeFlowControlChanged"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeOpenComplete] forKey:@"kIOBluetoothRFCOMMChannelEventTypeOpenComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeQueueSpaceAvailable] forKey:@"kIOBluetoothRFCOMMChannelEventTypeQueueSpaceAvailable"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelEventTypeWriteComplete] forKey:@"kIOBluetoothRFCOMMChannelEventTypeWriteComplete"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelFlowControlStatusIsOff] forKey:@"kIOBluetoothRFCOMMChannelFlowControlStatusIsOff"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelFlowControlStatusIsOn] forKey:@"kIOBluetoothRFCOMMChannelFlowControlStatusIsOn"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMChannelTerminatedEvent] forKey:@"kIOBluetoothRFCOMMChannelTerminatedEvent"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMFlowControlChangedEvent] forKey:@"kIOBluetoothRFCOMMFlowControlChangedEvent"];
[d setObject:[Number numberWithDouble:kIOBluetoothRFCOMMNewDataEvent] forKey:@"kIOBluetoothRFCOMMNewDataEvent"];
[d setObject:[Number numberWithDouble:kIOBluetoothUserNotificationChannelDirectionAny] forKey:@"kIOBluetoothUserNotificationChannelDirectionAny"];
[d setObject:[Number numberWithDouble:kIOBluetoothUserNotificationChannelDirectionIncoming] forKey:@"kIOBluetoothUserNotificationChannelDirectionIncoming"];
[d setObject:[Number numberWithDouble:kIOBluetoothUserNotificationChannelDirectionOutgoing] forKey:@"kIOBluetoothUserNotificationChannelDirectionOutgoing"];
[d setObject:[Number numberWithDouble:kInfoStringMaxLength] forKey:@"kInfoStringMaxLength"];
[d setObject:[Number numberWithDouble:kInquiryScanDisabledPageScanEnabled] forKey:@"kInquiryScanDisabledPageScanEnabled"];
[d setObject:[Number numberWithDouble:kInquiryScanEnabledPageScanDisabled] forKey:@"kInquiryScanEnabledPageScanDisabled"];
[d setObject:[Number numberWithDouble:kInquiryScanEnabledPageScanEnabled] forKey:@"kInquiryScanEnabledPageScanEnabled"];
[d setObject:[Number numberWithDouble:kMaintainCurrentPowerState] forKey:@"kMaintainCurrentPowerState"];
[d setObject:[Number numberWithDouble:kMandatoryPageScanMode] forKey:@"kMandatoryPageScanMode"];
[d setObject:[Number numberWithDouble:kMaxChannelIDPerSide] forKey:@"kMaxChannelIDPerSide"];
[d setObject:[Number numberWithDouble:kNoScansEnabled] forKey:@"kNoScansEnabled"];
[d setObject:[Number numberWithDouble:kOBEXBadArgumentError] forKey:@"kOBEXBadArgumentError"];
[d setObject:[Number numberWithDouble:kOBEXBadRequestError] forKey:@"kOBEXBadRequestError"];
[d setObject:[Number numberWithDouble:kOBEXCancelledError] forKey:@"kOBEXCancelledError"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag1Reserved] forKey:@"kOBEXConnectFlag1Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag2Reserved] forKey:@"kOBEXConnectFlag2Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag3Reserved] forKey:@"kOBEXConnectFlag3Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag4Reserved] forKey:@"kOBEXConnectFlag4Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag5Reserved] forKey:@"kOBEXConnectFlag5Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag6Reserved] forKey:@"kOBEXConnectFlag6Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlag7Reserved] forKey:@"kOBEXConnectFlag7Reserved"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlagNone] forKey:@"kOBEXConnectFlagNone"];
[d setObject:[Number numberWithDouble:kOBEXConnectFlagSupportMultipleItLMPConnections] forKey:@"kOBEXConnectFlagSupportMultipleItLMPConnections"];
[d setObject:[Number numberWithDouble:kOBEXErrorRangeMax] forKey:@"kOBEXErrorRangeMax"];
[d setObject:[Number numberWithDouble:kOBEXErrorRangeMin] forKey:@"kOBEXErrorRangeMin"];
[d setObject:[Number numberWithDouble:kOBEXGeneralError] forKey:@"kOBEXGeneralError"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDAppParameters] forKey:@"kOBEXHeaderIDAppParameters"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDAuthorizationChallenge] forKey:@"kOBEXHeaderIDAuthorizationChallenge"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDAuthorizationResponse] forKey:@"kOBEXHeaderIDAuthorizationResponse"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDBody] forKey:@"kOBEXHeaderIDBody"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDConnectionID] forKey:@"kOBEXHeaderIDConnectionID"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDCount] forKey:@"kOBEXHeaderIDCount"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDDescription] forKey:@"kOBEXHeaderIDDescription"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDEndOfBody] forKey:@"kOBEXHeaderIDEndOfBody"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDHTTP] forKey:@"kOBEXHeaderIDHTTP"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDLength] forKey:@"kOBEXHeaderIDLength"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDName] forKey:@"kOBEXHeaderIDName"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDObjectClass] forKey:@"kOBEXHeaderIDObjectClass"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDReservedRangeEnd] forKey:@"kOBEXHeaderIDReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDReservedRangeStart] forKey:@"kOBEXHeaderIDReservedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDTarget] forKey:@"kOBEXHeaderIDTarget"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDTime4Byte] forKey:@"kOBEXHeaderIDTime4Byte"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDTimeISO] forKey:@"kOBEXHeaderIDTimeISO"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDType] forKey:@"kOBEXHeaderIDType"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDUserDefinedRangeEnd] forKey:@"kOBEXHeaderIDUserDefinedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDUserDefinedRangeStart] forKey:@"kOBEXHeaderIDUserDefinedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXHeaderIDWho] forKey:@"kOBEXHeaderIDWho"];
[d setObject:[Number numberWithDouble:kOBEXInternalError] forKey:@"kOBEXInternalError"];
[d setObject:[Number numberWithDouble:kOBEXNoResourcesError] forKey:@"kOBEXNoResourcesError"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag2Reserved] forKey:@"kOBEXNonceFlag2Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag3Reserved] forKey:@"kOBEXNonceFlag3Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag4Reserved] forKey:@"kOBEXNonceFlag4Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag5Reserved] forKey:@"kOBEXNonceFlag5Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag6Reserved] forKey:@"kOBEXNonceFlag6Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlag7Reserved] forKey:@"kOBEXNonceFlag7Reserved"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlagAccessModeReadOnly] forKey:@"kOBEXNonceFlagAccessModeReadOnly"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlagNone] forKey:@"kOBEXNonceFlagNone"];
[d setObject:[Number numberWithDouble:kOBEXNonceFlagSendUserIDInResponse] forKey:@"kOBEXNonceFlagSendUserIDInResponse"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeAbort] forKey:@"kOBEXOpCodeAbort"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeConnect] forKey:@"kOBEXOpCodeConnect"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeDisconnect] forKey:@"kOBEXOpCodeDisconnect"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeGet] forKey:@"kOBEXOpCodeGet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeGetWithHighBitSet] forKey:@"kOBEXOpCodeGetWithHighBitSet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodePut] forKey:@"kOBEXOpCodePut"];
[d setObject:[Number numberWithDouble:kOBEXOpCodePutWithHighBitSet] forKey:@"kOBEXOpCodePutWithHighBitSet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReserved] forKey:@"kOBEXOpCodeReserved"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReservedRangeEnd] forKey:@"kOBEXOpCodeReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReservedRangeStart] forKey:@"kOBEXOpCodeReservedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeReservedWithHighBitSet] forKey:@"kOBEXOpCodeReservedWithHighBitSet"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeSetPath] forKey:@"kOBEXOpCodeSetPath"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeUserDefinedEnd] forKey:@"kOBEXOpCodeUserDefinedEnd"];
[d setObject:[Number numberWithDouble:kOBEXOpCodeUserDefinedStart] forKey:@"kOBEXOpCodeUserDefinedStart"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag2Reserved] forKey:@"kOBEXPutFlag2Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag3Reserved] forKey:@"kOBEXPutFlag3Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag4Reserved] forKey:@"kOBEXPutFlag4Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag5Reserved] forKey:@"kOBEXPutFlag5Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag6Reserved] forKey:@"kOBEXPutFlag6Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlag7Reserved] forKey:@"kOBEXPutFlag7Reserved"];
[d setObject:[Number numberWithDouble:kOBEXPutFlagDontCreateDirectory] forKey:@"kOBEXPutFlagDontCreateDirectory"];
[d setObject:[Number numberWithDouble:kOBEXPutFlagGoToParentDirFirst] forKey:@"kOBEXPutFlagGoToParentDirFirst"];
[d setObject:[Number numberWithDouble:kOBEXPutFlagNone] forKey:@"kOBEXPutFlagNone"];
[d setObject:[Number numberWithDouble:kOBEXRealmASCII] forKey:@"kOBEXRealmASCII"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88591] forKey:@"kOBEXRealmISO88591"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88592] forKey:@"kOBEXRealmISO88592"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88593] forKey:@"kOBEXRealmISO88593"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88594] forKey:@"kOBEXRealmISO88594"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88595] forKey:@"kOBEXRealmISO88595"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88596] forKey:@"kOBEXRealmISO88596"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88597] forKey:@"kOBEXRealmISO88597"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88598] forKey:@"kOBEXRealmISO88598"];
[d setObject:[Number numberWithDouble:kOBEXRealmISO88599] forKey:@"kOBEXRealmISO88599"];
[d setObject:[Number numberWithDouble:kOBEXRealmUNICODE] forKey:@"kOBEXRealmUNICODE"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeAccepted] forKey:@"kOBEXResponseCodeAccepted"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeAcceptedWithFinalBit] forKey:@"kOBEXResponseCodeAcceptedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadGateway] forKey:@"kOBEXResponseCodeBadGateway"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadGatewayWithFinalBit] forKey:@"kOBEXResponseCodeBadGatewayWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadRequest] forKey:@"kOBEXResponseCodeBadRequest"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeBadRequestWithFinalBit] forKey:@"kOBEXResponseCodeBadRequestWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeConflict] forKey:@"kOBEXResponseCodeConflict"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeConflictWithFinalBit] forKey:@"kOBEXResponseCodeConflictWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeContinue] forKey:@"kOBEXResponseCodeContinue"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeContinueWithFinalBit] forKey:@"kOBEXResponseCodeContinueWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeCreated] forKey:@"kOBEXResponseCodeCreated"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeCreatedWithFinalBit] forKey:@"kOBEXResponseCodeCreatedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseFull] forKey:@"kOBEXResponseCodeDatabaseFull"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseFullWithFinalBit] forKey:@"kOBEXResponseCodeDatabaseFullWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseLocked] forKey:@"kOBEXResponseCodeDatabaseLocked"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeDatabaseLockedWithFinalBit] forKey:@"kOBEXResponseCodeDatabaseLockedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeForbidden] forKey:@"kOBEXResponseCodeForbidden"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeForbiddenWithFinalBit] forKey:@"kOBEXResponseCodeForbiddenWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGatewayTimeout] forKey:@"kOBEXResponseCodeGatewayTimeout"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGatewayTimeoutWithFinalBit] forKey:@"kOBEXResponseCodeGatewayTimeoutWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGone] forKey:@"kOBEXResponseCodeGone"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeGoneWithFinalBit] forKey:@"kOBEXResponseCodeGoneWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeHTTPVersionNotSupported] forKey:@"kOBEXResponseCodeHTTPVersionNotSupported"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeHTTPVersionNotSupportedWithFinalBit] forKey:@"kOBEXResponseCodeHTTPVersionNotSupportedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeInternalServerError] forKey:@"kOBEXResponseCodeInternalServerError"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeInternalServerErrorWithFinalBit] forKey:@"kOBEXResponseCodeInternalServerErrorWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeLengthRequired] forKey:@"kOBEXResponseCodeLengthRequired"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeLengthRequiredFinalBit] forKey:@"kOBEXResponseCodeLengthRequiredFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMethodNotAllowed] forKey:@"kOBEXResponseCodeMethodNotAllowed"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMethodNotAllowedWithFinalBit] forKey:@"kOBEXResponseCodeMethodNotAllowedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedPermanently] forKey:@"kOBEXResponseCodeMovedPermanently"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedPermanentlyWithFinalBit] forKey:@"kOBEXResponseCodeMovedPermanentlyWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedTemporarily] forKey:@"kOBEXResponseCodeMovedTemporarily"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMovedTemporarilyWithFinalBit] forKey:@"kOBEXResponseCodeMovedTemporarilyWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMultipleChoices] forKey:@"kOBEXResponseCodeMultipleChoices"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeMultipleChoicesWithFinalBit] forKey:@"kOBEXResponseCodeMultipleChoicesWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNoContent] forKey:@"kOBEXResponseCodeNoContent"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNoContentWithFinalBit] forKey:@"kOBEXResponseCodeNoContentWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNonAuthoritativeInfo] forKey:@"kOBEXResponseCodeNonAuthoritativeInfo"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNonAuthoritativeInfoWithFinalBit] forKey:@"kOBEXResponseCodeNonAuthoritativeInfoWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotAcceptable] forKey:@"kOBEXResponseCodeNotAcceptable"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotAcceptableWithFinalBit] forKey:@"kOBEXResponseCodeNotAcceptableWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotFound] forKey:@"kOBEXResponseCodeNotFound"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotFoundWithFinalBit] forKey:@"kOBEXResponseCodeNotFoundWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotImplemented] forKey:@"kOBEXResponseCodeNotImplemented"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotImplementedWithFinalBit] forKey:@"kOBEXResponseCodeNotImplementedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotModified] forKey:@"kOBEXResponseCodeNotModified"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeNotModifiedWithFinalBit] forKey:@"kOBEXResponseCodeNotModifiedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePartialContent] forKey:@"kOBEXResponseCodePartialContent"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePartialContentWithFinalBit] forKey:@"kOBEXResponseCodePartialContentWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePaymentRequired] forKey:@"kOBEXResponseCodePaymentRequired"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePaymentRequiredWithFinalBit] forKey:@"kOBEXResponseCodePaymentRequiredWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePreconditionFailed] forKey:@"kOBEXResponseCodePreconditionFailed"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodePreconditionFailedWithFinalBit] forKey:@"kOBEXResponseCodePreconditionFailedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeProxyAuthenticationRequired] forKey:@"kOBEXResponseCodeProxyAuthenticationRequired"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeProxyAuthenticationRequiredWithFinalBit] forKey:@"kOBEXResponseCodeProxyAuthenticationRequiredWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestTimeOut] forKey:@"kOBEXResponseCodeRequestTimeOut"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestTimeOutWithFinalBit] forKey:@"kOBEXResponseCodeRequestTimeOutWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestURLTooLarge] forKey:@"kOBEXResponseCodeRequestURLTooLarge"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestURLTooLargeWithFinalBit] forKey:@"kOBEXResponseCodeRequestURLTooLargeWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestedEntityTooLarge] forKey:@"kOBEXResponseCodeRequestedEntityTooLarge"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeRequestedEntityTooLargeWithFinalBit] forKey:@"kOBEXResponseCodeRequestedEntityTooLargeWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeReservedRangeEnd] forKey:@"kOBEXResponseCodeReservedRangeEnd"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeReservedRangeStart] forKey:@"kOBEXResponseCodeReservedRangeStart"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeResetContent] forKey:@"kOBEXResponseCodeResetContent"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeResetContentWithFinalBit] forKey:@"kOBEXResponseCodeResetContentWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSeeOther] forKey:@"kOBEXResponseCodeSeeOther"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSeeOtherWithFinalBit] forKey:@"kOBEXResponseCodeSeeOtherWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeServiceUnavailable] forKey:@"kOBEXResponseCodeServiceUnavailable"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeServiceUnavailableWithFinalBit] forKey:@"kOBEXResponseCodeServiceUnavailableWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSuccess] forKey:@"kOBEXResponseCodeSuccess"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeSuccessWithFinalBit] forKey:@"kOBEXResponseCodeSuccessWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnauthorized] forKey:@"kOBEXResponseCodeUnauthorized"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnauthorizedWithFinalBit] forKey:@"kOBEXResponseCodeUnauthorizedWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnsupportedMediaType] forKey:@"kOBEXResponseCodeUnsupportedMediaType"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUnsupportedMediaTypeWithFinalBit] forKey:@"kOBEXResponseCodeUnsupportedMediaTypeWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUseProxy] forKey:@"kOBEXResponseCodeUseProxy"];
[d setObject:[Number numberWithDouble:kOBEXResponseCodeUseProxyWithFinalBit] forKey:@"kOBEXResponseCodeUseProxyWithFinalBit"];
[d setObject:[Number numberWithDouble:kOBEXSessionAlreadyConnectedError] forKey:@"kOBEXSessionAlreadyConnectedError"];
[d setObject:[Number numberWithDouble:kOBEXSessionBadRequestError] forKey:@"kOBEXSessionBadRequestError"];
[d setObject:[Number numberWithDouble:kOBEXSessionBadResponseError] forKey:@"kOBEXSessionBadResponseError"];
[d setObject:[Number numberWithDouble:kOBEXSessionBusyError] forKey:@"kOBEXSessionBusyError"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeAbortCommandReceived] forKey:@"kOBEXSessionEventTypeAbortCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeAbortCommandResponseReceived] forKey:@"kOBEXSessionEventTypeAbortCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeConnectCommandReceived] forKey:@"kOBEXSessionEventTypeConnectCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeConnectCommandResponseReceived] forKey:@"kOBEXSessionEventTypeConnectCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeDisconnectCommandReceived] forKey:@"kOBEXSessionEventTypeDisconnectCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeDisconnectCommandResponseReceived] forKey:@"kOBEXSessionEventTypeDisconnectCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeError] forKey:@"kOBEXSessionEventTypeError"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeGetCommandReceived] forKey:@"kOBEXSessionEventTypeGetCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeGetCommandResponseReceived] forKey:@"kOBEXSessionEventTypeGetCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypePutCommandReceived] forKey:@"kOBEXSessionEventTypePutCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypePutCommandResponseReceived] forKey:@"kOBEXSessionEventTypePutCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeSetPathCommandReceived] forKey:@"kOBEXSessionEventTypeSetPathCommandReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionEventTypeSetPathCommandResponseReceived] forKey:@"kOBEXSessionEventTypeSetPathCommandResponseReceived"];
[d setObject:[Number numberWithDouble:kOBEXSessionNoTransportError] forKey:@"kOBEXSessionNoTransportError"];
[d setObject:[Number numberWithDouble:kOBEXSessionNotConnectedError] forKey:@"kOBEXSessionNotConnectedError"];
[d setObject:[Number numberWithDouble:kOBEXSessionTimeoutError] forKey:@"kOBEXSessionTimeoutError"];
[d setObject:[Number numberWithDouble:kOBEXSessionTransportDiedError] forKey:@"kOBEXSessionTransportDiedError"];
[d setObject:[Number numberWithDouble:kOBEXSuccess] forKey:@"kOBEXSuccess"];
[d setObject:[Number numberWithDouble:kOBEXTimeoutError] forKey:@"kOBEXTimeoutError"];
[d setObject:[Number numberWithDouble:kOBEXTransportEventTypeDataReceived] forKey:@"kOBEXTransportEventTypeDataReceived"];
[d setObject:[Number numberWithDouble:kOBEXTransportEventTypeStatus] forKey:@"kOBEXTransportEventTypeStatus"];
[d setObject:[Number numberWithDouble:kOBEXUnsupportedError] forKey:@"kOBEXUnsupportedError"];
[d setObject:[Number numberWithDouble:kOBEXVersion10] forKey:@"kOBEXVersion10"];
[d setObject:[Number numberWithDouble:kOptionalPageScanMode1] forKey:@"kOptionalPageScanMode1"];
[d setObject:[Number numberWithDouble:kOptionalPageScanMode2] forKey:@"kOptionalPageScanMode2"];
[d setObject:[Number numberWithDouble:kOptionalPageScanMode3] forKey:@"kOptionalPageScanMode3"];
[d setObject:[Number numberWithDouble:kP0Mode] forKey:@"kP0Mode"];
[d setObject:[Number numberWithDouble:kP1Mode] forKey:@"kP1Mode"];
[d setObject:[Number numberWithDouble:kP2Mode] forKey:@"kP2Mode"];
[d setObject:[Number numberWithDouble:kReadAllStoredLinkKeys] forKey:@"kReadAllStoredLinkKeys"];
[d setObject:[Number numberWithDouble:kReadCurrentTransmitPowerLevel] forKey:@"kReadCurrentTransmitPowerLevel"];
[d setObject:[Number numberWithDouble:kReadMaximumTransmitPowerLevel] forKey:@"kReadMaximumTransmitPowerLevel"];
[d setObject:[Number numberWithDouble:kReservedForFutureUse] forKey:@"kReservedForFutureUse"];
[d setObject:[Number numberWithDouble:kReturnLinkKeyForSpecifiedDeviceOnly] forKey:@"kReturnLinkKeyForSpecifiedDeviceOnly"];
[d setObject:[Number numberWithDouble:kSCOFlowControlDisabled] forKey:@"kSCOFlowControlDisabled"];
[d setObject:[Number numberWithDouble:kSCOFlowControlEnabled] forKey:@"kSCOFlowControlEnabled"];
[d setObject:[Number numberWithDouble:kSearchOptionsAlwaysStartInquiry] forKey:@"kSearchOptionsAlwaysStartInquiry"];
[d setObject:[Number numberWithDouble:kSearchOptionsDiscardCachedResults] forKey:@"kSearchOptionsDiscardCachedResults"];
[d setObject:[Number numberWithDouble:kSearchOptionsNone] forKey:@"kSearchOptionsNone"];
[d setObject:[Number numberWithDouble:kSuspendInquiryScan] forKey:@"kSuspendInquiryScan"];
[d setObject:[Number numberWithDouble:kSuspendPageScan] forKey:@"kSuspendPageScan"];
[d setObject:[Number numberWithDouble:kSuspendPeriodicInquiries] forKey:@"kSuspendPeriodicInquiries"];
[d setObject:[Number numberWithDouble:sub_iokit_bluetooth] forKey:@"sub_iokit_bluetooth"];
[d setObject:[Number numberWithDouble:kIOBluetoothServiceBrowserControllerOptionsAutoStartInquiry] forKey:@"kIOBluetoothServiceBrowserControllerOptionsAutoStartInquiry"];
[d setObject:[Number numberWithDouble:kIOBluetoothServiceBrowserControllerOptionsDisconnectWhenDone] forKey:@"kIOBluetoothServiceBrowserControllerOptionsDisconnectWhenDone"];
[d setObject:[Number numberWithDouble:kIOBluetoothServiceBrowserControllerOptionsNone] forKey:@"kIOBluetoothServiceBrowserControllerOptionsNone"];
[d setObject:[Number numberWithDouble:kIOBluetoothUISuccess] forKey:@"kIOBluetoothUISuccess"];
[d setObject:[Number numberWithDouble:kIOBluetoothUIUserCanceledErr] forKey:@"kIOBluetoothUIUserCanceledErr"];
[d setObject:[Number numberWithDouble:kIOBluetoothServiceBrowserControllerOptionsAutoStartInquiry] forKey:@"kIOBluetoothServiceBrowserControllerOptionsAutoStartInquiry"];
[d setObject:[Number numberWithDouble:kIOBluetoothServiceBrowserControllerOptionsDisconnectWhenDone] forKey:@"kIOBluetoothServiceBrowserControllerOptionsDisconnectWhenDone"];
[d setObject:[Number numberWithDouble:kIOBluetoothServiceBrowserControllerOptionsNone] forKey:@"kIOBluetoothServiceBrowserControllerOptionsNone"];
[d setObject:[Number numberWithDouble:kIOBluetoothUISuccess] forKey:@"kIOBluetoothUISuccess"];
[d setObject:[Number numberWithDouble:kIOBluetoothUIUserCanceledErr] forKey:@"kIOBluetoothUIUserCanceledErr"];
if ([OSAScriptErrorAppName isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorAppName forKey:@"OSAScriptErrorAppName"]; else NSLog([@"Can't initialize OSAScriptErrorAppName with object " stringByAppendingString:[OSAScriptErrorAppName description]]);
if ([OSAScriptErrorBriefMessage isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorBriefMessage forKey:@"OSAScriptErrorBriefMessage"]; else NSLog([@"Can't initialize OSAScriptErrorBriefMessage with object " stringByAppendingString:[OSAScriptErrorBriefMessage description]]);
if ([OSAScriptErrorMessage isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorMessage forKey:@"OSAScriptErrorMessage"]; else NSLog([@"Can't initialize OSAScriptErrorMessage with object " stringByAppendingString:[OSAScriptErrorMessage description]]);
if ([OSAScriptErrorNumber isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorNumber forKey:@"OSAScriptErrorNumber"]; else NSLog([@"Can't initialize OSAScriptErrorNumber with object " stringByAppendingString:[OSAScriptErrorNumber description]]);
if ([OSAScriptErrorRange isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorRange forKey:@"OSAScriptErrorRange"]; else NSLog([@"Can't initialize OSAScriptErrorRange with object " stringByAppendingString:[OSAScriptErrorRange description]]);
if ([OSAStorageApplicationBundleType isKindOfClass:[NSString class]]) [d setObject:OSAStorageApplicationBundleType forKey:@"OSAStorageApplicationBundleType"]; else NSLog([@"Can't initialize OSAStorageApplicationBundleType with object " stringByAppendingString:[OSAStorageApplicationBundleType description]]);
if ([OSAStorageApplicationType isKindOfClass:[NSString class]]) [d setObject:OSAStorageApplicationType forKey:@"OSAStorageApplicationType"]; else NSLog([@"Can't initialize OSAStorageApplicationType with object " stringByAppendingString:[OSAStorageApplicationType description]]);
if ([OSAStorageScriptBundleType isKindOfClass:[NSString class]]) [d setObject:OSAStorageScriptBundleType forKey:@"OSAStorageScriptBundleType"]; else NSLog([@"Can't initialize OSAStorageScriptBundleType with object " stringByAppendingString:[OSAStorageScriptBundleType description]]);
if ([OSAStorageScriptType isKindOfClass:[NSString class]]) [d setObject:OSAStorageScriptType forKey:@"OSAStorageScriptType"]; else NSLog([@"Can't initialize OSAStorageScriptType with object " stringByAppendingString:[OSAStorageScriptType description]]);
if ([OSAStorageTextType isKindOfClass:[NSString class]]) [d setObject:OSAStorageTextType forKey:@"OSAStorageTextType"]; else NSLog([@"Can't initialize OSAStorageTextType with object " stringByAppendingString:[OSAStorageTextType description]]);
[d setObject:[Number numberWithDouble:OSACompileIntoContext] forKey:@"OSACompileIntoContext"];
[d setObject:[Number numberWithDouble:OSANull] forKey:@"OSANull"];
[d setObject:[Number numberWithDouble:OSAPreventGetSource] forKey:@"OSAPreventGetSource"];
[d setObject:[Number numberWithDouble:OSAScriptRecording] forKey:@"OSAScriptRecording"];
[d setObject:[Number numberWithDouble:OSAScriptRunning] forKey:@"OSAScriptRunning"];
[d setObject:[Number numberWithDouble:OSAScriptStopped] forKey:@"OSAScriptStopped"];
[d setObject:[Number numberWithDouble:OSAShowStartupScreen] forKey:@"OSAShowStartupScreen"];
[d setObject:[Number numberWithDouble:OSAStayOpenApplet] forKey:@"OSAStayOpenApplet"];
[d setObject:[Number numberWithDouble:OSASupportsAECoercion] forKey:@"OSASupportsAECoercion"];
[d setObject:[Number numberWithDouble:OSASupportsAESending] forKey:@"OSASupportsAESending"];
[d setObject:[Number numberWithDouble:OSASupportsCompiling] forKey:@"OSASupportsCompiling"];
[d setObject:[Number numberWithDouble:OSASupportsConvenience] forKey:@"OSASupportsConvenience"];
[d setObject:[Number numberWithDouble:OSASupportsDialects] forKey:@"OSASupportsDialects"];
[d setObject:[Number numberWithDouble:OSASupportsEventHandling] forKey:@"OSASupportsEventHandling"];
[d setObject:[Number numberWithDouble:OSASupportsGetSource] forKey:@"OSASupportsGetSource"];
[d setObject:[Number numberWithDouble:OSASupportsRecording] forKey:@"OSASupportsRecording"];
if ([OSAScriptErrorAppName isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorAppName forKey:@"OSAScriptErrorAppName"]; else NSLog([@"Can't initialize OSAScriptErrorAppName with object " stringByAppendingString:[OSAScriptErrorAppName description]]);
if ([OSAScriptErrorBriefMessage isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorBriefMessage forKey:@"OSAScriptErrorBriefMessage"]; else NSLog([@"Can't initialize OSAScriptErrorBriefMessage with object " stringByAppendingString:[OSAScriptErrorBriefMessage description]]);
if ([OSAScriptErrorMessage isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorMessage forKey:@"OSAScriptErrorMessage"]; else NSLog([@"Can't initialize OSAScriptErrorMessage with object " stringByAppendingString:[OSAScriptErrorMessage description]]);
if ([OSAScriptErrorNumber isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorNumber forKey:@"OSAScriptErrorNumber"]; else NSLog([@"Can't initialize OSAScriptErrorNumber with object " stringByAppendingString:[OSAScriptErrorNumber description]]);
if ([OSAScriptErrorRange isKindOfClass:[NSString class]]) [d setObject:OSAScriptErrorRange forKey:@"OSAScriptErrorRange"]; else NSLog([@"Can't initialize OSAScriptErrorRange with object " stringByAppendingString:[OSAScriptErrorRange description]]);
if ([OSAStorageApplicationBundleType isKindOfClass:[NSString class]]) [d setObject:OSAStorageApplicationBundleType forKey:@"OSAStorageApplicationBundleType"]; else NSLog([@"Can't initialize OSAStorageApplicationBundleType with object " stringByAppendingString:[OSAStorageApplicationBundleType description]]);
if ([OSAStorageApplicationType isKindOfClass:[NSString class]]) [d setObject:OSAStorageApplicationType forKey:@"OSAStorageApplicationType"]; else NSLog([@"Can't initialize OSAStorageApplicationType with object " stringByAppendingString:[OSAStorageApplicationType description]]);
if ([OSAStorageScriptBundleType isKindOfClass:[NSString class]]) [d setObject:OSAStorageScriptBundleType forKey:@"OSAStorageScriptBundleType"]; else NSLog([@"Can't initialize OSAStorageScriptBundleType with object " stringByAppendingString:[OSAStorageScriptBundleType description]]);
if ([OSAStorageScriptType isKindOfClass:[NSString class]]) [d setObject:OSAStorageScriptType forKey:@"OSAStorageScriptType"]; else NSLog([@"Can't initialize OSAStorageScriptType with object " stringByAppendingString:[OSAStorageScriptType description]]);
if ([OSAStorageTextType isKindOfClass:[NSString class]]) [d setObject:OSAStorageTextType forKey:@"OSAStorageTextType"]; else NSLog([@"Can't initialize OSAStorageTextType with object " stringByAppendingString:[OSAStorageTextType description]]);
[d setObject:[Number numberWithDouble:OSACompileIntoContext] forKey:@"OSACompileIntoContext"];
[d setObject:[Number numberWithDouble:OSANull] forKey:@"OSANull"];
[d setObject:[Number numberWithDouble:OSAPreventGetSource] forKey:@"OSAPreventGetSource"];
[d setObject:[Number numberWithDouble:OSAScriptRecording] forKey:@"OSAScriptRecording"];
[d setObject:[Number numberWithDouble:OSAScriptRunning] forKey:@"OSAScriptRunning"];
[d setObject:[Number numberWithDouble:OSAScriptStopped] forKey:@"OSAScriptStopped"];
[d setObject:[Number numberWithDouble:OSAShowStartupScreen] forKey:@"OSAShowStartupScreen"];
[d setObject:[Number numberWithDouble:OSAStayOpenApplet] forKey:@"OSAStayOpenApplet"];
[d setObject:[Number numberWithDouble:OSASupportsAECoercion] forKey:@"OSASupportsAECoercion"];
[d setObject:[Number numberWithDouble:OSASupportsAESending] forKey:@"OSASupportsAESending"];
[d setObject:[Number numberWithDouble:OSASupportsCompiling] forKey:@"OSASupportsCompiling"];
[d setObject:[Number numberWithDouble:OSASupportsConvenience] forKey:@"OSASupportsConvenience"];
[d setObject:[Number numberWithDouble:OSASupportsDialects] forKey:@"OSASupportsDialects"];
[d setObject:[Number numberWithDouble:OSASupportsEventHandling] forKey:@"OSASupportsEventHandling"];
[d setObject:[Number numberWithDouble:OSASupportsGetSource] forKey:@"OSASupportsGetSource"];
[d setObject:[Number numberWithDouble:OSASupportsRecording] forKey:@"OSASupportsRecording"];
if ([PSEnclosureDownloadStateDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:PSEnclosureDownloadStateDidChangeNotification forKey:@"PSEnclosureDownloadStateDidChangeNotification"]; else NSLog([@"Can't initialize PSEnclosureDownloadStateDidChangeNotification with object " stringByAppendingString:[PSEnclosureDownloadStateDidChangeNotification description]]);
if ([PSErrorDomain isKindOfClass:[NSString class]]) [d setObject:PSErrorDomain forKey:@"PSErrorDomain"]; else NSLog([@"Can't initialize PSErrorDomain with object " stringByAppendingString:[PSErrorDomain description]]);
if ([PSFeedAddedEntriesKey isKindOfClass:[NSString class]]) [d setObject:PSFeedAddedEntriesKey forKey:@"PSFeedAddedEntriesKey"]; else NSLog([@"Can't initialize PSFeedAddedEntriesKey with object " stringByAppendingString:[PSFeedAddedEntriesKey description]]);
if ([PSFeedDidChangeEntryFlagsKey isKindOfClass:[NSString class]]) [d setObject:PSFeedDidChangeEntryFlagsKey forKey:@"PSFeedDidChangeEntryFlagsKey"]; else NSLog([@"Can't initialize PSFeedDidChangeEntryFlagsKey with object " stringByAppendingString:[PSFeedDidChangeEntryFlagsKey description]]);
if ([PSFeedEntriesChangedNotification isKindOfClass:[NSString class]]) [d setObject:PSFeedEntriesChangedNotification forKey:@"PSFeedEntriesChangedNotification"]; else NSLog([@"Can't initialize PSFeedEntriesChangedNotification with object " stringByAppendingString:[PSFeedEntriesChangedNotification description]]);
if ([PSFeedRefreshingNotification isKindOfClass:[NSString class]]) [d setObject:PSFeedRefreshingNotification forKey:@"PSFeedRefreshingNotification"]; else NSLog([@"Can't initialize PSFeedRefreshingNotification with object " stringByAppendingString:[PSFeedRefreshingNotification description]]);
if ([PSFeedRemovedEntriesKey isKindOfClass:[NSString class]]) [d setObject:PSFeedRemovedEntriesKey forKey:@"PSFeedRemovedEntriesKey"]; else NSLog([@"Can't initialize PSFeedRemovedEntriesKey with object " stringByAppendingString:[PSFeedRemovedEntriesKey description]]);
if ([PSFeedUpdatedEntriesKey isKindOfClass:[NSString class]]) [d setObject:PSFeedUpdatedEntriesKey forKey:@"PSFeedUpdatedEntriesKey"]; else NSLog([@"Can't initialize PSFeedUpdatedEntriesKey with object " stringByAppendingString:[PSFeedUpdatedEntriesKey description]]);
[d setObject:[Number numberWithDouble:PSAtomFormat] forKey:@"PSAtomFormat"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadDidFail] forKey:@"PSEnclosureDownloadDidFail"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadDidFinish] forKey:@"PSEnclosureDownloadDidFinish"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadIsActive] forKey:@"PSEnclosureDownloadIsActive"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadIsIdle] forKey:@"PSEnclosureDownloadIsIdle"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadIsQueued] forKey:@"PSEnclosureDownloadIsQueued"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadWasDeleted] forKey:@"PSEnclosureDownloadWasDeleted"];
[d setObject:[Number numberWithDouble:PSFeedSettingsIntervalDefault] forKey:@"PSFeedSettingsIntervalDefault"];
[d setObject:[Number numberWithDouble:PSFeedSettingsIntervalNever] forKey:@"PSFeedSettingsIntervalNever"];
[d setObject:[Number numberWithDouble:PSFeedSettingsUnlimitedSize] forKey:@"PSFeedSettingsUnlimitedSize"];
[d setObject:[Number numberWithDouble:PSInternalError] forKey:@"PSInternalError"];
[d setObject:[Number numberWithDouble:PSLinkToAlternate] forKey:@"PSLinkToAlternate"];
[d setObject:[Number numberWithDouble:PSLinkToAtom] forKey:@"PSLinkToAtom"];
[d setObject:[Number numberWithDouble:PSLinkToAtomService] forKey:@"PSLinkToAtomService"];
[d setObject:[Number numberWithDouble:PSLinkToFOAF] forKey:@"PSLinkToFOAF"];
[d setObject:[Number numberWithDouble:PSLinkToOther] forKey:@"PSLinkToOther"];
[d setObject:[Number numberWithDouble:PSLinkToRSD] forKey:@"PSLinkToRSD"];
[d setObject:[Number numberWithDouble:PSLinkToRSS] forKey:@"PSLinkToRSS"];
[d setObject:[Number numberWithDouble:PSLinkToSelf] forKey:@"PSLinkToSelf"];
[d setObject:[Number numberWithDouble:PSNotAFeedError] forKey:@"PSNotAFeedError"];
[d setObject:[Number numberWithDouble:PSRSSFormat] forKey:@"PSRSSFormat"];
[d setObject:[Number numberWithDouble:PSUnknownFormat] forKey:@"PSUnknownFormat"];
if ([PSEnclosureDownloadStateDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:PSEnclosureDownloadStateDidChangeNotification forKey:@"PSEnclosureDownloadStateDidChangeNotification"]; else NSLog([@"Can't initialize PSEnclosureDownloadStateDidChangeNotification with object " stringByAppendingString:[PSEnclosureDownloadStateDidChangeNotification description]]);
if ([PSErrorDomain isKindOfClass:[NSString class]]) [d setObject:PSErrorDomain forKey:@"PSErrorDomain"]; else NSLog([@"Can't initialize PSErrorDomain with object " stringByAppendingString:[PSErrorDomain description]]);
if ([PSFeedAddedEntriesKey isKindOfClass:[NSString class]]) [d setObject:PSFeedAddedEntriesKey forKey:@"PSFeedAddedEntriesKey"]; else NSLog([@"Can't initialize PSFeedAddedEntriesKey with object " stringByAppendingString:[PSFeedAddedEntriesKey description]]);
if ([PSFeedDidChangeEntryFlagsKey isKindOfClass:[NSString class]]) [d setObject:PSFeedDidChangeEntryFlagsKey forKey:@"PSFeedDidChangeEntryFlagsKey"]; else NSLog([@"Can't initialize PSFeedDidChangeEntryFlagsKey with object " stringByAppendingString:[PSFeedDidChangeEntryFlagsKey description]]);
if ([PSFeedEntriesChangedNotification isKindOfClass:[NSString class]]) [d setObject:PSFeedEntriesChangedNotification forKey:@"PSFeedEntriesChangedNotification"]; else NSLog([@"Can't initialize PSFeedEntriesChangedNotification with object " stringByAppendingString:[PSFeedEntriesChangedNotification description]]);
if ([PSFeedRefreshingNotification isKindOfClass:[NSString class]]) [d setObject:PSFeedRefreshingNotification forKey:@"PSFeedRefreshingNotification"]; else NSLog([@"Can't initialize PSFeedRefreshingNotification with object " stringByAppendingString:[PSFeedRefreshingNotification description]]);
if ([PSFeedRemovedEntriesKey isKindOfClass:[NSString class]]) [d setObject:PSFeedRemovedEntriesKey forKey:@"PSFeedRemovedEntriesKey"]; else NSLog([@"Can't initialize PSFeedRemovedEntriesKey with object " stringByAppendingString:[PSFeedRemovedEntriesKey description]]);
if ([PSFeedUpdatedEntriesKey isKindOfClass:[NSString class]]) [d setObject:PSFeedUpdatedEntriesKey forKey:@"PSFeedUpdatedEntriesKey"]; else NSLog([@"Can't initialize PSFeedUpdatedEntriesKey with object " stringByAppendingString:[PSFeedUpdatedEntriesKey description]]);
[d setObject:[Number numberWithDouble:PSAtomFormat] forKey:@"PSAtomFormat"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadDidFail] forKey:@"PSEnclosureDownloadDidFail"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadDidFinish] forKey:@"PSEnclosureDownloadDidFinish"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadIsActive] forKey:@"PSEnclosureDownloadIsActive"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadIsIdle] forKey:@"PSEnclosureDownloadIsIdle"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadIsQueued] forKey:@"PSEnclosureDownloadIsQueued"];
[d setObject:[Number numberWithDouble:PSEnclosureDownloadWasDeleted] forKey:@"PSEnclosureDownloadWasDeleted"];
[d setObject:[Number numberWithDouble:PSFeedSettingsIntervalDefault] forKey:@"PSFeedSettingsIntervalDefault"];
[d setObject:[Number numberWithDouble:PSFeedSettingsIntervalNever] forKey:@"PSFeedSettingsIntervalNever"];
[d setObject:[Number numberWithDouble:PSFeedSettingsUnlimitedSize] forKey:@"PSFeedSettingsUnlimitedSize"];
[d setObject:[Number numberWithDouble:PSInternalError] forKey:@"PSInternalError"];
[d setObject:[Number numberWithDouble:PSLinkToAlternate] forKey:@"PSLinkToAlternate"];
[d setObject:[Number numberWithDouble:PSLinkToAtom] forKey:@"PSLinkToAtom"];
[d setObject:[Number numberWithDouble:PSLinkToAtomService] forKey:@"PSLinkToAtomService"];
[d setObject:[Number numberWithDouble:PSLinkToFOAF] forKey:@"PSLinkToFOAF"];
[d setObject:[Number numberWithDouble:PSLinkToOther] forKey:@"PSLinkToOther"];
[d setObject:[Number numberWithDouble:PSLinkToRSD] forKey:@"PSLinkToRSD"];
[d setObject:[Number numberWithDouble:PSLinkToRSS] forKey:@"PSLinkToRSS"];
[d setObject:[Number numberWithDouble:PSLinkToSelf] forKey:@"PSLinkToSelf"];
[d setObject:[Number numberWithDouble:PSNotAFeedError] forKey:@"PSNotAFeedError"];
[d setObject:[Number numberWithDouble:PSRSSFormat] forKey:@"PSRSSFormat"];
[d setObject:[Number numberWithDouble:PSUnknownFormat] forKey:@"PSUnknownFormat"];
if ([QTAddImageCodecQuality isKindOfClass:[NSString class]]) [d setObject:QTAddImageCodecQuality forKey:@"QTAddImageCodecQuality"]; else NSLog([@"Can't initialize QTAddImageCodecQuality with object " stringByAppendingString:[QTAddImageCodecQuality description]]);
if ([QTAddImageCodecType isKindOfClass:[NSString class]]) [d setObject:QTAddImageCodecType forKey:@"QTAddImageCodecType"]; else NSLog([@"Can't initialize QTAddImageCodecType with object " stringByAppendingString:[QTAddImageCodecType description]]);
if ([QTCaptureConnectionAttributeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAttributeDidChangeNotification forKey:@"QTCaptureConnectionAttributeDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionAttributeDidChangeNotification with object " stringByAppendingString:[QTCaptureConnectionAttributeDidChangeNotification description]]);
if ([QTCaptureConnectionAttributeWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAttributeWillChangeNotification forKey:@"QTCaptureConnectionAttributeWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionAttributeWillChangeNotification with object " stringByAppendingString:[QTCaptureConnectionAttributeWillChangeNotification description]]);
if ([QTCaptureConnectionAudioAveragePowerLevelsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioAveragePowerLevelsAttribute forKey:@"QTCaptureConnectionAudioAveragePowerLevelsAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioAveragePowerLevelsAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioAveragePowerLevelsAttribute description]]);
if ([QTCaptureConnectionAudioMasterVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioMasterVolumeAttribute forKey:@"QTCaptureConnectionAudioMasterVolumeAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioMasterVolumeAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioMasterVolumeAttribute description]]);
if ([QTCaptureConnectionAudioPeakHoldLevelsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioPeakHoldLevelsAttribute forKey:@"QTCaptureConnectionAudioPeakHoldLevelsAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioPeakHoldLevelsAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioPeakHoldLevelsAttribute description]]);
if ([QTCaptureConnectionAudioVolumesAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioVolumesAttribute forKey:@"QTCaptureConnectionAudioVolumesAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioVolumesAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioVolumesAttribute description]]);
if ([QTCaptureConnectionChangedAttributeKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionChangedAttributeKey forKey:@"QTCaptureConnectionChangedAttributeKey"]; else NSLog([@"Can't initialize QTCaptureConnectionChangedAttributeKey with object " stringByAppendingString:[QTCaptureConnectionChangedAttributeKey description]]);
if ([QTCaptureConnectionEnabledAudioChannelsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionEnabledAudioChannelsAttribute forKey:@"QTCaptureConnectionEnabledAudioChannelsAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionEnabledAudioChannelsAttribute with object " stringByAppendingString:[QTCaptureConnectionEnabledAudioChannelsAttribute description]]);
if ([QTCaptureConnectionFormatDescriptionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionFormatDescriptionDidChangeNotification forKey:@"QTCaptureConnectionFormatDescriptionDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionFormatDescriptionDidChangeNotification with object " stringByAppendingString:[QTCaptureConnectionFormatDescriptionDidChangeNotification description]]);
if ([QTCaptureConnectionFormatDescriptionWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionFormatDescriptionWillChangeNotification forKey:@"QTCaptureConnectionFormatDescriptionWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionFormatDescriptionWillChangeNotification with object " stringByAppendingString:[QTCaptureConnectionFormatDescriptionWillChangeNotification description]]);
if ([QTCaptureDeviceAVCTransportControlsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAVCTransportControlsAttribute forKey:@"QTCaptureDeviceAVCTransportControlsAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceAVCTransportControlsAttribute with object " stringByAppendingString:[QTCaptureDeviceAVCTransportControlsAttribute description]]);
if ([QTCaptureDeviceAVCTransportControlsPlaybackModeKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAVCTransportControlsPlaybackModeKey forKey:@"QTCaptureDeviceAVCTransportControlsPlaybackModeKey"]; else NSLog([@"Can't initialize QTCaptureDeviceAVCTransportControlsPlaybackModeKey with object " stringByAppendingString:[QTCaptureDeviceAVCTransportControlsPlaybackModeKey description]]);
if ([QTCaptureDeviceAVCTransportControlsSpeedKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAVCTransportControlsSpeedKey forKey:@"QTCaptureDeviceAVCTransportControlsSpeedKey"]; else NSLog([@"Can't initialize QTCaptureDeviceAVCTransportControlsSpeedKey with object " stringByAppendingString:[QTCaptureDeviceAVCTransportControlsSpeedKey description]]);
if ([QTCaptureDeviceAttributeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAttributeDidChangeNotification forKey:@"QTCaptureDeviceAttributeDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceAttributeDidChangeNotification with object " stringByAppendingString:[QTCaptureDeviceAttributeDidChangeNotification description]]);
if ([QTCaptureDeviceAttributeWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAttributeWillChangeNotification forKey:@"QTCaptureDeviceAttributeWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceAttributeWillChangeNotification with object " stringByAppendingString:[QTCaptureDeviceAttributeWillChangeNotification description]]);
if ([QTCaptureDeviceAvailableInputSourcesAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAvailableInputSourcesAttribute forKey:@"QTCaptureDeviceAvailableInputSourcesAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceAvailableInputSourcesAttribute with object " stringByAppendingString:[QTCaptureDeviceAvailableInputSourcesAttribute description]]);
if ([QTCaptureDeviceChangedAttributeKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceChangedAttributeKey forKey:@"QTCaptureDeviceChangedAttributeKey"]; else NSLog([@"Can't initialize QTCaptureDeviceChangedAttributeKey with object " stringByAppendingString:[QTCaptureDeviceChangedAttributeKey description]]);
if ([QTCaptureDeviceFormatDescriptionsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceFormatDescriptionsDidChangeNotification forKey:@"QTCaptureDeviceFormatDescriptionsDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceFormatDescriptionsDidChangeNotification with object " stringByAppendingString:[QTCaptureDeviceFormatDescriptionsDidChangeNotification description]]);
if ([QTCaptureDeviceFormatDescriptionsWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceFormatDescriptionsWillChangeNotification forKey:@"QTCaptureDeviceFormatDescriptionsWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceFormatDescriptionsWillChangeNotification with object " stringByAppendingString:[QTCaptureDeviceFormatDescriptionsWillChangeNotification description]]);
if ([QTCaptureDeviceInputSourceIdentifierAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceInputSourceIdentifierAttribute forKey:@"QTCaptureDeviceInputSourceIdentifierAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceInputSourceIdentifierAttribute with object " stringByAppendingString:[QTCaptureDeviceInputSourceIdentifierAttribute description]]);
if ([QTCaptureDeviceInputSourceIdentifierKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceInputSourceIdentifierKey forKey:@"QTCaptureDeviceInputSourceIdentifierKey"]; else NSLog([@"Can't initialize QTCaptureDeviceInputSourceIdentifierKey with object " stringByAppendingString:[QTCaptureDeviceInputSourceIdentifierKey description]]);
if ([QTCaptureDeviceInputSourceLocalizedDisplayNameKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceInputSourceLocalizedDisplayNameKey forKey:@"QTCaptureDeviceInputSourceLocalizedDisplayNameKey"]; else NSLog([@"Can't initialize QTCaptureDeviceInputSourceLocalizedDisplayNameKey with object " stringByAppendingString:[QTCaptureDeviceInputSourceLocalizedDisplayNameKey description]]);
if ([QTCaptureDeviceLinkedDevicesAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceLinkedDevicesAttribute forKey:@"QTCaptureDeviceLinkedDevicesAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceLinkedDevicesAttribute with object " stringByAppendingString:[QTCaptureDeviceLinkedDevicesAttribute description]]);
if ([QTCaptureDeviceSuspendedAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceSuspendedAttribute forKey:@"QTCaptureDeviceSuspendedAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceSuspendedAttribute with object " stringByAppendingString:[QTCaptureDeviceSuspendedAttribute description]]);
if ([QTCaptureDeviceWasConnectedNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceWasConnectedNotification forKey:@"QTCaptureDeviceWasConnectedNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceWasConnectedNotification with object " stringByAppendingString:[QTCaptureDeviceWasConnectedNotification description]]);
if ([QTCaptureDeviceWasDisconnectedNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceWasDisconnectedNotification forKey:@"QTCaptureDeviceWasDisconnectedNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceWasDisconnectedNotification with object " stringByAppendingString:[QTCaptureDeviceWasDisconnectedNotification description]]);
if ([QTCaptureSessionErrorKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureSessionErrorKey forKey:@"QTCaptureSessionErrorKey"]; else NSLog([@"Can't initialize QTCaptureSessionErrorKey with object " stringByAppendingString:[QTCaptureSessionErrorKey description]]);
if ([QTCaptureSessionRuntimeErrorNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureSessionRuntimeErrorNotification forKey:@"QTCaptureSessionRuntimeErrorNotification"]; else NSLog([@"Can't initialize QTCaptureSessionRuntimeErrorNotification with object " stringByAppendingString:[QTCaptureSessionRuntimeErrorNotification description]]);
if ([QTDataReferenceTypeFile isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeFile forKey:@"QTDataReferenceTypeFile"]; else NSLog([@"Can't initialize QTDataReferenceTypeFile with object " stringByAppendingString:[QTDataReferenceTypeFile description]]);
if ([QTDataReferenceTypeHandle isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeHandle forKey:@"QTDataReferenceTypeHandle"]; else NSLog([@"Can't initialize QTDataReferenceTypeHandle with object " stringByAppendingString:[QTDataReferenceTypeHandle description]]);
if ([QTDataReferenceTypePointer isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypePointer forKey:@"QTDataReferenceTypePointer"]; else NSLog([@"Can't initialize QTDataReferenceTypePointer with object " stringByAppendingString:[QTDataReferenceTypePointer description]]);
if ([QTDataReferenceTypeResource isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeResource forKey:@"QTDataReferenceTypeResource"]; else NSLog([@"Can't initialize QTDataReferenceTypeResource with object " stringByAppendingString:[QTDataReferenceTypeResource description]]);
if ([QTDataReferenceTypeURL isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeURL forKey:@"QTDataReferenceTypeURL"]; else NSLog([@"Can't initialize QTDataReferenceTypeURL with object " stringByAppendingString:[QTDataReferenceTypeURL description]]);
if ([QTErrorCaptureInputKey isKindOfClass:[NSString class]]) [d setObject:QTErrorCaptureInputKey forKey:@"QTErrorCaptureInputKey"]; else NSLog([@"Can't initialize QTErrorCaptureInputKey with object " stringByAppendingString:[QTErrorCaptureInputKey description]]);
if ([QTErrorCaptureOutputKey isKindOfClass:[NSString class]]) [d setObject:QTErrorCaptureOutputKey forKey:@"QTErrorCaptureOutputKey"]; else NSLog([@"Can't initialize QTErrorCaptureOutputKey with object " stringByAppendingString:[QTErrorCaptureOutputKey description]]);
if ([QTErrorDeviceKey isKindOfClass:[NSString class]]) [d setObject:QTErrorDeviceKey forKey:@"QTErrorDeviceKey"]; else NSLog([@"Can't initialize QTErrorDeviceKey with object " stringByAppendingString:[QTErrorDeviceKey description]]);
if ([QTErrorExcludingDeviceKey isKindOfClass:[NSString class]]) [d setObject:QTErrorExcludingDeviceKey forKey:@"QTErrorExcludingDeviceKey"]; else NSLog([@"Can't initialize QTErrorExcludingDeviceKey with object " stringByAppendingString:[QTErrorExcludingDeviceKey description]]);
if ([QTErrorRecordingSuccesfullyFinishedKey isKindOfClass:[NSString class]]) [d setObject:QTErrorRecordingSuccesfullyFinishedKey forKey:@"QTErrorRecordingSuccesfullyFinishedKey"]; else NSLog([@"Can't initialize QTErrorRecordingSuccesfullyFinishedKey with object " stringByAppendingString:[QTErrorRecordingSuccesfullyFinishedKey description]]);
if ([QTFormatDescriptionAudioChannelLayoutAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionAudioChannelLayoutAttribute forKey:@"QTFormatDescriptionAudioChannelLayoutAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionAudioChannelLayoutAttribute with object " stringByAppendingString:[QTFormatDescriptionAudioChannelLayoutAttribute description]]);
if ([QTFormatDescriptionAudioMagicCookieAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionAudioMagicCookieAttribute forKey:@"QTFormatDescriptionAudioMagicCookieAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionAudioMagicCookieAttribute with object " stringByAppendingString:[QTFormatDescriptionAudioMagicCookieAttribute description]]);
if ([QTFormatDescriptionAudioStreamBasicDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionAudioStreamBasicDescriptionAttribute forKey:@"QTFormatDescriptionAudioStreamBasicDescriptionAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionAudioStreamBasicDescriptionAttribute with object " stringByAppendingString:[QTFormatDescriptionAudioStreamBasicDescriptionAttribute description]]);
if ([QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute forKey:@"QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute with object " stringByAppendingString:[QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute description]]);
if ([QTFormatDescriptionVideoEncodedPixelsSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionVideoEncodedPixelsSizeAttribute forKey:@"QTFormatDescriptionVideoEncodedPixelsSizeAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionVideoEncodedPixelsSizeAttribute with object " stringByAppendingString:[QTFormatDescriptionVideoEncodedPixelsSizeAttribute description]]);
if ([QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute forKey:@"QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute with object " stringByAppendingString:[QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute description]]);
if ([QTKitErrorDomain isKindOfClass:[NSString class]]) [d setObject:QTKitErrorDomain forKey:@"QTKitErrorDomain"]; else NSLog([@"Can't initialize QTKitErrorDomain with object " stringByAppendingString:[QTKitErrorDomain description]]);
if ([QTMediaCharacteristicAudio isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicAudio forKey:@"QTMediaCharacteristicAudio"]; else NSLog([@"Can't initialize QTMediaCharacteristicAudio with object " stringByAppendingString:[QTMediaCharacteristicAudio description]]);
if ([QTMediaCharacteristicCanSendVideo isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicCanSendVideo forKey:@"QTMediaCharacteristicCanSendVideo"]; else NSLog([@"Can't initialize QTMediaCharacteristicCanSendVideo with object " stringByAppendingString:[QTMediaCharacteristicCanSendVideo description]]);
if ([QTMediaCharacteristicCanStep isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicCanStep forKey:@"QTMediaCharacteristicCanStep"]; else NSLog([@"Can't initialize QTMediaCharacteristicCanStep with object " stringByAppendingString:[QTMediaCharacteristicCanStep description]]);
if ([QTMediaCharacteristicHasNoDuration isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicHasNoDuration forKey:@"QTMediaCharacteristicHasNoDuration"]; else NSLog([@"Can't initialize QTMediaCharacteristicHasNoDuration with object " stringByAppendingString:[QTMediaCharacteristicHasNoDuration description]]);
if ([QTMediaCharacteristicHasSkinData isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicHasSkinData forKey:@"QTMediaCharacteristicHasSkinData"]; else NSLog([@"Can't initialize QTMediaCharacteristicHasSkinData with object " stringByAppendingString:[QTMediaCharacteristicHasSkinData description]]);
if ([QTMediaCharacteristicHasVideoFrameRate isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicHasVideoFrameRate forKey:@"QTMediaCharacteristicHasVideoFrameRate"]; else NSLog([@"Can't initialize QTMediaCharacteristicHasVideoFrameRate with object " stringByAppendingString:[QTMediaCharacteristicHasVideoFrameRate description]]);
if ([QTMediaCharacteristicNonLinear isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicNonLinear forKey:@"QTMediaCharacteristicNonLinear"]; else NSLog([@"Can't initialize QTMediaCharacteristicNonLinear with object " stringByAppendingString:[QTMediaCharacteristicNonLinear description]]);
if ([QTMediaCharacteristicProvidesActions isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicProvidesActions forKey:@"QTMediaCharacteristicProvidesActions"]; else NSLog([@"Can't initialize QTMediaCharacteristicProvidesActions with object " stringByAppendingString:[QTMediaCharacteristicProvidesActions description]]);
if ([QTMediaCharacteristicProvidesKeyFocus isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicProvidesKeyFocus forKey:@"QTMediaCharacteristicProvidesKeyFocus"]; else NSLog([@"Can't initialize QTMediaCharacteristicProvidesKeyFocus with object " stringByAppendingString:[QTMediaCharacteristicProvidesKeyFocus description]]);
if ([QTMediaCharacteristicVisual isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicVisual forKey:@"QTMediaCharacteristicVisual"]; else NSLog([@"Can't initialize QTMediaCharacteristicVisual with object " stringByAppendingString:[QTMediaCharacteristicVisual description]]);
if ([QTMediaCreationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaCreationTimeAttribute forKey:@"QTMediaCreationTimeAttribute"]; else NSLog([@"Can't initialize QTMediaCreationTimeAttribute with object " stringByAppendingString:[QTMediaCreationTimeAttribute description]]);
if ([QTMediaDurationAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaDurationAttribute forKey:@"QTMediaDurationAttribute"]; else NSLog([@"Can't initialize QTMediaDurationAttribute with object " stringByAppendingString:[QTMediaDurationAttribute description]]);
if ([QTMediaModificationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaModificationTimeAttribute forKey:@"QTMediaModificationTimeAttribute"]; else NSLog([@"Can't initialize QTMediaModificationTimeAttribute with object " stringByAppendingString:[QTMediaModificationTimeAttribute description]]);
if ([QTMediaQualityAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaQualityAttribute forKey:@"QTMediaQualityAttribute"]; else NSLog([@"Can't initialize QTMediaQualityAttribute with object " stringByAppendingString:[QTMediaQualityAttribute description]]);
if ([QTMediaSampleCountAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaSampleCountAttribute forKey:@"QTMediaSampleCountAttribute"]; else NSLog([@"Can't initialize QTMediaSampleCountAttribute with object " stringByAppendingString:[QTMediaSampleCountAttribute description]]);
if ([QTMediaTimeScaleAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaTimeScaleAttribute forKey:@"QTMediaTimeScaleAttribute"]; else NSLog([@"Can't initialize QTMediaTimeScaleAttribute with object " stringByAppendingString:[QTMediaTimeScaleAttribute description]]);
if ([QTMediaType3D isKindOfClass:[NSString class]]) [d setObject:QTMediaType3D forKey:@"QTMediaType3D"]; else NSLog([@"Can't initialize QTMediaType3D with object " stringByAppendingString:[QTMediaType3D description]]);
if ([QTMediaTypeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeAttribute forKey:@"QTMediaTypeAttribute"]; else NSLog([@"Can't initialize QTMediaTypeAttribute with object " stringByAppendingString:[QTMediaTypeAttribute description]]);
if ([QTMediaTypeBase isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeBase forKey:@"QTMediaTypeBase"]; else NSLog([@"Can't initialize QTMediaTypeBase with object " stringByAppendingString:[QTMediaTypeBase description]]);
if ([QTMediaTypeFlash isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeFlash forKey:@"QTMediaTypeFlash"]; else NSLog([@"Can't initialize QTMediaTypeFlash with object " stringByAppendingString:[QTMediaTypeFlash description]]);
if ([QTMediaTypeHint isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeHint forKey:@"QTMediaTypeHint"]; else NSLog([@"Can't initialize QTMediaTypeHint with object " stringByAppendingString:[QTMediaTypeHint description]]);
if ([QTMediaTypeMPEG isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMPEG forKey:@"QTMediaTypeMPEG"]; else NSLog([@"Can't initialize QTMediaTypeMPEG with object " stringByAppendingString:[QTMediaTypeMPEG description]]);
if ([QTMediaTypeMovie isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMovie forKey:@"QTMediaTypeMovie"]; else NSLog([@"Can't initialize QTMediaTypeMovie with object " stringByAppendingString:[QTMediaTypeMovie description]]);
if ([QTMediaTypeMusic isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMusic forKey:@"QTMediaTypeMusic"]; else NSLog([@"Can't initialize QTMediaTypeMusic with object " stringByAppendingString:[QTMediaTypeMusic description]]);
if ([QTMediaTypeMuxed isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMuxed forKey:@"QTMediaTypeMuxed"]; else NSLog([@"Can't initialize QTMediaTypeMuxed with object " stringByAppendingString:[QTMediaTypeMuxed description]]);
if ([QTMediaTypeQTVR isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeQTVR forKey:@"QTMediaTypeQTVR"]; else NSLog([@"Can't initialize QTMediaTypeQTVR with object " stringByAppendingString:[QTMediaTypeQTVR description]]);
if ([QTMediaTypeQuartzComposer isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeQuartzComposer forKey:@"QTMediaTypeQuartzComposer"]; else NSLog([@"Can't initialize QTMediaTypeQuartzComposer with object " stringByAppendingString:[QTMediaTypeQuartzComposer description]]);
if ([QTMediaTypeSkin isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeSkin forKey:@"QTMediaTypeSkin"]; else NSLog([@"Can't initialize QTMediaTypeSkin with object " stringByAppendingString:[QTMediaTypeSkin description]]);
if ([QTMediaTypeSound isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeSound forKey:@"QTMediaTypeSound"]; else NSLog([@"Can't initialize QTMediaTypeSound with object " stringByAppendingString:[QTMediaTypeSound description]]);
if ([QTMediaTypeSprite isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeSprite forKey:@"QTMediaTypeSprite"]; else NSLog([@"Can't initialize QTMediaTypeSprite with object " stringByAppendingString:[QTMediaTypeSprite description]]);
if ([QTMediaTypeStream isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeStream forKey:@"QTMediaTypeStream"]; else NSLog([@"Can't initialize QTMediaTypeStream with object " stringByAppendingString:[QTMediaTypeStream description]]);
if ([QTMediaTypeText isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeText forKey:@"QTMediaTypeText"]; else NSLog([@"Can't initialize QTMediaTypeText with object " stringByAppendingString:[QTMediaTypeText description]]);
if ([QTMediaTypeTimeCode isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeTimeCode forKey:@"QTMediaTypeTimeCode"]; else NSLog([@"Can't initialize QTMediaTypeTimeCode with object " stringByAppendingString:[QTMediaTypeTimeCode description]]);
if ([QTMediaTypeTween isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeTween forKey:@"QTMediaTypeTween"]; else NSLog([@"Can't initialize QTMediaTypeTween with object " stringByAppendingString:[QTMediaTypeTween description]]);
if ([QTMediaTypeVideo isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeVideo forKey:@"QTMediaTypeVideo"]; else NSLog([@"Can't initialize QTMediaTypeVideo with object " stringByAppendingString:[QTMediaTypeVideo description]]);
if ([QTMovieApertureModeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeAttribute forKey:@"QTMovieApertureModeAttribute"]; else NSLog([@"Can't initialize QTMovieApertureModeAttribute with object " stringByAppendingString:[QTMovieApertureModeAttribute description]]);
if ([QTMovieApertureModeClassic isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeClassic forKey:@"QTMovieApertureModeClassic"]; else NSLog([@"Can't initialize QTMovieApertureModeClassic with object " stringByAppendingString:[QTMovieApertureModeClassic description]]);
if ([QTMovieApertureModeClean isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeClean forKey:@"QTMovieApertureModeClean"]; else NSLog([@"Can't initialize QTMovieApertureModeClean with object " stringByAppendingString:[QTMovieApertureModeClean description]]);
if ([QTMovieApertureModeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeDidChangeNotification forKey:@"QTMovieApertureModeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieApertureModeDidChangeNotification with object " stringByAppendingString:[QTMovieApertureModeDidChangeNotification description]]);
if ([QTMovieApertureModeEncodedPixels isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeEncodedPixels forKey:@"QTMovieApertureModeEncodedPixels"]; else NSLog([@"Can't initialize QTMovieApertureModeEncodedPixels with object " stringByAppendingString:[QTMovieApertureModeEncodedPixels description]]);
if ([QTMovieApertureModeProduction isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeProduction forKey:@"QTMovieApertureModeProduction"]; else NSLog([@"Can't initialize QTMovieApertureModeProduction with object " stringByAppendingString:[QTMovieApertureModeProduction description]]);
if ([QTMovieAskUnresolvedDataRefsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieAskUnresolvedDataRefsAttribute forKey:@"QTMovieAskUnresolvedDataRefsAttribute"]; else NSLog([@"Can't initialize QTMovieAskUnresolvedDataRefsAttribute with object " stringByAppendingString:[QTMovieAskUnresolvedDataRefsAttribute description]]);
if ([QTMovieAutoAlternatesAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieAutoAlternatesAttribute forKey:@"QTMovieAutoAlternatesAttribute"]; else NSLog([@"Can't initialize QTMovieAutoAlternatesAttribute with object " stringByAppendingString:[QTMovieAutoAlternatesAttribute description]]);
if ([QTMovieChapterDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterDidChangeNotification forKey:@"QTMovieChapterDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieChapterDidChangeNotification with object " stringByAppendingString:[QTMovieChapterDidChangeNotification description]]);
if ([QTMovieChapterListDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterListDidChangeNotification forKey:@"QTMovieChapterListDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieChapterListDidChangeNotification with object " stringByAppendingString:[QTMovieChapterListDidChangeNotification description]]);
if ([QTMovieChapterName isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterName forKey:@"QTMovieChapterName"]; else NSLog([@"Can't initialize QTMovieChapterName with object " stringByAppendingString:[QTMovieChapterName description]]);
if ([QTMovieChapterStartTime isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterStartTime forKey:@"QTMovieChapterStartTime"]; else NSLog([@"Can't initialize QTMovieChapterStartTime with object " stringByAppendingString:[QTMovieChapterStartTime description]]);
if ([QTMovieChapterTargetTrackAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterTargetTrackAttribute forKey:@"QTMovieChapterTargetTrackAttribute"]; else NSLog([@"Can't initialize QTMovieChapterTargetTrackAttribute with object " stringByAppendingString:[QTMovieChapterTargetTrackAttribute description]]);
if ([QTMovieCloseWindowRequestNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieCloseWindowRequestNotification forKey:@"QTMovieCloseWindowRequestNotification"]; else NSLog([@"Can't initialize QTMovieCloseWindowRequestNotification with object " stringByAppendingString:[QTMovieCloseWindowRequestNotification description]]);
if ([QTMovieCopyrightAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCopyrightAttribute forKey:@"QTMovieCopyrightAttribute"]; else NSLog([@"Can't initialize QTMovieCopyrightAttribute with object " stringByAppendingString:[QTMovieCopyrightAttribute description]]);
if ([QTMovieCreationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCreationTimeAttribute forKey:@"QTMovieCreationTimeAttribute"]; else NSLog([@"Can't initialize QTMovieCreationTimeAttribute with object " stringByAppendingString:[QTMovieCreationTimeAttribute description]]);
if ([QTMovieCurrentSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCurrentSizeAttribute forKey:@"QTMovieCurrentSizeAttribute"]; else NSLog([@"Can't initialize QTMovieCurrentSizeAttribute with object " stringByAppendingString:[QTMovieCurrentSizeAttribute description]]);
if ([QTMovieCurrentTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCurrentTimeAttribute forKey:@"QTMovieCurrentTimeAttribute"]; else NSLog([@"Can't initialize QTMovieCurrentTimeAttribute with object " stringByAppendingString:[QTMovieCurrentTimeAttribute description]]);
if ([QTMovieDataAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDataAttribute forKey:@"QTMovieDataAttribute"]; else NSLog([@"Can't initialize QTMovieDataAttribute with object " stringByAppendingString:[QTMovieDataAttribute description]]);
if ([QTMovieDataReferenceAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDataReferenceAttribute forKey:@"QTMovieDataReferenceAttribute"]; else NSLog([@"Can't initialize QTMovieDataReferenceAttribute with object " stringByAppendingString:[QTMovieDataReferenceAttribute description]]);
if ([QTMovieDataSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDataSizeAttribute forKey:@"QTMovieDataSizeAttribute"]; else NSLog([@"Can't initialize QTMovieDataSizeAttribute with object " stringByAppendingString:[QTMovieDataSizeAttribute description]]);
if ([QTMovieDelegateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDelegateAttribute forKey:@"QTMovieDelegateAttribute"]; else NSLog([@"Can't initialize QTMovieDelegateAttribute with object " stringByAppendingString:[QTMovieDelegateAttribute description]]);
if ([QTMovieDidEndNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieDidEndNotification forKey:@"QTMovieDidEndNotification"]; else NSLog([@"Can't initialize QTMovieDidEndNotification with object " stringByAppendingString:[QTMovieDidEndNotification description]]);
if ([QTMovieDisplayNameAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDisplayNameAttribute forKey:@"QTMovieDisplayNameAttribute"]; else NSLog([@"Can't initialize QTMovieDisplayNameAttribute with object " stringByAppendingString:[QTMovieDisplayNameAttribute description]]);
if ([QTMovieDontInteractWithUserAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDontInteractWithUserAttribute forKey:@"QTMovieDontInteractWithUserAttribute"]; else NSLog([@"Can't initialize QTMovieDontInteractWithUserAttribute with object " stringByAppendingString:[QTMovieDontInteractWithUserAttribute description]]);
if ([QTMovieDurationAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDurationAttribute forKey:@"QTMovieDurationAttribute"]; else NSLog([@"Can't initialize QTMovieDurationAttribute with object " stringByAppendingString:[QTMovieDurationAttribute description]]);
if ([QTMovieEditabilityDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieEditabilityDidChangeNotification forKey:@"QTMovieEditabilityDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieEditabilityDidChangeNotification with object " stringByAppendingString:[QTMovieEditabilityDidChangeNotification description]]);
if ([QTMovieEditableAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieEditableAttribute forKey:@"QTMovieEditableAttribute"]; else NSLog([@"Can't initialize QTMovieEditableAttribute with object " stringByAppendingString:[QTMovieEditableAttribute description]]);
if ([QTMovieEditedNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieEditedNotification forKey:@"QTMovieEditedNotification"]; else NSLog([@"Can't initialize QTMovieEditedNotification with object " stringByAppendingString:[QTMovieEditedNotification description]]);
if ([QTMovieEnterFullScreenRequestNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieEnterFullScreenRequestNotification forKey:@"QTMovieEnterFullScreenRequestNotification"]; else NSLog([@"Can't initialize QTMovieEnterFullScreenRequestNotification with object " stringByAppendingString:[QTMovieEnterFullScreenRequestNotification description]]);
if ([QTMovieExitFullScreenRequestNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieExitFullScreenRequestNotification forKey:@"QTMovieExitFullScreenRequestNotification"]; else NSLog([@"Can't initialize QTMovieExitFullScreenRequestNotification with object " stringByAppendingString:[QTMovieExitFullScreenRequestNotification description]]);
if ([QTMovieExport isKindOfClass:[NSString class]]) [d setObject:QTMovieExport forKey:@"QTMovieExport"]; else NSLog([@"Can't initialize QTMovieExport with object " stringByAppendingString:[QTMovieExport description]]);
if ([QTMovieExportManufacturer isKindOfClass:[NSString class]]) [d setObject:QTMovieExportManufacturer forKey:@"QTMovieExportManufacturer"]; else NSLog([@"Can't initialize QTMovieExportManufacturer with object " stringByAppendingString:[QTMovieExportManufacturer description]]);
if ([QTMovieExportSettings isKindOfClass:[NSString class]]) [d setObject:QTMovieExportSettings forKey:@"QTMovieExportSettings"]; else NSLog([@"Can't initialize QTMovieExportSettings with object " stringByAppendingString:[QTMovieExportSettings description]]);
if ([QTMovieExportType isKindOfClass:[NSString class]]) [d setObject:QTMovieExportType forKey:@"QTMovieExportType"]; else NSLog([@"Can't initialize QTMovieExportType with object " stringByAppendingString:[QTMovieExportType description]]);
if ([QTMovieFileNameAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieFileNameAttribute forKey:@"QTMovieFileNameAttribute"]; else NSLog([@"Can't initialize QTMovieFileNameAttribute with object " stringByAppendingString:[QTMovieFileNameAttribute description]]);
if ([QTMovieFileOffsetAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieFileOffsetAttribute forKey:@"QTMovieFileOffsetAttribute"]; else NSLog([@"Can't initialize QTMovieFileOffsetAttribute with object " stringByAppendingString:[QTMovieFileOffsetAttribute description]]);
if ([QTMovieFlatten isKindOfClass:[NSString class]]) [d setObject:QTMovieFlatten forKey:@"QTMovieFlatten"]; else NSLog([@"Can't initialize QTMovieFlatten with object " stringByAppendingString:[QTMovieFlatten description]]);
if ([QTMovieFrameImageDeinterlaceFields isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageDeinterlaceFields forKey:@"QTMovieFrameImageDeinterlaceFields"]; else NSLog([@"Can't initialize QTMovieFrameImageDeinterlaceFields with object " stringByAppendingString:[QTMovieFrameImageDeinterlaceFields description]]);
if ([QTMovieFrameImageHighQuality isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageHighQuality forKey:@"QTMovieFrameImageHighQuality"]; else NSLog([@"Can't initialize QTMovieFrameImageHighQuality with object " stringByAppendingString:[QTMovieFrameImageHighQuality description]]);
if ([QTMovieFrameImageOpenGLContext isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageOpenGLContext forKey:@"QTMovieFrameImageOpenGLContext"]; else NSLog([@"Can't initialize QTMovieFrameImageOpenGLContext with object " stringByAppendingString:[QTMovieFrameImageOpenGLContext description]]);
if ([QTMovieFrameImagePixelFormat isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImagePixelFormat forKey:@"QTMovieFrameImagePixelFormat"]; else NSLog([@"Can't initialize QTMovieFrameImagePixelFormat with object " stringByAppendingString:[QTMovieFrameImagePixelFormat description]]);
if ([QTMovieFrameImageRepresentationsType isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageRepresentationsType forKey:@"QTMovieFrameImageRepresentationsType"]; else NSLog([@"Can't initialize QTMovieFrameImageRepresentationsType with object " stringByAppendingString:[QTMovieFrameImageRepresentationsType description]]);
if ([QTMovieFrameImageSingleField isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageSingleField forKey:@"QTMovieFrameImageSingleField"]; else NSLog([@"Can't initialize QTMovieFrameImageSingleField with object " stringByAppendingString:[QTMovieFrameImageSingleField description]]);
if ([QTMovieFrameImageSize isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageSize forKey:@"QTMovieFrameImageSize"]; else NSLog([@"Can't initialize QTMovieFrameImageSize with object " stringByAppendingString:[QTMovieFrameImageSize description]]);
if ([QTMovieFrameImageType isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageType forKey:@"QTMovieFrameImageType"]; else NSLog([@"Can't initialize QTMovieFrameImageType with object " stringByAppendingString:[QTMovieFrameImageType description]]);
if ([QTMovieFrameImageTypeCGImageRef isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCGImageRef forKey:@"QTMovieFrameImageTypeCGImageRef"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCGImageRef with object " stringByAppendingString:[QTMovieFrameImageTypeCGImageRef description]]);
if ([QTMovieFrameImageTypeCIImage isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCIImage forKey:@"QTMovieFrameImageTypeCIImage"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCIImage with object " stringByAppendingString:[QTMovieFrameImageTypeCIImage description]]);
if ([QTMovieFrameImageTypeCVOpenGLTextureRef isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCVOpenGLTextureRef forKey:@"QTMovieFrameImageTypeCVOpenGLTextureRef"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCVOpenGLTextureRef with object " stringByAppendingString:[QTMovieFrameImageTypeCVOpenGLTextureRef description]]);
if ([QTMovieFrameImageTypeCVPixelBufferRef isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCVPixelBufferRef forKey:@"QTMovieFrameImageTypeCVPixelBufferRef"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCVPixelBufferRef with object " stringByAppendingString:[QTMovieFrameImageTypeCVPixelBufferRef description]]);
if ([QTMovieFrameImageTypeNSImage isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeNSImage forKey:@"QTMovieFrameImageTypeNSImage"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeNSImage with object " stringByAppendingString:[QTMovieFrameImageTypeNSImage description]]);
if ([QTMovieHasApertureModeDimensionsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasApertureModeDimensionsAttribute forKey:@"QTMovieHasApertureModeDimensionsAttribute"]; else NSLog([@"Can't initialize QTMovieHasApertureModeDimensionsAttribute with object " stringByAppendingString:[QTMovieHasApertureModeDimensionsAttribute description]]);
if ([QTMovieHasAudioAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasAudioAttribute forKey:@"QTMovieHasAudioAttribute"]; else NSLog([@"Can't initialize QTMovieHasAudioAttribute with object " stringByAppendingString:[QTMovieHasAudioAttribute description]]);
if ([QTMovieHasDurationAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasDurationAttribute forKey:@"QTMovieHasDurationAttribute"]; else NSLog([@"Can't initialize QTMovieHasDurationAttribute with object " stringByAppendingString:[QTMovieHasDurationAttribute description]]);
if ([QTMovieHasVideoAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasVideoAttribute forKey:@"QTMovieHasVideoAttribute"]; else NSLog([@"Can't initialize QTMovieHasVideoAttribute with object " stringByAppendingString:[QTMovieHasVideoAttribute description]]);
if ([QTMovieIsActiveAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsActiveAttribute forKey:@"QTMovieIsActiveAttribute"]; else NSLog([@"Can't initialize QTMovieIsActiveAttribute with object " stringByAppendingString:[QTMovieIsActiveAttribute description]]);
if ([QTMovieIsInteractiveAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsInteractiveAttribute forKey:@"QTMovieIsInteractiveAttribute"]; else NSLog([@"Can't initialize QTMovieIsInteractiveAttribute with object " stringByAppendingString:[QTMovieIsInteractiveAttribute description]]);
if ([QTMovieIsLinearAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsLinearAttribute forKey:@"QTMovieIsLinearAttribute"]; else NSLog([@"Can't initialize QTMovieIsLinearAttribute with object " stringByAppendingString:[QTMovieIsLinearAttribute description]]);
if ([QTMovieIsSteppableAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsSteppableAttribute forKey:@"QTMovieIsSteppableAttribute"]; else NSLog([@"Can't initialize QTMovieIsSteppableAttribute with object " stringByAppendingString:[QTMovieIsSteppableAttribute description]]);
if ([QTMovieLoadStateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieLoadStateAttribute forKey:@"QTMovieLoadStateAttribute"]; else NSLog([@"Can't initialize QTMovieLoadStateAttribute with object " stringByAppendingString:[QTMovieLoadStateAttribute description]]);
if ([QTMovieLoadStateDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieLoadStateDidChangeNotification forKey:@"QTMovieLoadStateDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieLoadStateDidChangeNotification with object " stringByAppendingString:[QTMovieLoadStateDidChangeNotification description]]);
if ([QTMovieLoopModeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieLoopModeDidChangeNotification forKey:@"QTMovieLoopModeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieLoopModeDidChangeNotification with object " stringByAppendingString:[QTMovieLoopModeDidChangeNotification description]]);
if ([QTMovieLoopsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieLoopsAttribute forKey:@"QTMovieLoopsAttribute"]; else NSLog([@"Can't initialize QTMovieLoopsAttribute with object " stringByAppendingString:[QTMovieLoopsAttribute description]]);
if ([QTMovieLoopsBackAndForthAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieLoopsBackAndForthAttribute forKey:@"QTMovieLoopsBackAndForthAttribute"]; else NSLog([@"Can't initialize QTMovieLoopsBackAndForthAttribute with object " stringByAppendingString:[QTMovieLoopsBackAndForthAttribute description]]);
if ([QTMovieMessageNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieMessageNotificationParameter forKey:@"QTMovieMessageNotificationParameter"]; else NSLog([@"Can't initialize QTMovieMessageNotificationParameter with object " stringByAppendingString:[QTMovieMessageNotificationParameter description]]);
if ([QTMovieMessageStringPostedNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieMessageStringPostedNotification forKey:@"QTMovieMessageStringPostedNotification"]; else NSLog([@"Can't initialize QTMovieMessageStringPostedNotification with object " stringByAppendingString:[QTMovieMessageStringPostedNotification description]]);
if ([QTMovieModificationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieModificationTimeAttribute forKey:@"QTMovieModificationTimeAttribute"]; else NSLog([@"Can't initialize QTMovieModificationTimeAttribute with object " stringByAppendingString:[QTMovieModificationTimeAttribute description]]);
if ([QTMovieMutedAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieMutedAttribute forKey:@"QTMovieMutedAttribute"]; else NSLog([@"Can't initialize QTMovieMutedAttribute with object " stringByAppendingString:[QTMovieMutedAttribute description]]);
if ([QTMovieNaturalSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieNaturalSizeAttribute forKey:@"QTMovieNaturalSizeAttribute"]; else NSLog([@"Can't initialize QTMovieNaturalSizeAttribute with object " stringByAppendingString:[QTMovieNaturalSizeAttribute description]]);
if ([QTMovieOpenAsyncOKAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieOpenAsyncOKAttribute forKey:@"QTMovieOpenAsyncOKAttribute"]; else NSLog([@"Can't initialize QTMovieOpenAsyncOKAttribute with object " stringByAppendingString:[QTMovieOpenAsyncOKAttribute description]]);
if ([QTMoviePasteboardAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePasteboardAttribute forKey:@"QTMoviePasteboardAttribute"]; else NSLog([@"Can't initialize QTMoviePasteboardAttribute with object " stringByAppendingString:[QTMoviePasteboardAttribute description]]);
if ([QTMoviePasteboardType isKindOfClass:[NSString class]]) [d setObject:QTMoviePasteboardType forKey:@"QTMoviePasteboardType"]; else NSLog([@"Can't initialize QTMoviePasteboardType with object " stringByAppendingString:[QTMoviePasteboardType description]]);
if ([QTMoviePlaysAllFramesAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePlaysAllFramesAttribute forKey:@"QTMoviePlaysAllFramesAttribute"]; else NSLog([@"Can't initialize QTMoviePlaysAllFramesAttribute with object " stringByAppendingString:[QTMoviePlaysAllFramesAttribute description]]);
if ([QTMoviePlaysSelectionOnlyAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePlaysSelectionOnlyAttribute forKey:@"QTMoviePlaysSelectionOnlyAttribute"]; else NSLog([@"Can't initialize QTMoviePlaysSelectionOnlyAttribute with object " stringByAppendingString:[QTMoviePlaysSelectionOnlyAttribute description]]);
if ([QTMoviePosterTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePosterTimeAttribute forKey:@"QTMoviePosterTimeAttribute"]; else NSLog([@"Can't initialize QTMoviePosterTimeAttribute with object " stringByAppendingString:[QTMoviePosterTimeAttribute description]]);
if ([QTMoviePreferredMutedAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreferredMutedAttribute forKey:@"QTMoviePreferredMutedAttribute"]; else NSLog([@"Can't initialize QTMoviePreferredMutedAttribute with object " stringByAppendingString:[QTMoviePreferredMutedAttribute description]]);
if ([QTMoviePreferredRateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreferredRateAttribute forKey:@"QTMoviePreferredRateAttribute"]; else NSLog([@"Can't initialize QTMoviePreferredRateAttribute with object " stringByAppendingString:[QTMoviePreferredRateAttribute description]]);
if ([QTMoviePreferredVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreferredVolumeAttribute forKey:@"QTMoviePreferredVolumeAttribute"]; else NSLog([@"Can't initialize QTMoviePreferredVolumeAttribute with object " stringByAppendingString:[QTMoviePreferredVolumeAttribute description]]);
if ([QTMoviePreviewModeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreviewModeAttribute forKey:@"QTMoviePreviewModeAttribute"]; else NSLog([@"Can't initialize QTMoviePreviewModeAttribute with object " stringByAppendingString:[QTMoviePreviewModeAttribute description]]);
if ([QTMoviePreviewRangeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreviewRangeAttribute forKey:@"QTMoviePreviewRangeAttribute"]; else NSLog([@"Can't initialize QTMoviePreviewRangeAttribute with object " stringByAppendingString:[QTMoviePreviewRangeAttribute description]]);
if ([QTMovieRateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieRateAttribute forKey:@"QTMovieRateAttribute"]; else NSLog([@"Can't initialize QTMovieRateAttribute with object " stringByAppendingString:[QTMovieRateAttribute description]]);
if ([QTMovieRateChangesPreservePitchAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieRateChangesPreservePitchAttribute forKey:@"QTMovieRateChangesPreservePitchAttribute"]; else NSLog([@"Can't initialize QTMovieRateChangesPreservePitchAttribute with object " stringByAppendingString:[QTMovieRateChangesPreservePitchAttribute description]]);
if ([QTMovieRateDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieRateDidChangeNotification forKey:@"QTMovieRateDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieRateDidChangeNotification with object " stringByAppendingString:[QTMovieRateDidChangeNotification description]]);
if ([QTMovieRateDidChangeNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieRateDidChangeNotificationParameter forKey:@"QTMovieRateDidChangeNotificationParameter"]; else NSLog([@"Can't initialize QTMovieRateDidChangeNotificationParameter with object " stringByAppendingString:[QTMovieRateDidChangeNotificationParameter description]]);
if ([QTMovieResolveDataRefsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieResolveDataRefsAttribute forKey:@"QTMovieResolveDataRefsAttribute"]; else NSLog([@"Can't initialize QTMovieResolveDataRefsAttribute with object " stringByAppendingString:[QTMovieResolveDataRefsAttribute description]]);
if ([QTMovieSelectionAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieSelectionAttribute forKey:@"QTMovieSelectionAttribute"]; else NSLog([@"Can't initialize QTMovieSelectionAttribute with object " stringByAppendingString:[QTMovieSelectionAttribute description]]);
if ([QTMovieSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieSelectionDidChangeNotification forKey:@"QTMovieSelectionDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieSelectionDidChangeNotification with object " stringByAppendingString:[QTMovieSelectionDidChangeNotification description]]);
if ([QTMovieSizeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieSizeDidChangeNotification forKey:@"QTMovieSizeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieSizeDidChangeNotification with object " stringByAppendingString:[QTMovieSizeDidChangeNotification description]]);
if ([QTMovieStatusCodeNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusCodeNotificationParameter forKey:@"QTMovieStatusCodeNotificationParameter"]; else NSLog([@"Can't initialize QTMovieStatusCodeNotificationParameter with object " stringByAppendingString:[QTMovieStatusCodeNotificationParameter description]]);
if ([QTMovieStatusFlagsNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusFlagsNotificationParameter forKey:@"QTMovieStatusFlagsNotificationParameter"]; else NSLog([@"Can't initialize QTMovieStatusFlagsNotificationParameter with object " stringByAppendingString:[QTMovieStatusFlagsNotificationParameter description]]);
if ([QTMovieStatusStringNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusStringNotificationParameter forKey:@"QTMovieStatusStringNotificationParameter"]; else NSLog([@"Can't initialize QTMovieStatusStringNotificationParameter with object " stringByAppendingString:[QTMovieStatusStringNotificationParameter description]]);
if ([QTMovieStatusStringPostedNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusStringPostedNotification forKey:@"QTMovieStatusStringPostedNotification"]; else NSLog([@"Can't initialize QTMovieStatusStringPostedNotification with object " stringByAppendingString:[QTMovieStatusStringPostedNotification description]]);
if ([QTMovieTargetIDNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieTargetIDNotificationParameter forKey:@"QTMovieTargetIDNotificationParameter"]; else NSLog([@"Can't initialize QTMovieTargetIDNotificationParameter with object " stringByAppendingString:[QTMovieTargetIDNotificationParameter description]]);
if ([QTMovieTargetNameNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieTargetNameNotificationParameter forKey:@"QTMovieTargetNameNotificationParameter"]; else NSLog([@"Can't initialize QTMovieTargetNameNotificationParameter with object " stringByAppendingString:[QTMovieTargetNameNotificationParameter description]]);
if ([QTMovieTimeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieTimeDidChangeNotification forKey:@"QTMovieTimeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieTimeDidChangeNotification with object " stringByAppendingString:[QTMovieTimeDidChangeNotification description]]);
if ([QTMovieTimeScaleAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieTimeScaleAttribute forKey:@"QTMovieTimeScaleAttribute"]; else NSLog([@"Can't initialize QTMovieTimeScaleAttribute with object " stringByAppendingString:[QTMovieTimeScaleAttribute description]]);
if ([QTMovieURLAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieURLAttribute forKey:@"QTMovieURLAttribute"]; else NSLog([@"Can't initialize QTMovieURLAttribute with object " stringByAppendingString:[QTMovieURLAttribute description]]);
if ([QTMovieUneditableException isKindOfClass:[NSString class]]) [d setObject:QTMovieUneditableException forKey:@"QTMovieUneditableException"]; else NSLog([@"Can't initialize QTMovieUneditableException with object " stringByAppendingString:[QTMovieUneditableException description]]);
if ([QTMovieViewControllerVisibleBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewControllerVisibleBinding forKey:@"QTMovieViewControllerVisibleBinding"]; else NSLog([@"Can't initialize QTMovieViewControllerVisibleBinding with object " stringByAppendingString:[QTMovieViewControllerVisibleBinding description]]);
if ([QTMovieViewFillColorBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewFillColorBinding forKey:@"QTMovieViewFillColorBinding"]; else NSLog([@"Can't initialize QTMovieViewFillColorBinding with object " stringByAppendingString:[QTMovieViewFillColorBinding description]]);
if ([QTMovieViewMovieBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewMovieBinding forKey:@"QTMovieViewMovieBinding"]; else NSLog([@"Can't initialize QTMovieViewMovieBinding with object " stringByAppendingString:[QTMovieViewMovieBinding description]]);
if ([QTMovieViewPreservesAspectRatioBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewPreservesAspectRatioBinding forKey:@"QTMovieViewPreservesAspectRatioBinding"]; else NSLog([@"Can't initialize QTMovieViewPreservesAspectRatioBinding with object " stringByAppendingString:[QTMovieViewPreservesAspectRatioBinding description]]);
if ([QTMovieVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieVolumeAttribute forKey:@"QTMovieVolumeAttribute"]; else NSLog([@"Can't initialize QTMovieVolumeAttribute with object " stringByAppendingString:[QTMovieVolumeAttribute description]]);
if ([QTMovieVolumeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieVolumeDidChangeNotification forKey:@"QTMovieVolumeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieVolumeDidChangeNotification with object " stringByAppendingString:[QTMovieVolumeDidChangeNotification description]]);
if ([QTSampleBufferDateRecordedAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferDateRecordedAttribute forKey:@"QTSampleBufferDateRecordedAttribute"]; else NSLog([@"Can't initialize QTSampleBufferDateRecordedAttribute with object " stringByAppendingString:[QTSampleBufferDateRecordedAttribute description]]);
if ([QTSampleBufferExplicitSceneChange isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferExplicitSceneChange forKey:@"QTSampleBufferExplicitSceneChange"]; else NSLog([@"Can't initialize QTSampleBufferExplicitSceneChange with object " stringByAppendingString:[QTSampleBufferExplicitSceneChange description]]);
if ([QTSampleBufferHostTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferHostTimeAttribute forKey:@"QTSampleBufferHostTimeAttribute"]; else NSLog([@"Can't initialize QTSampleBufferHostTimeAttribute with object " stringByAppendingString:[QTSampleBufferHostTimeAttribute description]]);
if ([QTSampleBufferSMPTETimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferSMPTETimeAttribute forKey:@"QTSampleBufferSMPTETimeAttribute"]; else NSLog([@"Can't initialize QTSampleBufferSMPTETimeAttribute with object " stringByAppendingString:[QTSampleBufferSMPTETimeAttribute description]]);
if ([QTSampleBufferSceneChangeTypeAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferSceneChangeTypeAttribute forKey:@"QTSampleBufferSceneChangeTypeAttribute"]; else NSLog([@"Can't initialize QTSampleBufferSceneChangeTypeAttribute with object " stringByAppendingString:[QTSampleBufferSceneChangeTypeAttribute description]]);
if ([QTSampleBufferTimeStampDiscontinuitySceneChange isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferTimeStampDiscontinuitySceneChange forKey:@"QTSampleBufferTimeStampDiscontinuitySceneChange"]; else NSLog([@"Can't initialize QTSampleBufferTimeStampDiscontinuitySceneChange with object " stringByAppendingString:[QTSampleBufferTimeStampDiscontinuitySceneChange description]]);
if ([QTTrackBoundsAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackBoundsAttribute forKey:@"QTTrackBoundsAttribute"]; else NSLog([@"Can't initialize QTTrackBoundsAttribute with object " stringByAppendingString:[QTTrackBoundsAttribute description]]);
if ([QTTrackCreationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackCreationTimeAttribute forKey:@"QTTrackCreationTimeAttribute"]; else NSLog([@"Can't initialize QTTrackCreationTimeAttribute with object " stringByAppendingString:[QTTrackCreationTimeAttribute description]]);
if ([QTTrackDimensionsAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackDimensionsAttribute forKey:@"QTTrackDimensionsAttribute"]; else NSLog([@"Can't initialize QTTrackDimensionsAttribute with object " stringByAppendingString:[QTTrackDimensionsAttribute description]]);
if ([QTTrackDisplayNameAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackDisplayNameAttribute forKey:@"QTTrackDisplayNameAttribute"]; else NSLog([@"Can't initialize QTTrackDisplayNameAttribute with object " stringByAppendingString:[QTTrackDisplayNameAttribute description]]);
if ([QTTrackEnabledAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackEnabledAttribute forKey:@"QTTrackEnabledAttribute"]; else NSLog([@"Can't initialize QTTrackEnabledAttribute with object " stringByAppendingString:[QTTrackEnabledAttribute description]]);
if ([QTTrackFormatSummaryAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackFormatSummaryAttribute forKey:@"QTTrackFormatSummaryAttribute"]; else NSLog([@"Can't initialize QTTrackFormatSummaryAttribute with object " stringByAppendingString:[QTTrackFormatSummaryAttribute description]]);
if ([QTTrackHasApertureModeDimensionsAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackHasApertureModeDimensionsAttribute forKey:@"QTTrackHasApertureModeDimensionsAttribute"]; else NSLog([@"Can't initialize QTTrackHasApertureModeDimensionsAttribute with object " stringByAppendingString:[QTTrackHasApertureModeDimensionsAttribute description]]);
if ([QTTrackIDAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackIDAttribute forKey:@"QTTrackIDAttribute"]; else NSLog([@"Can't initialize QTTrackIDAttribute with object " stringByAppendingString:[QTTrackIDAttribute description]]);
if ([QTTrackIsChapterTrackAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackIsChapterTrackAttribute forKey:@"QTTrackIsChapterTrackAttribute"]; else NSLog([@"Can't initialize QTTrackIsChapterTrackAttribute with object " stringByAppendingString:[QTTrackIsChapterTrackAttribute description]]);
if ([QTTrackLayerAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackLayerAttribute forKey:@"QTTrackLayerAttribute"]; else NSLog([@"Can't initialize QTTrackLayerAttribute with object " stringByAppendingString:[QTTrackLayerAttribute description]]);
if ([QTTrackMediaTypeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackMediaTypeAttribute forKey:@"QTTrackMediaTypeAttribute"]; else NSLog([@"Can't initialize QTTrackMediaTypeAttribute with object " stringByAppendingString:[QTTrackMediaTypeAttribute description]]);
if ([QTTrackModificationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackModificationTimeAttribute forKey:@"QTTrackModificationTimeAttribute"]; else NSLog([@"Can't initialize QTTrackModificationTimeAttribute with object " stringByAppendingString:[QTTrackModificationTimeAttribute description]]);
if ([QTTrackRangeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackRangeAttribute forKey:@"QTTrackRangeAttribute"]; else NSLog([@"Can't initialize QTTrackRangeAttribute with object " stringByAppendingString:[QTTrackRangeAttribute description]]);
if ([QTTrackTimeScaleAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackTimeScaleAttribute forKey:@"QTTrackTimeScaleAttribute"]; else NSLog([@"Can't initialize QTTrackTimeScaleAttribute with object " stringByAppendingString:[QTTrackTimeScaleAttribute description]]);
if ([QTTrackUsageInMovieAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackUsageInMovieAttribute forKey:@"QTTrackUsageInMovieAttribute"]; else NSLog([@"Can't initialize QTTrackUsageInMovieAttribute with object " stringByAppendingString:[QTTrackUsageInMovieAttribute description]]);
if ([QTTrackUsageInPosterAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackUsageInPosterAttribute forKey:@"QTTrackUsageInPosterAttribute"]; else NSLog([@"Can't initialize QTTrackUsageInPosterAttribute with object " stringByAppendingString:[QTTrackUsageInPosterAttribute description]]);
if ([QTTrackUsageInPreviewAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackUsageInPreviewAttribute forKey:@"QTTrackUsageInPreviewAttribute"]; else NSLog([@"Can't initialize QTTrackUsageInPreviewAttribute with object " stringByAppendingString:[QTTrackUsageInPreviewAttribute description]]);
if ([QTTrackVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackVolumeAttribute forKey:@"QTTrackVolumeAttribute"]; else NSLog([@"Can't initialize QTTrackVolumeAttribute with object " stringByAppendingString:[QTTrackVolumeAttribute description]]);
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_4] forKey:@"MAC_OS_X_VERSION_10_4"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_5] forKey:@"MAC_OS_X_VERSION_10_5"];
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastestForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastestForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastestReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastestReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsNormalForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsNormalForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsNormalReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsNormalReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsNotPlayingMode] forKey:@"QTCaptureDeviceAVCTransportControlsNotPlayingMode"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsPlayingMode] forKey:@"QTCaptureDeviceAVCTransportControlsPlayingMode"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowestForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowestForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowestReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowestReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsStoppedSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsStoppedSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVeryFastForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVeryFastForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVeryFastReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVeryFastReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVerySlowForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVerySlowForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVerySlowReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVerySlowReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureFileOutputBufferDestinationNewFile] forKey:@"QTCaptureFileOutputBufferDestinationNewFile"];
[d setObject:[Number numberWithDouble:QTCaptureFileOutputBufferDestinationOldFile] forKey:@"QTCaptureFileOutputBufferDestinationOldFile"];
[d setObject:[Number numberWithDouble:QTErrorDeviceAlreadyUsedbyAnotherSession] forKey:@"QTErrorDeviceAlreadyUsedbyAnotherSession"];
[d setObject:[Number numberWithDouble:QTErrorDeviceExcludedByAnotherDevice] forKey:@"QTErrorDeviceExcludedByAnotherDevice"];
[d setObject:[Number numberWithDouble:QTErrorDeviceInUseByAnotherApplication] forKey:@"QTErrorDeviceInUseByAnotherApplication"];
[d setObject:[Number numberWithDouble:QTErrorDeviceNotConnected] forKey:@"QTErrorDeviceNotConnected"];
[d setObject:[Number numberWithDouble:QTErrorDeviceWasDisconnected] forKey:@"QTErrorDeviceWasDisconnected"];
[d setObject:[Number numberWithDouble:QTErrorDiskFull] forKey:@"QTErrorDiskFull"];
[d setObject:[Number numberWithDouble:QTErrorIncompatibleInput] forKey:@"QTErrorIncompatibleInput"];
[d setObject:[Number numberWithDouble:QTErrorIncompatibleOutput] forKey:@"QTErrorIncompatibleOutput"];
[d setObject:[Number numberWithDouble:QTErrorInvalidInputsOrOutputs] forKey:@"QTErrorInvalidInputsOrOutputs"];
[d setObject:[Number numberWithDouble:QTErrorMaximumDurationReached] forKey:@"QTErrorMaximumDurationReached"];
[d setObject:[Number numberWithDouble:QTErrorMaximumFileSizeReached] forKey:@"QTErrorMaximumFileSizeReached"];
[d setObject:[Number numberWithDouble:QTErrorMediaChanged] forKey:@"QTErrorMediaChanged"];
[d setObject:[Number numberWithDouble:QTErrorMediaDiscontinuity] forKey:@"QTErrorMediaDiscontinuity"];
[d setObject:[Number numberWithDouble:QTErrorNoDataCaptured] forKey:@"QTErrorNoDataCaptured"];
[d setObject:[Number numberWithDouble:QTErrorSessionConfigurationChanged] forKey:@"QTErrorSessionConfigurationChanged"];
[d setObject:[Number numberWithDouble:QTErrorUnknown] forKey:@"QTErrorUnknown"];
[d setObject:[Number numberWithDouble:QTIncludeAggressiveTypes] forKey:@"QTIncludeAggressiveTypes"];
[d setObject:[Number numberWithDouble:QTIncludeAllTypes] forKey:@"QTIncludeAllTypes"];
[d setObject:[Number numberWithDouble:QTIncludeCommonTypes] forKey:@"QTIncludeCommonTypes"];
[d setObject:[Number numberWithDouble:QTIncludeDynamicTypes] forKey:@"QTIncludeDynamicTypes"];
[d setObject:[Number numberWithDouble:QTIncludeStillImageTypes] forKey:@"QTIncludeStillImageTypes"];
[d setObject:[Number numberWithDouble:QTIncludeTranslatableTypes] forKey:@"QTIncludeTranslatableTypes"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_7_0] forKey:@"QTKIT_VERSION_7_0"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_7_2] forKey:@"QTKIT_VERSION_7_2"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_MAX_ALLOWED] forKey:@"QTKIT_VERSION_MAX_ALLOWED"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_MIN_REQUIRED] forKey:@"QTKIT_VERSION_MIN_REQUIRED"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateComplete] forKey:@"QTMovieLoadStateComplete"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateError] forKey:@"QTMovieLoadStateError"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateLoaded] forKey:@"QTMovieLoadStateLoaded"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateLoading] forKey:@"QTMovieLoadStateLoading"];
[d setObject:[Number numberWithDouble:QTMovieLoadStatePlayable] forKey:@"QTMovieLoadStatePlayable"];
[d setObject:[Number numberWithDouble:QTMovieLoadStatePlaythroughOK] forKey:@"QTMovieLoadStatePlaythroughOK"];
[d setObject:[Number numberWithDouble:QTMovieOperationBeginPhase] forKey:@"QTMovieOperationBeginPhase"];
[d setObject:[Number numberWithDouble:QTMovieOperationEndPhase] forKey:@"QTMovieOperationEndPhase"];
[d setObject:[Number numberWithDouble:QTMovieOperationUpdatePercentPhase] forKey:@"QTMovieOperationUpdatePercentPhase"];
[d setObject:[Number numberWithDouble:QTSampleBufferAudioBufferListOptionAssure16ByteAlignment] forKey:@"QTSampleBufferAudioBufferListOptionAssure16ByteAlignment"];
[d setObject:[Number numberWithDouble:kQTTimeIsIndefinite] forKey:@"kQTTimeIsIndefinite"];
if ([QTAddImageCodecQuality isKindOfClass:[NSString class]]) [d setObject:QTAddImageCodecQuality forKey:@"QTAddImageCodecQuality"]; else NSLog([@"Can't initialize QTAddImageCodecQuality with object " stringByAppendingString:[QTAddImageCodecQuality description]]);
if ([QTAddImageCodecType isKindOfClass:[NSString class]]) [d setObject:QTAddImageCodecType forKey:@"QTAddImageCodecType"]; else NSLog([@"Can't initialize QTAddImageCodecType with object " stringByAppendingString:[QTAddImageCodecType description]]);
if ([QTCaptureConnectionAttributeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAttributeDidChangeNotification forKey:@"QTCaptureConnectionAttributeDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionAttributeDidChangeNotification with object " stringByAppendingString:[QTCaptureConnectionAttributeDidChangeNotification description]]);
if ([QTCaptureConnectionAttributeWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAttributeWillChangeNotification forKey:@"QTCaptureConnectionAttributeWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionAttributeWillChangeNotification with object " stringByAppendingString:[QTCaptureConnectionAttributeWillChangeNotification description]]);
if ([QTCaptureConnectionAudioAveragePowerLevelsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioAveragePowerLevelsAttribute forKey:@"QTCaptureConnectionAudioAveragePowerLevelsAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioAveragePowerLevelsAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioAveragePowerLevelsAttribute description]]);
if ([QTCaptureConnectionAudioMasterVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioMasterVolumeAttribute forKey:@"QTCaptureConnectionAudioMasterVolumeAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioMasterVolumeAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioMasterVolumeAttribute description]]);
if ([QTCaptureConnectionAudioPeakHoldLevelsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioPeakHoldLevelsAttribute forKey:@"QTCaptureConnectionAudioPeakHoldLevelsAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioPeakHoldLevelsAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioPeakHoldLevelsAttribute description]]);
if ([QTCaptureConnectionAudioVolumesAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionAudioVolumesAttribute forKey:@"QTCaptureConnectionAudioVolumesAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionAudioVolumesAttribute with object " stringByAppendingString:[QTCaptureConnectionAudioVolumesAttribute description]]);
if ([QTCaptureConnectionChangedAttributeKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionChangedAttributeKey forKey:@"QTCaptureConnectionChangedAttributeKey"]; else NSLog([@"Can't initialize QTCaptureConnectionChangedAttributeKey with object " stringByAppendingString:[QTCaptureConnectionChangedAttributeKey description]]);
if ([QTCaptureConnectionEnabledAudioChannelsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionEnabledAudioChannelsAttribute forKey:@"QTCaptureConnectionEnabledAudioChannelsAttribute"]; else NSLog([@"Can't initialize QTCaptureConnectionEnabledAudioChannelsAttribute with object " stringByAppendingString:[QTCaptureConnectionEnabledAudioChannelsAttribute description]]);
if ([QTCaptureConnectionFormatDescriptionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionFormatDescriptionDidChangeNotification forKey:@"QTCaptureConnectionFormatDescriptionDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionFormatDescriptionDidChangeNotification with object " stringByAppendingString:[QTCaptureConnectionFormatDescriptionDidChangeNotification description]]);
if ([QTCaptureConnectionFormatDescriptionWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureConnectionFormatDescriptionWillChangeNotification forKey:@"QTCaptureConnectionFormatDescriptionWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureConnectionFormatDescriptionWillChangeNotification with object " stringByAppendingString:[QTCaptureConnectionFormatDescriptionWillChangeNotification description]]);
if ([QTCaptureDeviceAVCTransportControlsAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAVCTransportControlsAttribute forKey:@"QTCaptureDeviceAVCTransportControlsAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceAVCTransportControlsAttribute with object " stringByAppendingString:[QTCaptureDeviceAVCTransportControlsAttribute description]]);
if ([QTCaptureDeviceAVCTransportControlsPlaybackModeKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAVCTransportControlsPlaybackModeKey forKey:@"QTCaptureDeviceAVCTransportControlsPlaybackModeKey"]; else NSLog([@"Can't initialize QTCaptureDeviceAVCTransportControlsPlaybackModeKey with object " stringByAppendingString:[QTCaptureDeviceAVCTransportControlsPlaybackModeKey description]]);
if ([QTCaptureDeviceAVCTransportControlsSpeedKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAVCTransportControlsSpeedKey forKey:@"QTCaptureDeviceAVCTransportControlsSpeedKey"]; else NSLog([@"Can't initialize QTCaptureDeviceAVCTransportControlsSpeedKey with object " stringByAppendingString:[QTCaptureDeviceAVCTransportControlsSpeedKey description]]);
if ([QTCaptureDeviceAttributeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAttributeDidChangeNotification forKey:@"QTCaptureDeviceAttributeDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceAttributeDidChangeNotification with object " stringByAppendingString:[QTCaptureDeviceAttributeDidChangeNotification description]]);
if ([QTCaptureDeviceAttributeWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAttributeWillChangeNotification forKey:@"QTCaptureDeviceAttributeWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceAttributeWillChangeNotification with object " stringByAppendingString:[QTCaptureDeviceAttributeWillChangeNotification description]]);
if ([QTCaptureDeviceAvailableInputSourcesAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceAvailableInputSourcesAttribute forKey:@"QTCaptureDeviceAvailableInputSourcesAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceAvailableInputSourcesAttribute with object " stringByAppendingString:[QTCaptureDeviceAvailableInputSourcesAttribute description]]);
if ([QTCaptureDeviceChangedAttributeKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceChangedAttributeKey forKey:@"QTCaptureDeviceChangedAttributeKey"]; else NSLog([@"Can't initialize QTCaptureDeviceChangedAttributeKey with object " stringByAppendingString:[QTCaptureDeviceChangedAttributeKey description]]);
if ([QTCaptureDeviceFormatDescriptionsDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceFormatDescriptionsDidChangeNotification forKey:@"QTCaptureDeviceFormatDescriptionsDidChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceFormatDescriptionsDidChangeNotification with object " stringByAppendingString:[QTCaptureDeviceFormatDescriptionsDidChangeNotification description]]);
if ([QTCaptureDeviceFormatDescriptionsWillChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceFormatDescriptionsWillChangeNotification forKey:@"QTCaptureDeviceFormatDescriptionsWillChangeNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceFormatDescriptionsWillChangeNotification with object " stringByAppendingString:[QTCaptureDeviceFormatDescriptionsWillChangeNotification description]]);
if ([QTCaptureDeviceInputSourceIdentifierAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceInputSourceIdentifierAttribute forKey:@"QTCaptureDeviceInputSourceIdentifierAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceInputSourceIdentifierAttribute with object " stringByAppendingString:[QTCaptureDeviceInputSourceIdentifierAttribute description]]);
if ([QTCaptureDeviceInputSourceIdentifierKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceInputSourceIdentifierKey forKey:@"QTCaptureDeviceInputSourceIdentifierKey"]; else NSLog([@"Can't initialize QTCaptureDeviceInputSourceIdentifierKey with object " stringByAppendingString:[QTCaptureDeviceInputSourceIdentifierKey description]]);
if ([QTCaptureDeviceInputSourceLocalizedDisplayNameKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceInputSourceLocalizedDisplayNameKey forKey:@"QTCaptureDeviceInputSourceLocalizedDisplayNameKey"]; else NSLog([@"Can't initialize QTCaptureDeviceInputSourceLocalizedDisplayNameKey with object " stringByAppendingString:[QTCaptureDeviceInputSourceLocalizedDisplayNameKey description]]);
if ([QTCaptureDeviceLinkedDevicesAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceLinkedDevicesAttribute forKey:@"QTCaptureDeviceLinkedDevicesAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceLinkedDevicesAttribute with object " stringByAppendingString:[QTCaptureDeviceLinkedDevicesAttribute description]]);
if ([QTCaptureDeviceSuspendedAttribute isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceSuspendedAttribute forKey:@"QTCaptureDeviceSuspendedAttribute"]; else NSLog([@"Can't initialize QTCaptureDeviceSuspendedAttribute with object " stringByAppendingString:[QTCaptureDeviceSuspendedAttribute description]]);
if ([QTCaptureDeviceWasConnectedNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceWasConnectedNotification forKey:@"QTCaptureDeviceWasConnectedNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceWasConnectedNotification with object " stringByAppendingString:[QTCaptureDeviceWasConnectedNotification description]]);
if ([QTCaptureDeviceWasDisconnectedNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureDeviceWasDisconnectedNotification forKey:@"QTCaptureDeviceWasDisconnectedNotification"]; else NSLog([@"Can't initialize QTCaptureDeviceWasDisconnectedNotification with object " stringByAppendingString:[QTCaptureDeviceWasDisconnectedNotification description]]);
if ([QTCaptureSessionErrorKey isKindOfClass:[NSString class]]) [d setObject:QTCaptureSessionErrorKey forKey:@"QTCaptureSessionErrorKey"]; else NSLog([@"Can't initialize QTCaptureSessionErrorKey with object " stringByAppendingString:[QTCaptureSessionErrorKey description]]);
if ([QTCaptureSessionRuntimeErrorNotification isKindOfClass:[NSString class]]) [d setObject:QTCaptureSessionRuntimeErrorNotification forKey:@"QTCaptureSessionRuntimeErrorNotification"]; else NSLog([@"Can't initialize QTCaptureSessionRuntimeErrorNotification with object " stringByAppendingString:[QTCaptureSessionRuntimeErrorNotification description]]);
if ([QTDataReferenceTypeFile isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeFile forKey:@"QTDataReferenceTypeFile"]; else NSLog([@"Can't initialize QTDataReferenceTypeFile with object " stringByAppendingString:[QTDataReferenceTypeFile description]]);
if ([QTDataReferenceTypeHandle isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeHandle forKey:@"QTDataReferenceTypeHandle"]; else NSLog([@"Can't initialize QTDataReferenceTypeHandle with object " stringByAppendingString:[QTDataReferenceTypeHandle description]]);
if ([QTDataReferenceTypePointer isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypePointer forKey:@"QTDataReferenceTypePointer"]; else NSLog([@"Can't initialize QTDataReferenceTypePointer with object " stringByAppendingString:[QTDataReferenceTypePointer description]]);
if ([QTDataReferenceTypeResource isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeResource forKey:@"QTDataReferenceTypeResource"]; else NSLog([@"Can't initialize QTDataReferenceTypeResource with object " stringByAppendingString:[QTDataReferenceTypeResource description]]);
if ([QTDataReferenceTypeURL isKindOfClass:[NSString class]]) [d setObject:QTDataReferenceTypeURL forKey:@"QTDataReferenceTypeURL"]; else NSLog([@"Can't initialize QTDataReferenceTypeURL with object " stringByAppendingString:[QTDataReferenceTypeURL description]]);
if ([QTErrorCaptureInputKey isKindOfClass:[NSString class]]) [d setObject:QTErrorCaptureInputKey forKey:@"QTErrorCaptureInputKey"]; else NSLog([@"Can't initialize QTErrorCaptureInputKey with object " stringByAppendingString:[QTErrorCaptureInputKey description]]);
if ([QTErrorCaptureOutputKey isKindOfClass:[NSString class]]) [d setObject:QTErrorCaptureOutputKey forKey:@"QTErrorCaptureOutputKey"]; else NSLog([@"Can't initialize QTErrorCaptureOutputKey with object " stringByAppendingString:[QTErrorCaptureOutputKey description]]);
if ([QTErrorDeviceKey isKindOfClass:[NSString class]]) [d setObject:QTErrorDeviceKey forKey:@"QTErrorDeviceKey"]; else NSLog([@"Can't initialize QTErrorDeviceKey with object " stringByAppendingString:[QTErrorDeviceKey description]]);
if ([QTErrorExcludingDeviceKey isKindOfClass:[NSString class]]) [d setObject:QTErrorExcludingDeviceKey forKey:@"QTErrorExcludingDeviceKey"]; else NSLog([@"Can't initialize QTErrorExcludingDeviceKey with object " stringByAppendingString:[QTErrorExcludingDeviceKey description]]);
if ([QTErrorRecordingSuccesfullyFinishedKey isKindOfClass:[NSString class]]) [d setObject:QTErrorRecordingSuccesfullyFinishedKey forKey:@"QTErrorRecordingSuccesfullyFinishedKey"]; else NSLog([@"Can't initialize QTErrorRecordingSuccesfullyFinishedKey with object " stringByAppendingString:[QTErrorRecordingSuccesfullyFinishedKey description]]);
if ([QTFormatDescriptionAudioChannelLayoutAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionAudioChannelLayoutAttribute forKey:@"QTFormatDescriptionAudioChannelLayoutAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionAudioChannelLayoutAttribute with object " stringByAppendingString:[QTFormatDescriptionAudioChannelLayoutAttribute description]]);
if ([QTFormatDescriptionAudioMagicCookieAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionAudioMagicCookieAttribute forKey:@"QTFormatDescriptionAudioMagicCookieAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionAudioMagicCookieAttribute with object " stringByAppendingString:[QTFormatDescriptionAudioMagicCookieAttribute description]]);
if ([QTFormatDescriptionAudioStreamBasicDescriptionAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionAudioStreamBasicDescriptionAttribute forKey:@"QTFormatDescriptionAudioStreamBasicDescriptionAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionAudioStreamBasicDescriptionAttribute with object " stringByAppendingString:[QTFormatDescriptionAudioStreamBasicDescriptionAttribute description]]);
if ([QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute forKey:@"QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute with object " stringByAppendingString:[QTFormatDescriptionVideoCleanApertureDisplaySizeAttribute description]]);
if ([QTFormatDescriptionVideoEncodedPixelsSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionVideoEncodedPixelsSizeAttribute forKey:@"QTFormatDescriptionVideoEncodedPixelsSizeAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionVideoEncodedPixelsSizeAttribute with object " stringByAppendingString:[QTFormatDescriptionVideoEncodedPixelsSizeAttribute description]]);
if ([QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute forKey:@"QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute"]; else NSLog([@"Can't initialize QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute with object " stringByAppendingString:[QTFormatDescriptionVideoProductionApertureDisplaySizeAttribute description]]);
if ([QTKitErrorDomain isKindOfClass:[NSString class]]) [d setObject:QTKitErrorDomain forKey:@"QTKitErrorDomain"]; else NSLog([@"Can't initialize QTKitErrorDomain with object " stringByAppendingString:[QTKitErrorDomain description]]);
if ([QTMediaCharacteristicAudio isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicAudio forKey:@"QTMediaCharacteristicAudio"]; else NSLog([@"Can't initialize QTMediaCharacteristicAudio with object " stringByAppendingString:[QTMediaCharacteristicAudio description]]);
if ([QTMediaCharacteristicCanSendVideo isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicCanSendVideo forKey:@"QTMediaCharacteristicCanSendVideo"]; else NSLog([@"Can't initialize QTMediaCharacteristicCanSendVideo with object " stringByAppendingString:[QTMediaCharacteristicCanSendVideo description]]);
if ([QTMediaCharacteristicCanStep isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicCanStep forKey:@"QTMediaCharacteristicCanStep"]; else NSLog([@"Can't initialize QTMediaCharacteristicCanStep with object " stringByAppendingString:[QTMediaCharacteristicCanStep description]]);
if ([QTMediaCharacteristicHasNoDuration isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicHasNoDuration forKey:@"QTMediaCharacteristicHasNoDuration"]; else NSLog([@"Can't initialize QTMediaCharacteristicHasNoDuration with object " stringByAppendingString:[QTMediaCharacteristicHasNoDuration description]]);
if ([QTMediaCharacteristicHasSkinData isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicHasSkinData forKey:@"QTMediaCharacteristicHasSkinData"]; else NSLog([@"Can't initialize QTMediaCharacteristicHasSkinData with object " stringByAppendingString:[QTMediaCharacteristicHasSkinData description]]);
if ([QTMediaCharacteristicHasVideoFrameRate isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicHasVideoFrameRate forKey:@"QTMediaCharacteristicHasVideoFrameRate"]; else NSLog([@"Can't initialize QTMediaCharacteristicHasVideoFrameRate with object " stringByAppendingString:[QTMediaCharacteristicHasVideoFrameRate description]]);
if ([QTMediaCharacteristicNonLinear isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicNonLinear forKey:@"QTMediaCharacteristicNonLinear"]; else NSLog([@"Can't initialize QTMediaCharacteristicNonLinear with object " stringByAppendingString:[QTMediaCharacteristicNonLinear description]]);
if ([QTMediaCharacteristicProvidesActions isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicProvidesActions forKey:@"QTMediaCharacteristicProvidesActions"]; else NSLog([@"Can't initialize QTMediaCharacteristicProvidesActions with object " stringByAppendingString:[QTMediaCharacteristicProvidesActions description]]);
if ([QTMediaCharacteristicProvidesKeyFocus isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicProvidesKeyFocus forKey:@"QTMediaCharacteristicProvidesKeyFocus"]; else NSLog([@"Can't initialize QTMediaCharacteristicProvidesKeyFocus with object " stringByAppendingString:[QTMediaCharacteristicProvidesKeyFocus description]]);
if ([QTMediaCharacteristicVisual isKindOfClass:[NSString class]]) [d setObject:QTMediaCharacteristicVisual forKey:@"QTMediaCharacteristicVisual"]; else NSLog([@"Can't initialize QTMediaCharacteristicVisual with object " stringByAppendingString:[QTMediaCharacteristicVisual description]]);
if ([QTMediaCreationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaCreationTimeAttribute forKey:@"QTMediaCreationTimeAttribute"]; else NSLog([@"Can't initialize QTMediaCreationTimeAttribute with object " stringByAppendingString:[QTMediaCreationTimeAttribute description]]);
if ([QTMediaDurationAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaDurationAttribute forKey:@"QTMediaDurationAttribute"]; else NSLog([@"Can't initialize QTMediaDurationAttribute with object " stringByAppendingString:[QTMediaDurationAttribute description]]);
if ([QTMediaModificationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaModificationTimeAttribute forKey:@"QTMediaModificationTimeAttribute"]; else NSLog([@"Can't initialize QTMediaModificationTimeAttribute with object " stringByAppendingString:[QTMediaModificationTimeAttribute description]]);
if ([QTMediaQualityAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaQualityAttribute forKey:@"QTMediaQualityAttribute"]; else NSLog([@"Can't initialize QTMediaQualityAttribute with object " stringByAppendingString:[QTMediaQualityAttribute description]]);
if ([QTMediaSampleCountAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaSampleCountAttribute forKey:@"QTMediaSampleCountAttribute"]; else NSLog([@"Can't initialize QTMediaSampleCountAttribute with object " stringByAppendingString:[QTMediaSampleCountAttribute description]]);
if ([QTMediaTimeScaleAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaTimeScaleAttribute forKey:@"QTMediaTimeScaleAttribute"]; else NSLog([@"Can't initialize QTMediaTimeScaleAttribute with object " stringByAppendingString:[QTMediaTimeScaleAttribute description]]);
if ([QTMediaType3D isKindOfClass:[NSString class]]) [d setObject:QTMediaType3D forKey:@"QTMediaType3D"]; else NSLog([@"Can't initialize QTMediaType3D with object " stringByAppendingString:[QTMediaType3D description]]);
if ([QTMediaTypeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeAttribute forKey:@"QTMediaTypeAttribute"]; else NSLog([@"Can't initialize QTMediaTypeAttribute with object " stringByAppendingString:[QTMediaTypeAttribute description]]);
if ([QTMediaTypeBase isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeBase forKey:@"QTMediaTypeBase"]; else NSLog([@"Can't initialize QTMediaTypeBase with object " stringByAppendingString:[QTMediaTypeBase description]]);
if ([QTMediaTypeFlash isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeFlash forKey:@"QTMediaTypeFlash"]; else NSLog([@"Can't initialize QTMediaTypeFlash with object " stringByAppendingString:[QTMediaTypeFlash description]]);
if ([QTMediaTypeHint isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeHint forKey:@"QTMediaTypeHint"]; else NSLog([@"Can't initialize QTMediaTypeHint with object " stringByAppendingString:[QTMediaTypeHint description]]);
if ([QTMediaTypeMPEG isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMPEG forKey:@"QTMediaTypeMPEG"]; else NSLog([@"Can't initialize QTMediaTypeMPEG with object " stringByAppendingString:[QTMediaTypeMPEG description]]);
if ([QTMediaTypeMovie isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMovie forKey:@"QTMediaTypeMovie"]; else NSLog([@"Can't initialize QTMediaTypeMovie with object " stringByAppendingString:[QTMediaTypeMovie description]]);
if ([QTMediaTypeMusic isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMusic forKey:@"QTMediaTypeMusic"]; else NSLog([@"Can't initialize QTMediaTypeMusic with object " stringByAppendingString:[QTMediaTypeMusic description]]);
if ([QTMediaTypeMuxed isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeMuxed forKey:@"QTMediaTypeMuxed"]; else NSLog([@"Can't initialize QTMediaTypeMuxed with object " stringByAppendingString:[QTMediaTypeMuxed description]]);
if ([QTMediaTypeQTVR isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeQTVR forKey:@"QTMediaTypeQTVR"]; else NSLog([@"Can't initialize QTMediaTypeQTVR with object " stringByAppendingString:[QTMediaTypeQTVR description]]);
if ([QTMediaTypeQuartzComposer isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeQuartzComposer forKey:@"QTMediaTypeQuartzComposer"]; else NSLog([@"Can't initialize QTMediaTypeQuartzComposer with object " stringByAppendingString:[QTMediaTypeQuartzComposer description]]);
if ([QTMediaTypeSkin isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeSkin forKey:@"QTMediaTypeSkin"]; else NSLog([@"Can't initialize QTMediaTypeSkin with object " stringByAppendingString:[QTMediaTypeSkin description]]);
if ([QTMediaTypeSound isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeSound forKey:@"QTMediaTypeSound"]; else NSLog([@"Can't initialize QTMediaTypeSound with object " stringByAppendingString:[QTMediaTypeSound description]]);
if ([QTMediaTypeSprite isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeSprite forKey:@"QTMediaTypeSprite"]; else NSLog([@"Can't initialize QTMediaTypeSprite with object " stringByAppendingString:[QTMediaTypeSprite description]]);
if ([QTMediaTypeStream isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeStream forKey:@"QTMediaTypeStream"]; else NSLog([@"Can't initialize QTMediaTypeStream with object " stringByAppendingString:[QTMediaTypeStream description]]);
if ([QTMediaTypeText isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeText forKey:@"QTMediaTypeText"]; else NSLog([@"Can't initialize QTMediaTypeText with object " stringByAppendingString:[QTMediaTypeText description]]);
if ([QTMediaTypeTimeCode isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeTimeCode forKey:@"QTMediaTypeTimeCode"]; else NSLog([@"Can't initialize QTMediaTypeTimeCode with object " stringByAppendingString:[QTMediaTypeTimeCode description]]);
if ([QTMediaTypeTween isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeTween forKey:@"QTMediaTypeTween"]; else NSLog([@"Can't initialize QTMediaTypeTween with object " stringByAppendingString:[QTMediaTypeTween description]]);
if ([QTMediaTypeVideo isKindOfClass:[NSString class]]) [d setObject:QTMediaTypeVideo forKey:@"QTMediaTypeVideo"]; else NSLog([@"Can't initialize QTMediaTypeVideo with object " stringByAppendingString:[QTMediaTypeVideo description]]);
if ([QTMovieApertureModeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeAttribute forKey:@"QTMovieApertureModeAttribute"]; else NSLog([@"Can't initialize QTMovieApertureModeAttribute with object " stringByAppendingString:[QTMovieApertureModeAttribute description]]);
if ([QTMovieApertureModeClassic isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeClassic forKey:@"QTMovieApertureModeClassic"]; else NSLog([@"Can't initialize QTMovieApertureModeClassic with object " stringByAppendingString:[QTMovieApertureModeClassic description]]);
if ([QTMovieApertureModeClean isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeClean forKey:@"QTMovieApertureModeClean"]; else NSLog([@"Can't initialize QTMovieApertureModeClean with object " stringByAppendingString:[QTMovieApertureModeClean description]]);
if ([QTMovieApertureModeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeDidChangeNotification forKey:@"QTMovieApertureModeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieApertureModeDidChangeNotification with object " stringByAppendingString:[QTMovieApertureModeDidChangeNotification description]]);
if ([QTMovieApertureModeEncodedPixels isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeEncodedPixels forKey:@"QTMovieApertureModeEncodedPixels"]; else NSLog([@"Can't initialize QTMovieApertureModeEncodedPixels with object " stringByAppendingString:[QTMovieApertureModeEncodedPixels description]]);
if ([QTMovieApertureModeProduction isKindOfClass:[NSString class]]) [d setObject:QTMovieApertureModeProduction forKey:@"QTMovieApertureModeProduction"]; else NSLog([@"Can't initialize QTMovieApertureModeProduction with object " stringByAppendingString:[QTMovieApertureModeProduction description]]);
if ([QTMovieAskUnresolvedDataRefsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieAskUnresolvedDataRefsAttribute forKey:@"QTMovieAskUnresolvedDataRefsAttribute"]; else NSLog([@"Can't initialize QTMovieAskUnresolvedDataRefsAttribute with object " stringByAppendingString:[QTMovieAskUnresolvedDataRefsAttribute description]]);
if ([QTMovieAutoAlternatesAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieAutoAlternatesAttribute forKey:@"QTMovieAutoAlternatesAttribute"]; else NSLog([@"Can't initialize QTMovieAutoAlternatesAttribute with object " stringByAppendingString:[QTMovieAutoAlternatesAttribute description]]);
if ([QTMovieChapterDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterDidChangeNotification forKey:@"QTMovieChapterDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieChapterDidChangeNotification with object " stringByAppendingString:[QTMovieChapterDidChangeNotification description]]);
if ([QTMovieChapterListDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterListDidChangeNotification forKey:@"QTMovieChapterListDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieChapterListDidChangeNotification with object " stringByAppendingString:[QTMovieChapterListDidChangeNotification description]]);
if ([QTMovieChapterName isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterName forKey:@"QTMovieChapterName"]; else NSLog([@"Can't initialize QTMovieChapterName with object " stringByAppendingString:[QTMovieChapterName description]]);
if ([QTMovieChapterStartTime isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterStartTime forKey:@"QTMovieChapterStartTime"]; else NSLog([@"Can't initialize QTMovieChapterStartTime with object " stringByAppendingString:[QTMovieChapterStartTime description]]);
if ([QTMovieChapterTargetTrackAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieChapterTargetTrackAttribute forKey:@"QTMovieChapterTargetTrackAttribute"]; else NSLog([@"Can't initialize QTMovieChapterTargetTrackAttribute with object " stringByAppendingString:[QTMovieChapterTargetTrackAttribute description]]);
if ([QTMovieCloseWindowRequestNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieCloseWindowRequestNotification forKey:@"QTMovieCloseWindowRequestNotification"]; else NSLog([@"Can't initialize QTMovieCloseWindowRequestNotification with object " stringByAppendingString:[QTMovieCloseWindowRequestNotification description]]);
if ([QTMovieCopyrightAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCopyrightAttribute forKey:@"QTMovieCopyrightAttribute"]; else NSLog([@"Can't initialize QTMovieCopyrightAttribute with object " stringByAppendingString:[QTMovieCopyrightAttribute description]]);
if ([QTMovieCreationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCreationTimeAttribute forKey:@"QTMovieCreationTimeAttribute"]; else NSLog([@"Can't initialize QTMovieCreationTimeAttribute with object " stringByAppendingString:[QTMovieCreationTimeAttribute description]]);
if ([QTMovieCurrentSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCurrentSizeAttribute forKey:@"QTMovieCurrentSizeAttribute"]; else NSLog([@"Can't initialize QTMovieCurrentSizeAttribute with object " stringByAppendingString:[QTMovieCurrentSizeAttribute description]]);
if ([QTMovieCurrentTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieCurrentTimeAttribute forKey:@"QTMovieCurrentTimeAttribute"]; else NSLog([@"Can't initialize QTMovieCurrentTimeAttribute with object " stringByAppendingString:[QTMovieCurrentTimeAttribute description]]);
if ([QTMovieDataAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDataAttribute forKey:@"QTMovieDataAttribute"]; else NSLog([@"Can't initialize QTMovieDataAttribute with object " stringByAppendingString:[QTMovieDataAttribute description]]);
if ([QTMovieDataReferenceAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDataReferenceAttribute forKey:@"QTMovieDataReferenceAttribute"]; else NSLog([@"Can't initialize QTMovieDataReferenceAttribute with object " stringByAppendingString:[QTMovieDataReferenceAttribute description]]);
if ([QTMovieDataSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDataSizeAttribute forKey:@"QTMovieDataSizeAttribute"]; else NSLog([@"Can't initialize QTMovieDataSizeAttribute with object " stringByAppendingString:[QTMovieDataSizeAttribute description]]);
if ([QTMovieDelegateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDelegateAttribute forKey:@"QTMovieDelegateAttribute"]; else NSLog([@"Can't initialize QTMovieDelegateAttribute with object " stringByAppendingString:[QTMovieDelegateAttribute description]]);
if ([QTMovieDidEndNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieDidEndNotification forKey:@"QTMovieDidEndNotification"]; else NSLog([@"Can't initialize QTMovieDidEndNotification with object " stringByAppendingString:[QTMovieDidEndNotification description]]);
if ([QTMovieDisplayNameAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDisplayNameAttribute forKey:@"QTMovieDisplayNameAttribute"]; else NSLog([@"Can't initialize QTMovieDisplayNameAttribute with object " stringByAppendingString:[QTMovieDisplayNameAttribute description]]);
if ([QTMovieDontInteractWithUserAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDontInteractWithUserAttribute forKey:@"QTMovieDontInteractWithUserAttribute"]; else NSLog([@"Can't initialize QTMovieDontInteractWithUserAttribute with object " stringByAppendingString:[QTMovieDontInteractWithUserAttribute description]]);
if ([QTMovieDurationAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieDurationAttribute forKey:@"QTMovieDurationAttribute"]; else NSLog([@"Can't initialize QTMovieDurationAttribute with object " stringByAppendingString:[QTMovieDurationAttribute description]]);
if ([QTMovieEditabilityDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieEditabilityDidChangeNotification forKey:@"QTMovieEditabilityDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieEditabilityDidChangeNotification with object " stringByAppendingString:[QTMovieEditabilityDidChangeNotification description]]);
if ([QTMovieEditableAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieEditableAttribute forKey:@"QTMovieEditableAttribute"]; else NSLog([@"Can't initialize QTMovieEditableAttribute with object " stringByAppendingString:[QTMovieEditableAttribute description]]);
if ([QTMovieEditedNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieEditedNotification forKey:@"QTMovieEditedNotification"]; else NSLog([@"Can't initialize QTMovieEditedNotification with object " stringByAppendingString:[QTMovieEditedNotification description]]);
if ([QTMovieEnterFullScreenRequestNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieEnterFullScreenRequestNotification forKey:@"QTMovieEnterFullScreenRequestNotification"]; else NSLog([@"Can't initialize QTMovieEnterFullScreenRequestNotification with object " stringByAppendingString:[QTMovieEnterFullScreenRequestNotification description]]);
if ([QTMovieExitFullScreenRequestNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieExitFullScreenRequestNotification forKey:@"QTMovieExitFullScreenRequestNotification"]; else NSLog([@"Can't initialize QTMovieExitFullScreenRequestNotification with object " stringByAppendingString:[QTMovieExitFullScreenRequestNotification description]]);
if ([QTMovieExport isKindOfClass:[NSString class]]) [d setObject:QTMovieExport forKey:@"QTMovieExport"]; else NSLog([@"Can't initialize QTMovieExport with object " stringByAppendingString:[QTMovieExport description]]);
if ([QTMovieExportManufacturer isKindOfClass:[NSString class]]) [d setObject:QTMovieExportManufacturer forKey:@"QTMovieExportManufacturer"]; else NSLog([@"Can't initialize QTMovieExportManufacturer with object " stringByAppendingString:[QTMovieExportManufacturer description]]);
if ([QTMovieExportSettings isKindOfClass:[NSString class]]) [d setObject:QTMovieExportSettings forKey:@"QTMovieExportSettings"]; else NSLog([@"Can't initialize QTMovieExportSettings with object " stringByAppendingString:[QTMovieExportSettings description]]);
if ([QTMovieExportType isKindOfClass:[NSString class]]) [d setObject:QTMovieExportType forKey:@"QTMovieExportType"]; else NSLog([@"Can't initialize QTMovieExportType with object " stringByAppendingString:[QTMovieExportType description]]);
if ([QTMovieFileNameAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieFileNameAttribute forKey:@"QTMovieFileNameAttribute"]; else NSLog([@"Can't initialize QTMovieFileNameAttribute with object " stringByAppendingString:[QTMovieFileNameAttribute description]]);
if ([QTMovieFileOffsetAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieFileOffsetAttribute forKey:@"QTMovieFileOffsetAttribute"]; else NSLog([@"Can't initialize QTMovieFileOffsetAttribute with object " stringByAppendingString:[QTMovieFileOffsetAttribute description]]);
if ([QTMovieFlatten isKindOfClass:[NSString class]]) [d setObject:QTMovieFlatten forKey:@"QTMovieFlatten"]; else NSLog([@"Can't initialize QTMovieFlatten with object " stringByAppendingString:[QTMovieFlatten description]]);
if ([QTMovieFrameImageDeinterlaceFields isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageDeinterlaceFields forKey:@"QTMovieFrameImageDeinterlaceFields"]; else NSLog([@"Can't initialize QTMovieFrameImageDeinterlaceFields with object " stringByAppendingString:[QTMovieFrameImageDeinterlaceFields description]]);
if ([QTMovieFrameImageHighQuality isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageHighQuality forKey:@"QTMovieFrameImageHighQuality"]; else NSLog([@"Can't initialize QTMovieFrameImageHighQuality with object " stringByAppendingString:[QTMovieFrameImageHighQuality description]]);
if ([QTMovieFrameImageOpenGLContext isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageOpenGLContext forKey:@"QTMovieFrameImageOpenGLContext"]; else NSLog([@"Can't initialize QTMovieFrameImageOpenGLContext with object " stringByAppendingString:[QTMovieFrameImageOpenGLContext description]]);
if ([QTMovieFrameImagePixelFormat isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImagePixelFormat forKey:@"QTMovieFrameImagePixelFormat"]; else NSLog([@"Can't initialize QTMovieFrameImagePixelFormat with object " stringByAppendingString:[QTMovieFrameImagePixelFormat description]]);
if ([QTMovieFrameImageRepresentationsType isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageRepresentationsType forKey:@"QTMovieFrameImageRepresentationsType"]; else NSLog([@"Can't initialize QTMovieFrameImageRepresentationsType with object " stringByAppendingString:[QTMovieFrameImageRepresentationsType description]]);
if ([QTMovieFrameImageSingleField isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageSingleField forKey:@"QTMovieFrameImageSingleField"]; else NSLog([@"Can't initialize QTMovieFrameImageSingleField with object " stringByAppendingString:[QTMovieFrameImageSingleField description]]);
if ([QTMovieFrameImageSize isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageSize forKey:@"QTMovieFrameImageSize"]; else NSLog([@"Can't initialize QTMovieFrameImageSize with object " stringByAppendingString:[QTMovieFrameImageSize description]]);
if ([QTMovieFrameImageType isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageType forKey:@"QTMovieFrameImageType"]; else NSLog([@"Can't initialize QTMovieFrameImageType with object " stringByAppendingString:[QTMovieFrameImageType description]]);
if ([QTMovieFrameImageTypeCGImageRef isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCGImageRef forKey:@"QTMovieFrameImageTypeCGImageRef"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCGImageRef with object " stringByAppendingString:[QTMovieFrameImageTypeCGImageRef description]]);
if ([QTMovieFrameImageTypeCIImage isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCIImage forKey:@"QTMovieFrameImageTypeCIImage"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCIImage with object " stringByAppendingString:[QTMovieFrameImageTypeCIImage description]]);
if ([QTMovieFrameImageTypeCVOpenGLTextureRef isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCVOpenGLTextureRef forKey:@"QTMovieFrameImageTypeCVOpenGLTextureRef"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCVOpenGLTextureRef with object " stringByAppendingString:[QTMovieFrameImageTypeCVOpenGLTextureRef description]]);
if ([QTMovieFrameImageTypeCVPixelBufferRef isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeCVPixelBufferRef forKey:@"QTMovieFrameImageTypeCVPixelBufferRef"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeCVPixelBufferRef with object " stringByAppendingString:[QTMovieFrameImageTypeCVPixelBufferRef description]]);
if ([QTMovieFrameImageTypeNSImage isKindOfClass:[NSString class]]) [d setObject:QTMovieFrameImageTypeNSImage forKey:@"QTMovieFrameImageTypeNSImage"]; else NSLog([@"Can't initialize QTMovieFrameImageTypeNSImage with object " stringByAppendingString:[QTMovieFrameImageTypeNSImage description]]);
if ([QTMovieHasApertureModeDimensionsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasApertureModeDimensionsAttribute forKey:@"QTMovieHasApertureModeDimensionsAttribute"]; else NSLog([@"Can't initialize QTMovieHasApertureModeDimensionsAttribute with object " stringByAppendingString:[QTMovieHasApertureModeDimensionsAttribute description]]);
if ([QTMovieHasAudioAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasAudioAttribute forKey:@"QTMovieHasAudioAttribute"]; else NSLog([@"Can't initialize QTMovieHasAudioAttribute with object " stringByAppendingString:[QTMovieHasAudioAttribute description]]);
if ([QTMovieHasDurationAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasDurationAttribute forKey:@"QTMovieHasDurationAttribute"]; else NSLog([@"Can't initialize QTMovieHasDurationAttribute with object " stringByAppendingString:[QTMovieHasDurationAttribute description]]);
if ([QTMovieHasVideoAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieHasVideoAttribute forKey:@"QTMovieHasVideoAttribute"]; else NSLog([@"Can't initialize QTMovieHasVideoAttribute with object " stringByAppendingString:[QTMovieHasVideoAttribute description]]);
if ([QTMovieIsActiveAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsActiveAttribute forKey:@"QTMovieIsActiveAttribute"]; else NSLog([@"Can't initialize QTMovieIsActiveAttribute with object " stringByAppendingString:[QTMovieIsActiveAttribute description]]);
if ([QTMovieIsInteractiveAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsInteractiveAttribute forKey:@"QTMovieIsInteractiveAttribute"]; else NSLog([@"Can't initialize QTMovieIsInteractiveAttribute with object " stringByAppendingString:[QTMovieIsInteractiveAttribute description]]);
if ([QTMovieIsLinearAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsLinearAttribute forKey:@"QTMovieIsLinearAttribute"]; else NSLog([@"Can't initialize QTMovieIsLinearAttribute with object " stringByAppendingString:[QTMovieIsLinearAttribute description]]);
if ([QTMovieIsSteppableAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieIsSteppableAttribute forKey:@"QTMovieIsSteppableAttribute"]; else NSLog([@"Can't initialize QTMovieIsSteppableAttribute with object " stringByAppendingString:[QTMovieIsSteppableAttribute description]]);
if ([QTMovieLoadStateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieLoadStateAttribute forKey:@"QTMovieLoadStateAttribute"]; else NSLog([@"Can't initialize QTMovieLoadStateAttribute with object " stringByAppendingString:[QTMovieLoadStateAttribute description]]);
if ([QTMovieLoadStateDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieLoadStateDidChangeNotification forKey:@"QTMovieLoadStateDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieLoadStateDidChangeNotification with object " stringByAppendingString:[QTMovieLoadStateDidChangeNotification description]]);
if ([QTMovieLoopModeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieLoopModeDidChangeNotification forKey:@"QTMovieLoopModeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieLoopModeDidChangeNotification with object " stringByAppendingString:[QTMovieLoopModeDidChangeNotification description]]);
if ([QTMovieLoopsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieLoopsAttribute forKey:@"QTMovieLoopsAttribute"]; else NSLog([@"Can't initialize QTMovieLoopsAttribute with object " stringByAppendingString:[QTMovieLoopsAttribute description]]);
if ([QTMovieLoopsBackAndForthAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieLoopsBackAndForthAttribute forKey:@"QTMovieLoopsBackAndForthAttribute"]; else NSLog([@"Can't initialize QTMovieLoopsBackAndForthAttribute with object " stringByAppendingString:[QTMovieLoopsBackAndForthAttribute description]]);
if ([QTMovieMessageNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieMessageNotificationParameter forKey:@"QTMovieMessageNotificationParameter"]; else NSLog([@"Can't initialize QTMovieMessageNotificationParameter with object " stringByAppendingString:[QTMovieMessageNotificationParameter description]]);
if ([QTMovieMessageStringPostedNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieMessageStringPostedNotification forKey:@"QTMovieMessageStringPostedNotification"]; else NSLog([@"Can't initialize QTMovieMessageStringPostedNotification with object " stringByAppendingString:[QTMovieMessageStringPostedNotification description]]);
if ([QTMovieModificationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieModificationTimeAttribute forKey:@"QTMovieModificationTimeAttribute"]; else NSLog([@"Can't initialize QTMovieModificationTimeAttribute with object " stringByAppendingString:[QTMovieModificationTimeAttribute description]]);
if ([QTMovieMutedAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieMutedAttribute forKey:@"QTMovieMutedAttribute"]; else NSLog([@"Can't initialize QTMovieMutedAttribute with object " stringByAppendingString:[QTMovieMutedAttribute description]]);
if ([QTMovieNaturalSizeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieNaturalSizeAttribute forKey:@"QTMovieNaturalSizeAttribute"]; else NSLog([@"Can't initialize QTMovieNaturalSizeAttribute with object " stringByAppendingString:[QTMovieNaturalSizeAttribute description]]);
if ([QTMovieOpenAsyncOKAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieOpenAsyncOKAttribute forKey:@"QTMovieOpenAsyncOKAttribute"]; else NSLog([@"Can't initialize QTMovieOpenAsyncOKAttribute with object " stringByAppendingString:[QTMovieOpenAsyncOKAttribute description]]);
if ([QTMoviePasteboardAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePasteboardAttribute forKey:@"QTMoviePasteboardAttribute"]; else NSLog([@"Can't initialize QTMoviePasteboardAttribute with object " stringByAppendingString:[QTMoviePasteboardAttribute description]]);
if ([QTMoviePasteboardType isKindOfClass:[NSString class]]) [d setObject:QTMoviePasteboardType forKey:@"QTMoviePasteboardType"]; else NSLog([@"Can't initialize QTMoviePasteboardType with object " stringByAppendingString:[QTMoviePasteboardType description]]);
if ([QTMoviePlaysAllFramesAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePlaysAllFramesAttribute forKey:@"QTMoviePlaysAllFramesAttribute"]; else NSLog([@"Can't initialize QTMoviePlaysAllFramesAttribute with object " stringByAppendingString:[QTMoviePlaysAllFramesAttribute description]]);
if ([QTMoviePlaysSelectionOnlyAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePlaysSelectionOnlyAttribute forKey:@"QTMoviePlaysSelectionOnlyAttribute"]; else NSLog([@"Can't initialize QTMoviePlaysSelectionOnlyAttribute with object " stringByAppendingString:[QTMoviePlaysSelectionOnlyAttribute description]]);
if ([QTMoviePosterTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePosterTimeAttribute forKey:@"QTMoviePosterTimeAttribute"]; else NSLog([@"Can't initialize QTMoviePosterTimeAttribute with object " stringByAppendingString:[QTMoviePosterTimeAttribute description]]);
if ([QTMoviePreferredMutedAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreferredMutedAttribute forKey:@"QTMoviePreferredMutedAttribute"]; else NSLog([@"Can't initialize QTMoviePreferredMutedAttribute with object " stringByAppendingString:[QTMoviePreferredMutedAttribute description]]);
if ([QTMoviePreferredRateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreferredRateAttribute forKey:@"QTMoviePreferredRateAttribute"]; else NSLog([@"Can't initialize QTMoviePreferredRateAttribute with object " stringByAppendingString:[QTMoviePreferredRateAttribute description]]);
if ([QTMoviePreferredVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreferredVolumeAttribute forKey:@"QTMoviePreferredVolumeAttribute"]; else NSLog([@"Can't initialize QTMoviePreferredVolumeAttribute with object " stringByAppendingString:[QTMoviePreferredVolumeAttribute description]]);
if ([QTMoviePreviewModeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreviewModeAttribute forKey:@"QTMoviePreviewModeAttribute"]; else NSLog([@"Can't initialize QTMoviePreviewModeAttribute with object " stringByAppendingString:[QTMoviePreviewModeAttribute description]]);
if ([QTMoviePreviewRangeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMoviePreviewRangeAttribute forKey:@"QTMoviePreviewRangeAttribute"]; else NSLog([@"Can't initialize QTMoviePreviewRangeAttribute with object " stringByAppendingString:[QTMoviePreviewRangeAttribute description]]);
if ([QTMovieRateAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieRateAttribute forKey:@"QTMovieRateAttribute"]; else NSLog([@"Can't initialize QTMovieRateAttribute with object " stringByAppendingString:[QTMovieRateAttribute description]]);
if ([QTMovieRateChangesPreservePitchAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieRateChangesPreservePitchAttribute forKey:@"QTMovieRateChangesPreservePitchAttribute"]; else NSLog([@"Can't initialize QTMovieRateChangesPreservePitchAttribute with object " stringByAppendingString:[QTMovieRateChangesPreservePitchAttribute description]]);
if ([QTMovieRateDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieRateDidChangeNotification forKey:@"QTMovieRateDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieRateDidChangeNotification with object " stringByAppendingString:[QTMovieRateDidChangeNotification description]]);
if ([QTMovieRateDidChangeNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieRateDidChangeNotificationParameter forKey:@"QTMovieRateDidChangeNotificationParameter"]; else NSLog([@"Can't initialize QTMovieRateDidChangeNotificationParameter with object " stringByAppendingString:[QTMovieRateDidChangeNotificationParameter description]]);
if ([QTMovieResolveDataRefsAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieResolveDataRefsAttribute forKey:@"QTMovieResolveDataRefsAttribute"]; else NSLog([@"Can't initialize QTMovieResolveDataRefsAttribute with object " stringByAppendingString:[QTMovieResolveDataRefsAttribute description]]);
if ([QTMovieSelectionAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieSelectionAttribute forKey:@"QTMovieSelectionAttribute"]; else NSLog([@"Can't initialize QTMovieSelectionAttribute with object " stringByAppendingString:[QTMovieSelectionAttribute description]]);
if ([QTMovieSelectionDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieSelectionDidChangeNotification forKey:@"QTMovieSelectionDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieSelectionDidChangeNotification with object " stringByAppendingString:[QTMovieSelectionDidChangeNotification description]]);
if ([QTMovieSizeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieSizeDidChangeNotification forKey:@"QTMovieSizeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieSizeDidChangeNotification with object " stringByAppendingString:[QTMovieSizeDidChangeNotification description]]);
if ([QTMovieStatusCodeNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusCodeNotificationParameter forKey:@"QTMovieStatusCodeNotificationParameter"]; else NSLog([@"Can't initialize QTMovieStatusCodeNotificationParameter with object " stringByAppendingString:[QTMovieStatusCodeNotificationParameter description]]);
if ([QTMovieStatusFlagsNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusFlagsNotificationParameter forKey:@"QTMovieStatusFlagsNotificationParameter"]; else NSLog([@"Can't initialize QTMovieStatusFlagsNotificationParameter with object " stringByAppendingString:[QTMovieStatusFlagsNotificationParameter description]]);
if ([QTMovieStatusStringNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusStringNotificationParameter forKey:@"QTMovieStatusStringNotificationParameter"]; else NSLog([@"Can't initialize QTMovieStatusStringNotificationParameter with object " stringByAppendingString:[QTMovieStatusStringNotificationParameter description]]);
if ([QTMovieStatusStringPostedNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieStatusStringPostedNotification forKey:@"QTMovieStatusStringPostedNotification"]; else NSLog([@"Can't initialize QTMovieStatusStringPostedNotification with object " stringByAppendingString:[QTMovieStatusStringPostedNotification description]]);
if ([QTMovieTargetIDNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieTargetIDNotificationParameter forKey:@"QTMovieTargetIDNotificationParameter"]; else NSLog([@"Can't initialize QTMovieTargetIDNotificationParameter with object " stringByAppendingString:[QTMovieTargetIDNotificationParameter description]]);
if ([QTMovieTargetNameNotificationParameter isKindOfClass:[NSString class]]) [d setObject:QTMovieTargetNameNotificationParameter forKey:@"QTMovieTargetNameNotificationParameter"]; else NSLog([@"Can't initialize QTMovieTargetNameNotificationParameter with object " stringByAppendingString:[QTMovieTargetNameNotificationParameter description]]);
if ([QTMovieTimeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieTimeDidChangeNotification forKey:@"QTMovieTimeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieTimeDidChangeNotification with object " stringByAppendingString:[QTMovieTimeDidChangeNotification description]]);
if ([QTMovieTimeScaleAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieTimeScaleAttribute forKey:@"QTMovieTimeScaleAttribute"]; else NSLog([@"Can't initialize QTMovieTimeScaleAttribute with object " stringByAppendingString:[QTMovieTimeScaleAttribute description]]);
if ([QTMovieURLAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieURLAttribute forKey:@"QTMovieURLAttribute"]; else NSLog([@"Can't initialize QTMovieURLAttribute with object " stringByAppendingString:[QTMovieURLAttribute description]]);
if ([QTMovieUneditableException isKindOfClass:[NSString class]]) [d setObject:QTMovieUneditableException forKey:@"QTMovieUneditableException"]; else NSLog([@"Can't initialize QTMovieUneditableException with object " stringByAppendingString:[QTMovieUneditableException description]]);
if ([QTMovieViewControllerVisibleBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewControllerVisibleBinding forKey:@"QTMovieViewControllerVisibleBinding"]; else NSLog([@"Can't initialize QTMovieViewControllerVisibleBinding with object " stringByAppendingString:[QTMovieViewControllerVisibleBinding description]]);
if ([QTMovieViewFillColorBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewFillColorBinding forKey:@"QTMovieViewFillColorBinding"]; else NSLog([@"Can't initialize QTMovieViewFillColorBinding with object " stringByAppendingString:[QTMovieViewFillColorBinding description]]);
if ([QTMovieViewMovieBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewMovieBinding forKey:@"QTMovieViewMovieBinding"]; else NSLog([@"Can't initialize QTMovieViewMovieBinding with object " stringByAppendingString:[QTMovieViewMovieBinding description]]);
if ([QTMovieViewPreservesAspectRatioBinding isKindOfClass:[NSString class]]) [d setObject:QTMovieViewPreservesAspectRatioBinding forKey:@"QTMovieViewPreservesAspectRatioBinding"]; else NSLog([@"Can't initialize QTMovieViewPreservesAspectRatioBinding with object " stringByAppendingString:[QTMovieViewPreservesAspectRatioBinding description]]);
if ([QTMovieVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTMovieVolumeAttribute forKey:@"QTMovieVolumeAttribute"]; else NSLog([@"Can't initialize QTMovieVolumeAttribute with object " stringByAppendingString:[QTMovieVolumeAttribute description]]);
if ([QTMovieVolumeDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:QTMovieVolumeDidChangeNotification forKey:@"QTMovieVolumeDidChangeNotification"]; else NSLog([@"Can't initialize QTMovieVolumeDidChangeNotification with object " stringByAppendingString:[QTMovieVolumeDidChangeNotification description]]);
if ([QTSampleBufferDateRecordedAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferDateRecordedAttribute forKey:@"QTSampleBufferDateRecordedAttribute"]; else NSLog([@"Can't initialize QTSampleBufferDateRecordedAttribute with object " stringByAppendingString:[QTSampleBufferDateRecordedAttribute description]]);
if ([QTSampleBufferExplicitSceneChange isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferExplicitSceneChange forKey:@"QTSampleBufferExplicitSceneChange"]; else NSLog([@"Can't initialize QTSampleBufferExplicitSceneChange with object " stringByAppendingString:[QTSampleBufferExplicitSceneChange description]]);
if ([QTSampleBufferHostTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferHostTimeAttribute forKey:@"QTSampleBufferHostTimeAttribute"]; else NSLog([@"Can't initialize QTSampleBufferHostTimeAttribute with object " stringByAppendingString:[QTSampleBufferHostTimeAttribute description]]);
if ([QTSampleBufferSMPTETimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferSMPTETimeAttribute forKey:@"QTSampleBufferSMPTETimeAttribute"]; else NSLog([@"Can't initialize QTSampleBufferSMPTETimeAttribute with object " stringByAppendingString:[QTSampleBufferSMPTETimeAttribute description]]);
if ([QTSampleBufferSceneChangeTypeAttribute isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferSceneChangeTypeAttribute forKey:@"QTSampleBufferSceneChangeTypeAttribute"]; else NSLog([@"Can't initialize QTSampleBufferSceneChangeTypeAttribute with object " stringByAppendingString:[QTSampleBufferSceneChangeTypeAttribute description]]);
if ([QTSampleBufferTimeStampDiscontinuitySceneChange isKindOfClass:[NSString class]]) [d setObject:QTSampleBufferTimeStampDiscontinuitySceneChange forKey:@"QTSampleBufferTimeStampDiscontinuitySceneChange"]; else NSLog([@"Can't initialize QTSampleBufferTimeStampDiscontinuitySceneChange with object " stringByAppendingString:[QTSampleBufferTimeStampDiscontinuitySceneChange description]]);
if ([QTTrackBoundsAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackBoundsAttribute forKey:@"QTTrackBoundsAttribute"]; else NSLog([@"Can't initialize QTTrackBoundsAttribute with object " stringByAppendingString:[QTTrackBoundsAttribute description]]);
if ([QTTrackCreationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackCreationTimeAttribute forKey:@"QTTrackCreationTimeAttribute"]; else NSLog([@"Can't initialize QTTrackCreationTimeAttribute with object " stringByAppendingString:[QTTrackCreationTimeAttribute description]]);
if ([QTTrackDimensionsAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackDimensionsAttribute forKey:@"QTTrackDimensionsAttribute"]; else NSLog([@"Can't initialize QTTrackDimensionsAttribute with object " stringByAppendingString:[QTTrackDimensionsAttribute description]]);
if ([QTTrackDisplayNameAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackDisplayNameAttribute forKey:@"QTTrackDisplayNameAttribute"]; else NSLog([@"Can't initialize QTTrackDisplayNameAttribute with object " stringByAppendingString:[QTTrackDisplayNameAttribute description]]);
if ([QTTrackEnabledAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackEnabledAttribute forKey:@"QTTrackEnabledAttribute"]; else NSLog([@"Can't initialize QTTrackEnabledAttribute with object " stringByAppendingString:[QTTrackEnabledAttribute description]]);
if ([QTTrackFormatSummaryAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackFormatSummaryAttribute forKey:@"QTTrackFormatSummaryAttribute"]; else NSLog([@"Can't initialize QTTrackFormatSummaryAttribute with object " stringByAppendingString:[QTTrackFormatSummaryAttribute description]]);
if ([QTTrackHasApertureModeDimensionsAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackHasApertureModeDimensionsAttribute forKey:@"QTTrackHasApertureModeDimensionsAttribute"]; else NSLog([@"Can't initialize QTTrackHasApertureModeDimensionsAttribute with object " stringByAppendingString:[QTTrackHasApertureModeDimensionsAttribute description]]);
if ([QTTrackIDAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackIDAttribute forKey:@"QTTrackIDAttribute"]; else NSLog([@"Can't initialize QTTrackIDAttribute with object " stringByAppendingString:[QTTrackIDAttribute description]]);
if ([QTTrackIsChapterTrackAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackIsChapterTrackAttribute forKey:@"QTTrackIsChapterTrackAttribute"]; else NSLog([@"Can't initialize QTTrackIsChapterTrackAttribute with object " stringByAppendingString:[QTTrackIsChapterTrackAttribute description]]);
if ([QTTrackLayerAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackLayerAttribute forKey:@"QTTrackLayerAttribute"]; else NSLog([@"Can't initialize QTTrackLayerAttribute with object " stringByAppendingString:[QTTrackLayerAttribute description]]);
if ([QTTrackMediaTypeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackMediaTypeAttribute forKey:@"QTTrackMediaTypeAttribute"]; else NSLog([@"Can't initialize QTTrackMediaTypeAttribute with object " stringByAppendingString:[QTTrackMediaTypeAttribute description]]);
if ([QTTrackModificationTimeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackModificationTimeAttribute forKey:@"QTTrackModificationTimeAttribute"]; else NSLog([@"Can't initialize QTTrackModificationTimeAttribute with object " stringByAppendingString:[QTTrackModificationTimeAttribute description]]);
if ([QTTrackRangeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackRangeAttribute forKey:@"QTTrackRangeAttribute"]; else NSLog([@"Can't initialize QTTrackRangeAttribute with object " stringByAppendingString:[QTTrackRangeAttribute description]]);
if ([QTTrackTimeScaleAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackTimeScaleAttribute forKey:@"QTTrackTimeScaleAttribute"]; else NSLog([@"Can't initialize QTTrackTimeScaleAttribute with object " stringByAppendingString:[QTTrackTimeScaleAttribute description]]);
if ([QTTrackUsageInMovieAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackUsageInMovieAttribute forKey:@"QTTrackUsageInMovieAttribute"]; else NSLog([@"Can't initialize QTTrackUsageInMovieAttribute with object " stringByAppendingString:[QTTrackUsageInMovieAttribute description]]);
if ([QTTrackUsageInPosterAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackUsageInPosterAttribute forKey:@"QTTrackUsageInPosterAttribute"]; else NSLog([@"Can't initialize QTTrackUsageInPosterAttribute with object " stringByAppendingString:[QTTrackUsageInPosterAttribute description]]);
if ([QTTrackUsageInPreviewAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackUsageInPreviewAttribute forKey:@"QTTrackUsageInPreviewAttribute"]; else NSLog([@"Can't initialize QTTrackUsageInPreviewAttribute with object " stringByAppendingString:[QTTrackUsageInPreviewAttribute description]]);
if ([QTTrackVolumeAttribute isKindOfClass:[NSString class]]) [d setObject:QTTrackVolumeAttribute forKey:@"QTTrackVolumeAttribute"]; else NSLog([@"Can't initialize QTTrackVolumeAttribute with object " stringByAppendingString:[QTTrackVolumeAttribute description]]);
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_4] forKey:@"MAC_OS_X_VERSION_10_4"];
[d setObject:[Number numberWithDouble:MAC_OS_X_VERSION_10_5] forKey:@"MAC_OS_X_VERSION_10_5"];
[d setObject:[Number numberWithDouble:NSINTEGER_DEFINED] forKey:@"NSINTEGER_DEFINED"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastestForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastestForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsFastestReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsFastestReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsNormalForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsNormalForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsNormalReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsNormalReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsNotPlayingMode] forKey:@"QTCaptureDeviceAVCTransportControlsNotPlayingMode"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsPlayingMode] forKey:@"QTCaptureDeviceAVCTransportControlsPlayingMode"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowestForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowestForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsSlowestReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsSlowestReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsStoppedSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsStoppedSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVeryFastForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVeryFastForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVeryFastReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVeryFastReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVerySlowForwardSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVerySlowForwardSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureDeviceAVCTransportControlsVerySlowReverseSpeed] forKey:@"QTCaptureDeviceAVCTransportControlsVerySlowReverseSpeed"];
[d setObject:[Number numberWithDouble:QTCaptureFileOutputBufferDestinationNewFile] forKey:@"QTCaptureFileOutputBufferDestinationNewFile"];
[d setObject:[Number numberWithDouble:QTCaptureFileOutputBufferDestinationOldFile] forKey:@"QTCaptureFileOutputBufferDestinationOldFile"];
[d setObject:[Number numberWithDouble:QTErrorDeviceAlreadyUsedbyAnotherSession] forKey:@"QTErrorDeviceAlreadyUsedbyAnotherSession"];
[d setObject:[Number numberWithDouble:QTErrorDeviceExcludedByAnotherDevice] forKey:@"QTErrorDeviceExcludedByAnotherDevice"];
[d setObject:[Number numberWithDouble:QTErrorDeviceInUseByAnotherApplication] forKey:@"QTErrorDeviceInUseByAnotherApplication"];
[d setObject:[Number numberWithDouble:QTErrorDeviceNotConnected] forKey:@"QTErrorDeviceNotConnected"];
[d setObject:[Number numberWithDouble:QTErrorDeviceWasDisconnected] forKey:@"QTErrorDeviceWasDisconnected"];
[d setObject:[Number numberWithDouble:QTErrorDiskFull] forKey:@"QTErrorDiskFull"];
[d setObject:[Number numberWithDouble:QTErrorIncompatibleInput] forKey:@"QTErrorIncompatibleInput"];
[d setObject:[Number numberWithDouble:QTErrorIncompatibleOutput] forKey:@"QTErrorIncompatibleOutput"];
[d setObject:[Number numberWithDouble:QTErrorInvalidInputsOrOutputs] forKey:@"QTErrorInvalidInputsOrOutputs"];
[d setObject:[Number numberWithDouble:QTErrorMaximumDurationReached] forKey:@"QTErrorMaximumDurationReached"];
[d setObject:[Number numberWithDouble:QTErrorMaximumFileSizeReached] forKey:@"QTErrorMaximumFileSizeReached"];
[d setObject:[Number numberWithDouble:QTErrorMediaChanged] forKey:@"QTErrorMediaChanged"];
[d setObject:[Number numberWithDouble:QTErrorMediaDiscontinuity] forKey:@"QTErrorMediaDiscontinuity"];
[d setObject:[Number numberWithDouble:QTErrorNoDataCaptured] forKey:@"QTErrorNoDataCaptured"];
[d setObject:[Number numberWithDouble:QTErrorSessionConfigurationChanged] forKey:@"QTErrorSessionConfigurationChanged"];
[d setObject:[Number numberWithDouble:QTErrorUnknown] forKey:@"QTErrorUnknown"];
[d setObject:[Number numberWithDouble:QTIncludeAggressiveTypes] forKey:@"QTIncludeAggressiveTypes"];
[d setObject:[Number numberWithDouble:QTIncludeAllTypes] forKey:@"QTIncludeAllTypes"];
[d setObject:[Number numberWithDouble:QTIncludeCommonTypes] forKey:@"QTIncludeCommonTypes"];
[d setObject:[Number numberWithDouble:QTIncludeDynamicTypes] forKey:@"QTIncludeDynamicTypes"];
[d setObject:[Number numberWithDouble:QTIncludeStillImageTypes] forKey:@"QTIncludeStillImageTypes"];
[d setObject:[Number numberWithDouble:QTIncludeTranslatableTypes] forKey:@"QTIncludeTranslatableTypes"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_7_0] forKey:@"QTKIT_VERSION_7_0"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_7_2] forKey:@"QTKIT_VERSION_7_2"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_MAX_ALLOWED] forKey:@"QTKIT_VERSION_MAX_ALLOWED"];
[d setObject:[Number numberWithDouble:QTKIT_VERSION_MIN_REQUIRED] forKey:@"QTKIT_VERSION_MIN_REQUIRED"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateComplete] forKey:@"QTMovieLoadStateComplete"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateError] forKey:@"QTMovieLoadStateError"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateLoaded] forKey:@"QTMovieLoadStateLoaded"];
[d setObject:[Number numberWithDouble:QTMovieLoadStateLoading] forKey:@"QTMovieLoadStateLoading"];
[d setObject:[Number numberWithDouble:QTMovieLoadStatePlayable] forKey:@"QTMovieLoadStatePlayable"];
[d setObject:[Number numberWithDouble:QTMovieLoadStatePlaythroughOK] forKey:@"QTMovieLoadStatePlaythroughOK"];
[d setObject:[Number numberWithDouble:QTMovieOperationBeginPhase] forKey:@"QTMovieOperationBeginPhase"];
[d setObject:[Number numberWithDouble:QTMovieOperationEndPhase] forKey:@"QTMovieOperationEndPhase"];
[d setObject:[Number numberWithDouble:QTMovieOperationUpdatePercentPhase] forKey:@"QTMovieOperationUpdatePercentPhase"];
[d setObject:[Number numberWithDouble:QTSampleBufferAudioBufferListOptionAssure16ByteAlignment] forKey:@"QTSampleBufferAudioBufferListOptionAssure16ByteAlignment"];
[d setObject:[Number numberWithDouble:kQTTimeIsIndefinite] forKey:@"kQTTimeIsIndefinite"];
if ([IKFilterBrowserDefaultInputImage isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserDefaultInputImage forKey:@"IKFilterBrowserDefaultInputImage"]; else NSLog([@"Can't initialize IKFilterBrowserDefaultInputImage with object " stringByAppendingString:[IKFilterBrowserDefaultInputImage description]]);
if ([IKFilterBrowserExcludeCategories isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserExcludeCategories forKey:@"IKFilterBrowserExcludeCategories"]; else NSLog([@"Can't initialize IKFilterBrowserExcludeCategories with object " stringByAppendingString:[IKFilterBrowserExcludeCategories description]]);
if ([IKFilterBrowserExcludeFilters isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserExcludeFilters forKey:@"IKFilterBrowserExcludeFilters"]; else NSLog([@"Can't initialize IKFilterBrowserExcludeFilters with object " stringByAppendingString:[IKFilterBrowserExcludeFilters description]]);
if ([IKFilterBrowserFilterDoubleClickNotification isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserFilterDoubleClickNotification forKey:@"IKFilterBrowserFilterDoubleClickNotification"]; else NSLog([@"Can't initialize IKFilterBrowserFilterDoubleClickNotification with object " stringByAppendingString:[IKFilterBrowserFilterDoubleClickNotification description]]);
if ([IKFilterBrowserFilterSelectedNotification isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserFilterSelectedNotification forKey:@"IKFilterBrowserFilterSelectedNotification"]; else NSLog([@"Can't initialize IKFilterBrowserFilterSelectedNotification with object " stringByAppendingString:[IKFilterBrowserFilterSelectedNotification description]]);
if ([IKFilterBrowserShowCategories isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserShowCategories forKey:@"IKFilterBrowserShowCategories"]; else NSLog([@"Can't initialize IKFilterBrowserShowCategories with object " stringByAppendingString:[IKFilterBrowserShowCategories description]]);
if ([IKFilterBrowserShowPreview isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserShowPreview forKey:@"IKFilterBrowserShowPreview"]; else NSLog([@"Can't initialize IKFilterBrowserShowPreview with object " stringByAppendingString:[IKFilterBrowserShowPreview description]]);
if ([IKFilterBrowserWillPreviewFilterNotification isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserWillPreviewFilterNotification forKey:@"IKFilterBrowserWillPreviewFilterNotification"]; else NSLog([@"Can't initialize IKFilterBrowserWillPreviewFilterNotification with object " stringByAppendingString:[IKFilterBrowserWillPreviewFilterNotification description]]);
if ([IKImageBrowserBackgroundColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserBackgroundColorKey forKey:@"IKImageBrowserBackgroundColorKey"]; else NSLog([@"Can't initialize IKImageBrowserBackgroundColorKey with object " stringByAppendingString:[IKImageBrowserBackgroundColorKey description]]);
if ([IKImageBrowserCGImageRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCGImageRepresentationType forKey:@"IKImageBrowserCGImageRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserCGImageRepresentationType with object " stringByAppendingString:[IKImageBrowserCGImageRepresentationType description]]);
if ([IKImageBrowserCGImageSourceRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCGImageSourceRepresentationType forKey:@"IKImageBrowserCGImageSourceRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserCGImageSourceRepresentationType with object " stringByAppendingString:[IKImageBrowserCGImageSourceRepresentationType description]]);
if ([IKImageBrowserCellsHighlightedTitleAttributesKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsHighlightedTitleAttributesKey forKey:@"IKImageBrowserCellsHighlightedTitleAttributesKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsHighlightedTitleAttributesKey with object " stringByAppendingString:[IKImageBrowserCellsHighlightedTitleAttributesKey description]]);
if ([IKImageBrowserCellsOutlineColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsOutlineColorKey forKey:@"IKImageBrowserCellsOutlineColorKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsOutlineColorKey with object " stringByAppendingString:[IKImageBrowserCellsOutlineColorKey description]]);
if ([IKImageBrowserCellsSubtitleAttributesKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsSubtitleAttributesKey forKey:@"IKImageBrowserCellsSubtitleAttributesKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsSubtitleAttributesKey with object " stringByAppendingString:[IKImageBrowserCellsSubtitleAttributesKey description]]);
if ([IKImageBrowserCellsTitleAttributesKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsTitleAttributesKey forKey:@"IKImageBrowserCellsTitleAttributesKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsTitleAttributesKey with object " stringByAppendingString:[IKImageBrowserCellsTitleAttributesKey description]]);
if ([IKImageBrowserGroupBackgroundColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupBackgroundColorKey forKey:@"IKImageBrowserGroupBackgroundColorKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupBackgroundColorKey with object " stringByAppendingString:[IKImageBrowserGroupBackgroundColorKey description]]);
if ([IKImageBrowserGroupRangeKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupRangeKey forKey:@"IKImageBrowserGroupRangeKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupRangeKey with object " stringByAppendingString:[IKImageBrowserGroupRangeKey description]]);
if ([IKImageBrowserGroupStyleKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupStyleKey forKey:@"IKImageBrowserGroupStyleKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupStyleKey with object " stringByAppendingString:[IKImageBrowserGroupStyleKey description]]);
if ([IKImageBrowserGroupTitleKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupTitleKey forKey:@"IKImageBrowserGroupTitleKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupTitleKey with object " stringByAppendingString:[IKImageBrowserGroupTitleKey description]]);
if ([IKImageBrowserIconRefPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserIconRefPathRepresentationType forKey:@"IKImageBrowserIconRefPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserIconRefPathRepresentationType with object " stringByAppendingString:[IKImageBrowserIconRefPathRepresentationType description]]);
if ([IKImageBrowserIconRefRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserIconRefRepresentationType forKey:@"IKImageBrowserIconRefRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserIconRefRepresentationType with object " stringByAppendingString:[IKImageBrowserIconRefRepresentationType description]]);
if ([IKImageBrowserNSBitmapImageRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSBitmapImageRepresentationType forKey:@"IKImageBrowserNSBitmapImageRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSBitmapImageRepresentationType with object " stringByAppendingString:[IKImageBrowserNSBitmapImageRepresentationType description]]);
if ([IKImageBrowserNSDataRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSDataRepresentationType forKey:@"IKImageBrowserNSDataRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSDataRepresentationType with object " stringByAppendingString:[IKImageBrowserNSDataRepresentationType description]]);
if ([IKImageBrowserNSImageRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSImageRepresentationType forKey:@"IKImageBrowserNSImageRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSImageRepresentationType with object " stringByAppendingString:[IKImageBrowserNSImageRepresentationType description]]);
if ([IKImageBrowserNSURLRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSURLRepresentationType forKey:@"IKImageBrowserNSURLRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSURLRepresentationType with object " stringByAppendingString:[IKImageBrowserNSURLRepresentationType description]]);
if ([IKImageBrowserPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserPathRepresentationType forKey:@"IKImageBrowserPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserPathRepresentationType with object " stringByAppendingString:[IKImageBrowserPathRepresentationType description]]);
if ([IKImageBrowserQCCompositionPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQCCompositionPathRepresentationType forKey:@"IKImageBrowserQCCompositionPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQCCompositionPathRepresentationType with object " stringByAppendingString:[IKImageBrowserQCCompositionPathRepresentationType description]]);
if ([IKImageBrowserQCCompositionRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQCCompositionRepresentationType forKey:@"IKImageBrowserQCCompositionRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQCCompositionRepresentationType with object " stringByAppendingString:[IKImageBrowserQCCompositionRepresentationType description]]);
if ([IKImageBrowserQTMoviePathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQTMoviePathRepresentationType forKey:@"IKImageBrowserQTMoviePathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQTMoviePathRepresentationType with object " stringByAppendingString:[IKImageBrowserQTMoviePathRepresentationType description]]);
if ([IKImageBrowserQTMovieRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQTMovieRepresentationType forKey:@"IKImageBrowserQTMovieRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQTMovieRepresentationType with object " stringByAppendingString:[IKImageBrowserQTMovieRepresentationType description]]);
if ([IKImageBrowserQuickLookPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQuickLookPathRepresentationType forKey:@"IKImageBrowserQuickLookPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQuickLookPathRepresentationType with object " stringByAppendingString:[IKImageBrowserQuickLookPathRepresentationType description]]);
if ([IKImageBrowserSelectionColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserSelectionColorKey forKey:@"IKImageBrowserSelectionColorKey"]; else NSLog([@"Can't initialize IKImageBrowserSelectionColorKey with object " stringByAppendingString:[IKImageBrowserSelectionColorKey description]]);
if ([IKOverlayTypeBackground isKindOfClass:[NSString class]]) [d setObject:IKOverlayTypeBackground forKey:@"IKOverlayTypeBackground"]; else NSLog([@"Can't initialize IKOverlayTypeBackground with object " stringByAppendingString:[IKOverlayTypeBackground description]]);
if ([IKOverlayTypeImage isKindOfClass:[NSString class]]) [d setObject:IKOverlayTypeImage forKey:@"IKOverlayTypeImage"]; else NSLog([@"Can't initialize IKOverlayTypeImage with object " stringByAppendingString:[IKOverlayTypeImage description]]);
if ([IKPictureTakerAllowsEditingKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerAllowsEditingKey forKey:@"IKPictureTakerAllowsEditingKey"]; else NSLog([@"Can't initialize IKPictureTakerAllowsEditingKey with object " stringByAppendingString:[IKPictureTakerAllowsEditingKey description]]);
if ([IKPictureTakerAllowsFileChoosingKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerAllowsFileChoosingKey forKey:@"IKPictureTakerAllowsFileChoosingKey"]; else NSLog([@"Can't initialize IKPictureTakerAllowsFileChoosingKey with object " stringByAppendingString:[IKPictureTakerAllowsFileChoosingKey description]]);
if ([IKPictureTakerAllowsVideoCaptureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerAllowsVideoCaptureKey forKey:@"IKPictureTakerAllowsVideoCaptureKey"]; else NSLog([@"Can't initialize IKPictureTakerAllowsVideoCaptureKey with object " stringByAppendingString:[IKPictureTakerAllowsVideoCaptureKey description]]);
if ([IKPictureTakerCropAreaSizeKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerCropAreaSizeKey forKey:@"IKPictureTakerCropAreaSizeKey"]; else NSLog([@"Can't initialize IKPictureTakerCropAreaSizeKey with object " stringByAppendingString:[IKPictureTakerCropAreaSizeKey description]]);
if ([IKPictureTakerImageTransformsKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerImageTransformsKey forKey:@"IKPictureTakerImageTransformsKey"]; else NSLog([@"Can't initialize IKPictureTakerImageTransformsKey with object " stringByAppendingString:[IKPictureTakerImageTransformsKey description]]);
if ([IKPictureTakerInformationalTextKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerInformationalTextKey forKey:@"IKPictureTakerInformationalTextKey"]; else NSLog([@"Can't initialize IKPictureTakerInformationalTextKey with object " stringByAppendingString:[IKPictureTakerInformationalTextKey description]]);
if ([IKPictureTakerOutputImageMaxSizeKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerOutputImageMaxSizeKey forKey:@"IKPictureTakerOutputImageMaxSizeKey"]; else NSLog([@"Can't initialize IKPictureTakerOutputImageMaxSizeKey with object " stringByAppendingString:[IKPictureTakerOutputImageMaxSizeKey description]]);
if ([IKPictureTakerShowAddressBookPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowAddressBookPictureKey forKey:@"IKPictureTakerShowAddressBookPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerShowAddressBookPictureKey with object " stringByAppendingString:[IKPictureTakerShowAddressBookPictureKey description]]);
if ([IKPictureTakerShowEffectsKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowEffectsKey forKey:@"IKPictureTakerShowEffectsKey"]; else NSLog([@"Can't initialize IKPictureTakerShowEffectsKey with object " stringByAppendingString:[IKPictureTakerShowEffectsKey description]]);
if ([IKPictureTakerShowEmptyPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowEmptyPictureKey forKey:@"IKPictureTakerShowEmptyPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerShowEmptyPictureKey with object " stringByAppendingString:[IKPictureTakerShowEmptyPictureKey description]]);
if ([IKPictureTakerShowRecentPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowRecentPictureKey forKey:@"IKPictureTakerShowRecentPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerShowRecentPictureKey with object " stringByAppendingString:[IKPictureTakerShowRecentPictureKey description]]);
if ([IKPictureTakerUpdateRecentPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerUpdateRecentPictureKey forKey:@"IKPictureTakerUpdateRecentPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerUpdateRecentPictureKey with object " stringByAppendingString:[IKPictureTakerUpdateRecentPictureKey description]]);
if ([IKSlideshowModeImages isKindOfClass:[NSString class]]) [d setObject:IKSlideshowModeImages forKey:@"IKSlideshowModeImages"]; else NSLog([@"Can't initialize IKSlideshowModeImages with object " stringByAppendingString:[IKSlideshowModeImages description]]);
if ([IKSlideshowModeOther isKindOfClass:[NSString class]]) [d setObject:IKSlideshowModeOther forKey:@"IKSlideshowModeOther"]; else NSLog([@"Can't initialize IKSlideshowModeOther with object " stringByAppendingString:[IKSlideshowModeOther description]]);
if ([IKSlideshowModePDF isKindOfClass:[NSString class]]) [d setObject:IKSlideshowModePDF forKey:@"IKSlideshowModePDF"]; else NSLog([@"Can't initialize IKSlideshowModePDF with object " stringByAppendingString:[IKSlideshowModePDF description]]);
if ([IKSlideshowPDFDisplayBox isKindOfClass:[NSString class]]) [d setObject:IKSlideshowPDFDisplayBox forKey:@"IKSlideshowPDFDisplayBox"]; else NSLog([@"Can't initialize IKSlideshowPDFDisplayBox with object " stringByAppendingString:[IKSlideshowPDFDisplayBox description]]);
if ([IKSlideshowPDFDisplayMode isKindOfClass:[NSString class]]) [d setObject:IKSlideshowPDFDisplayMode forKey:@"IKSlideshowPDFDisplayMode"]; else NSLog([@"Can't initialize IKSlideshowPDFDisplayMode with object " stringByAppendingString:[IKSlideshowPDFDisplayMode description]]);
if ([IKSlideshowPDFDisplaysAsBook isKindOfClass:[NSString class]]) [d setObject:IKSlideshowPDFDisplaysAsBook forKey:@"IKSlideshowPDFDisplaysAsBook"]; else NSLog([@"Can't initialize IKSlideshowPDFDisplaysAsBook with object " stringByAppendingString:[IKSlideshowPDFDisplaysAsBook description]]);
if ([IKSlideshowStartIndex isKindOfClass:[NSString class]]) [d setObject:IKSlideshowStartIndex forKey:@"IKSlideshowStartIndex"]; else NSLog([@"Can't initialize IKSlideshowStartIndex with object " stringByAppendingString:[IKSlideshowStartIndex description]]);
if ([IKSlideshowStartPaused isKindOfClass:[NSString class]]) [d setObject:IKSlideshowStartPaused forKey:@"IKSlideshowStartPaused"]; else NSLog([@"Can't initialize IKSlideshowStartPaused with object " stringByAppendingString:[IKSlideshowStartPaused description]]);
if ([IKSlideshowWrapAround isKindOfClass:[NSString class]]) [d setObject:IKSlideshowWrapAround forKey:@"IKSlideshowWrapAround"]; else NSLog([@"Can't initialize IKSlideshowWrapAround with object " stringByAppendingString:[IKSlideshowWrapAround description]]);
if ([IKToolModeAnnotate isKindOfClass:[NSString class]]) [d setObject:IKToolModeAnnotate forKey:@"IKToolModeAnnotate"]; else NSLog([@"Can't initialize IKToolModeAnnotate with object " stringByAppendingString:[IKToolModeAnnotate description]]);
if ([IKToolModeCrop isKindOfClass:[NSString class]]) [d setObject:IKToolModeCrop forKey:@"IKToolModeCrop"]; else NSLog([@"Can't initialize IKToolModeCrop with object " stringByAppendingString:[IKToolModeCrop description]]);
if ([IKToolModeMove isKindOfClass:[NSString class]]) [d setObject:IKToolModeMove forKey:@"IKToolModeMove"]; else NSLog([@"Can't initialize IKToolModeMove with object " stringByAppendingString:[IKToolModeMove description]]);
if ([IKToolModeNone isKindOfClass:[NSString class]]) [d setObject:IKToolModeNone forKey:@"IKToolModeNone"]; else NSLog([@"Can't initialize IKToolModeNone with object " stringByAppendingString:[IKToolModeNone description]]);
if ([IKToolModeRotate isKindOfClass:[NSString class]]) [d setObject:IKToolModeRotate forKey:@"IKToolModeRotate"]; else NSLog([@"Can't initialize IKToolModeRotate with object " stringByAppendingString:[IKToolModeRotate description]]);
if ([IKToolModeSelect isKindOfClass:[NSString class]]) [d setObject:IKToolModeSelect forKey:@"IKToolModeSelect"]; else NSLog([@"Can't initialize IKToolModeSelect with object " stringByAppendingString:[IKToolModeSelect description]]);
if ([IKUIFlavorAllowFallback isKindOfClass:[NSString class]]) [d setObject:IKUIFlavorAllowFallback forKey:@"IKUIFlavorAllowFallback"]; else NSLog([@"Can't initialize IKUIFlavorAllowFallback with object " stringByAppendingString:[IKUIFlavorAllowFallback description]]);
if ([IKUISizeFlavor isKindOfClass:[NSString class]]) [d setObject:IKUISizeFlavor forKey:@"IKUISizeFlavor"]; else NSLog([@"Can't initialize IKUISizeFlavor with object " stringByAppendingString:[IKUISizeFlavor description]]);
if ([IKUISizeMini isKindOfClass:[NSString class]]) [d setObject:IKUISizeMini forKey:@"IKUISizeMini"]; else NSLog([@"Can't initialize IKUISizeMini with object " stringByAppendingString:[IKUISizeMini description]]);
if ([IKUISizeRegular isKindOfClass:[NSString class]]) [d setObject:IKUISizeRegular forKey:@"IKUISizeRegular"]; else NSLog([@"Can't initialize IKUISizeRegular with object " stringByAppendingString:[IKUISizeRegular description]]);
if ([IKUISizeSmall isKindOfClass:[NSString class]]) [d setObject:IKUISizeSmall forKey:@"IKUISizeSmall"]; else NSLog([@"Can't initialize IKUISizeSmall with object " stringByAppendingString:[IKUISizeSmall description]]);
if ([IKUImaxSize isKindOfClass:[NSString class]]) [d setObject:IKUImaxSize forKey:@"IKUImaxSize"]; else NSLog([@"Can't initialize IKUImaxSize with object " stringByAppendingString:[IKUImaxSize description]]);
if ([IK_iPhotoBundleIdentifier isKindOfClass:[NSString class]]) [d setObject:IK_iPhotoBundleIdentifier forKey:@"IK_iPhotoBundleIdentifier"]; else NSLog([@"Can't initialize IK_iPhotoBundleIdentifier with object " stringByAppendingString:[IK_iPhotoBundleIdentifier description]]);
[d setObject:[Number numberWithDouble:IKCellsStyleNone] forKey:@"IKCellsStyleNone"];
[d setObject:[Number numberWithDouble:IKCellsStyleOutlined] forKey:@"IKCellsStyleOutlined"];
[d setObject:[Number numberWithDouble:IKCellsStyleShadowed] forKey:@"IKCellsStyleShadowed"];
[d setObject:[Number numberWithDouble:IKCellsStyleSubtitled] forKey:@"IKCellsStyleSubtitled"];
[d setObject:[Number numberWithDouble:IKCellsStyleTitled] forKey:@"IKCellsStyleTitled"];
[d setObject:[Number numberWithDouble:IKGroupBezelStyle] forKey:@"IKGroupBezelStyle"];
[d setObject:[Number numberWithDouble:IKGroupDisclosureStyle] forKey:@"IKGroupDisclosureStyle"];
if ([IKFilterBrowserDefaultInputImage isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserDefaultInputImage forKey:@"IKFilterBrowserDefaultInputImage"]; else NSLog([@"Can't initialize IKFilterBrowserDefaultInputImage with object " stringByAppendingString:[IKFilterBrowserDefaultInputImage description]]);
if ([IKFilterBrowserExcludeCategories isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserExcludeCategories forKey:@"IKFilterBrowserExcludeCategories"]; else NSLog([@"Can't initialize IKFilterBrowserExcludeCategories with object " stringByAppendingString:[IKFilterBrowserExcludeCategories description]]);
if ([IKFilterBrowserExcludeFilters isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserExcludeFilters forKey:@"IKFilterBrowserExcludeFilters"]; else NSLog([@"Can't initialize IKFilterBrowserExcludeFilters with object " stringByAppendingString:[IKFilterBrowserExcludeFilters description]]);
if ([IKFilterBrowserFilterDoubleClickNotification isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserFilterDoubleClickNotification forKey:@"IKFilterBrowserFilterDoubleClickNotification"]; else NSLog([@"Can't initialize IKFilterBrowserFilterDoubleClickNotification with object " stringByAppendingString:[IKFilterBrowserFilterDoubleClickNotification description]]);
if ([IKFilterBrowserFilterSelectedNotification isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserFilterSelectedNotification forKey:@"IKFilterBrowserFilterSelectedNotification"]; else NSLog([@"Can't initialize IKFilterBrowserFilterSelectedNotification with object " stringByAppendingString:[IKFilterBrowserFilterSelectedNotification description]]);
if ([IKFilterBrowserShowCategories isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserShowCategories forKey:@"IKFilterBrowserShowCategories"]; else NSLog([@"Can't initialize IKFilterBrowserShowCategories with object " stringByAppendingString:[IKFilterBrowserShowCategories description]]);
if ([IKFilterBrowserShowPreview isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserShowPreview forKey:@"IKFilterBrowserShowPreview"]; else NSLog([@"Can't initialize IKFilterBrowserShowPreview with object " stringByAppendingString:[IKFilterBrowserShowPreview description]]);
if ([IKFilterBrowserWillPreviewFilterNotification isKindOfClass:[NSString class]]) [d setObject:IKFilterBrowserWillPreviewFilterNotification forKey:@"IKFilterBrowserWillPreviewFilterNotification"]; else NSLog([@"Can't initialize IKFilterBrowserWillPreviewFilterNotification with object " stringByAppendingString:[IKFilterBrowserWillPreviewFilterNotification description]]);
if ([IKImageBrowserBackgroundColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserBackgroundColorKey forKey:@"IKImageBrowserBackgroundColorKey"]; else NSLog([@"Can't initialize IKImageBrowserBackgroundColorKey with object " stringByAppendingString:[IKImageBrowserBackgroundColorKey description]]);
if ([IKImageBrowserCGImageRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCGImageRepresentationType forKey:@"IKImageBrowserCGImageRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserCGImageRepresentationType with object " stringByAppendingString:[IKImageBrowserCGImageRepresentationType description]]);
if ([IKImageBrowserCGImageSourceRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCGImageSourceRepresentationType forKey:@"IKImageBrowserCGImageSourceRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserCGImageSourceRepresentationType with object " stringByAppendingString:[IKImageBrowserCGImageSourceRepresentationType description]]);
if ([IKImageBrowserCellsHighlightedTitleAttributesKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsHighlightedTitleAttributesKey forKey:@"IKImageBrowserCellsHighlightedTitleAttributesKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsHighlightedTitleAttributesKey with object " stringByAppendingString:[IKImageBrowserCellsHighlightedTitleAttributesKey description]]);
if ([IKImageBrowserCellsOutlineColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsOutlineColorKey forKey:@"IKImageBrowserCellsOutlineColorKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsOutlineColorKey with object " stringByAppendingString:[IKImageBrowserCellsOutlineColorKey description]]);
if ([IKImageBrowserCellsSubtitleAttributesKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsSubtitleAttributesKey forKey:@"IKImageBrowserCellsSubtitleAttributesKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsSubtitleAttributesKey with object " stringByAppendingString:[IKImageBrowserCellsSubtitleAttributesKey description]]);
if ([IKImageBrowserCellsTitleAttributesKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserCellsTitleAttributesKey forKey:@"IKImageBrowserCellsTitleAttributesKey"]; else NSLog([@"Can't initialize IKImageBrowserCellsTitleAttributesKey with object " stringByAppendingString:[IKImageBrowserCellsTitleAttributesKey description]]);
if ([IKImageBrowserGroupBackgroundColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupBackgroundColorKey forKey:@"IKImageBrowserGroupBackgroundColorKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupBackgroundColorKey with object " stringByAppendingString:[IKImageBrowserGroupBackgroundColorKey description]]);
if ([IKImageBrowserGroupRangeKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupRangeKey forKey:@"IKImageBrowserGroupRangeKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupRangeKey with object " stringByAppendingString:[IKImageBrowserGroupRangeKey description]]);
if ([IKImageBrowserGroupStyleKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupStyleKey forKey:@"IKImageBrowserGroupStyleKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupStyleKey with object " stringByAppendingString:[IKImageBrowserGroupStyleKey description]]);
if ([IKImageBrowserGroupTitleKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserGroupTitleKey forKey:@"IKImageBrowserGroupTitleKey"]; else NSLog([@"Can't initialize IKImageBrowserGroupTitleKey with object " stringByAppendingString:[IKImageBrowserGroupTitleKey description]]);
if ([IKImageBrowserIconRefPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserIconRefPathRepresentationType forKey:@"IKImageBrowserIconRefPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserIconRefPathRepresentationType with object " stringByAppendingString:[IKImageBrowserIconRefPathRepresentationType description]]);
if ([IKImageBrowserIconRefRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserIconRefRepresentationType forKey:@"IKImageBrowserIconRefRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserIconRefRepresentationType with object " stringByAppendingString:[IKImageBrowserIconRefRepresentationType description]]);
if ([IKImageBrowserNSBitmapImageRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSBitmapImageRepresentationType forKey:@"IKImageBrowserNSBitmapImageRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSBitmapImageRepresentationType with object " stringByAppendingString:[IKImageBrowserNSBitmapImageRepresentationType description]]);
if ([IKImageBrowserNSDataRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSDataRepresentationType forKey:@"IKImageBrowserNSDataRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSDataRepresentationType with object " stringByAppendingString:[IKImageBrowserNSDataRepresentationType description]]);
if ([IKImageBrowserNSImageRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSImageRepresentationType forKey:@"IKImageBrowserNSImageRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSImageRepresentationType with object " stringByAppendingString:[IKImageBrowserNSImageRepresentationType description]]);
if ([IKImageBrowserNSURLRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserNSURLRepresentationType forKey:@"IKImageBrowserNSURLRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserNSURLRepresentationType with object " stringByAppendingString:[IKImageBrowserNSURLRepresentationType description]]);
if ([IKImageBrowserPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserPathRepresentationType forKey:@"IKImageBrowserPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserPathRepresentationType with object " stringByAppendingString:[IKImageBrowserPathRepresentationType description]]);
if ([IKImageBrowserQCCompositionPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQCCompositionPathRepresentationType forKey:@"IKImageBrowserQCCompositionPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQCCompositionPathRepresentationType with object " stringByAppendingString:[IKImageBrowserQCCompositionPathRepresentationType description]]);
if ([IKImageBrowserQCCompositionRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQCCompositionRepresentationType forKey:@"IKImageBrowserQCCompositionRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQCCompositionRepresentationType with object " stringByAppendingString:[IKImageBrowserQCCompositionRepresentationType description]]);
if ([IKImageBrowserQTMoviePathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQTMoviePathRepresentationType forKey:@"IKImageBrowserQTMoviePathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQTMoviePathRepresentationType with object " stringByAppendingString:[IKImageBrowserQTMoviePathRepresentationType description]]);
if ([IKImageBrowserQTMovieRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQTMovieRepresentationType forKey:@"IKImageBrowserQTMovieRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQTMovieRepresentationType with object " stringByAppendingString:[IKImageBrowserQTMovieRepresentationType description]]);
if ([IKImageBrowserQuickLookPathRepresentationType isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserQuickLookPathRepresentationType forKey:@"IKImageBrowserQuickLookPathRepresentationType"]; else NSLog([@"Can't initialize IKImageBrowserQuickLookPathRepresentationType with object " stringByAppendingString:[IKImageBrowserQuickLookPathRepresentationType description]]);
if ([IKImageBrowserSelectionColorKey isKindOfClass:[NSString class]]) [d setObject:IKImageBrowserSelectionColorKey forKey:@"IKImageBrowserSelectionColorKey"]; else NSLog([@"Can't initialize IKImageBrowserSelectionColorKey with object " stringByAppendingString:[IKImageBrowserSelectionColorKey description]]);
if ([IKOverlayTypeBackground isKindOfClass:[NSString class]]) [d setObject:IKOverlayTypeBackground forKey:@"IKOverlayTypeBackground"]; else NSLog([@"Can't initialize IKOverlayTypeBackground with object " stringByAppendingString:[IKOverlayTypeBackground description]]);
if ([IKOverlayTypeImage isKindOfClass:[NSString class]]) [d setObject:IKOverlayTypeImage forKey:@"IKOverlayTypeImage"]; else NSLog([@"Can't initialize IKOverlayTypeImage with object " stringByAppendingString:[IKOverlayTypeImage description]]);
if ([IKPictureTakerAllowsEditingKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerAllowsEditingKey forKey:@"IKPictureTakerAllowsEditingKey"]; else NSLog([@"Can't initialize IKPictureTakerAllowsEditingKey with object " stringByAppendingString:[IKPictureTakerAllowsEditingKey description]]);
if ([IKPictureTakerAllowsFileChoosingKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerAllowsFileChoosingKey forKey:@"IKPictureTakerAllowsFileChoosingKey"]; else NSLog([@"Can't initialize IKPictureTakerAllowsFileChoosingKey with object " stringByAppendingString:[IKPictureTakerAllowsFileChoosingKey description]]);
if ([IKPictureTakerAllowsVideoCaptureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerAllowsVideoCaptureKey forKey:@"IKPictureTakerAllowsVideoCaptureKey"]; else NSLog([@"Can't initialize IKPictureTakerAllowsVideoCaptureKey with object " stringByAppendingString:[IKPictureTakerAllowsVideoCaptureKey description]]);
if ([IKPictureTakerCropAreaSizeKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerCropAreaSizeKey forKey:@"IKPictureTakerCropAreaSizeKey"]; else NSLog([@"Can't initialize IKPictureTakerCropAreaSizeKey with object " stringByAppendingString:[IKPictureTakerCropAreaSizeKey description]]);
if ([IKPictureTakerImageTransformsKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerImageTransformsKey forKey:@"IKPictureTakerImageTransformsKey"]; else NSLog([@"Can't initialize IKPictureTakerImageTransformsKey with object " stringByAppendingString:[IKPictureTakerImageTransformsKey description]]);
if ([IKPictureTakerInformationalTextKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerInformationalTextKey forKey:@"IKPictureTakerInformationalTextKey"]; else NSLog([@"Can't initialize IKPictureTakerInformationalTextKey with object " stringByAppendingString:[IKPictureTakerInformationalTextKey description]]);
if ([IKPictureTakerOutputImageMaxSizeKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerOutputImageMaxSizeKey forKey:@"IKPictureTakerOutputImageMaxSizeKey"]; else NSLog([@"Can't initialize IKPictureTakerOutputImageMaxSizeKey with object " stringByAppendingString:[IKPictureTakerOutputImageMaxSizeKey description]]);
if ([IKPictureTakerShowAddressBookPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowAddressBookPictureKey forKey:@"IKPictureTakerShowAddressBookPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerShowAddressBookPictureKey with object " stringByAppendingString:[IKPictureTakerShowAddressBookPictureKey description]]);
if ([IKPictureTakerShowEffectsKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowEffectsKey forKey:@"IKPictureTakerShowEffectsKey"]; else NSLog([@"Can't initialize IKPictureTakerShowEffectsKey with object " stringByAppendingString:[IKPictureTakerShowEffectsKey description]]);
if ([IKPictureTakerShowEmptyPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowEmptyPictureKey forKey:@"IKPictureTakerShowEmptyPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerShowEmptyPictureKey with object " stringByAppendingString:[IKPictureTakerShowEmptyPictureKey description]]);
if ([IKPictureTakerShowRecentPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerShowRecentPictureKey forKey:@"IKPictureTakerShowRecentPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerShowRecentPictureKey with object " stringByAppendingString:[IKPictureTakerShowRecentPictureKey description]]);
if ([IKPictureTakerUpdateRecentPictureKey isKindOfClass:[NSString class]]) [d setObject:IKPictureTakerUpdateRecentPictureKey forKey:@"IKPictureTakerUpdateRecentPictureKey"]; else NSLog([@"Can't initialize IKPictureTakerUpdateRecentPictureKey with object " stringByAppendingString:[IKPictureTakerUpdateRecentPictureKey description]]);
if ([IKSlideshowModeImages isKindOfClass:[NSString class]]) [d setObject:IKSlideshowModeImages forKey:@"IKSlideshowModeImages"]; else NSLog([@"Can't initialize IKSlideshowModeImages with object " stringByAppendingString:[IKSlideshowModeImages description]]);
if ([IKSlideshowModeOther isKindOfClass:[NSString class]]) [d setObject:IKSlideshowModeOther forKey:@"IKSlideshowModeOther"]; else NSLog([@"Can't initialize IKSlideshowModeOther with object " stringByAppendingString:[IKSlideshowModeOther description]]);
if ([IKSlideshowModePDF isKindOfClass:[NSString class]]) [d setObject:IKSlideshowModePDF forKey:@"IKSlideshowModePDF"]; else NSLog([@"Can't initialize IKSlideshowModePDF with object " stringByAppendingString:[IKSlideshowModePDF description]]);
if ([IKSlideshowPDFDisplayBox isKindOfClass:[NSString class]]) [d setObject:IKSlideshowPDFDisplayBox forKey:@"IKSlideshowPDFDisplayBox"]; else NSLog([@"Can't initialize IKSlideshowPDFDisplayBox with object " stringByAppendingString:[IKSlideshowPDFDisplayBox description]]);
if ([IKSlideshowPDFDisplayMode isKindOfClass:[NSString class]]) [d setObject:IKSlideshowPDFDisplayMode forKey:@"IKSlideshowPDFDisplayMode"]; else NSLog([@"Can't initialize IKSlideshowPDFDisplayMode with object " stringByAppendingString:[IKSlideshowPDFDisplayMode description]]);
if ([IKSlideshowPDFDisplaysAsBook isKindOfClass:[NSString class]]) [d setObject:IKSlideshowPDFDisplaysAsBook forKey:@"IKSlideshowPDFDisplaysAsBook"]; else NSLog([@"Can't initialize IKSlideshowPDFDisplaysAsBook with object " stringByAppendingString:[IKSlideshowPDFDisplaysAsBook description]]);
if ([IKSlideshowStartIndex isKindOfClass:[NSString class]]) [d setObject:IKSlideshowStartIndex forKey:@"IKSlideshowStartIndex"]; else NSLog([@"Can't initialize IKSlideshowStartIndex with object " stringByAppendingString:[IKSlideshowStartIndex description]]);
if ([IKSlideshowStartPaused isKindOfClass:[NSString class]]) [d setObject:IKSlideshowStartPaused forKey:@"IKSlideshowStartPaused"]; else NSLog([@"Can't initialize IKSlideshowStartPaused with object " stringByAppendingString:[IKSlideshowStartPaused description]]);
if ([IKSlideshowWrapAround isKindOfClass:[NSString class]]) [d setObject:IKSlideshowWrapAround forKey:@"IKSlideshowWrapAround"]; else NSLog([@"Can't initialize IKSlideshowWrapAround with object " stringByAppendingString:[IKSlideshowWrapAround description]]);
if ([IKToolModeAnnotate isKindOfClass:[NSString class]]) [d setObject:IKToolModeAnnotate forKey:@"IKToolModeAnnotate"]; else NSLog([@"Can't initialize IKToolModeAnnotate with object " stringByAppendingString:[IKToolModeAnnotate description]]);
if ([IKToolModeCrop isKindOfClass:[NSString class]]) [d setObject:IKToolModeCrop forKey:@"IKToolModeCrop"]; else NSLog([@"Can't initialize IKToolModeCrop with object " stringByAppendingString:[IKToolModeCrop description]]);
if ([IKToolModeMove isKindOfClass:[NSString class]]) [d setObject:IKToolModeMove forKey:@"IKToolModeMove"]; else NSLog([@"Can't initialize IKToolModeMove with object " stringByAppendingString:[IKToolModeMove description]]);
if ([IKToolModeNone isKindOfClass:[NSString class]]) [d setObject:IKToolModeNone forKey:@"IKToolModeNone"]; else NSLog([@"Can't initialize IKToolModeNone with object " stringByAppendingString:[IKToolModeNone description]]);
if ([IKToolModeRotate isKindOfClass:[NSString class]]) [d setObject:IKToolModeRotate forKey:@"IKToolModeRotate"]; else NSLog([@"Can't initialize IKToolModeRotate with object " stringByAppendingString:[IKToolModeRotate description]]);
if ([IKToolModeSelect isKindOfClass:[NSString class]]) [d setObject:IKToolModeSelect forKey:@"IKToolModeSelect"]; else NSLog([@"Can't initialize IKToolModeSelect with object " stringByAppendingString:[IKToolModeSelect description]]);
if ([IKUIFlavorAllowFallback isKindOfClass:[NSString class]]) [d setObject:IKUIFlavorAllowFallback forKey:@"IKUIFlavorAllowFallback"]; else NSLog([@"Can't initialize IKUIFlavorAllowFallback with object " stringByAppendingString:[IKUIFlavorAllowFallback description]]);
if ([IKUISizeFlavor isKindOfClass:[NSString class]]) [d setObject:IKUISizeFlavor forKey:@"IKUISizeFlavor"]; else NSLog([@"Can't initialize IKUISizeFlavor with object " stringByAppendingString:[IKUISizeFlavor description]]);
if ([IKUISizeMini isKindOfClass:[NSString class]]) [d setObject:IKUISizeMini forKey:@"IKUISizeMini"]; else NSLog([@"Can't initialize IKUISizeMini with object " stringByAppendingString:[IKUISizeMini description]]);
if ([IKUISizeRegular isKindOfClass:[NSString class]]) [d setObject:IKUISizeRegular forKey:@"IKUISizeRegular"]; else NSLog([@"Can't initialize IKUISizeRegular with object " stringByAppendingString:[IKUISizeRegular description]]);
if ([IKUISizeSmall isKindOfClass:[NSString class]]) [d setObject:IKUISizeSmall forKey:@"IKUISizeSmall"]; else NSLog([@"Can't initialize IKUISizeSmall with object " stringByAppendingString:[IKUISizeSmall description]]);
if ([IKUImaxSize isKindOfClass:[NSString class]]) [d setObject:IKUImaxSize forKey:@"IKUImaxSize"]; else NSLog([@"Can't initialize IKUImaxSize with object " stringByAppendingString:[IKUImaxSize description]]);
if ([IK_iPhotoBundleIdentifier isKindOfClass:[NSString class]]) [d setObject:IK_iPhotoBundleIdentifier forKey:@"IK_iPhotoBundleIdentifier"]; else NSLog([@"Can't initialize IK_iPhotoBundleIdentifier with object " stringByAppendingString:[IK_iPhotoBundleIdentifier description]]);
[d setObject:[Number numberWithDouble:IKCellsStyleNone] forKey:@"IKCellsStyleNone"];
[d setObject:[Number numberWithDouble:IKCellsStyleOutlined] forKey:@"IKCellsStyleOutlined"];
[d setObject:[Number numberWithDouble:IKCellsStyleShadowed] forKey:@"IKCellsStyleShadowed"];
[d setObject:[Number numberWithDouble:IKCellsStyleSubtitled] forKey:@"IKCellsStyleSubtitled"];
[d setObject:[Number numberWithDouble:IKCellsStyleTitled] forKey:@"IKCellsStyleTitled"];
[d setObject:[Number numberWithDouble:IKGroupBezelStyle] forKey:@"IKGroupBezelStyle"];
[d setObject:[Number numberWithDouble:IKGroupDisclosureStyle] forKey:@"IKGroupDisclosureStyle"];
if ([PDFDocumentAuthorAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentAuthorAttribute forKey:@"PDFDocumentAuthorAttribute"]; else NSLog([@"Can't initialize PDFDocumentAuthorAttribute with object " stringByAppendingString:[PDFDocumentAuthorAttribute description]]);
if ([PDFDocumentCreationDateAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentCreationDateAttribute forKey:@"PDFDocumentCreationDateAttribute"]; else NSLog([@"Can't initialize PDFDocumentCreationDateAttribute with object " stringByAppendingString:[PDFDocumentCreationDateAttribute description]]);
if ([PDFDocumentCreatorAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentCreatorAttribute forKey:@"PDFDocumentCreatorAttribute"]; else NSLog([@"Can't initialize PDFDocumentCreatorAttribute with object " stringByAppendingString:[PDFDocumentCreatorAttribute description]]);
if ([PDFDocumentDidBeginFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginFindNotification forKey:@"PDFDocumentDidBeginFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginFindNotification with object " stringByAppendingString:[PDFDocumentDidBeginFindNotification description]]);
if ([PDFDocumentDidBeginPageFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginPageFindNotification forKey:@"PDFDocumentDidBeginPageFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginPageFindNotification with object " stringByAppendingString:[PDFDocumentDidBeginPageFindNotification description]]);
if ([PDFDocumentDidBeginPageWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginPageWriteNotification forKey:@"PDFDocumentDidBeginPageWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginPageWriteNotification with object " stringByAppendingString:[PDFDocumentDidBeginPageWriteNotification description]]);
if ([PDFDocumentDidBeginWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginWriteNotification forKey:@"PDFDocumentDidBeginWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginWriteNotification with object " stringByAppendingString:[PDFDocumentDidBeginWriteNotification description]]);
if ([PDFDocumentDidEndFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndFindNotification forKey:@"PDFDocumentDidEndFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndFindNotification with object " stringByAppendingString:[PDFDocumentDidEndFindNotification description]]);
if ([PDFDocumentDidEndPageFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndPageFindNotification forKey:@"PDFDocumentDidEndPageFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndPageFindNotification with object " stringByAppendingString:[PDFDocumentDidEndPageFindNotification description]]);
if ([PDFDocumentDidEndPageWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndPageWriteNotification forKey:@"PDFDocumentDidEndPageWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndPageWriteNotification with object " stringByAppendingString:[PDFDocumentDidEndPageWriteNotification description]]);
if ([PDFDocumentDidEndWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndWriteNotification forKey:@"PDFDocumentDidEndWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndWriteNotification with object " stringByAppendingString:[PDFDocumentDidEndWriteNotification description]]);
if ([PDFDocumentDidFindMatchNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidFindMatchNotification forKey:@"PDFDocumentDidFindMatchNotification"]; else NSLog([@"Can't initialize PDFDocumentDidFindMatchNotification with object " stringByAppendingString:[PDFDocumentDidFindMatchNotification description]]);
if ([PDFDocumentDidUnlockNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidUnlockNotification forKey:@"PDFDocumentDidUnlockNotification"]; else NSLog([@"Can't initialize PDFDocumentDidUnlockNotification with object " stringByAppendingString:[PDFDocumentDidUnlockNotification description]]);
if ([PDFDocumentKeywordsAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentKeywordsAttribute forKey:@"PDFDocumentKeywordsAttribute"]; else NSLog([@"Can't initialize PDFDocumentKeywordsAttribute with object " stringByAppendingString:[PDFDocumentKeywordsAttribute description]]);
if ([PDFDocumentModificationDateAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentModificationDateAttribute forKey:@"PDFDocumentModificationDateAttribute"]; else NSLog([@"Can't initialize PDFDocumentModificationDateAttribute with object " stringByAppendingString:[PDFDocumentModificationDateAttribute description]]);
if ([PDFDocumentProducerAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentProducerAttribute forKey:@"PDFDocumentProducerAttribute"]; else NSLog([@"Can't initialize PDFDocumentProducerAttribute with object " stringByAppendingString:[PDFDocumentProducerAttribute description]]);
if ([PDFDocumentSubjectAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentSubjectAttribute forKey:@"PDFDocumentSubjectAttribute"]; else NSLog([@"Can't initialize PDFDocumentSubjectAttribute with object " stringByAppendingString:[PDFDocumentSubjectAttribute description]]);
if ([PDFDocumentTitleAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentTitleAttribute forKey:@"PDFDocumentTitleAttribute"]; else NSLog([@"Can't initialize PDFDocumentTitleAttribute with object " stringByAppendingString:[PDFDocumentTitleAttribute description]]);
if ([PDFThumbnailViewDocumentEditedNotification isKindOfClass:[NSString class]]) [d setObject:PDFThumbnailViewDocumentEditedNotification forKey:@"PDFThumbnailViewDocumentEditedNotification"]; else NSLog([@"Can't initialize PDFThumbnailViewDocumentEditedNotification with object " stringByAppendingString:[PDFThumbnailViewDocumentEditedNotification description]]);
if ([PDFViewAnnotationHitNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewAnnotationHitNotification forKey:@"PDFViewAnnotationHitNotification"]; else NSLog([@"Can't initialize PDFViewAnnotationHitNotification with object " stringByAppendingString:[PDFViewAnnotationHitNotification description]]);
if ([PDFViewAnnotationWillHitNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewAnnotationWillHitNotification forKey:@"PDFViewAnnotationWillHitNotification"]; else NSLog([@"Can't initialize PDFViewAnnotationWillHitNotification with object " stringByAppendingString:[PDFViewAnnotationWillHitNotification description]]);
if ([PDFViewChangedHistoryNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewChangedHistoryNotification forKey:@"PDFViewChangedHistoryNotification"]; else NSLog([@"Can't initialize PDFViewChangedHistoryNotification with object " stringByAppendingString:[PDFViewChangedHistoryNotification description]]);
if ([PDFViewCopyPermissionNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewCopyPermissionNotification forKey:@"PDFViewCopyPermissionNotification"]; else NSLog([@"Can't initialize PDFViewCopyPermissionNotification with object " stringByAppendingString:[PDFViewCopyPermissionNotification description]]);
if ([PDFViewDisplayBoxChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewDisplayBoxChangedNotification forKey:@"PDFViewDisplayBoxChangedNotification"]; else NSLog([@"Can't initialize PDFViewDisplayBoxChangedNotification with object " stringByAppendingString:[PDFViewDisplayBoxChangedNotification description]]);
if ([PDFViewDisplayModeChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewDisplayModeChangedNotification forKey:@"PDFViewDisplayModeChangedNotification"]; else NSLog([@"Can't initialize PDFViewDisplayModeChangedNotification with object " stringByAppendingString:[PDFViewDisplayModeChangedNotification description]]);
if ([PDFViewDocumentChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewDocumentChangedNotification forKey:@"PDFViewDocumentChangedNotification"]; else NSLog([@"Can't initialize PDFViewDocumentChangedNotification with object " stringByAppendingString:[PDFViewDocumentChangedNotification description]]);
if ([PDFViewPageChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewPageChangedNotification forKey:@"PDFViewPageChangedNotification"]; else NSLog([@"Can't initialize PDFViewPageChangedNotification with object " stringByAppendingString:[PDFViewPageChangedNotification description]]);
if ([PDFViewPrintPermissionNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewPrintPermissionNotification forKey:@"PDFViewPrintPermissionNotification"]; else NSLog([@"Can't initialize PDFViewPrintPermissionNotification with object " stringByAppendingString:[PDFViewPrintPermissionNotification description]]);
if ([PDFViewScaleChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewScaleChangedNotification forKey:@"PDFViewScaleChangedNotification"]; else NSLog([@"Can't initialize PDFViewScaleChangedNotification with object " stringByAppendingString:[PDFViewScaleChangedNotification description]]);
if ([PDFViewSelectionChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewSelectionChangedNotification forKey:@"PDFViewSelectionChangedNotification"]; else NSLog([@"Can't initialize PDFViewSelectionChangedNotification with object " stringByAppendingString:[PDFViewSelectionChangedNotification description]]);
[d setObject:[Number numberWithDouble:kPDFActionNamedFind] forKey:@"kPDFActionNamedFind"];
[d setObject:[Number numberWithDouble:kPDFActionNamedFirstPage] forKey:@"kPDFActionNamedFirstPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedGoBack] forKey:@"kPDFActionNamedGoBack"];
[d setObject:[Number numberWithDouble:kPDFActionNamedGoForward] forKey:@"kPDFActionNamedGoForward"];
[d setObject:[Number numberWithDouble:kPDFActionNamedGoToPage] forKey:@"kPDFActionNamedGoToPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedLastPage] forKey:@"kPDFActionNamedLastPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedNextPage] forKey:@"kPDFActionNamedNextPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedNone] forKey:@"kPDFActionNamedNone"];
[d setObject:[Number numberWithDouble:kPDFActionNamedPreviousPage] forKey:@"kPDFActionNamedPreviousPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedPrint] forKey:@"kPDFActionNamedPrint"];
[d setObject:[Number numberWithDouble:kPDFActionNamedZoomIn] forKey:@"kPDFActionNamedZoomIn"];
[d setObject:[Number numberWithDouble:kPDFActionNamedZoomOut] forKey:@"kPDFActionNamedZoomOut"];
[d setObject:[Number numberWithDouble:kPDFAnnotationArea] forKey:@"kPDFAnnotationArea"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleBeveled] forKey:@"kPDFBorderStyleBeveled"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleDashed] forKey:@"kPDFBorderStyleDashed"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleInset] forKey:@"kPDFBorderStyleInset"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleSolid] forKey:@"kPDFBorderStyleSolid"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleUnderline] forKey:@"kPDFBorderStyleUnderline"];
[d setObject:[Number numberWithDouble:kPDFControlArea] forKey:@"kPDFControlArea"];
[d setObject:[Number numberWithDouble:kPDFDestinationUnspecifiedValue] forKey:@"kPDFDestinationUnspecifiedValue"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxArtBox] forKey:@"kPDFDisplayBoxArtBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxBleedBox] forKey:@"kPDFDisplayBoxBleedBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxCropBox] forKey:@"kPDFDisplayBoxCropBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxMediaBox] forKey:@"kPDFDisplayBoxMediaBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxTrimBox] forKey:@"kPDFDisplayBoxTrimBox"];
[d setObject:[Number numberWithDouble:kPDFDisplaySinglePage] forKey:@"kPDFDisplaySinglePage"];
[d setObject:[Number numberWithDouble:kPDFDisplaySinglePageContinuous] forKey:@"kPDFDisplaySinglePageContinuous"];
[d setObject:[Number numberWithDouble:kPDFDisplayTwoUp] forKey:@"kPDFDisplayTwoUp"];
[d setObject:[Number numberWithDouble:kPDFDisplayTwoUpContinuous] forKey:@"kPDFDisplayTwoUpContinuous"];
[d setObject:[Number numberWithDouble:kPDFIconArea] forKey:@"kPDFIconArea"];
[d setObject:[Number numberWithDouble:kPDFLineStyleCircle] forKey:@"kPDFLineStyleCircle"];
[d setObject:[Number numberWithDouble:kPDFLineStyleClosedArrow] forKey:@"kPDFLineStyleClosedArrow"];
[d setObject:[Number numberWithDouble:kPDFLineStyleDiamond] forKey:@"kPDFLineStyleDiamond"];
[d setObject:[Number numberWithDouble:kPDFLineStyleNone] forKey:@"kPDFLineStyleNone"];
[d setObject:[Number numberWithDouble:kPDFLineStyleOpenArrow] forKey:@"kPDFLineStyleOpenArrow"];
[d setObject:[Number numberWithDouble:kPDFLineStyleSquare] forKey:@"kPDFLineStyleSquare"];
[d setObject:[Number numberWithDouble:kPDFLinkArea] forKey:@"kPDFLinkArea"];
[d setObject:[Number numberWithDouble:kPDFMarkupTypeHighlight] forKey:@"kPDFMarkupTypeHighlight"];
[d setObject:[Number numberWithDouble:kPDFMarkupTypeStrikeOut] forKey:@"kPDFMarkupTypeStrikeOut"];
[d setObject:[Number numberWithDouble:kPDFMarkupTypeUnderline] forKey:@"kPDFMarkupTypeUnderline"];
[d setObject:[Number numberWithDouble:kPDFNoArea] forKey:@"kPDFNoArea"];
[d setObject:[Number numberWithDouble:kPDFPageArea] forKey:@"kPDFPageArea"];
[d setObject:[Number numberWithDouble:kPDFPopupArea] forKey:@"kPDFPopupArea"];
[d setObject:[Number numberWithDouble:kPDFPrintPageScaleDownToFit] forKey:@"kPDFPrintPageScaleDownToFit"];
[d setObject:[Number numberWithDouble:kPDFPrintPageScaleNone] forKey:@"kPDFPrintPageScaleNone"];
[d setObject:[Number numberWithDouble:kPDFPrintPageScaleToFit] forKey:@"kPDFPrintPageScaleToFit"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconComment] forKey:@"kPDFTextAnnotationIconComment"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconHelp] forKey:@"kPDFTextAnnotationIconHelp"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconInsert] forKey:@"kPDFTextAnnotationIconInsert"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconKey] forKey:@"kPDFTextAnnotationIconKey"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconNewParagraph] forKey:@"kPDFTextAnnotationIconNewParagraph"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconNote] forKey:@"kPDFTextAnnotationIconNote"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconParagraph] forKey:@"kPDFTextAnnotationIconParagraph"];
[d setObject:[Number numberWithDouble:kPDFTextArea] forKey:@"kPDFTextArea"];
[d setObject:[Number numberWithDouble:kPDFTextFieldArea] forKey:@"kPDFTextFieldArea"];
[d setObject:[Number numberWithDouble:kPDFWidgetCheckBoxControl] forKey:@"kPDFWidgetCheckBoxControl"];
[d setObject:[Number numberWithDouble:kPDFWidgetPushButtonControl] forKey:@"kPDFWidgetPushButtonControl"];
[d setObject:[Number numberWithDouble:kPDFWidgetRadioButtonControl] forKey:@"kPDFWidgetRadioButtonControl"];
[d setObject:[Number numberWithDouble:kPDFWidgetUnknownControl] forKey:@"kPDFWidgetUnknownControl"];
if ([PDFDocumentAuthorAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentAuthorAttribute forKey:@"PDFDocumentAuthorAttribute"]; else NSLog([@"Can't initialize PDFDocumentAuthorAttribute with object " stringByAppendingString:[PDFDocumentAuthorAttribute description]]);
if ([PDFDocumentCreationDateAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentCreationDateAttribute forKey:@"PDFDocumentCreationDateAttribute"]; else NSLog([@"Can't initialize PDFDocumentCreationDateAttribute with object " stringByAppendingString:[PDFDocumentCreationDateAttribute description]]);
if ([PDFDocumentCreatorAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentCreatorAttribute forKey:@"PDFDocumentCreatorAttribute"]; else NSLog([@"Can't initialize PDFDocumentCreatorAttribute with object " stringByAppendingString:[PDFDocumentCreatorAttribute description]]);
if ([PDFDocumentDidBeginFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginFindNotification forKey:@"PDFDocumentDidBeginFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginFindNotification with object " stringByAppendingString:[PDFDocumentDidBeginFindNotification description]]);
if ([PDFDocumentDidBeginPageFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginPageFindNotification forKey:@"PDFDocumentDidBeginPageFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginPageFindNotification with object " stringByAppendingString:[PDFDocumentDidBeginPageFindNotification description]]);
if ([PDFDocumentDidBeginPageWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginPageWriteNotification forKey:@"PDFDocumentDidBeginPageWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginPageWriteNotification with object " stringByAppendingString:[PDFDocumentDidBeginPageWriteNotification description]]);
if ([PDFDocumentDidBeginWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidBeginWriteNotification forKey:@"PDFDocumentDidBeginWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidBeginWriteNotification with object " stringByAppendingString:[PDFDocumentDidBeginWriteNotification description]]);
if ([PDFDocumentDidEndFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndFindNotification forKey:@"PDFDocumentDidEndFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndFindNotification with object " stringByAppendingString:[PDFDocumentDidEndFindNotification description]]);
if ([PDFDocumentDidEndPageFindNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndPageFindNotification forKey:@"PDFDocumentDidEndPageFindNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndPageFindNotification with object " stringByAppendingString:[PDFDocumentDidEndPageFindNotification description]]);
if ([PDFDocumentDidEndPageWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndPageWriteNotification forKey:@"PDFDocumentDidEndPageWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndPageWriteNotification with object " stringByAppendingString:[PDFDocumentDidEndPageWriteNotification description]]);
if ([PDFDocumentDidEndWriteNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidEndWriteNotification forKey:@"PDFDocumentDidEndWriteNotification"]; else NSLog([@"Can't initialize PDFDocumentDidEndWriteNotification with object " stringByAppendingString:[PDFDocumentDidEndWriteNotification description]]);
if ([PDFDocumentDidFindMatchNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidFindMatchNotification forKey:@"PDFDocumentDidFindMatchNotification"]; else NSLog([@"Can't initialize PDFDocumentDidFindMatchNotification with object " stringByAppendingString:[PDFDocumentDidFindMatchNotification description]]);
if ([PDFDocumentDidUnlockNotification isKindOfClass:[NSString class]]) [d setObject:PDFDocumentDidUnlockNotification forKey:@"PDFDocumentDidUnlockNotification"]; else NSLog([@"Can't initialize PDFDocumentDidUnlockNotification with object " stringByAppendingString:[PDFDocumentDidUnlockNotification description]]);
if ([PDFDocumentKeywordsAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentKeywordsAttribute forKey:@"PDFDocumentKeywordsAttribute"]; else NSLog([@"Can't initialize PDFDocumentKeywordsAttribute with object " stringByAppendingString:[PDFDocumentKeywordsAttribute description]]);
if ([PDFDocumentModificationDateAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentModificationDateAttribute forKey:@"PDFDocumentModificationDateAttribute"]; else NSLog([@"Can't initialize PDFDocumentModificationDateAttribute with object " stringByAppendingString:[PDFDocumentModificationDateAttribute description]]);
if ([PDFDocumentProducerAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentProducerAttribute forKey:@"PDFDocumentProducerAttribute"]; else NSLog([@"Can't initialize PDFDocumentProducerAttribute with object " stringByAppendingString:[PDFDocumentProducerAttribute description]]);
if ([PDFDocumentSubjectAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentSubjectAttribute forKey:@"PDFDocumentSubjectAttribute"]; else NSLog([@"Can't initialize PDFDocumentSubjectAttribute with object " stringByAppendingString:[PDFDocumentSubjectAttribute description]]);
if ([PDFDocumentTitleAttribute isKindOfClass:[NSString class]]) [d setObject:PDFDocumentTitleAttribute forKey:@"PDFDocumentTitleAttribute"]; else NSLog([@"Can't initialize PDFDocumentTitleAttribute with object " stringByAppendingString:[PDFDocumentTitleAttribute description]]);
if ([PDFThumbnailViewDocumentEditedNotification isKindOfClass:[NSString class]]) [d setObject:PDFThumbnailViewDocumentEditedNotification forKey:@"PDFThumbnailViewDocumentEditedNotification"]; else NSLog([@"Can't initialize PDFThumbnailViewDocumentEditedNotification with object " stringByAppendingString:[PDFThumbnailViewDocumentEditedNotification description]]);
if ([PDFViewAnnotationHitNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewAnnotationHitNotification forKey:@"PDFViewAnnotationHitNotification"]; else NSLog([@"Can't initialize PDFViewAnnotationHitNotification with object " stringByAppendingString:[PDFViewAnnotationHitNotification description]]);
if ([PDFViewAnnotationWillHitNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewAnnotationWillHitNotification forKey:@"PDFViewAnnotationWillHitNotification"]; else NSLog([@"Can't initialize PDFViewAnnotationWillHitNotification with object " stringByAppendingString:[PDFViewAnnotationWillHitNotification description]]);
if ([PDFViewChangedHistoryNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewChangedHistoryNotification forKey:@"PDFViewChangedHistoryNotification"]; else NSLog([@"Can't initialize PDFViewChangedHistoryNotification with object " stringByAppendingString:[PDFViewChangedHistoryNotification description]]);
if ([PDFViewCopyPermissionNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewCopyPermissionNotification forKey:@"PDFViewCopyPermissionNotification"]; else NSLog([@"Can't initialize PDFViewCopyPermissionNotification with object " stringByAppendingString:[PDFViewCopyPermissionNotification description]]);
if ([PDFViewDisplayBoxChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewDisplayBoxChangedNotification forKey:@"PDFViewDisplayBoxChangedNotification"]; else NSLog([@"Can't initialize PDFViewDisplayBoxChangedNotification with object " stringByAppendingString:[PDFViewDisplayBoxChangedNotification description]]);
if ([PDFViewDisplayModeChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewDisplayModeChangedNotification forKey:@"PDFViewDisplayModeChangedNotification"]; else NSLog([@"Can't initialize PDFViewDisplayModeChangedNotification with object " stringByAppendingString:[PDFViewDisplayModeChangedNotification description]]);
if ([PDFViewDocumentChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewDocumentChangedNotification forKey:@"PDFViewDocumentChangedNotification"]; else NSLog([@"Can't initialize PDFViewDocumentChangedNotification with object " stringByAppendingString:[PDFViewDocumentChangedNotification description]]);
if ([PDFViewPageChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewPageChangedNotification forKey:@"PDFViewPageChangedNotification"]; else NSLog([@"Can't initialize PDFViewPageChangedNotification with object " stringByAppendingString:[PDFViewPageChangedNotification description]]);
if ([PDFViewPrintPermissionNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewPrintPermissionNotification forKey:@"PDFViewPrintPermissionNotification"]; else NSLog([@"Can't initialize PDFViewPrintPermissionNotification with object " stringByAppendingString:[PDFViewPrintPermissionNotification description]]);
if ([PDFViewScaleChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewScaleChangedNotification forKey:@"PDFViewScaleChangedNotification"]; else NSLog([@"Can't initialize PDFViewScaleChangedNotification with object " stringByAppendingString:[PDFViewScaleChangedNotification description]]);
if ([PDFViewSelectionChangedNotification isKindOfClass:[NSString class]]) [d setObject:PDFViewSelectionChangedNotification forKey:@"PDFViewSelectionChangedNotification"]; else NSLog([@"Can't initialize PDFViewSelectionChangedNotification with object " stringByAppendingString:[PDFViewSelectionChangedNotification description]]);
[d setObject:[Number numberWithDouble:kPDFActionNamedFind] forKey:@"kPDFActionNamedFind"];
[d setObject:[Number numberWithDouble:kPDFActionNamedFirstPage] forKey:@"kPDFActionNamedFirstPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedGoBack] forKey:@"kPDFActionNamedGoBack"];
[d setObject:[Number numberWithDouble:kPDFActionNamedGoForward] forKey:@"kPDFActionNamedGoForward"];
[d setObject:[Number numberWithDouble:kPDFActionNamedGoToPage] forKey:@"kPDFActionNamedGoToPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedLastPage] forKey:@"kPDFActionNamedLastPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedNextPage] forKey:@"kPDFActionNamedNextPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedNone] forKey:@"kPDFActionNamedNone"];
[d setObject:[Number numberWithDouble:kPDFActionNamedPreviousPage] forKey:@"kPDFActionNamedPreviousPage"];
[d setObject:[Number numberWithDouble:kPDFActionNamedPrint] forKey:@"kPDFActionNamedPrint"];
[d setObject:[Number numberWithDouble:kPDFActionNamedZoomIn] forKey:@"kPDFActionNamedZoomIn"];
[d setObject:[Number numberWithDouble:kPDFActionNamedZoomOut] forKey:@"kPDFActionNamedZoomOut"];
[d setObject:[Number numberWithDouble:kPDFAnnotationArea] forKey:@"kPDFAnnotationArea"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleBeveled] forKey:@"kPDFBorderStyleBeveled"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleDashed] forKey:@"kPDFBorderStyleDashed"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleInset] forKey:@"kPDFBorderStyleInset"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleSolid] forKey:@"kPDFBorderStyleSolid"];
[d setObject:[Number numberWithDouble:kPDFBorderStyleUnderline] forKey:@"kPDFBorderStyleUnderline"];
[d setObject:[Number numberWithDouble:kPDFControlArea] forKey:@"kPDFControlArea"];
[d setObject:[Number numberWithDouble:kPDFDestinationUnspecifiedValue] forKey:@"kPDFDestinationUnspecifiedValue"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxArtBox] forKey:@"kPDFDisplayBoxArtBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxBleedBox] forKey:@"kPDFDisplayBoxBleedBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxCropBox] forKey:@"kPDFDisplayBoxCropBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxMediaBox] forKey:@"kPDFDisplayBoxMediaBox"];
[d setObject:[Number numberWithDouble:kPDFDisplayBoxTrimBox] forKey:@"kPDFDisplayBoxTrimBox"];
[d setObject:[Number numberWithDouble:kPDFDisplaySinglePage] forKey:@"kPDFDisplaySinglePage"];
[d setObject:[Number numberWithDouble:kPDFDisplaySinglePageContinuous] forKey:@"kPDFDisplaySinglePageContinuous"];
[d setObject:[Number numberWithDouble:kPDFDisplayTwoUp] forKey:@"kPDFDisplayTwoUp"];
[d setObject:[Number numberWithDouble:kPDFDisplayTwoUpContinuous] forKey:@"kPDFDisplayTwoUpContinuous"];
[d setObject:[Number numberWithDouble:kPDFIconArea] forKey:@"kPDFIconArea"];
[d setObject:[Number numberWithDouble:kPDFLineStyleCircle] forKey:@"kPDFLineStyleCircle"];
[d setObject:[Number numberWithDouble:kPDFLineStyleClosedArrow] forKey:@"kPDFLineStyleClosedArrow"];
[d setObject:[Number numberWithDouble:kPDFLineStyleDiamond] forKey:@"kPDFLineStyleDiamond"];
[d setObject:[Number numberWithDouble:kPDFLineStyleNone] forKey:@"kPDFLineStyleNone"];
[d setObject:[Number numberWithDouble:kPDFLineStyleOpenArrow] forKey:@"kPDFLineStyleOpenArrow"];
[d setObject:[Number numberWithDouble:kPDFLineStyleSquare] forKey:@"kPDFLineStyleSquare"];
[d setObject:[Number numberWithDouble:kPDFLinkArea] forKey:@"kPDFLinkArea"];
[d setObject:[Number numberWithDouble:kPDFMarkupTypeHighlight] forKey:@"kPDFMarkupTypeHighlight"];
[d setObject:[Number numberWithDouble:kPDFMarkupTypeStrikeOut] forKey:@"kPDFMarkupTypeStrikeOut"];
[d setObject:[Number numberWithDouble:kPDFMarkupTypeUnderline] forKey:@"kPDFMarkupTypeUnderline"];
[d setObject:[Number numberWithDouble:kPDFNoArea] forKey:@"kPDFNoArea"];
[d setObject:[Number numberWithDouble:kPDFPageArea] forKey:@"kPDFPageArea"];
[d setObject:[Number numberWithDouble:kPDFPopupArea] forKey:@"kPDFPopupArea"];
[d setObject:[Number numberWithDouble:kPDFPrintPageScaleDownToFit] forKey:@"kPDFPrintPageScaleDownToFit"];
[d setObject:[Number numberWithDouble:kPDFPrintPageScaleNone] forKey:@"kPDFPrintPageScaleNone"];
[d setObject:[Number numberWithDouble:kPDFPrintPageScaleToFit] forKey:@"kPDFPrintPageScaleToFit"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconComment] forKey:@"kPDFTextAnnotationIconComment"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconHelp] forKey:@"kPDFTextAnnotationIconHelp"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconInsert] forKey:@"kPDFTextAnnotationIconInsert"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconKey] forKey:@"kPDFTextAnnotationIconKey"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconNewParagraph] forKey:@"kPDFTextAnnotationIconNewParagraph"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconNote] forKey:@"kPDFTextAnnotationIconNote"];
[d setObject:[Number numberWithDouble:kPDFTextAnnotationIconParagraph] forKey:@"kPDFTextAnnotationIconParagraph"];
[d setObject:[Number numberWithDouble:kPDFTextArea] forKey:@"kPDFTextArea"];
[d setObject:[Number numberWithDouble:kPDFTextFieldArea] forKey:@"kPDFTextFieldArea"];
[d setObject:[Number numberWithDouble:kPDFWidgetCheckBoxControl] forKey:@"kPDFWidgetCheckBoxControl"];
[d setObject:[Number numberWithDouble:kPDFWidgetPushButtonControl] forKey:@"kPDFWidgetPushButtonControl"];
[d setObject:[Number numberWithDouble:kPDFWidgetRadioButtonControl] forKey:@"kPDFWidgetRadioButtonControl"];
[d setObject:[Number numberWithDouble:kPDFWidgetUnknownControl] forKey:@"kPDFWidgetUnknownControl"];
if ([QCCompositionAttributeBuiltInKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeBuiltInKey forKey:@"QCCompositionAttributeBuiltInKey"]; else NSLog([@"Can't initialize QCCompositionAttributeBuiltInKey with object " stringByAppendingString:[QCCompositionAttributeBuiltInKey description]]);
if ([QCCompositionAttributeCategoryKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeCategoryKey forKey:@"QCCompositionAttributeCategoryKey"]; else NSLog([@"Can't initialize QCCompositionAttributeCategoryKey with object " stringByAppendingString:[QCCompositionAttributeCategoryKey description]]);
if ([QCCompositionAttributeCopyrightKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeCopyrightKey forKey:@"QCCompositionAttributeCopyrightKey"]; else NSLog([@"Can't initialize QCCompositionAttributeCopyrightKey with object " stringByAppendingString:[QCCompositionAttributeCopyrightKey description]]);
if ([QCCompositionAttributeDescriptionKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeDescriptionKey forKey:@"QCCompositionAttributeDescriptionKey"]; else NSLog([@"Can't initialize QCCompositionAttributeDescriptionKey with object " stringByAppendingString:[QCCompositionAttributeDescriptionKey description]]);
if ([QCCompositionAttributeHasConsumersKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeHasConsumersKey forKey:@"QCCompositionAttributeHasConsumersKey"]; else NSLog([@"Can't initialize QCCompositionAttributeHasConsumersKey with object " stringByAppendingString:[QCCompositionAttributeHasConsumersKey description]]);
if ([QCCompositionAttributeIsTimeDependentKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeIsTimeDependentKey forKey:@"QCCompositionAttributeIsTimeDependentKey"]; else NSLog([@"Can't initialize QCCompositionAttributeIsTimeDependentKey with object " stringByAppendingString:[QCCompositionAttributeIsTimeDependentKey description]]);
if ([QCCompositionAttributeNameKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeNameKey forKey:@"QCCompositionAttributeNameKey"]; else NSLog([@"Can't initialize QCCompositionAttributeNameKey with object " stringByAppendingString:[QCCompositionAttributeNameKey description]]);
if ([QCCompositionCategoryDistortion isKindOfClass:[NSString class]]) [d setObject:QCCompositionCategoryDistortion forKey:@"QCCompositionCategoryDistortion"]; else NSLog([@"Can't initialize QCCompositionCategoryDistortion with object " stringByAppendingString:[QCCompositionCategoryDistortion description]]);
if ([QCCompositionCategoryStylize isKindOfClass:[NSString class]]) [d setObject:QCCompositionCategoryStylize forKey:@"QCCompositionCategoryStylize"]; else NSLog([@"Can't initialize QCCompositionCategoryStylize with object " stringByAppendingString:[QCCompositionCategoryStylize description]]);
if ([QCCompositionCategoryUtility isKindOfClass:[NSString class]]) [d setObject:QCCompositionCategoryUtility forKey:@"QCCompositionCategoryUtility"]; else NSLog([@"Can't initialize QCCompositionCategoryUtility with object " stringByAppendingString:[QCCompositionCategoryUtility description]]);
if ([QCCompositionInputAudioPeakKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputAudioPeakKey forKey:@"QCCompositionInputAudioPeakKey"]; else NSLog([@"Can't initialize QCCompositionInputAudioPeakKey with object " stringByAppendingString:[QCCompositionInputAudioPeakKey description]]);
if ([QCCompositionInputAudioSpectrumKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputAudioSpectrumKey forKey:@"QCCompositionInputAudioSpectrumKey"]; else NSLog([@"Can't initialize QCCompositionInputAudioSpectrumKey with object " stringByAppendingString:[QCCompositionInputAudioSpectrumKey description]]);
if ([QCCompositionInputDestinationImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputDestinationImageKey forKey:@"QCCompositionInputDestinationImageKey"]; else NSLog([@"Can't initialize QCCompositionInputDestinationImageKey with object " stringByAppendingString:[QCCompositionInputDestinationImageKey description]]);
if ([QCCompositionInputImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputImageKey forKey:@"QCCompositionInputImageKey"]; else NSLog([@"Can't initialize QCCompositionInputImageKey with object " stringByAppendingString:[QCCompositionInputImageKey description]]);
if ([QCCompositionInputPaceKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputPaceKey forKey:@"QCCompositionInputPaceKey"]; else NSLog([@"Can't initialize QCCompositionInputPaceKey with object " stringByAppendingString:[QCCompositionInputPaceKey description]]);
if ([QCCompositionInputPreviewModeKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputPreviewModeKey forKey:@"QCCompositionInputPreviewModeKey"]; else NSLog([@"Can't initialize QCCompositionInputPreviewModeKey with object " stringByAppendingString:[QCCompositionInputPreviewModeKey description]]);
if ([QCCompositionInputPrimaryColorKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputPrimaryColorKey forKey:@"QCCompositionInputPrimaryColorKey"]; else NSLog([@"Can't initialize QCCompositionInputPrimaryColorKey with object " stringByAppendingString:[QCCompositionInputPrimaryColorKey description]]);
if ([QCCompositionInputRSSArticleDurationKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputRSSArticleDurationKey forKey:@"QCCompositionInputRSSArticleDurationKey"]; else NSLog([@"Can't initialize QCCompositionInputRSSArticleDurationKey with object " stringByAppendingString:[QCCompositionInputRSSArticleDurationKey description]]);
if ([QCCompositionInputRSSFeedURLKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputRSSFeedURLKey forKey:@"QCCompositionInputRSSFeedURLKey"]; else NSLog([@"Can't initialize QCCompositionInputRSSFeedURLKey with object " stringByAppendingString:[QCCompositionInputRSSFeedURLKey description]]);
if ([QCCompositionInputScreenImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputScreenImageKey forKey:@"QCCompositionInputScreenImageKey"]; else NSLog([@"Can't initialize QCCompositionInputScreenImageKey with object " stringByAppendingString:[QCCompositionInputScreenImageKey description]]);
if ([QCCompositionInputSecondaryColorKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputSecondaryColorKey forKey:@"QCCompositionInputSecondaryColorKey"]; else NSLog([@"Can't initialize QCCompositionInputSecondaryColorKey with object " stringByAppendingString:[QCCompositionInputSecondaryColorKey description]]);
if ([QCCompositionInputSourceImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputSourceImageKey forKey:@"QCCompositionInputSourceImageKey"]; else NSLog([@"Can't initialize QCCompositionInputSourceImageKey with object " stringByAppendingString:[QCCompositionInputSourceImageKey description]]);
if ([QCCompositionInputTrackInfoKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputTrackInfoKey forKey:@"QCCompositionInputTrackInfoKey"]; else NSLog([@"Can't initialize QCCompositionInputTrackInfoKey with object " stringByAppendingString:[QCCompositionInputTrackInfoKey description]]);
if ([QCCompositionInputTrackPositionKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputTrackPositionKey forKey:@"QCCompositionInputTrackPositionKey"]; else NSLog([@"Can't initialize QCCompositionInputTrackPositionKey with object " stringByAppendingString:[QCCompositionInputTrackPositionKey description]]);
if ([QCCompositionInputTrackSignalKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputTrackSignalKey forKey:@"QCCompositionInputTrackSignalKey"]; else NSLog([@"Can't initialize QCCompositionInputTrackSignalKey with object " stringByAppendingString:[QCCompositionInputTrackSignalKey description]]);
if ([QCCompositionInputXKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputXKey forKey:@"QCCompositionInputXKey"]; else NSLog([@"Can't initialize QCCompositionInputXKey with object " stringByAppendingString:[QCCompositionInputXKey description]]);
if ([QCCompositionInputYKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputYKey forKey:@"QCCompositionInputYKey"]; else NSLog([@"Can't initialize QCCompositionInputYKey with object " stringByAppendingString:[QCCompositionInputYKey description]]);
if ([QCCompositionOutputImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionOutputImageKey forKey:@"QCCompositionOutputImageKey"]; else NSLog([@"Can't initialize QCCompositionOutputImageKey with object " stringByAppendingString:[QCCompositionOutputImageKey description]]);
if ([QCCompositionOutputWebPageURLKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionOutputWebPageURLKey forKey:@"QCCompositionOutputWebPageURLKey"]; else NSLog([@"Can't initialize QCCompositionOutputWebPageURLKey with object " stringByAppendingString:[QCCompositionOutputWebPageURLKey description]]);
if ([QCCompositionPickerPanelDidSelectCompositionNotification isKindOfClass:[NSString class]]) [d setObject:QCCompositionPickerPanelDidSelectCompositionNotification forKey:@"QCCompositionPickerPanelDidSelectCompositionNotification"]; else NSLog([@"Can't initialize QCCompositionPickerPanelDidSelectCompositionNotification with object " stringByAppendingString:[QCCompositionPickerPanelDidSelectCompositionNotification description]]);
if ([QCCompositionPickerViewDidSelectCompositionNotification isKindOfClass:[NSString class]]) [d setObject:QCCompositionPickerViewDidSelectCompositionNotification forKey:@"QCCompositionPickerViewDidSelectCompositionNotification"]; else NSLog([@"Can't initialize QCCompositionPickerViewDidSelectCompositionNotification with object " stringByAppendingString:[QCCompositionPickerViewDidSelectCompositionNotification description]]);
if ([QCCompositionProtocolGraphicAnimation isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolGraphicAnimation forKey:@"QCCompositionProtocolGraphicAnimation"]; else NSLog([@"Can't initialize QCCompositionProtocolGraphicAnimation with object " stringByAppendingString:[QCCompositionProtocolGraphicAnimation description]]);
if ([QCCompositionProtocolGraphicTransition isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolGraphicTransition forKey:@"QCCompositionProtocolGraphicTransition"]; else NSLog([@"Can't initialize QCCompositionProtocolGraphicTransition with object " stringByAppendingString:[QCCompositionProtocolGraphicTransition description]]);
if ([QCCompositionProtocolImageFilter isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolImageFilter forKey:@"QCCompositionProtocolImageFilter"]; else NSLog([@"Can't initialize QCCompositionProtocolImageFilter with object " stringByAppendingString:[QCCompositionProtocolImageFilter description]]);
if ([QCCompositionProtocolMusicVisualizer isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolMusicVisualizer forKey:@"QCCompositionProtocolMusicVisualizer"]; else NSLog([@"Can't initialize QCCompositionProtocolMusicVisualizer with object " stringByAppendingString:[QCCompositionProtocolMusicVisualizer description]]);
if ([QCCompositionProtocolRSSVisualizer isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolRSSVisualizer forKey:@"QCCompositionProtocolRSSVisualizer"]; else NSLog([@"Can't initialize QCCompositionProtocolRSSVisualizer with object " stringByAppendingString:[QCCompositionProtocolRSSVisualizer description]]);
if ([QCCompositionProtocolScreenSaver isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolScreenSaver forKey:@"QCCompositionProtocolScreenSaver"]; else NSLog([@"Can't initialize QCCompositionProtocolScreenSaver with object " stringByAppendingString:[QCCompositionProtocolScreenSaver description]]);
if ([QCCompositionRepositoryDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:QCCompositionRepositoryDidUpdateNotification forKey:@"QCCompositionRepositoryDidUpdateNotification"]; else NSLog([@"Can't initialize QCCompositionRepositoryDidUpdateNotification with object " stringByAppendingString:[QCCompositionRepositoryDidUpdateNotification description]]);
if ([QCPlugInAttributeCopyrightKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInAttributeCopyrightKey forKey:@"QCPlugInAttributeCopyrightKey"]; else NSLog([@"Can't initialize QCPlugInAttributeCopyrightKey with object " stringByAppendingString:[QCPlugInAttributeCopyrightKey description]]);
if ([QCPlugInAttributeDescriptionKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInAttributeDescriptionKey forKey:@"QCPlugInAttributeDescriptionKey"]; else NSLog([@"Can't initialize QCPlugInAttributeDescriptionKey with object " stringByAppendingString:[QCPlugInAttributeDescriptionKey description]]);
if ([QCPlugInAttributeNameKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInAttributeNameKey forKey:@"QCPlugInAttributeNameKey"]; else NSLog([@"Can't initialize QCPlugInAttributeNameKey with object " stringByAppendingString:[QCPlugInAttributeNameKey description]]);
if ([QCPlugInExecutionArgumentEventKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInExecutionArgumentEventKey forKey:@"QCPlugInExecutionArgumentEventKey"]; else NSLog([@"Can't initialize QCPlugInExecutionArgumentEventKey with object " stringByAppendingString:[QCPlugInExecutionArgumentEventKey description]]);
if ([QCPlugInExecutionArgumentMouseLocationKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInExecutionArgumentMouseLocationKey forKey:@"QCPlugInExecutionArgumentMouseLocationKey"]; else NSLog([@"Can't initialize QCPlugInExecutionArgumentMouseLocationKey with object " stringByAppendingString:[QCPlugInExecutionArgumentMouseLocationKey description]]);
if ([QCPlugInPixelFormatARGB8 isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatARGB8 forKey:@"QCPlugInPixelFormatARGB8"]; else NSLog([@"Can't initialize QCPlugInPixelFormatARGB8 with object " stringByAppendingString:[QCPlugInPixelFormatARGB8 description]]);
if ([QCPlugInPixelFormatBGRA8 isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatBGRA8 forKey:@"QCPlugInPixelFormatBGRA8"]; else NSLog([@"Can't initialize QCPlugInPixelFormatBGRA8 with object " stringByAppendingString:[QCPlugInPixelFormatBGRA8 description]]);
if ([QCPlugInPixelFormatI8 isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatI8 forKey:@"QCPlugInPixelFormatI8"]; else NSLog([@"Can't initialize QCPlugInPixelFormatI8 with object " stringByAppendingString:[QCPlugInPixelFormatI8 description]]);
if ([QCPlugInPixelFormatIf isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatIf forKey:@"QCPlugInPixelFormatIf"]; else NSLog([@"Can't initialize QCPlugInPixelFormatIf with object " stringByAppendingString:[QCPlugInPixelFormatIf description]]);
if ([QCPlugInPixelFormatRGBAf isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatRGBAf forKey:@"QCPlugInPixelFormatRGBAf"]; else NSLog([@"Can't initialize QCPlugInPixelFormatRGBAf with object " stringByAppendingString:[QCPlugInPixelFormatRGBAf description]]);
if ([QCPortAttributeDefaultValueKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeDefaultValueKey forKey:@"QCPortAttributeDefaultValueKey"]; else NSLog([@"Can't initialize QCPortAttributeDefaultValueKey with object " stringByAppendingString:[QCPortAttributeDefaultValueKey description]]);
if ([QCPortAttributeMaximumValueKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeMaximumValueKey forKey:@"QCPortAttributeMaximumValueKey"]; else NSLog([@"Can't initialize QCPortAttributeMaximumValueKey with object " stringByAppendingString:[QCPortAttributeMaximumValueKey description]]);
if ([QCPortAttributeMenuItemsKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeMenuItemsKey forKey:@"QCPortAttributeMenuItemsKey"]; else NSLog([@"Can't initialize QCPortAttributeMenuItemsKey with object " stringByAppendingString:[QCPortAttributeMenuItemsKey description]]);
if ([QCPortAttributeMinimumValueKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeMinimumValueKey forKey:@"QCPortAttributeMinimumValueKey"]; else NSLog([@"Can't initialize QCPortAttributeMinimumValueKey with object " stringByAppendingString:[QCPortAttributeMinimumValueKey description]]);
if ([QCPortAttributeNameKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeNameKey forKey:@"QCPortAttributeNameKey"]; else NSLog([@"Can't initialize QCPortAttributeNameKey with object " stringByAppendingString:[QCPortAttributeNameKey description]]);
if ([QCPortAttributeTypeKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeTypeKey forKey:@"QCPortAttributeTypeKey"]; else NSLog([@"Can't initialize QCPortAttributeTypeKey with object " stringByAppendingString:[QCPortAttributeTypeKey description]]);
if ([QCPortTypeBoolean isKindOfClass:[NSString class]]) [d setObject:QCPortTypeBoolean forKey:@"QCPortTypeBoolean"]; else NSLog([@"Can't initialize QCPortTypeBoolean with object " stringByAppendingString:[QCPortTypeBoolean description]]);
if ([QCPortTypeColor isKindOfClass:[NSString class]]) [d setObject:QCPortTypeColor forKey:@"QCPortTypeColor"]; else NSLog([@"Can't initialize QCPortTypeColor with object " stringByAppendingString:[QCPortTypeColor description]]);
if ([QCPortTypeImage isKindOfClass:[NSString class]]) [d setObject:QCPortTypeImage forKey:@"QCPortTypeImage"]; else NSLog([@"Can't initialize QCPortTypeImage with object " stringByAppendingString:[QCPortTypeImage description]]);
if ([QCPortTypeIndex isKindOfClass:[NSString class]]) [d setObject:QCPortTypeIndex forKey:@"QCPortTypeIndex"]; else NSLog([@"Can't initialize QCPortTypeIndex with object " stringByAppendingString:[QCPortTypeIndex description]]);
if ([QCPortTypeNumber isKindOfClass:[NSString class]]) [d setObject:QCPortTypeNumber forKey:@"QCPortTypeNumber"]; else NSLog([@"Can't initialize QCPortTypeNumber with object " stringByAppendingString:[QCPortTypeNumber description]]);
if ([QCPortTypeString isKindOfClass:[NSString class]]) [d setObject:QCPortTypeString forKey:@"QCPortTypeString"]; else NSLog([@"Can't initialize QCPortTypeString with object " stringByAppendingString:[QCPortTypeString description]]);
if ([QCPortTypeStructure isKindOfClass:[NSString class]]) [d setObject:QCPortTypeStructure forKey:@"QCPortTypeStructure"]; else NSLog([@"Can't initialize QCPortTypeStructure with object " stringByAppendingString:[QCPortTypeStructure description]]);
if ([QCRendererEventKey isKindOfClass:[NSString class]]) [d setObject:QCRendererEventKey forKey:@"QCRendererEventKey"]; else NSLog([@"Can't initialize QCRendererEventKey with object " stringByAppendingString:[QCRendererEventKey description]]);
if ([QCRendererMouseLocationKey isKindOfClass:[NSString class]]) [d setObject:QCRendererMouseLocationKey forKey:@"QCRendererMouseLocationKey"]; else NSLog([@"Can't initialize QCRendererMouseLocationKey with object " stringByAppendingString:[QCRendererMouseLocationKey description]]);
if ([QCViewDidStartRenderingNotification isKindOfClass:[NSString class]]) [d setObject:QCViewDidStartRenderingNotification forKey:@"QCViewDidStartRenderingNotification"]; else NSLog([@"Can't initialize QCViewDidStartRenderingNotification with object " stringByAppendingString:[QCViewDidStartRenderingNotification description]]);
if ([QCViewDidStopRenderingNotification isKindOfClass:[NSString class]]) [d setObject:QCViewDidStopRenderingNotification forKey:@"QCViewDidStopRenderingNotification"]; else NSLog([@"Can't initialize QCViewDidStopRenderingNotification with object " stringByAppendingString:[QCViewDidStopRenderingNotification description]]);
[d setObject:[Number numberWithDouble:kQCPlugInExecutionModeConsumer] forKey:@"kQCPlugInExecutionModeConsumer"];
[d setObject:[Number numberWithDouble:kQCPlugInExecutionModeProcessor] forKey:@"kQCPlugInExecutionModeProcessor"];
[d setObject:[Number numberWithDouble:kQCPlugInExecutionModeProvider] forKey:@"kQCPlugInExecutionModeProvider"];
[d setObject:[Number numberWithDouble:kQCPlugInTimeModeIdle] forKey:@"kQCPlugInTimeModeIdle"];
[d setObject:[Number numberWithDouble:kQCPlugInTimeModeNone] forKey:@"kQCPlugInTimeModeNone"];
[d setObject:[Number numberWithDouble:kQCPlugInTimeModeTimeBase] forKey:@"kQCPlugInTimeModeTimeBase"];
if ([QCCompositionAttributeBuiltInKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeBuiltInKey forKey:@"QCCompositionAttributeBuiltInKey"]; else NSLog([@"Can't initialize QCCompositionAttributeBuiltInKey with object " stringByAppendingString:[QCCompositionAttributeBuiltInKey description]]);
if ([QCCompositionAttributeCategoryKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeCategoryKey forKey:@"QCCompositionAttributeCategoryKey"]; else NSLog([@"Can't initialize QCCompositionAttributeCategoryKey with object " stringByAppendingString:[QCCompositionAttributeCategoryKey description]]);
if ([QCCompositionAttributeCopyrightKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeCopyrightKey forKey:@"QCCompositionAttributeCopyrightKey"]; else NSLog([@"Can't initialize QCCompositionAttributeCopyrightKey with object " stringByAppendingString:[QCCompositionAttributeCopyrightKey description]]);
if ([QCCompositionAttributeDescriptionKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeDescriptionKey forKey:@"QCCompositionAttributeDescriptionKey"]; else NSLog([@"Can't initialize QCCompositionAttributeDescriptionKey with object " stringByAppendingString:[QCCompositionAttributeDescriptionKey description]]);
if ([QCCompositionAttributeHasConsumersKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeHasConsumersKey forKey:@"QCCompositionAttributeHasConsumersKey"]; else NSLog([@"Can't initialize QCCompositionAttributeHasConsumersKey with object " stringByAppendingString:[QCCompositionAttributeHasConsumersKey description]]);
if ([QCCompositionAttributeIsTimeDependentKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeIsTimeDependentKey forKey:@"QCCompositionAttributeIsTimeDependentKey"]; else NSLog([@"Can't initialize QCCompositionAttributeIsTimeDependentKey with object " stringByAppendingString:[QCCompositionAttributeIsTimeDependentKey description]]);
if ([QCCompositionAttributeNameKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionAttributeNameKey forKey:@"QCCompositionAttributeNameKey"]; else NSLog([@"Can't initialize QCCompositionAttributeNameKey with object " stringByAppendingString:[QCCompositionAttributeNameKey description]]);
if ([QCCompositionCategoryDistortion isKindOfClass:[NSString class]]) [d setObject:QCCompositionCategoryDistortion forKey:@"QCCompositionCategoryDistortion"]; else NSLog([@"Can't initialize QCCompositionCategoryDistortion with object " stringByAppendingString:[QCCompositionCategoryDistortion description]]);
if ([QCCompositionCategoryStylize isKindOfClass:[NSString class]]) [d setObject:QCCompositionCategoryStylize forKey:@"QCCompositionCategoryStylize"]; else NSLog([@"Can't initialize QCCompositionCategoryStylize with object " stringByAppendingString:[QCCompositionCategoryStylize description]]);
if ([QCCompositionCategoryUtility isKindOfClass:[NSString class]]) [d setObject:QCCompositionCategoryUtility forKey:@"QCCompositionCategoryUtility"]; else NSLog([@"Can't initialize QCCompositionCategoryUtility with object " stringByAppendingString:[QCCompositionCategoryUtility description]]);
if ([QCCompositionInputAudioPeakKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputAudioPeakKey forKey:@"QCCompositionInputAudioPeakKey"]; else NSLog([@"Can't initialize QCCompositionInputAudioPeakKey with object " stringByAppendingString:[QCCompositionInputAudioPeakKey description]]);
if ([QCCompositionInputAudioSpectrumKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputAudioSpectrumKey forKey:@"QCCompositionInputAudioSpectrumKey"]; else NSLog([@"Can't initialize QCCompositionInputAudioSpectrumKey with object " stringByAppendingString:[QCCompositionInputAudioSpectrumKey description]]);
if ([QCCompositionInputDestinationImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputDestinationImageKey forKey:@"QCCompositionInputDestinationImageKey"]; else NSLog([@"Can't initialize QCCompositionInputDestinationImageKey with object " stringByAppendingString:[QCCompositionInputDestinationImageKey description]]);
if ([QCCompositionInputImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputImageKey forKey:@"QCCompositionInputImageKey"]; else NSLog([@"Can't initialize QCCompositionInputImageKey with object " stringByAppendingString:[QCCompositionInputImageKey description]]);
if ([QCCompositionInputPaceKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputPaceKey forKey:@"QCCompositionInputPaceKey"]; else NSLog([@"Can't initialize QCCompositionInputPaceKey with object " stringByAppendingString:[QCCompositionInputPaceKey description]]);
if ([QCCompositionInputPreviewModeKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputPreviewModeKey forKey:@"QCCompositionInputPreviewModeKey"]; else NSLog([@"Can't initialize QCCompositionInputPreviewModeKey with object " stringByAppendingString:[QCCompositionInputPreviewModeKey description]]);
if ([QCCompositionInputPrimaryColorKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputPrimaryColorKey forKey:@"QCCompositionInputPrimaryColorKey"]; else NSLog([@"Can't initialize QCCompositionInputPrimaryColorKey with object " stringByAppendingString:[QCCompositionInputPrimaryColorKey description]]);
if ([QCCompositionInputRSSArticleDurationKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputRSSArticleDurationKey forKey:@"QCCompositionInputRSSArticleDurationKey"]; else NSLog([@"Can't initialize QCCompositionInputRSSArticleDurationKey with object " stringByAppendingString:[QCCompositionInputRSSArticleDurationKey description]]);
if ([QCCompositionInputRSSFeedURLKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputRSSFeedURLKey forKey:@"QCCompositionInputRSSFeedURLKey"]; else NSLog([@"Can't initialize QCCompositionInputRSSFeedURLKey with object " stringByAppendingString:[QCCompositionInputRSSFeedURLKey description]]);
if ([QCCompositionInputScreenImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputScreenImageKey forKey:@"QCCompositionInputScreenImageKey"]; else NSLog([@"Can't initialize QCCompositionInputScreenImageKey with object " stringByAppendingString:[QCCompositionInputScreenImageKey description]]);
if ([QCCompositionInputSecondaryColorKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputSecondaryColorKey forKey:@"QCCompositionInputSecondaryColorKey"]; else NSLog([@"Can't initialize QCCompositionInputSecondaryColorKey with object " stringByAppendingString:[QCCompositionInputSecondaryColorKey description]]);
if ([QCCompositionInputSourceImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputSourceImageKey forKey:@"QCCompositionInputSourceImageKey"]; else NSLog([@"Can't initialize QCCompositionInputSourceImageKey with object " stringByAppendingString:[QCCompositionInputSourceImageKey description]]);
if ([QCCompositionInputTrackInfoKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputTrackInfoKey forKey:@"QCCompositionInputTrackInfoKey"]; else NSLog([@"Can't initialize QCCompositionInputTrackInfoKey with object " stringByAppendingString:[QCCompositionInputTrackInfoKey description]]);
if ([QCCompositionInputTrackPositionKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputTrackPositionKey forKey:@"QCCompositionInputTrackPositionKey"]; else NSLog([@"Can't initialize QCCompositionInputTrackPositionKey with object " stringByAppendingString:[QCCompositionInputTrackPositionKey description]]);
if ([QCCompositionInputTrackSignalKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputTrackSignalKey forKey:@"QCCompositionInputTrackSignalKey"]; else NSLog([@"Can't initialize QCCompositionInputTrackSignalKey with object " stringByAppendingString:[QCCompositionInputTrackSignalKey description]]);
if ([QCCompositionInputXKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputXKey forKey:@"QCCompositionInputXKey"]; else NSLog([@"Can't initialize QCCompositionInputXKey with object " stringByAppendingString:[QCCompositionInputXKey description]]);
if ([QCCompositionInputYKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionInputYKey forKey:@"QCCompositionInputYKey"]; else NSLog([@"Can't initialize QCCompositionInputYKey with object " stringByAppendingString:[QCCompositionInputYKey description]]);
if ([QCCompositionOutputImageKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionOutputImageKey forKey:@"QCCompositionOutputImageKey"]; else NSLog([@"Can't initialize QCCompositionOutputImageKey with object " stringByAppendingString:[QCCompositionOutputImageKey description]]);
if ([QCCompositionOutputWebPageURLKey isKindOfClass:[NSString class]]) [d setObject:QCCompositionOutputWebPageURLKey forKey:@"QCCompositionOutputWebPageURLKey"]; else NSLog([@"Can't initialize QCCompositionOutputWebPageURLKey with object " stringByAppendingString:[QCCompositionOutputWebPageURLKey description]]);
if ([QCCompositionPickerPanelDidSelectCompositionNotification isKindOfClass:[NSString class]]) [d setObject:QCCompositionPickerPanelDidSelectCompositionNotification forKey:@"QCCompositionPickerPanelDidSelectCompositionNotification"]; else NSLog([@"Can't initialize QCCompositionPickerPanelDidSelectCompositionNotification with object " stringByAppendingString:[QCCompositionPickerPanelDidSelectCompositionNotification description]]);
if ([QCCompositionPickerViewDidSelectCompositionNotification isKindOfClass:[NSString class]]) [d setObject:QCCompositionPickerViewDidSelectCompositionNotification forKey:@"QCCompositionPickerViewDidSelectCompositionNotification"]; else NSLog([@"Can't initialize QCCompositionPickerViewDidSelectCompositionNotification with object " stringByAppendingString:[QCCompositionPickerViewDidSelectCompositionNotification description]]);
if ([QCCompositionProtocolGraphicAnimation isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolGraphicAnimation forKey:@"QCCompositionProtocolGraphicAnimation"]; else NSLog([@"Can't initialize QCCompositionProtocolGraphicAnimation with object " stringByAppendingString:[QCCompositionProtocolGraphicAnimation description]]);
if ([QCCompositionProtocolGraphicTransition isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolGraphicTransition forKey:@"QCCompositionProtocolGraphicTransition"]; else NSLog([@"Can't initialize QCCompositionProtocolGraphicTransition with object " stringByAppendingString:[QCCompositionProtocolGraphicTransition description]]);
if ([QCCompositionProtocolImageFilter isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolImageFilter forKey:@"QCCompositionProtocolImageFilter"]; else NSLog([@"Can't initialize QCCompositionProtocolImageFilter with object " stringByAppendingString:[QCCompositionProtocolImageFilter description]]);
if ([QCCompositionProtocolMusicVisualizer isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolMusicVisualizer forKey:@"QCCompositionProtocolMusicVisualizer"]; else NSLog([@"Can't initialize QCCompositionProtocolMusicVisualizer with object " stringByAppendingString:[QCCompositionProtocolMusicVisualizer description]]);
if ([QCCompositionProtocolRSSVisualizer isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolRSSVisualizer forKey:@"QCCompositionProtocolRSSVisualizer"]; else NSLog([@"Can't initialize QCCompositionProtocolRSSVisualizer with object " stringByAppendingString:[QCCompositionProtocolRSSVisualizer description]]);
if ([QCCompositionProtocolScreenSaver isKindOfClass:[NSString class]]) [d setObject:QCCompositionProtocolScreenSaver forKey:@"QCCompositionProtocolScreenSaver"]; else NSLog([@"Can't initialize QCCompositionProtocolScreenSaver with object " stringByAppendingString:[QCCompositionProtocolScreenSaver description]]);
if ([QCCompositionRepositoryDidUpdateNotification isKindOfClass:[NSString class]]) [d setObject:QCCompositionRepositoryDidUpdateNotification forKey:@"QCCompositionRepositoryDidUpdateNotification"]; else NSLog([@"Can't initialize QCCompositionRepositoryDidUpdateNotification with object " stringByAppendingString:[QCCompositionRepositoryDidUpdateNotification description]]);
if ([QCPlugInAttributeCopyrightKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInAttributeCopyrightKey forKey:@"QCPlugInAttributeCopyrightKey"]; else NSLog([@"Can't initialize QCPlugInAttributeCopyrightKey with object " stringByAppendingString:[QCPlugInAttributeCopyrightKey description]]);
if ([QCPlugInAttributeDescriptionKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInAttributeDescriptionKey forKey:@"QCPlugInAttributeDescriptionKey"]; else NSLog([@"Can't initialize QCPlugInAttributeDescriptionKey with object " stringByAppendingString:[QCPlugInAttributeDescriptionKey description]]);
if ([QCPlugInAttributeNameKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInAttributeNameKey forKey:@"QCPlugInAttributeNameKey"]; else NSLog([@"Can't initialize QCPlugInAttributeNameKey with object " stringByAppendingString:[QCPlugInAttributeNameKey description]]);
if ([QCPlugInExecutionArgumentEventKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInExecutionArgumentEventKey forKey:@"QCPlugInExecutionArgumentEventKey"]; else NSLog([@"Can't initialize QCPlugInExecutionArgumentEventKey with object " stringByAppendingString:[QCPlugInExecutionArgumentEventKey description]]);
if ([QCPlugInExecutionArgumentMouseLocationKey isKindOfClass:[NSString class]]) [d setObject:QCPlugInExecutionArgumentMouseLocationKey forKey:@"QCPlugInExecutionArgumentMouseLocationKey"]; else NSLog([@"Can't initialize QCPlugInExecutionArgumentMouseLocationKey with object " stringByAppendingString:[QCPlugInExecutionArgumentMouseLocationKey description]]);
if ([QCPlugInPixelFormatARGB8 isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatARGB8 forKey:@"QCPlugInPixelFormatARGB8"]; else NSLog([@"Can't initialize QCPlugInPixelFormatARGB8 with object " stringByAppendingString:[QCPlugInPixelFormatARGB8 description]]);
if ([QCPlugInPixelFormatBGRA8 isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatBGRA8 forKey:@"QCPlugInPixelFormatBGRA8"]; else NSLog([@"Can't initialize QCPlugInPixelFormatBGRA8 with object " stringByAppendingString:[QCPlugInPixelFormatBGRA8 description]]);
if ([QCPlugInPixelFormatI8 isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatI8 forKey:@"QCPlugInPixelFormatI8"]; else NSLog([@"Can't initialize QCPlugInPixelFormatI8 with object " stringByAppendingString:[QCPlugInPixelFormatI8 description]]);
if ([QCPlugInPixelFormatIf isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatIf forKey:@"QCPlugInPixelFormatIf"]; else NSLog([@"Can't initialize QCPlugInPixelFormatIf with object " stringByAppendingString:[QCPlugInPixelFormatIf description]]);
if ([QCPlugInPixelFormatRGBAf isKindOfClass:[NSString class]]) [d setObject:QCPlugInPixelFormatRGBAf forKey:@"QCPlugInPixelFormatRGBAf"]; else NSLog([@"Can't initialize QCPlugInPixelFormatRGBAf with object " stringByAppendingString:[QCPlugInPixelFormatRGBAf description]]);
if ([QCPortAttributeDefaultValueKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeDefaultValueKey forKey:@"QCPortAttributeDefaultValueKey"]; else NSLog([@"Can't initialize QCPortAttributeDefaultValueKey with object " stringByAppendingString:[QCPortAttributeDefaultValueKey description]]);
if ([QCPortAttributeMaximumValueKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeMaximumValueKey forKey:@"QCPortAttributeMaximumValueKey"]; else NSLog([@"Can't initialize QCPortAttributeMaximumValueKey with object " stringByAppendingString:[QCPortAttributeMaximumValueKey description]]);
if ([QCPortAttributeMenuItemsKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeMenuItemsKey forKey:@"QCPortAttributeMenuItemsKey"]; else NSLog([@"Can't initialize QCPortAttributeMenuItemsKey with object " stringByAppendingString:[QCPortAttributeMenuItemsKey description]]);
if ([QCPortAttributeMinimumValueKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeMinimumValueKey forKey:@"QCPortAttributeMinimumValueKey"]; else NSLog([@"Can't initialize QCPortAttributeMinimumValueKey with object " stringByAppendingString:[QCPortAttributeMinimumValueKey description]]);
if ([QCPortAttributeNameKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeNameKey forKey:@"QCPortAttributeNameKey"]; else NSLog([@"Can't initialize QCPortAttributeNameKey with object " stringByAppendingString:[QCPortAttributeNameKey description]]);
if ([QCPortAttributeTypeKey isKindOfClass:[NSString class]]) [d setObject:QCPortAttributeTypeKey forKey:@"QCPortAttributeTypeKey"]; else NSLog([@"Can't initialize QCPortAttributeTypeKey with object " stringByAppendingString:[QCPortAttributeTypeKey description]]);
if ([QCPortTypeBoolean isKindOfClass:[NSString class]]) [d setObject:QCPortTypeBoolean forKey:@"QCPortTypeBoolean"]; else NSLog([@"Can't initialize QCPortTypeBoolean with object " stringByAppendingString:[QCPortTypeBoolean description]]);
if ([QCPortTypeColor isKindOfClass:[NSString class]]) [d setObject:QCPortTypeColor forKey:@"QCPortTypeColor"]; else NSLog([@"Can't initialize QCPortTypeColor with object " stringByAppendingString:[QCPortTypeColor description]]);
if ([QCPortTypeImage isKindOfClass:[NSString class]]) [d setObject:QCPortTypeImage forKey:@"QCPortTypeImage"]; else NSLog([@"Can't initialize QCPortTypeImage with object " stringByAppendingString:[QCPortTypeImage description]]);
if ([QCPortTypeIndex isKindOfClass:[NSString class]]) [d setObject:QCPortTypeIndex forKey:@"QCPortTypeIndex"]; else NSLog([@"Can't initialize QCPortTypeIndex with object " stringByAppendingString:[QCPortTypeIndex description]]);
if ([QCPortTypeNumber isKindOfClass:[NSString class]]) [d setObject:QCPortTypeNumber forKey:@"QCPortTypeNumber"]; else NSLog([@"Can't initialize QCPortTypeNumber with object " stringByAppendingString:[QCPortTypeNumber description]]);
if ([QCPortTypeString isKindOfClass:[NSString class]]) [d setObject:QCPortTypeString forKey:@"QCPortTypeString"]; else NSLog([@"Can't initialize QCPortTypeString with object " stringByAppendingString:[QCPortTypeString description]]);
if ([QCPortTypeStructure isKindOfClass:[NSString class]]) [d setObject:QCPortTypeStructure forKey:@"QCPortTypeStructure"]; else NSLog([@"Can't initialize QCPortTypeStructure with object " stringByAppendingString:[QCPortTypeStructure description]]);
if ([QCRendererEventKey isKindOfClass:[NSString class]]) [d setObject:QCRendererEventKey forKey:@"QCRendererEventKey"]; else NSLog([@"Can't initialize QCRendererEventKey with object " stringByAppendingString:[QCRendererEventKey description]]);
if ([QCRendererMouseLocationKey isKindOfClass:[NSString class]]) [d setObject:QCRendererMouseLocationKey forKey:@"QCRendererMouseLocationKey"]; else NSLog([@"Can't initialize QCRendererMouseLocationKey with object " stringByAppendingString:[QCRendererMouseLocationKey description]]);
if ([QCViewDidStartRenderingNotification isKindOfClass:[NSString class]]) [d setObject:QCViewDidStartRenderingNotification forKey:@"QCViewDidStartRenderingNotification"]; else NSLog([@"Can't initialize QCViewDidStartRenderingNotification with object " stringByAppendingString:[QCViewDidStartRenderingNotification description]]);
if ([QCViewDidStopRenderingNotification isKindOfClass:[NSString class]]) [d setObject:QCViewDidStopRenderingNotification forKey:@"QCViewDidStopRenderingNotification"]; else NSLog([@"Can't initialize QCViewDidStopRenderingNotification with object " stringByAppendingString:[QCViewDidStopRenderingNotification description]]);
[d setObject:[Number numberWithDouble:kQCPlugInExecutionModeConsumer] forKey:@"kQCPlugInExecutionModeConsumer"];
[d setObject:[Number numberWithDouble:kQCPlugInExecutionModeProcessor] forKey:@"kQCPlugInExecutionModeProcessor"];
[d setObject:[Number numberWithDouble:kQCPlugInExecutionModeProvider] forKey:@"kQCPlugInExecutionModeProvider"];
[d setObject:[Number numberWithDouble:kQCPlugInTimeModeIdle] forKey:@"kQCPlugInTimeModeIdle"];
[d setObject:[Number numberWithDouble:kQCPlugInTimeModeNone] forKey:@"kQCPlugInTimeModeNone"];
[d setObject:[Number numberWithDouble:kQCPlugInTimeModeTimeBase] forKey:@"kQCPlugInTimeModeTimeBase"];
if ([kCAAlignmentCenter isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentCenter forKey:@"kCAAlignmentCenter"]; else NSLog([@"Can't initialize kCAAlignmentCenter with object " stringByAppendingString:[kCAAlignmentCenter description]]);
if ([kCAAlignmentJustified isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentJustified forKey:@"kCAAlignmentJustified"]; else NSLog([@"Can't initialize kCAAlignmentJustified with object " stringByAppendingString:[kCAAlignmentJustified description]]);
if ([kCAAlignmentLeft isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentLeft forKey:@"kCAAlignmentLeft"]; else NSLog([@"Can't initialize kCAAlignmentLeft with object " stringByAppendingString:[kCAAlignmentLeft description]]);
if ([kCAAlignmentNatural isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentNatural forKey:@"kCAAlignmentNatural"]; else NSLog([@"Can't initialize kCAAlignmentNatural with object " stringByAppendingString:[kCAAlignmentNatural description]]);
if ([kCAAlignmentRight isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentRight forKey:@"kCAAlignmentRight"]; else NSLog([@"Can't initialize kCAAlignmentRight with object " stringByAppendingString:[kCAAlignmentRight description]]);
if ([kCAAnimationDiscrete isKindOfClass:[NSString class]]) [d setObject:kCAAnimationDiscrete forKey:@"kCAAnimationDiscrete"]; else NSLog([@"Can't initialize kCAAnimationDiscrete with object " stringByAppendingString:[kCAAnimationDiscrete description]]);
if ([kCAAnimationLinear isKindOfClass:[NSString class]]) [d setObject:kCAAnimationLinear forKey:@"kCAAnimationLinear"]; else NSLog([@"Can't initialize kCAAnimationLinear with object " stringByAppendingString:[kCAAnimationLinear description]]);
if ([kCAAnimationPaced isKindOfClass:[NSString class]]) [d setObject:kCAAnimationPaced forKey:@"kCAAnimationPaced"]; else NSLog([@"Can't initialize kCAAnimationPaced with object " stringByAppendingString:[kCAAnimationPaced description]]);
if ([kCAAnimationRotateAuto isKindOfClass:[NSString class]]) [d setObject:kCAAnimationRotateAuto forKey:@"kCAAnimationRotateAuto"]; else NSLog([@"Can't initialize kCAAnimationRotateAuto with object " stringByAppendingString:[kCAAnimationRotateAuto description]]);
if ([kCAAnimationRotateAutoReverse isKindOfClass:[NSString class]]) [d setObject:kCAAnimationRotateAutoReverse forKey:@"kCAAnimationRotateAutoReverse"]; else NSLog([@"Can't initialize kCAAnimationRotateAutoReverse with object " stringByAppendingString:[kCAAnimationRotateAutoReverse description]]);
if ([kCAFillModeBackwards isKindOfClass:[NSString class]]) [d setObject:kCAFillModeBackwards forKey:@"kCAFillModeBackwards"]; else NSLog([@"Can't initialize kCAFillModeBackwards with object " stringByAppendingString:[kCAFillModeBackwards description]]);
if ([kCAFillModeBoth isKindOfClass:[NSString class]]) [d setObject:kCAFillModeBoth forKey:@"kCAFillModeBoth"]; else NSLog([@"Can't initialize kCAFillModeBoth with object " stringByAppendingString:[kCAFillModeBoth description]]);
if ([kCAFillModeForwards isKindOfClass:[NSString class]]) [d setObject:kCAFillModeForwards forKey:@"kCAFillModeForwards"]; else NSLog([@"Can't initialize kCAFillModeForwards with object " stringByAppendingString:[kCAFillModeForwards description]]);
if ([kCAFillModeRemoved isKindOfClass:[NSString class]]) [d setObject:kCAFillModeRemoved forKey:@"kCAFillModeRemoved"]; else NSLog([@"Can't initialize kCAFillModeRemoved with object " stringByAppendingString:[kCAFillModeRemoved description]]);
if ([kCAFilterLinear isKindOfClass:[NSString class]]) [d setObject:kCAFilterLinear forKey:@"kCAFilterLinear"]; else NSLog([@"Can't initialize kCAFilterLinear with object " stringByAppendingString:[kCAFilterLinear description]]);
if ([kCAFilterNearest isKindOfClass:[NSString class]]) [d setObject:kCAFilterNearest forKey:@"kCAFilterNearest"]; else NSLog([@"Can't initialize kCAFilterNearest with object " stringByAppendingString:[kCAFilterNearest description]]);
if ([kCAGravityBottom isKindOfClass:[NSString class]]) [d setObject:kCAGravityBottom forKey:@"kCAGravityBottom"]; else NSLog([@"Can't initialize kCAGravityBottom with object " stringByAppendingString:[kCAGravityBottom description]]);
if ([kCAGravityBottomLeft isKindOfClass:[NSString class]]) [d setObject:kCAGravityBottomLeft forKey:@"kCAGravityBottomLeft"]; else NSLog([@"Can't initialize kCAGravityBottomLeft with object " stringByAppendingString:[kCAGravityBottomLeft description]]);
if ([kCAGravityBottomRight isKindOfClass:[NSString class]]) [d setObject:kCAGravityBottomRight forKey:@"kCAGravityBottomRight"]; else NSLog([@"Can't initialize kCAGravityBottomRight with object " stringByAppendingString:[kCAGravityBottomRight description]]);
if ([kCAGravityCenter isKindOfClass:[NSString class]]) [d setObject:kCAGravityCenter forKey:@"kCAGravityCenter"]; else NSLog([@"Can't initialize kCAGravityCenter with object " stringByAppendingString:[kCAGravityCenter description]]);
if ([kCAGravityLeft isKindOfClass:[NSString class]]) [d setObject:kCAGravityLeft forKey:@"kCAGravityLeft"]; else NSLog([@"Can't initialize kCAGravityLeft with object " stringByAppendingString:[kCAGravityLeft description]]);
if ([kCAGravityResize isKindOfClass:[NSString class]]) [d setObject:kCAGravityResize forKey:@"kCAGravityResize"]; else NSLog([@"Can't initialize kCAGravityResize with object " stringByAppendingString:[kCAGravityResize description]]);
if ([kCAGravityResizeAspect isKindOfClass:[NSString class]]) [d setObject:kCAGravityResizeAspect forKey:@"kCAGravityResizeAspect"]; else NSLog([@"Can't initialize kCAGravityResizeAspect with object " stringByAppendingString:[kCAGravityResizeAspect description]]);
if ([kCAGravityResizeAspectFill isKindOfClass:[NSString class]]) [d setObject:kCAGravityResizeAspectFill forKey:@"kCAGravityResizeAspectFill"]; else NSLog([@"Can't initialize kCAGravityResizeAspectFill with object " stringByAppendingString:[kCAGravityResizeAspectFill description]]);
if ([kCAGravityRight isKindOfClass:[NSString class]]) [d setObject:kCAGravityRight forKey:@"kCAGravityRight"]; else NSLog([@"Can't initialize kCAGravityRight with object " stringByAppendingString:[kCAGravityRight description]]);
if ([kCAGravityTop isKindOfClass:[NSString class]]) [d setObject:kCAGravityTop forKey:@"kCAGravityTop"]; else NSLog([@"Can't initialize kCAGravityTop with object " stringByAppendingString:[kCAGravityTop description]]);
if ([kCAGravityTopLeft isKindOfClass:[NSString class]]) [d setObject:kCAGravityTopLeft forKey:@"kCAGravityTopLeft"]; else NSLog([@"Can't initialize kCAGravityTopLeft with object " stringByAppendingString:[kCAGravityTopLeft description]]);
if ([kCAGravityTopRight isKindOfClass:[NSString class]]) [d setObject:kCAGravityTopRight forKey:@"kCAGravityTopRight"]; else NSLog([@"Can't initialize kCAGravityTopRight with object " stringByAppendingString:[kCAGravityTopRight description]]);
if ([kCAMediaTimingFunctionEaseIn isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionEaseIn forKey:@"kCAMediaTimingFunctionEaseIn"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionEaseIn with object " stringByAppendingString:[kCAMediaTimingFunctionEaseIn description]]);
if ([kCAMediaTimingFunctionEaseInEaseOut isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionEaseInEaseOut forKey:@"kCAMediaTimingFunctionEaseInEaseOut"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionEaseInEaseOut with object " stringByAppendingString:[kCAMediaTimingFunctionEaseInEaseOut description]]);
if ([kCAMediaTimingFunctionEaseOut isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionEaseOut forKey:@"kCAMediaTimingFunctionEaseOut"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionEaseOut with object " stringByAppendingString:[kCAMediaTimingFunctionEaseOut description]]);
if ([kCAMediaTimingFunctionLinear isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionLinear forKey:@"kCAMediaTimingFunctionLinear"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionLinear with object " stringByAppendingString:[kCAMediaTimingFunctionLinear description]]);
if ([kCAOnOrderIn isKindOfClass:[NSString class]]) [d setObject:kCAOnOrderIn forKey:@"kCAOnOrderIn"]; else NSLog([@"Can't initialize kCAOnOrderIn with object " stringByAppendingString:[kCAOnOrderIn description]]);
if ([kCAOnOrderOut isKindOfClass:[NSString class]]) [d setObject:kCAOnOrderOut forKey:@"kCAOnOrderOut"]; else NSLog([@"Can't initialize kCAOnOrderOut with object " stringByAppendingString:[kCAOnOrderOut description]]);
if ([kCAScrollBoth isKindOfClass:[NSString class]]) [d setObject:kCAScrollBoth forKey:@"kCAScrollBoth"]; else NSLog([@"Can't initialize kCAScrollBoth with object " stringByAppendingString:[kCAScrollBoth description]]);
if ([kCAScrollHorizontally isKindOfClass:[NSString class]]) [d setObject:kCAScrollHorizontally forKey:@"kCAScrollHorizontally"]; else NSLog([@"Can't initialize kCAScrollHorizontally with object " stringByAppendingString:[kCAScrollHorizontally description]]);
if ([kCAScrollNone isKindOfClass:[NSString class]]) [d setObject:kCAScrollNone forKey:@"kCAScrollNone"]; else NSLog([@"Can't initialize kCAScrollNone with object " stringByAppendingString:[kCAScrollNone description]]);
if ([kCAScrollVertically isKindOfClass:[NSString class]]) [d setObject:kCAScrollVertically forKey:@"kCAScrollVertically"]; else NSLog([@"Can't initialize kCAScrollVertically with object " stringByAppendingString:[kCAScrollVertically description]]);
if ([kCATransactionAnimationDuration isKindOfClass:[NSString class]]) [d setObject:kCATransactionAnimationDuration forKey:@"kCATransactionAnimationDuration"]; else NSLog([@"Can't initialize kCATransactionAnimationDuration with object " stringByAppendingString:[kCATransactionAnimationDuration description]]);
if ([kCATransactionDisableActions isKindOfClass:[NSString class]]) [d setObject:kCATransactionDisableActions forKey:@"kCATransactionDisableActions"]; else NSLog([@"Can't initialize kCATransactionDisableActions with object " stringByAppendingString:[kCATransactionDisableActions description]]);
if ([kCATransition isKindOfClass:[NSString class]]) [d setObject:kCATransition forKey:@"kCATransition"]; else NSLog([@"Can't initialize kCATransition with object " stringByAppendingString:[kCATransition description]]);
if ([kCATransitionFade isKindOfClass:[NSString class]]) [d setObject:kCATransitionFade forKey:@"kCATransitionFade"]; else NSLog([@"Can't initialize kCATransitionFade with object " stringByAppendingString:[kCATransitionFade description]]);
if ([kCATransitionFromBottom isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromBottom forKey:@"kCATransitionFromBottom"]; else NSLog([@"Can't initialize kCATransitionFromBottom with object " stringByAppendingString:[kCATransitionFromBottom description]]);
if ([kCATransitionFromLeft isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromLeft forKey:@"kCATransitionFromLeft"]; else NSLog([@"Can't initialize kCATransitionFromLeft with object " stringByAppendingString:[kCATransitionFromLeft description]]);
if ([kCATransitionFromRight isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromRight forKey:@"kCATransitionFromRight"]; else NSLog([@"Can't initialize kCATransitionFromRight with object " stringByAppendingString:[kCATransitionFromRight description]]);
if ([kCATransitionFromTop isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromTop forKey:@"kCATransitionFromTop"]; else NSLog([@"Can't initialize kCATransitionFromTop with object " stringByAppendingString:[kCATransitionFromTop description]]);
if ([kCATransitionMoveIn isKindOfClass:[NSString class]]) [d setObject:kCATransitionMoveIn forKey:@"kCATransitionMoveIn"]; else NSLog([@"Can't initialize kCATransitionMoveIn with object " stringByAppendingString:[kCATransitionMoveIn description]]);
if ([kCATransitionPush isKindOfClass:[NSString class]]) [d setObject:kCATransitionPush forKey:@"kCATransitionPush"]; else NSLog([@"Can't initialize kCATransitionPush with object " stringByAppendingString:[kCATransitionPush description]]);
if ([kCATransitionReveal isKindOfClass:[NSString class]]) [d setObject:kCATransitionReveal forKey:@"kCATransitionReveal"]; else NSLog([@"Can't initialize kCATransitionReveal with object " stringByAppendingString:[kCATransitionReveal description]]);
if ([kCATruncationEnd isKindOfClass:[NSString class]]) [d setObject:kCATruncationEnd forKey:@"kCATruncationEnd"]; else NSLog([@"Can't initialize kCATruncationEnd with object " stringByAppendingString:[kCATruncationEnd description]]);
if ([kCATruncationMiddle isKindOfClass:[NSString class]]) [d setObject:kCATruncationMiddle forKey:@"kCATruncationMiddle"]; else NSLog([@"Can't initialize kCATruncationMiddle with object " stringByAppendingString:[kCATruncationMiddle description]]);
if ([kCATruncationNone isKindOfClass:[NSString class]]) [d setObject:kCATruncationNone forKey:@"kCATruncationNone"]; else NSLog([@"Can't initialize kCATruncationNone with object " stringByAppendingString:[kCATruncationNone description]]);
if ([kCATruncationStart isKindOfClass:[NSString class]]) [d setObject:kCATruncationStart forKey:@"kCATruncationStart"]; else NSLog([@"Can't initialize kCATruncationStart with object " stringByAppendingString:[kCATruncationStart description]]);
if ([kCIApplyOptionDefinition isKindOfClass:[NSString class]]) [d setObject:kCIApplyOptionDefinition forKey:@"kCIApplyOptionDefinition"]; else NSLog([@"Can't initialize kCIApplyOptionDefinition with object " stringByAppendingString:[kCIApplyOptionDefinition description]]);
if ([kCIApplyOptionExtent isKindOfClass:[NSString class]]) [d setObject:kCIApplyOptionExtent forKey:@"kCIApplyOptionExtent"]; else NSLog([@"Can't initialize kCIApplyOptionExtent with object " stringByAppendingString:[kCIApplyOptionExtent description]]);
if ([kCIApplyOptionUserInfo isKindOfClass:[NSString class]]) [d setObject:kCIApplyOptionUserInfo forKey:@"kCIApplyOptionUserInfo"]; else NSLog([@"Can't initialize kCIApplyOptionUserInfo with object " stringByAppendingString:[kCIApplyOptionUserInfo description]]);
if ([kCIAttributeClass isKindOfClass:[NSString class]]) [d setObject:kCIAttributeClass forKey:@"kCIAttributeClass"]; else NSLog([@"Can't initialize kCIAttributeClass with object " stringByAppendingString:[kCIAttributeClass description]]);
if ([kCIAttributeDefault isKindOfClass:[NSString class]]) [d setObject:kCIAttributeDefault forKey:@"kCIAttributeDefault"]; else NSLog([@"Can't initialize kCIAttributeDefault with object " stringByAppendingString:[kCIAttributeDefault description]]);
if ([kCIAttributeDescription isKindOfClass:[NSString class]]) [d setObject:kCIAttributeDescription forKey:@"kCIAttributeDescription"]; else NSLog([@"Can't initialize kCIAttributeDescription with object " stringByAppendingString:[kCIAttributeDescription description]]);
if ([kCIAttributeDisplayName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeDisplayName forKey:@"kCIAttributeDisplayName"]; else NSLog([@"Can't initialize kCIAttributeDisplayName with object " stringByAppendingString:[kCIAttributeDisplayName description]]);
if ([kCIAttributeFilterCategories isKindOfClass:[NSString class]]) [d setObject:kCIAttributeFilterCategories forKey:@"kCIAttributeFilterCategories"]; else NSLog([@"Can't initialize kCIAttributeFilterCategories with object " stringByAppendingString:[kCIAttributeFilterCategories description]]);
if ([kCIAttributeFilterDisplayName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeFilterDisplayName forKey:@"kCIAttributeFilterDisplayName"]; else NSLog([@"Can't initialize kCIAttributeFilterDisplayName with object " stringByAppendingString:[kCIAttributeFilterDisplayName description]]);
if ([kCIAttributeFilterName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeFilterName forKey:@"kCIAttributeFilterName"]; else NSLog([@"Can't initialize kCIAttributeFilterName with object " stringByAppendingString:[kCIAttributeFilterName description]]);
if ([kCIAttributeIdentity isKindOfClass:[NSString class]]) [d setObject:kCIAttributeIdentity forKey:@"kCIAttributeIdentity"]; else NSLog([@"Can't initialize kCIAttributeIdentity with object " stringByAppendingString:[kCIAttributeIdentity description]]);
if ([kCIAttributeMax isKindOfClass:[NSString class]]) [d setObject:kCIAttributeMax forKey:@"kCIAttributeMax"]; else NSLog([@"Can't initialize kCIAttributeMax with object " stringByAppendingString:[kCIAttributeMax description]]);
if ([kCIAttributeMin isKindOfClass:[NSString class]]) [d setObject:kCIAttributeMin forKey:@"kCIAttributeMin"]; else NSLog([@"Can't initialize kCIAttributeMin with object " stringByAppendingString:[kCIAttributeMin description]]);
if ([kCIAttributeName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeName forKey:@"kCIAttributeName"]; else NSLog([@"Can't initialize kCIAttributeName with object " stringByAppendingString:[kCIAttributeName description]]);
if ([kCIAttributeReferenceDocumentation isKindOfClass:[NSString class]]) [d setObject:kCIAttributeReferenceDocumentation forKey:@"kCIAttributeReferenceDocumentation"]; else NSLog([@"Can't initialize kCIAttributeReferenceDocumentation with object " stringByAppendingString:[kCIAttributeReferenceDocumentation description]]);
if ([kCIAttributeSliderMax isKindOfClass:[NSString class]]) [d setObject:kCIAttributeSliderMax forKey:@"kCIAttributeSliderMax"]; else NSLog([@"Can't initialize kCIAttributeSliderMax with object " stringByAppendingString:[kCIAttributeSliderMax description]]);
if ([kCIAttributeSliderMin isKindOfClass:[NSString class]]) [d setObject:kCIAttributeSliderMin forKey:@"kCIAttributeSliderMin"]; else NSLog([@"Can't initialize kCIAttributeSliderMin with object " stringByAppendingString:[kCIAttributeSliderMin description]]);
if ([kCIAttributeType isKindOfClass:[NSString class]]) [d setObject:kCIAttributeType forKey:@"kCIAttributeType"]; else NSLog([@"Can't initialize kCIAttributeType with object " stringByAppendingString:[kCIAttributeType description]]);
if ([kCIAttributeTypeAngle isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeAngle forKey:@"kCIAttributeTypeAngle"]; else NSLog([@"Can't initialize kCIAttributeTypeAngle with object " stringByAppendingString:[kCIAttributeTypeAngle description]]);
if ([kCIAttributeTypeBoolean isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeBoolean forKey:@"kCIAttributeTypeBoolean"]; else NSLog([@"Can't initialize kCIAttributeTypeBoolean with object " stringByAppendingString:[kCIAttributeTypeBoolean description]]);
if ([kCIAttributeTypeCount isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeCount forKey:@"kCIAttributeTypeCount"]; else NSLog([@"Can't initialize kCIAttributeTypeCount with object " stringByAppendingString:[kCIAttributeTypeCount description]]);
if ([kCIAttributeTypeDistance isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeDistance forKey:@"kCIAttributeTypeDistance"]; else NSLog([@"Can't initialize kCIAttributeTypeDistance with object " stringByAppendingString:[kCIAttributeTypeDistance description]]);
if ([kCIAttributeTypeGradient isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeGradient forKey:@"kCIAttributeTypeGradient"]; else NSLog([@"Can't initialize kCIAttributeTypeGradient with object " stringByAppendingString:[kCIAttributeTypeGradient description]]);
if ([kCIAttributeTypeInteger isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeInteger forKey:@"kCIAttributeTypeInteger"]; else NSLog([@"Can't initialize kCIAttributeTypeInteger with object " stringByAppendingString:[kCIAttributeTypeInteger description]]);
if ([kCIAttributeTypeOffset isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeOffset forKey:@"kCIAttributeTypeOffset"]; else NSLog([@"Can't initialize kCIAttributeTypeOffset with object " stringByAppendingString:[kCIAttributeTypeOffset description]]);
if ([kCIAttributeTypeOpaqueColor isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeOpaqueColor forKey:@"kCIAttributeTypeOpaqueColor"]; else NSLog([@"Can't initialize kCIAttributeTypeOpaqueColor with object " stringByAppendingString:[kCIAttributeTypeOpaqueColor description]]);
if ([kCIAttributeTypePosition isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypePosition forKey:@"kCIAttributeTypePosition"]; else NSLog([@"Can't initialize kCIAttributeTypePosition with object " stringByAppendingString:[kCIAttributeTypePosition description]]);
if ([kCIAttributeTypePosition3 isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypePosition3 forKey:@"kCIAttributeTypePosition3"]; else NSLog([@"Can't initialize kCIAttributeTypePosition3 with object " stringByAppendingString:[kCIAttributeTypePosition3 description]]);
if ([kCIAttributeTypeRectangle isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeRectangle forKey:@"kCIAttributeTypeRectangle"]; else NSLog([@"Can't initialize kCIAttributeTypeRectangle with object " stringByAppendingString:[kCIAttributeTypeRectangle description]]);
if ([kCIAttributeTypeScalar isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeScalar forKey:@"kCIAttributeTypeScalar"]; else NSLog([@"Can't initialize kCIAttributeTypeScalar with object " stringByAppendingString:[kCIAttributeTypeScalar description]]);
if ([kCIAttributeTypeTime isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeTime forKey:@"kCIAttributeTypeTime"]; else NSLog([@"Can't initialize kCIAttributeTypeTime with object " stringByAppendingString:[kCIAttributeTypeTime description]]);
if ([kCICategoryBlur isKindOfClass:[NSString class]]) [d setObject:kCICategoryBlur forKey:@"kCICategoryBlur"]; else NSLog([@"Can't initialize kCICategoryBlur with object " stringByAppendingString:[kCICategoryBlur description]]);
if ([kCICategoryBuiltIn isKindOfClass:[NSString class]]) [d setObject:kCICategoryBuiltIn forKey:@"kCICategoryBuiltIn"]; else NSLog([@"Can't initialize kCICategoryBuiltIn with object " stringByAppendingString:[kCICategoryBuiltIn description]]);
if ([kCICategoryColorAdjustment isKindOfClass:[NSString class]]) [d setObject:kCICategoryColorAdjustment forKey:@"kCICategoryColorAdjustment"]; else NSLog([@"Can't initialize kCICategoryColorAdjustment with object " stringByAppendingString:[kCICategoryColorAdjustment description]]);
if ([kCICategoryColorEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryColorEffect forKey:@"kCICategoryColorEffect"]; else NSLog([@"Can't initialize kCICategoryColorEffect with object " stringByAppendingString:[kCICategoryColorEffect description]]);
if ([kCICategoryCompositeOperation isKindOfClass:[NSString class]]) [d setObject:kCICategoryCompositeOperation forKey:@"kCICategoryCompositeOperation"]; else NSLog([@"Can't initialize kCICategoryCompositeOperation with object " stringByAppendingString:[kCICategoryCompositeOperation description]]);
if ([kCICategoryDistortionEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryDistortionEffect forKey:@"kCICategoryDistortionEffect"]; else NSLog([@"Can't initialize kCICategoryDistortionEffect with object " stringByAppendingString:[kCICategoryDistortionEffect description]]);
if ([kCICategoryFilterGenerator isKindOfClass:[NSString class]]) [d setObject:kCICategoryFilterGenerator forKey:@"kCICategoryFilterGenerator"]; else NSLog([@"Can't initialize kCICategoryFilterGenerator with object " stringByAppendingString:[kCICategoryFilterGenerator description]]);
if ([kCICategoryGenerator isKindOfClass:[NSString class]]) [d setObject:kCICategoryGenerator forKey:@"kCICategoryGenerator"]; else NSLog([@"Can't initialize kCICategoryGenerator with object " stringByAppendingString:[kCICategoryGenerator description]]);
if ([kCICategoryGeometryAdjustment isKindOfClass:[NSString class]]) [d setObject:kCICategoryGeometryAdjustment forKey:@"kCICategoryGeometryAdjustment"]; else NSLog([@"Can't initialize kCICategoryGeometryAdjustment with object " stringByAppendingString:[kCICategoryGeometryAdjustment description]]);
if ([kCICategoryGradient isKindOfClass:[NSString class]]) [d setObject:kCICategoryGradient forKey:@"kCICategoryGradient"]; else NSLog([@"Can't initialize kCICategoryGradient with object " stringByAppendingString:[kCICategoryGradient description]]);
if ([kCICategoryHalftoneEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryHalftoneEffect forKey:@"kCICategoryHalftoneEffect"]; else NSLog([@"Can't initialize kCICategoryHalftoneEffect with object " stringByAppendingString:[kCICategoryHalftoneEffect description]]);
if ([kCICategoryHighDynamicRange isKindOfClass:[NSString class]]) [d setObject:kCICategoryHighDynamicRange forKey:@"kCICategoryHighDynamicRange"]; else NSLog([@"Can't initialize kCICategoryHighDynamicRange with object " stringByAppendingString:[kCICategoryHighDynamicRange description]]);
if ([kCICategoryInterlaced isKindOfClass:[NSString class]]) [d setObject:kCICategoryInterlaced forKey:@"kCICategoryInterlaced"]; else NSLog([@"Can't initialize kCICategoryInterlaced with object " stringByAppendingString:[kCICategoryInterlaced description]]);
if ([kCICategoryNonSquarePixels isKindOfClass:[NSString class]]) [d setObject:kCICategoryNonSquarePixels forKey:@"kCICategoryNonSquarePixels"]; else NSLog([@"Can't initialize kCICategoryNonSquarePixels with object " stringByAppendingString:[kCICategoryNonSquarePixels description]]);
if ([kCICategoryReduction isKindOfClass:[NSString class]]) [d setObject:kCICategoryReduction forKey:@"kCICategoryReduction"]; else NSLog([@"Can't initialize kCICategoryReduction with object " stringByAppendingString:[kCICategoryReduction description]]);
if ([kCICategorySharpen isKindOfClass:[NSString class]]) [d setObject:kCICategorySharpen forKey:@"kCICategorySharpen"]; else NSLog([@"Can't initialize kCICategorySharpen with object " stringByAppendingString:[kCICategorySharpen description]]);
if ([kCICategoryStillImage isKindOfClass:[NSString class]]) [d setObject:kCICategoryStillImage forKey:@"kCICategoryStillImage"]; else NSLog([@"Can't initialize kCICategoryStillImage with object " stringByAppendingString:[kCICategoryStillImage description]]);
if ([kCICategoryStylize isKindOfClass:[NSString class]]) [d setObject:kCICategoryStylize forKey:@"kCICategoryStylize"]; else NSLog([@"Can't initialize kCICategoryStylize with object " stringByAppendingString:[kCICategoryStylize description]]);
if ([kCICategoryTileEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryTileEffect forKey:@"kCICategoryTileEffect"]; else NSLog([@"Can't initialize kCICategoryTileEffect with object " stringByAppendingString:[kCICategoryTileEffect description]]);
if ([kCICategoryTransition isKindOfClass:[NSString class]]) [d setObject:kCICategoryTransition forKey:@"kCICategoryTransition"]; else NSLog([@"Can't initialize kCICategoryTransition with object " stringByAppendingString:[kCICategoryTransition description]]);
if ([kCICategoryVideo isKindOfClass:[NSString class]]) [d setObject:kCICategoryVideo forKey:@"kCICategoryVideo"]; else NSLog([@"Can't initialize kCICategoryVideo with object " stringByAppendingString:[kCICategoryVideo description]]);
if ([kCIContextOutputColorSpace isKindOfClass:[NSString class]]) [d setObject:kCIContextOutputColorSpace forKey:@"kCIContextOutputColorSpace"]; else NSLog([@"Can't initialize kCIContextOutputColorSpace with object " stringByAppendingString:[kCIContextOutputColorSpace description]]);
if ([kCIContextUseSoftwareRenderer isKindOfClass:[NSString class]]) [d setObject:kCIContextUseSoftwareRenderer forKey:@"kCIContextUseSoftwareRenderer"]; else NSLog([@"Can't initialize kCIContextUseSoftwareRenderer with object " stringByAppendingString:[kCIContextUseSoftwareRenderer description]]);
if ([kCIContextWorkingColorSpace isKindOfClass:[NSString class]]) [d setObject:kCIContextWorkingColorSpace forKey:@"kCIContextWorkingColorSpace"]; else NSLog([@"Can't initialize kCIContextWorkingColorSpace with object " stringByAppendingString:[kCIContextWorkingColorSpace description]]);
if ([kCIFilterGeneratorExportedKey isKindOfClass:[NSString class]]) [d setObject:kCIFilterGeneratorExportedKey forKey:@"kCIFilterGeneratorExportedKey"]; else NSLog([@"Can't initialize kCIFilterGeneratorExportedKey with object " stringByAppendingString:[kCIFilterGeneratorExportedKey description]]);
if ([kCIFilterGeneratorExportedKeyName isKindOfClass:[NSString class]]) [d setObject:kCIFilterGeneratorExportedKeyName forKey:@"kCIFilterGeneratorExportedKeyName"]; else NSLog([@"Can't initialize kCIFilterGeneratorExportedKeyName with object " stringByAppendingString:[kCIFilterGeneratorExportedKeyName description]]);
if ([kCIFilterGeneratorExportedKeyTargetObject isKindOfClass:[NSString class]]) [d setObject:kCIFilterGeneratorExportedKeyTargetObject forKey:@"kCIFilterGeneratorExportedKeyTargetObject"]; else NSLog([@"Can't initialize kCIFilterGeneratorExportedKeyTargetObject with object " stringByAppendingString:[kCIFilterGeneratorExportedKeyTargetObject description]]);
[d setObject:[Number numberWithDouble:kCIFormatARGB8] forKey:@"kCIFormatARGB8"];
[d setObject:[Number numberWithDouble:kCIFormatRGBA16] forKey:@"kCIFormatRGBA16"];
[d setObject:[Number numberWithDouble:kCIFormatRGBAf] forKey:@"kCIFormatRGBAf"];
if ([kCIImageColorSpace isKindOfClass:[NSString class]]) [d setObject:kCIImageColorSpace forKey:@"kCIImageColorSpace"]; else NSLog([@"Can't initialize kCIImageColorSpace with object " stringByAppendingString:[kCIImageColorSpace description]]);
if ([kCIImageProviderTileSize isKindOfClass:[NSString class]]) [d setObject:kCIImageProviderTileSize forKey:@"kCIImageProviderTileSize"]; else NSLog([@"Can't initialize kCIImageProviderTileSize with object " stringByAppendingString:[kCIImageProviderTileSize description]]);
if ([kCIImageProviderUserInfo isKindOfClass:[NSString class]]) [d setObject:kCIImageProviderUserInfo forKey:@"kCIImageProviderUserInfo"]; else NSLog([@"Can't initialize kCIImageProviderUserInfo with object " stringByAppendingString:[kCIImageProviderUserInfo description]]);
if ([kCIInputAllowDraftModeKey isKindOfClass:[NSString class]]) [d setObject:kCIInputAllowDraftModeKey forKey:@"kCIInputAllowDraftModeKey"]; else NSLog([@"Can't initialize kCIInputAllowDraftModeKey with object " stringByAppendingString:[kCIInputAllowDraftModeKey description]]);
if ([kCIInputAngleKey isKindOfClass:[NSString class]]) [d setObject:kCIInputAngleKey forKey:@"kCIInputAngleKey"]; else NSLog([@"Can't initialize kCIInputAngleKey with object " stringByAppendingString:[kCIInputAngleKey description]]);
if ([kCIInputAspectRatioKey isKindOfClass:[NSString class]]) [d setObject:kCIInputAspectRatioKey forKey:@"kCIInputAspectRatioKey"]; else NSLog([@"Can't initialize kCIInputAspectRatioKey with object " stringByAppendingString:[kCIInputAspectRatioKey description]]);
if ([kCIInputBackgroundImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBackgroundImageKey forKey:@"kCIInputBackgroundImageKey"]; else NSLog([@"Can't initialize kCIInputBackgroundImageKey with object " stringByAppendingString:[kCIInputBackgroundImageKey description]]);
if ([kCIInputBiasKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBiasKey forKey:@"kCIInputBiasKey"]; else NSLog([@"Can't initialize kCIInputBiasKey with object " stringByAppendingString:[kCIInputBiasKey description]]);
if ([kCIInputBoostKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBoostKey forKey:@"kCIInputBoostKey"]; else NSLog([@"Can't initialize kCIInputBoostKey with object " stringByAppendingString:[kCIInputBoostKey description]]);
if ([kCIInputBoostShadowAmountKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBoostShadowAmountKey forKey:@"kCIInputBoostShadowAmountKey"]; else NSLog([@"Can't initialize kCIInputBoostShadowAmountKey with object " stringByAppendingString:[kCIInputBoostShadowAmountKey description]]);
if ([kCIInputBrightnessKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBrightnessKey forKey:@"kCIInputBrightnessKey"]; else NSLog([@"Can't initialize kCIInputBrightnessKey with object " stringByAppendingString:[kCIInputBrightnessKey description]]);
if ([kCIInputCenterKey isKindOfClass:[NSString class]]) [d setObject:kCIInputCenterKey forKey:@"kCIInputCenterKey"]; else NSLog([@"Can't initialize kCIInputCenterKey with object " stringByAppendingString:[kCIInputCenterKey description]]);
if ([kCIInputColorKey isKindOfClass:[NSString class]]) [d setObject:kCIInputColorKey forKey:@"kCIInputColorKey"]; else NSLog([@"Can't initialize kCIInputColorKey with object " stringByAppendingString:[kCIInputColorKey description]]);
if ([kCIInputContrastKey isKindOfClass:[NSString class]]) [d setObject:kCIInputContrastKey forKey:@"kCIInputContrastKey"]; else NSLog([@"Can't initialize kCIInputContrastKey with object " stringByAppendingString:[kCIInputContrastKey description]]);
if ([kCIInputDecoderVersionKey isKindOfClass:[NSString class]]) [d setObject:kCIInputDecoderVersionKey forKey:@"kCIInputDecoderVersionKey"]; else NSLog([@"Can't initialize kCIInputDecoderVersionKey with object " stringByAppendingString:[kCIInputDecoderVersionKey description]]);
if ([kCIInputEVKey isKindOfClass:[NSString class]]) [d setObject:kCIInputEVKey forKey:@"kCIInputEVKey"]; else NSLog([@"Can't initialize kCIInputEVKey with object " stringByAppendingString:[kCIInputEVKey description]]);
if ([kCIInputEnableChromaticNoiseTrackingKey isKindOfClass:[NSString class]]) [d setObject:kCIInputEnableChromaticNoiseTrackingKey forKey:@"kCIInputEnableChromaticNoiseTrackingKey"]; else NSLog([@"Can't initialize kCIInputEnableChromaticNoiseTrackingKey with object " stringByAppendingString:[kCIInputEnableChromaticNoiseTrackingKey description]]);
if ([kCIInputEnableSharpeningKey isKindOfClass:[NSString class]]) [d setObject:kCIInputEnableSharpeningKey forKey:@"kCIInputEnableSharpeningKey"]; else NSLog([@"Can't initialize kCIInputEnableSharpeningKey with object " stringByAppendingString:[kCIInputEnableSharpeningKey description]]);
if ([kCIInputExtentKey isKindOfClass:[NSString class]]) [d setObject:kCIInputExtentKey forKey:@"kCIInputExtentKey"]; else NSLog([@"Can't initialize kCIInputExtentKey with object " stringByAppendingString:[kCIInputExtentKey description]]);
if ([kCIInputGradientImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputGradientImageKey forKey:@"kCIInputGradientImageKey"]; else NSLog([@"Can't initialize kCIInputGradientImageKey with object " stringByAppendingString:[kCIInputGradientImageKey description]]);
if ([kCIInputIgnoreImageOrientationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputIgnoreImageOrientationKey forKey:@"kCIInputIgnoreImageOrientationKey"]; else NSLog([@"Can't initialize kCIInputIgnoreImageOrientationKey with object " stringByAppendingString:[kCIInputIgnoreImageOrientationKey description]]);
if ([kCIInputImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputImageKey forKey:@"kCIInputImageKey"]; else NSLog([@"Can't initialize kCIInputImageKey with object " stringByAppendingString:[kCIInputImageKey description]]);
if ([kCIInputImageOrientationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputImageOrientationKey forKey:@"kCIInputImageOrientationKey"]; else NSLog([@"Can't initialize kCIInputImageOrientationKey with object " stringByAppendingString:[kCIInputImageOrientationKey description]]);
if ([kCIInputIntensityKey isKindOfClass:[NSString class]]) [d setObject:kCIInputIntensityKey forKey:@"kCIInputIntensityKey"]; else NSLog([@"Can't initialize kCIInputIntensityKey with object " stringByAppendingString:[kCIInputIntensityKey description]]);
if ([kCIInputMaskImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputMaskImageKey forKey:@"kCIInputMaskImageKey"]; else NSLog([@"Can't initialize kCIInputMaskImageKey with object " stringByAppendingString:[kCIInputMaskImageKey description]]);
if ([kCIInputNeutralChromaticityXKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralChromaticityXKey forKey:@"kCIInputNeutralChromaticityXKey"]; else NSLog([@"Can't initialize kCIInputNeutralChromaticityXKey with object " stringByAppendingString:[kCIInputNeutralChromaticityXKey description]]);
if ([kCIInputNeutralChromaticityYKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralChromaticityYKey forKey:@"kCIInputNeutralChromaticityYKey"]; else NSLog([@"Can't initialize kCIInputNeutralChromaticityYKey with object " stringByAppendingString:[kCIInputNeutralChromaticityYKey description]]);
if ([kCIInputNeutralLocationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralLocationKey forKey:@"kCIInputNeutralLocationKey"]; else NSLog([@"Can't initialize kCIInputNeutralLocationKey with object " stringByAppendingString:[kCIInputNeutralLocationKey description]]);
if ([kCIInputNeutralTemperatureKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralTemperatureKey forKey:@"kCIInputNeutralTemperatureKey"]; else NSLog([@"Can't initialize kCIInputNeutralTemperatureKey with object " stringByAppendingString:[kCIInputNeutralTemperatureKey description]]);
if ([kCIInputNeutralTintKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralTintKey forKey:@"kCIInputNeutralTintKey"]; else NSLog([@"Can't initialize kCIInputNeutralTintKey with object " stringByAppendingString:[kCIInputNeutralTintKey description]]);
if ([kCIInputRadiusKey isKindOfClass:[NSString class]]) [d setObject:kCIInputRadiusKey forKey:@"kCIInputRadiusKey"]; else NSLog([@"Can't initialize kCIInputRadiusKey with object " stringByAppendingString:[kCIInputRadiusKey description]]);
if ([kCIInputRefractionKey isKindOfClass:[NSString class]]) [d setObject:kCIInputRefractionKey forKey:@"kCIInputRefractionKey"]; else NSLog([@"Can't initialize kCIInputRefractionKey with object " stringByAppendingString:[kCIInputRefractionKey description]]);
if ([kCIInputSaturationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputSaturationKey forKey:@"kCIInputSaturationKey"]; else NSLog([@"Can't initialize kCIInputSaturationKey with object " stringByAppendingString:[kCIInputSaturationKey description]]);
if ([kCIInputScaleFactorKey isKindOfClass:[NSString class]]) [d setObject:kCIInputScaleFactorKey forKey:@"kCIInputScaleFactorKey"]; else NSLog([@"Can't initialize kCIInputScaleFactorKey with object " stringByAppendingString:[kCIInputScaleFactorKey description]]);
if ([kCIInputScaleKey isKindOfClass:[NSString class]]) [d setObject:kCIInputScaleKey forKey:@"kCIInputScaleKey"]; else NSLog([@"Can't initialize kCIInputScaleKey with object " stringByAppendingString:[kCIInputScaleKey description]]);
if ([kCIInputShadingImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputShadingImageKey forKey:@"kCIInputShadingImageKey"]; else NSLog([@"Can't initialize kCIInputShadingImageKey with object " stringByAppendingString:[kCIInputShadingImageKey description]]);
if ([kCIInputSharpnessKey isKindOfClass:[NSString class]]) [d setObject:kCIInputSharpnessKey forKey:@"kCIInputSharpnessKey"]; else NSLog([@"Can't initialize kCIInputSharpnessKey with object " stringByAppendingString:[kCIInputSharpnessKey description]]);
if ([kCIInputTargetImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputTargetImageKey forKey:@"kCIInputTargetImageKey"]; else NSLog([@"Can't initialize kCIInputTargetImageKey with object " stringByAppendingString:[kCIInputTargetImageKey description]]);
if ([kCIInputTimeKey isKindOfClass:[NSString class]]) [d setObject:kCIInputTimeKey forKey:@"kCIInputTimeKey"]; else NSLog([@"Can't initialize kCIInputTimeKey with object " stringByAppendingString:[kCIInputTimeKey description]]);
if ([kCIInputTransformKey isKindOfClass:[NSString class]]) [d setObject:kCIInputTransformKey forKey:@"kCIInputTransformKey"]; else NSLog([@"Can't initialize kCIInputTransformKey with object " stringByAppendingString:[kCIInputTransformKey description]]);
if ([kCIInputWidthKey isKindOfClass:[NSString class]]) [d setObject:kCIInputWidthKey forKey:@"kCIInputWidthKey"]; else NSLog([@"Can't initialize kCIInputWidthKey with object " stringByAppendingString:[kCIInputWidthKey description]]);
if ([kCIOutputImageKey isKindOfClass:[NSString class]]) [d setObject:kCIOutputImageKey forKey:@"kCIOutputImageKey"]; else NSLog([@"Can't initialize kCIOutputImageKey with object " stringByAppendingString:[kCIOutputImageKey description]]);
if ([kCISamplerAffineMatrix isKindOfClass:[NSString class]]) [d setObject:kCISamplerAffineMatrix forKey:@"kCISamplerAffineMatrix"]; else NSLog([@"Can't initialize kCISamplerAffineMatrix with object " stringByAppendingString:[kCISamplerAffineMatrix description]]);
if ([kCISamplerFilterLinear isKindOfClass:[NSString class]]) [d setObject:kCISamplerFilterLinear forKey:@"kCISamplerFilterLinear"]; else NSLog([@"Can't initialize kCISamplerFilterLinear with object " stringByAppendingString:[kCISamplerFilterLinear description]]);
if ([kCISamplerFilterMode isKindOfClass:[NSString class]]) [d setObject:kCISamplerFilterMode forKey:@"kCISamplerFilterMode"]; else NSLog([@"Can't initialize kCISamplerFilterMode with object " stringByAppendingString:[kCISamplerFilterMode description]]);
if ([kCISamplerFilterNearest isKindOfClass:[NSString class]]) [d setObject:kCISamplerFilterNearest forKey:@"kCISamplerFilterNearest"]; else NSLog([@"Can't initialize kCISamplerFilterNearest with object " stringByAppendingString:[kCISamplerFilterNearest description]]);
if ([kCISamplerWrapBlack isKindOfClass:[NSString class]]) [d setObject:kCISamplerWrapBlack forKey:@"kCISamplerWrapBlack"]; else NSLog([@"Can't initialize kCISamplerWrapBlack with object " stringByAppendingString:[kCISamplerWrapBlack description]]);
if ([kCISamplerWrapClamp isKindOfClass:[NSString class]]) [d setObject:kCISamplerWrapClamp forKey:@"kCISamplerWrapClamp"]; else NSLog([@"Can't initialize kCISamplerWrapClamp with object " stringByAppendingString:[kCISamplerWrapClamp description]]);
if ([kCISamplerWrapMode isKindOfClass:[NSString class]]) [d setObject:kCISamplerWrapMode forKey:@"kCISamplerWrapMode"]; else NSLog([@"Can't initialize kCISamplerWrapMode with object " stringByAppendingString:[kCISamplerWrapMode description]]);
if ([kCISupportedDecoderVersionsKey isKindOfClass:[NSString class]]) [d setObject:kCISupportedDecoderVersionsKey forKey:@"kCISupportedDecoderVersionsKey"]; else NSLog([@"Can't initialize kCISupportedDecoderVersionsKey with object " stringByAppendingString:[kCISupportedDecoderVersionsKey description]]);
if ([kCIUIParameterSet isKindOfClass:[NSString class]]) [d setObject:kCIUIParameterSet forKey:@"kCIUIParameterSet"]; else NSLog([@"Can't initialize kCIUIParameterSet with object " stringByAppendingString:[kCIUIParameterSet description]]);
if ([kCIUISetAdvanced isKindOfClass:[NSString class]]) [d setObject:kCIUISetAdvanced forKey:@"kCIUISetAdvanced"]; else NSLog([@"Can't initialize kCIUISetAdvanced with object " stringByAppendingString:[kCIUISetAdvanced description]]);
if ([kCIUISetBasic isKindOfClass:[NSString class]]) [d setObject:kCIUISetBasic forKey:@"kCIUISetBasic"]; else NSLog([@"Can't initialize kCIUISetBasic with object " stringByAppendingString:[kCIUISetBasic description]]);
if ([kCIUISetDevelopment isKindOfClass:[NSString class]]) [d setObject:kCIUISetDevelopment forKey:@"kCIUISetDevelopment"]; else NSLog([@"Can't initialize kCIUISetDevelopment with object " stringByAppendingString:[kCIUISetDevelopment description]]);
if ([kCIUISetIntermediate isKindOfClass:[NSString class]]) [d setObject:kCIUISetIntermediate forKey:@"kCIUISetIntermediate"]; else NSLog([@"Can't initialize kCIUISetIntermediate with object " stringByAppendingString:[kCIUISetIntermediate description]]);
[d setObject:[Number numberWithDouble:kCAConstraintHeight] forKey:@"kCAConstraintHeight"];
[d setObject:[Number numberWithDouble:kCAConstraintMaxX] forKey:@"kCAConstraintMaxX"];
[d setObject:[Number numberWithDouble:kCAConstraintMaxY] forKey:@"kCAConstraintMaxY"];
[d setObject:[Number numberWithDouble:kCAConstraintMidX] forKey:@"kCAConstraintMidX"];
[d setObject:[Number numberWithDouble:kCAConstraintMidY] forKey:@"kCAConstraintMidY"];
[d setObject:[Number numberWithDouble:kCAConstraintMinX] forKey:@"kCAConstraintMinX"];
[d setObject:[Number numberWithDouble:kCAConstraintMinY] forKey:@"kCAConstraintMinY"];
[d setObject:[Number numberWithDouble:kCAConstraintWidth] forKey:@"kCAConstraintWidth"];
[d setObject:[Number numberWithDouble:kCALayerBottomEdge] forKey:@"kCALayerBottomEdge"];
[d setObject:[Number numberWithDouble:kCALayerHeightSizable] forKey:@"kCALayerHeightSizable"];
[d setObject:[Number numberWithDouble:kCALayerLeftEdge] forKey:@"kCALayerLeftEdge"];
[d setObject:[Number numberWithDouble:kCALayerMaxXMargin] forKey:@"kCALayerMaxXMargin"];
[d setObject:[Number numberWithDouble:kCALayerMaxYMargin] forKey:@"kCALayerMaxYMargin"];
[d setObject:[Number numberWithDouble:kCALayerMinXMargin] forKey:@"kCALayerMinXMargin"];
[d setObject:[Number numberWithDouble:kCALayerMinYMargin] forKey:@"kCALayerMinYMargin"];
[d setObject:[Number numberWithDouble:kCALayerNotSizable] forKey:@"kCALayerNotSizable"];
[d setObject:[Number numberWithDouble:kCALayerRightEdge] forKey:@"kCALayerRightEdge"];
[d setObject:[Number numberWithDouble:kCALayerTopEdge] forKey:@"kCALayerTopEdge"];
[d setObject:[Number numberWithDouble:kCALayerWidthSizable] forKey:@"kCALayerWidthSizable"];
if ([kCAAlignmentCenter isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentCenter forKey:@"kCAAlignmentCenter"]; else NSLog([@"Can't initialize kCAAlignmentCenter with object " stringByAppendingString:[kCAAlignmentCenter description]]);
if ([kCAAlignmentJustified isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentJustified forKey:@"kCAAlignmentJustified"]; else NSLog([@"Can't initialize kCAAlignmentJustified with object " stringByAppendingString:[kCAAlignmentJustified description]]);
if ([kCAAlignmentLeft isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentLeft forKey:@"kCAAlignmentLeft"]; else NSLog([@"Can't initialize kCAAlignmentLeft with object " stringByAppendingString:[kCAAlignmentLeft description]]);
if ([kCAAlignmentNatural isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentNatural forKey:@"kCAAlignmentNatural"]; else NSLog([@"Can't initialize kCAAlignmentNatural with object " stringByAppendingString:[kCAAlignmentNatural description]]);
if ([kCAAlignmentRight isKindOfClass:[NSString class]]) [d setObject:kCAAlignmentRight forKey:@"kCAAlignmentRight"]; else NSLog([@"Can't initialize kCAAlignmentRight with object " stringByAppendingString:[kCAAlignmentRight description]]);
if ([kCAAnimationDiscrete isKindOfClass:[NSString class]]) [d setObject:kCAAnimationDiscrete forKey:@"kCAAnimationDiscrete"]; else NSLog([@"Can't initialize kCAAnimationDiscrete with object " stringByAppendingString:[kCAAnimationDiscrete description]]);
if ([kCAAnimationLinear isKindOfClass:[NSString class]]) [d setObject:kCAAnimationLinear forKey:@"kCAAnimationLinear"]; else NSLog([@"Can't initialize kCAAnimationLinear with object " stringByAppendingString:[kCAAnimationLinear description]]);
if ([kCAAnimationPaced isKindOfClass:[NSString class]]) [d setObject:kCAAnimationPaced forKey:@"kCAAnimationPaced"]; else NSLog([@"Can't initialize kCAAnimationPaced with object " stringByAppendingString:[kCAAnimationPaced description]]);
if ([kCAAnimationRotateAuto isKindOfClass:[NSString class]]) [d setObject:kCAAnimationRotateAuto forKey:@"kCAAnimationRotateAuto"]; else NSLog([@"Can't initialize kCAAnimationRotateAuto with object " stringByAppendingString:[kCAAnimationRotateAuto description]]);
if ([kCAAnimationRotateAutoReverse isKindOfClass:[NSString class]]) [d setObject:kCAAnimationRotateAutoReverse forKey:@"kCAAnimationRotateAutoReverse"]; else NSLog([@"Can't initialize kCAAnimationRotateAutoReverse with object " stringByAppendingString:[kCAAnimationRotateAutoReverse description]]);
if ([kCAFillModeBackwards isKindOfClass:[NSString class]]) [d setObject:kCAFillModeBackwards forKey:@"kCAFillModeBackwards"]; else NSLog([@"Can't initialize kCAFillModeBackwards with object " stringByAppendingString:[kCAFillModeBackwards description]]);
if ([kCAFillModeBoth isKindOfClass:[NSString class]]) [d setObject:kCAFillModeBoth forKey:@"kCAFillModeBoth"]; else NSLog([@"Can't initialize kCAFillModeBoth with object " stringByAppendingString:[kCAFillModeBoth description]]);
if ([kCAFillModeForwards isKindOfClass:[NSString class]]) [d setObject:kCAFillModeForwards forKey:@"kCAFillModeForwards"]; else NSLog([@"Can't initialize kCAFillModeForwards with object " stringByAppendingString:[kCAFillModeForwards description]]);
if ([kCAFillModeRemoved isKindOfClass:[NSString class]]) [d setObject:kCAFillModeRemoved forKey:@"kCAFillModeRemoved"]; else NSLog([@"Can't initialize kCAFillModeRemoved with object " stringByAppendingString:[kCAFillModeRemoved description]]);
if ([kCAFilterLinear isKindOfClass:[NSString class]]) [d setObject:kCAFilterLinear forKey:@"kCAFilterLinear"]; else NSLog([@"Can't initialize kCAFilterLinear with object " stringByAppendingString:[kCAFilterLinear description]]);
if ([kCAFilterNearest isKindOfClass:[NSString class]]) [d setObject:kCAFilterNearest forKey:@"kCAFilterNearest"]; else NSLog([@"Can't initialize kCAFilterNearest with object " stringByAppendingString:[kCAFilterNearest description]]);
if ([kCAGravityBottom isKindOfClass:[NSString class]]) [d setObject:kCAGravityBottom forKey:@"kCAGravityBottom"]; else NSLog([@"Can't initialize kCAGravityBottom with object " stringByAppendingString:[kCAGravityBottom description]]);
if ([kCAGravityBottomLeft isKindOfClass:[NSString class]]) [d setObject:kCAGravityBottomLeft forKey:@"kCAGravityBottomLeft"]; else NSLog([@"Can't initialize kCAGravityBottomLeft with object " stringByAppendingString:[kCAGravityBottomLeft description]]);
if ([kCAGravityBottomRight isKindOfClass:[NSString class]]) [d setObject:kCAGravityBottomRight forKey:@"kCAGravityBottomRight"]; else NSLog([@"Can't initialize kCAGravityBottomRight with object " stringByAppendingString:[kCAGravityBottomRight description]]);
if ([kCAGravityCenter isKindOfClass:[NSString class]]) [d setObject:kCAGravityCenter forKey:@"kCAGravityCenter"]; else NSLog([@"Can't initialize kCAGravityCenter with object " stringByAppendingString:[kCAGravityCenter description]]);
if ([kCAGravityLeft isKindOfClass:[NSString class]]) [d setObject:kCAGravityLeft forKey:@"kCAGravityLeft"]; else NSLog([@"Can't initialize kCAGravityLeft with object " stringByAppendingString:[kCAGravityLeft description]]);
if ([kCAGravityResize isKindOfClass:[NSString class]]) [d setObject:kCAGravityResize forKey:@"kCAGravityResize"]; else NSLog([@"Can't initialize kCAGravityResize with object " stringByAppendingString:[kCAGravityResize description]]);
if ([kCAGravityResizeAspect isKindOfClass:[NSString class]]) [d setObject:kCAGravityResizeAspect forKey:@"kCAGravityResizeAspect"]; else NSLog([@"Can't initialize kCAGravityResizeAspect with object " stringByAppendingString:[kCAGravityResizeAspect description]]);
if ([kCAGravityResizeAspectFill isKindOfClass:[NSString class]]) [d setObject:kCAGravityResizeAspectFill forKey:@"kCAGravityResizeAspectFill"]; else NSLog([@"Can't initialize kCAGravityResizeAspectFill with object " stringByAppendingString:[kCAGravityResizeAspectFill description]]);
if ([kCAGravityRight isKindOfClass:[NSString class]]) [d setObject:kCAGravityRight forKey:@"kCAGravityRight"]; else NSLog([@"Can't initialize kCAGravityRight with object " stringByAppendingString:[kCAGravityRight description]]);
if ([kCAGravityTop isKindOfClass:[NSString class]]) [d setObject:kCAGravityTop forKey:@"kCAGravityTop"]; else NSLog([@"Can't initialize kCAGravityTop with object " stringByAppendingString:[kCAGravityTop description]]);
if ([kCAGravityTopLeft isKindOfClass:[NSString class]]) [d setObject:kCAGravityTopLeft forKey:@"kCAGravityTopLeft"]; else NSLog([@"Can't initialize kCAGravityTopLeft with object " stringByAppendingString:[kCAGravityTopLeft description]]);
if ([kCAGravityTopRight isKindOfClass:[NSString class]]) [d setObject:kCAGravityTopRight forKey:@"kCAGravityTopRight"]; else NSLog([@"Can't initialize kCAGravityTopRight with object " stringByAppendingString:[kCAGravityTopRight description]]);
if ([kCAMediaTimingFunctionEaseIn isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionEaseIn forKey:@"kCAMediaTimingFunctionEaseIn"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionEaseIn with object " stringByAppendingString:[kCAMediaTimingFunctionEaseIn description]]);
if ([kCAMediaTimingFunctionEaseInEaseOut isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionEaseInEaseOut forKey:@"kCAMediaTimingFunctionEaseInEaseOut"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionEaseInEaseOut with object " stringByAppendingString:[kCAMediaTimingFunctionEaseInEaseOut description]]);
if ([kCAMediaTimingFunctionEaseOut isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionEaseOut forKey:@"kCAMediaTimingFunctionEaseOut"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionEaseOut with object " stringByAppendingString:[kCAMediaTimingFunctionEaseOut description]]);
if ([kCAMediaTimingFunctionLinear isKindOfClass:[NSString class]]) [d setObject:kCAMediaTimingFunctionLinear forKey:@"kCAMediaTimingFunctionLinear"]; else NSLog([@"Can't initialize kCAMediaTimingFunctionLinear with object " stringByAppendingString:[kCAMediaTimingFunctionLinear description]]);
if ([kCAOnOrderIn isKindOfClass:[NSString class]]) [d setObject:kCAOnOrderIn forKey:@"kCAOnOrderIn"]; else NSLog([@"Can't initialize kCAOnOrderIn with object " stringByAppendingString:[kCAOnOrderIn description]]);
if ([kCAOnOrderOut isKindOfClass:[NSString class]]) [d setObject:kCAOnOrderOut forKey:@"kCAOnOrderOut"]; else NSLog([@"Can't initialize kCAOnOrderOut with object " stringByAppendingString:[kCAOnOrderOut description]]);
if ([kCAScrollBoth isKindOfClass:[NSString class]]) [d setObject:kCAScrollBoth forKey:@"kCAScrollBoth"]; else NSLog([@"Can't initialize kCAScrollBoth with object " stringByAppendingString:[kCAScrollBoth description]]);
if ([kCAScrollHorizontally isKindOfClass:[NSString class]]) [d setObject:kCAScrollHorizontally forKey:@"kCAScrollHorizontally"]; else NSLog([@"Can't initialize kCAScrollHorizontally with object " stringByAppendingString:[kCAScrollHorizontally description]]);
if ([kCAScrollNone isKindOfClass:[NSString class]]) [d setObject:kCAScrollNone forKey:@"kCAScrollNone"]; else NSLog([@"Can't initialize kCAScrollNone with object " stringByAppendingString:[kCAScrollNone description]]);
if ([kCAScrollVertically isKindOfClass:[NSString class]]) [d setObject:kCAScrollVertically forKey:@"kCAScrollVertically"]; else NSLog([@"Can't initialize kCAScrollVertically with object " stringByAppendingString:[kCAScrollVertically description]]);
if ([kCATransactionAnimationDuration isKindOfClass:[NSString class]]) [d setObject:kCATransactionAnimationDuration forKey:@"kCATransactionAnimationDuration"]; else NSLog([@"Can't initialize kCATransactionAnimationDuration with object " stringByAppendingString:[kCATransactionAnimationDuration description]]);
if ([kCATransactionDisableActions isKindOfClass:[NSString class]]) [d setObject:kCATransactionDisableActions forKey:@"kCATransactionDisableActions"]; else NSLog([@"Can't initialize kCATransactionDisableActions with object " stringByAppendingString:[kCATransactionDisableActions description]]);
if ([kCATransition isKindOfClass:[NSString class]]) [d setObject:kCATransition forKey:@"kCATransition"]; else NSLog([@"Can't initialize kCATransition with object " stringByAppendingString:[kCATransition description]]);
if ([kCATransitionFade isKindOfClass:[NSString class]]) [d setObject:kCATransitionFade forKey:@"kCATransitionFade"]; else NSLog([@"Can't initialize kCATransitionFade with object " stringByAppendingString:[kCATransitionFade description]]);
if ([kCATransitionFromBottom isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromBottom forKey:@"kCATransitionFromBottom"]; else NSLog([@"Can't initialize kCATransitionFromBottom with object " stringByAppendingString:[kCATransitionFromBottom description]]);
if ([kCATransitionFromLeft isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromLeft forKey:@"kCATransitionFromLeft"]; else NSLog([@"Can't initialize kCATransitionFromLeft with object " stringByAppendingString:[kCATransitionFromLeft description]]);
if ([kCATransitionFromRight isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromRight forKey:@"kCATransitionFromRight"]; else NSLog([@"Can't initialize kCATransitionFromRight with object " stringByAppendingString:[kCATransitionFromRight description]]);
if ([kCATransitionFromTop isKindOfClass:[NSString class]]) [d setObject:kCATransitionFromTop forKey:@"kCATransitionFromTop"]; else NSLog([@"Can't initialize kCATransitionFromTop with object " stringByAppendingString:[kCATransitionFromTop description]]);
if ([kCATransitionMoveIn isKindOfClass:[NSString class]]) [d setObject:kCATransitionMoveIn forKey:@"kCATransitionMoveIn"]; else NSLog([@"Can't initialize kCATransitionMoveIn with object " stringByAppendingString:[kCATransitionMoveIn description]]);
if ([kCATransitionPush isKindOfClass:[NSString class]]) [d setObject:kCATransitionPush forKey:@"kCATransitionPush"]; else NSLog([@"Can't initialize kCATransitionPush with object " stringByAppendingString:[kCATransitionPush description]]);
if ([kCATransitionReveal isKindOfClass:[NSString class]]) [d setObject:kCATransitionReveal forKey:@"kCATransitionReveal"]; else NSLog([@"Can't initialize kCATransitionReveal with object " stringByAppendingString:[kCATransitionReveal description]]);
if ([kCATruncationEnd isKindOfClass:[NSString class]]) [d setObject:kCATruncationEnd forKey:@"kCATruncationEnd"]; else NSLog([@"Can't initialize kCATruncationEnd with object " stringByAppendingString:[kCATruncationEnd description]]);
if ([kCATruncationMiddle isKindOfClass:[NSString class]]) [d setObject:kCATruncationMiddle forKey:@"kCATruncationMiddle"]; else NSLog([@"Can't initialize kCATruncationMiddle with object " stringByAppendingString:[kCATruncationMiddle description]]);
if ([kCATruncationNone isKindOfClass:[NSString class]]) [d setObject:kCATruncationNone forKey:@"kCATruncationNone"]; else NSLog([@"Can't initialize kCATruncationNone with object " stringByAppendingString:[kCATruncationNone description]]);
if ([kCATruncationStart isKindOfClass:[NSString class]]) [d setObject:kCATruncationStart forKey:@"kCATruncationStart"]; else NSLog([@"Can't initialize kCATruncationStart with object " stringByAppendingString:[kCATruncationStart description]]);
if ([kCIApplyOptionDefinition isKindOfClass:[NSString class]]) [d setObject:kCIApplyOptionDefinition forKey:@"kCIApplyOptionDefinition"]; else NSLog([@"Can't initialize kCIApplyOptionDefinition with object " stringByAppendingString:[kCIApplyOptionDefinition description]]);
if ([kCIApplyOptionExtent isKindOfClass:[NSString class]]) [d setObject:kCIApplyOptionExtent forKey:@"kCIApplyOptionExtent"]; else NSLog([@"Can't initialize kCIApplyOptionExtent with object " stringByAppendingString:[kCIApplyOptionExtent description]]);
if ([kCIApplyOptionUserInfo isKindOfClass:[NSString class]]) [d setObject:kCIApplyOptionUserInfo forKey:@"kCIApplyOptionUserInfo"]; else NSLog([@"Can't initialize kCIApplyOptionUserInfo with object " stringByAppendingString:[kCIApplyOptionUserInfo description]]);
if ([kCIAttributeClass isKindOfClass:[NSString class]]) [d setObject:kCIAttributeClass forKey:@"kCIAttributeClass"]; else NSLog([@"Can't initialize kCIAttributeClass with object " stringByAppendingString:[kCIAttributeClass description]]);
if ([kCIAttributeDefault isKindOfClass:[NSString class]]) [d setObject:kCIAttributeDefault forKey:@"kCIAttributeDefault"]; else NSLog([@"Can't initialize kCIAttributeDefault with object " stringByAppendingString:[kCIAttributeDefault description]]);
if ([kCIAttributeDescription isKindOfClass:[NSString class]]) [d setObject:kCIAttributeDescription forKey:@"kCIAttributeDescription"]; else NSLog([@"Can't initialize kCIAttributeDescription with object " stringByAppendingString:[kCIAttributeDescription description]]);
if ([kCIAttributeDisplayName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeDisplayName forKey:@"kCIAttributeDisplayName"]; else NSLog([@"Can't initialize kCIAttributeDisplayName with object " stringByAppendingString:[kCIAttributeDisplayName description]]);
if ([kCIAttributeFilterCategories isKindOfClass:[NSString class]]) [d setObject:kCIAttributeFilterCategories forKey:@"kCIAttributeFilterCategories"]; else NSLog([@"Can't initialize kCIAttributeFilterCategories with object " stringByAppendingString:[kCIAttributeFilterCategories description]]);
if ([kCIAttributeFilterDisplayName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeFilterDisplayName forKey:@"kCIAttributeFilterDisplayName"]; else NSLog([@"Can't initialize kCIAttributeFilterDisplayName with object " stringByAppendingString:[kCIAttributeFilterDisplayName description]]);
if ([kCIAttributeFilterName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeFilterName forKey:@"kCIAttributeFilterName"]; else NSLog([@"Can't initialize kCIAttributeFilterName with object " stringByAppendingString:[kCIAttributeFilterName description]]);
if ([kCIAttributeIdentity isKindOfClass:[NSString class]]) [d setObject:kCIAttributeIdentity forKey:@"kCIAttributeIdentity"]; else NSLog([@"Can't initialize kCIAttributeIdentity with object " stringByAppendingString:[kCIAttributeIdentity description]]);
if ([kCIAttributeMax isKindOfClass:[NSString class]]) [d setObject:kCIAttributeMax forKey:@"kCIAttributeMax"]; else NSLog([@"Can't initialize kCIAttributeMax with object " stringByAppendingString:[kCIAttributeMax description]]);
if ([kCIAttributeMin isKindOfClass:[NSString class]]) [d setObject:kCIAttributeMin forKey:@"kCIAttributeMin"]; else NSLog([@"Can't initialize kCIAttributeMin with object " stringByAppendingString:[kCIAttributeMin description]]);
if ([kCIAttributeName isKindOfClass:[NSString class]]) [d setObject:kCIAttributeName forKey:@"kCIAttributeName"]; else NSLog([@"Can't initialize kCIAttributeName with object " stringByAppendingString:[kCIAttributeName description]]);
if ([kCIAttributeReferenceDocumentation isKindOfClass:[NSString class]]) [d setObject:kCIAttributeReferenceDocumentation forKey:@"kCIAttributeReferenceDocumentation"]; else NSLog([@"Can't initialize kCIAttributeReferenceDocumentation with object " stringByAppendingString:[kCIAttributeReferenceDocumentation description]]);
if ([kCIAttributeSliderMax isKindOfClass:[NSString class]]) [d setObject:kCIAttributeSliderMax forKey:@"kCIAttributeSliderMax"]; else NSLog([@"Can't initialize kCIAttributeSliderMax with object " stringByAppendingString:[kCIAttributeSliderMax description]]);
if ([kCIAttributeSliderMin isKindOfClass:[NSString class]]) [d setObject:kCIAttributeSliderMin forKey:@"kCIAttributeSliderMin"]; else NSLog([@"Can't initialize kCIAttributeSliderMin with object " stringByAppendingString:[kCIAttributeSliderMin description]]);
if ([kCIAttributeType isKindOfClass:[NSString class]]) [d setObject:kCIAttributeType forKey:@"kCIAttributeType"]; else NSLog([@"Can't initialize kCIAttributeType with object " stringByAppendingString:[kCIAttributeType description]]);
if ([kCIAttributeTypeAngle isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeAngle forKey:@"kCIAttributeTypeAngle"]; else NSLog([@"Can't initialize kCIAttributeTypeAngle with object " stringByAppendingString:[kCIAttributeTypeAngle description]]);
if ([kCIAttributeTypeBoolean isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeBoolean forKey:@"kCIAttributeTypeBoolean"]; else NSLog([@"Can't initialize kCIAttributeTypeBoolean with object " stringByAppendingString:[kCIAttributeTypeBoolean description]]);
if ([kCIAttributeTypeCount isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeCount forKey:@"kCIAttributeTypeCount"]; else NSLog([@"Can't initialize kCIAttributeTypeCount with object " stringByAppendingString:[kCIAttributeTypeCount description]]);
if ([kCIAttributeTypeDistance isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeDistance forKey:@"kCIAttributeTypeDistance"]; else NSLog([@"Can't initialize kCIAttributeTypeDistance with object " stringByAppendingString:[kCIAttributeTypeDistance description]]);
if ([kCIAttributeTypeGradient isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeGradient forKey:@"kCIAttributeTypeGradient"]; else NSLog([@"Can't initialize kCIAttributeTypeGradient with object " stringByAppendingString:[kCIAttributeTypeGradient description]]);
if ([kCIAttributeTypeInteger isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeInteger forKey:@"kCIAttributeTypeInteger"]; else NSLog([@"Can't initialize kCIAttributeTypeInteger with object " stringByAppendingString:[kCIAttributeTypeInteger description]]);
if ([kCIAttributeTypeOffset isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeOffset forKey:@"kCIAttributeTypeOffset"]; else NSLog([@"Can't initialize kCIAttributeTypeOffset with object " stringByAppendingString:[kCIAttributeTypeOffset description]]);
if ([kCIAttributeTypeOpaqueColor isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeOpaqueColor forKey:@"kCIAttributeTypeOpaqueColor"]; else NSLog([@"Can't initialize kCIAttributeTypeOpaqueColor with object " stringByAppendingString:[kCIAttributeTypeOpaqueColor description]]);
if ([kCIAttributeTypePosition isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypePosition forKey:@"kCIAttributeTypePosition"]; else NSLog([@"Can't initialize kCIAttributeTypePosition with object " stringByAppendingString:[kCIAttributeTypePosition description]]);
if ([kCIAttributeTypePosition3 isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypePosition3 forKey:@"kCIAttributeTypePosition3"]; else NSLog([@"Can't initialize kCIAttributeTypePosition3 with object " stringByAppendingString:[kCIAttributeTypePosition3 description]]);
if ([kCIAttributeTypeRectangle isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeRectangle forKey:@"kCIAttributeTypeRectangle"]; else NSLog([@"Can't initialize kCIAttributeTypeRectangle with object " stringByAppendingString:[kCIAttributeTypeRectangle description]]);
if ([kCIAttributeTypeScalar isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeScalar forKey:@"kCIAttributeTypeScalar"]; else NSLog([@"Can't initialize kCIAttributeTypeScalar with object " stringByAppendingString:[kCIAttributeTypeScalar description]]);
if ([kCIAttributeTypeTime isKindOfClass:[NSString class]]) [d setObject:kCIAttributeTypeTime forKey:@"kCIAttributeTypeTime"]; else NSLog([@"Can't initialize kCIAttributeTypeTime with object " stringByAppendingString:[kCIAttributeTypeTime description]]);
if ([kCICategoryBlur isKindOfClass:[NSString class]]) [d setObject:kCICategoryBlur forKey:@"kCICategoryBlur"]; else NSLog([@"Can't initialize kCICategoryBlur with object " stringByAppendingString:[kCICategoryBlur description]]);
if ([kCICategoryBuiltIn isKindOfClass:[NSString class]]) [d setObject:kCICategoryBuiltIn forKey:@"kCICategoryBuiltIn"]; else NSLog([@"Can't initialize kCICategoryBuiltIn with object " stringByAppendingString:[kCICategoryBuiltIn description]]);
if ([kCICategoryColorAdjustment isKindOfClass:[NSString class]]) [d setObject:kCICategoryColorAdjustment forKey:@"kCICategoryColorAdjustment"]; else NSLog([@"Can't initialize kCICategoryColorAdjustment with object " stringByAppendingString:[kCICategoryColorAdjustment description]]);
if ([kCICategoryColorEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryColorEffect forKey:@"kCICategoryColorEffect"]; else NSLog([@"Can't initialize kCICategoryColorEffect with object " stringByAppendingString:[kCICategoryColorEffect description]]);
if ([kCICategoryCompositeOperation isKindOfClass:[NSString class]]) [d setObject:kCICategoryCompositeOperation forKey:@"kCICategoryCompositeOperation"]; else NSLog([@"Can't initialize kCICategoryCompositeOperation with object " stringByAppendingString:[kCICategoryCompositeOperation description]]);
if ([kCICategoryDistortionEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryDistortionEffect forKey:@"kCICategoryDistortionEffect"]; else NSLog([@"Can't initialize kCICategoryDistortionEffect with object " stringByAppendingString:[kCICategoryDistortionEffect description]]);
if ([kCICategoryFilterGenerator isKindOfClass:[NSString class]]) [d setObject:kCICategoryFilterGenerator forKey:@"kCICategoryFilterGenerator"]; else NSLog([@"Can't initialize kCICategoryFilterGenerator with object " stringByAppendingString:[kCICategoryFilterGenerator description]]);
if ([kCICategoryGenerator isKindOfClass:[NSString class]]) [d setObject:kCICategoryGenerator forKey:@"kCICategoryGenerator"]; else NSLog([@"Can't initialize kCICategoryGenerator with object " stringByAppendingString:[kCICategoryGenerator description]]);
if ([kCICategoryGeometryAdjustment isKindOfClass:[NSString class]]) [d setObject:kCICategoryGeometryAdjustment forKey:@"kCICategoryGeometryAdjustment"]; else NSLog([@"Can't initialize kCICategoryGeometryAdjustment with object " stringByAppendingString:[kCICategoryGeometryAdjustment description]]);
if ([kCICategoryGradient isKindOfClass:[NSString class]]) [d setObject:kCICategoryGradient forKey:@"kCICategoryGradient"]; else NSLog([@"Can't initialize kCICategoryGradient with object " stringByAppendingString:[kCICategoryGradient description]]);
if ([kCICategoryHalftoneEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryHalftoneEffect forKey:@"kCICategoryHalftoneEffect"]; else NSLog([@"Can't initialize kCICategoryHalftoneEffect with object " stringByAppendingString:[kCICategoryHalftoneEffect description]]);
if ([kCICategoryHighDynamicRange isKindOfClass:[NSString class]]) [d setObject:kCICategoryHighDynamicRange forKey:@"kCICategoryHighDynamicRange"]; else NSLog([@"Can't initialize kCICategoryHighDynamicRange with object " stringByAppendingString:[kCICategoryHighDynamicRange description]]);
if ([kCICategoryInterlaced isKindOfClass:[NSString class]]) [d setObject:kCICategoryInterlaced forKey:@"kCICategoryInterlaced"]; else NSLog([@"Can't initialize kCICategoryInterlaced with object " stringByAppendingString:[kCICategoryInterlaced description]]);
if ([kCICategoryNonSquarePixels isKindOfClass:[NSString class]]) [d setObject:kCICategoryNonSquarePixels forKey:@"kCICategoryNonSquarePixels"]; else NSLog([@"Can't initialize kCICategoryNonSquarePixels with object " stringByAppendingString:[kCICategoryNonSquarePixels description]]);
if ([kCICategoryReduction isKindOfClass:[NSString class]]) [d setObject:kCICategoryReduction forKey:@"kCICategoryReduction"]; else NSLog([@"Can't initialize kCICategoryReduction with object " stringByAppendingString:[kCICategoryReduction description]]);
if ([kCICategorySharpen isKindOfClass:[NSString class]]) [d setObject:kCICategorySharpen forKey:@"kCICategorySharpen"]; else NSLog([@"Can't initialize kCICategorySharpen with object " stringByAppendingString:[kCICategorySharpen description]]);
if ([kCICategoryStillImage isKindOfClass:[NSString class]]) [d setObject:kCICategoryStillImage forKey:@"kCICategoryStillImage"]; else NSLog([@"Can't initialize kCICategoryStillImage with object " stringByAppendingString:[kCICategoryStillImage description]]);
if ([kCICategoryStylize isKindOfClass:[NSString class]]) [d setObject:kCICategoryStylize forKey:@"kCICategoryStylize"]; else NSLog([@"Can't initialize kCICategoryStylize with object " stringByAppendingString:[kCICategoryStylize description]]);
if ([kCICategoryTileEffect isKindOfClass:[NSString class]]) [d setObject:kCICategoryTileEffect forKey:@"kCICategoryTileEffect"]; else NSLog([@"Can't initialize kCICategoryTileEffect with object " stringByAppendingString:[kCICategoryTileEffect description]]);
if ([kCICategoryTransition isKindOfClass:[NSString class]]) [d setObject:kCICategoryTransition forKey:@"kCICategoryTransition"]; else NSLog([@"Can't initialize kCICategoryTransition with object " stringByAppendingString:[kCICategoryTransition description]]);
if ([kCICategoryVideo isKindOfClass:[NSString class]]) [d setObject:kCICategoryVideo forKey:@"kCICategoryVideo"]; else NSLog([@"Can't initialize kCICategoryVideo with object " stringByAppendingString:[kCICategoryVideo description]]);
if ([kCIContextOutputColorSpace isKindOfClass:[NSString class]]) [d setObject:kCIContextOutputColorSpace forKey:@"kCIContextOutputColorSpace"]; else NSLog([@"Can't initialize kCIContextOutputColorSpace with object " stringByAppendingString:[kCIContextOutputColorSpace description]]);
if ([kCIContextUseSoftwareRenderer isKindOfClass:[NSString class]]) [d setObject:kCIContextUseSoftwareRenderer forKey:@"kCIContextUseSoftwareRenderer"]; else NSLog([@"Can't initialize kCIContextUseSoftwareRenderer with object " stringByAppendingString:[kCIContextUseSoftwareRenderer description]]);
if ([kCIContextWorkingColorSpace isKindOfClass:[NSString class]]) [d setObject:kCIContextWorkingColorSpace forKey:@"kCIContextWorkingColorSpace"]; else NSLog([@"Can't initialize kCIContextWorkingColorSpace with object " stringByAppendingString:[kCIContextWorkingColorSpace description]]);
if ([kCIFilterGeneratorExportedKey isKindOfClass:[NSString class]]) [d setObject:kCIFilterGeneratorExportedKey forKey:@"kCIFilterGeneratorExportedKey"]; else NSLog([@"Can't initialize kCIFilterGeneratorExportedKey with object " stringByAppendingString:[kCIFilterGeneratorExportedKey description]]);
if ([kCIFilterGeneratorExportedKeyName isKindOfClass:[NSString class]]) [d setObject:kCIFilterGeneratorExportedKeyName forKey:@"kCIFilterGeneratorExportedKeyName"]; else NSLog([@"Can't initialize kCIFilterGeneratorExportedKeyName with object " stringByAppendingString:[kCIFilterGeneratorExportedKeyName description]]);
if ([kCIFilterGeneratorExportedKeyTargetObject isKindOfClass:[NSString class]]) [d setObject:kCIFilterGeneratorExportedKeyTargetObject forKey:@"kCIFilterGeneratorExportedKeyTargetObject"]; else NSLog([@"Can't initialize kCIFilterGeneratorExportedKeyTargetObject with object " stringByAppendingString:[kCIFilterGeneratorExportedKeyTargetObject description]]);
[d setObject:[Number numberWithDouble:kCIFormatARGB8] forKey:@"kCIFormatARGB8"];
[d setObject:[Number numberWithDouble:kCIFormatRGBA16] forKey:@"kCIFormatRGBA16"];
[d setObject:[Number numberWithDouble:kCIFormatRGBAf] forKey:@"kCIFormatRGBAf"];
if ([kCIImageColorSpace isKindOfClass:[NSString class]]) [d setObject:kCIImageColorSpace forKey:@"kCIImageColorSpace"]; else NSLog([@"Can't initialize kCIImageColorSpace with object " stringByAppendingString:[kCIImageColorSpace description]]);
if ([kCIImageProviderTileSize isKindOfClass:[NSString class]]) [d setObject:kCIImageProviderTileSize forKey:@"kCIImageProviderTileSize"]; else NSLog([@"Can't initialize kCIImageProviderTileSize with object " stringByAppendingString:[kCIImageProviderTileSize description]]);
if ([kCIImageProviderUserInfo isKindOfClass:[NSString class]]) [d setObject:kCIImageProviderUserInfo forKey:@"kCIImageProviderUserInfo"]; else NSLog([@"Can't initialize kCIImageProviderUserInfo with object " stringByAppendingString:[kCIImageProviderUserInfo description]]);
if ([kCIInputAllowDraftModeKey isKindOfClass:[NSString class]]) [d setObject:kCIInputAllowDraftModeKey forKey:@"kCIInputAllowDraftModeKey"]; else NSLog([@"Can't initialize kCIInputAllowDraftModeKey with object " stringByAppendingString:[kCIInputAllowDraftModeKey description]]);
if ([kCIInputAngleKey isKindOfClass:[NSString class]]) [d setObject:kCIInputAngleKey forKey:@"kCIInputAngleKey"]; else NSLog([@"Can't initialize kCIInputAngleKey with object " stringByAppendingString:[kCIInputAngleKey description]]);
if ([kCIInputAspectRatioKey isKindOfClass:[NSString class]]) [d setObject:kCIInputAspectRatioKey forKey:@"kCIInputAspectRatioKey"]; else NSLog([@"Can't initialize kCIInputAspectRatioKey with object " stringByAppendingString:[kCIInputAspectRatioKey description]]);
if ([kCIInputBackgroundImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBackgroundImageKey forKey:@"kCIInputBackgroundImageKey"]; else NSLog([@"Can't initialize kCIInputBackgroundImageKey with object " stringByAppendingString:[kCIInputBackgroundImageKey description]]);
if ([kCIInputBiasKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBiasKey forKey:@"kCIInputBiasKey"]; else NSLog([@"Can't initialize kCIInputBiasKey with object " stringByAppendingString:[kCIInputBiasKey description]]);
if ([kCIInputBoostKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBoostKey forKey:@"kCIInputBoostKey"]; else NSLog([@"Can't initialize kCIInputBoostKey with object " stringByAppendingString:[kCIInputBoostKey description]]);
if ([kCIInputBoostShadowAmountKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBoostShadowAmountKey forKey:@"kCIInputBoostShadowAmountKey"]; else NSLog([@"Can't initialize kCIInputBoostShadowAmountKey with object " stringByAppendingString:[kCIInputBoostShadowAmountKey description]]);
if ([kCIInputBrightnessKey isKindOfClass:[NSString class]]) [d setObject:kCIInputBrightnessKey forKey:@"kCIInputBrightnessKey"]; else NSLog([@"Can't initialize kCIInputBrightnessKey with object " stringByAppendingString:[kCIInputBrightnessKey description]]);
if ([kCIInputCenterKey isKindOfClass:[NSString class]]) [d setObject:kCIInputCenterKey forKey:@"kCIInputCenterKey"]; else NSLog([@"Can't initialize kCIInputCenterKey with object " stringByAppendingString:[kCIInputCenterKey description]]);
if ([kCIInputColorKey isKindOfClass:[NSString class]]) [d setObject:kCIInputColorKey forKey:@"kCIInputColorKey"]; else NSLog([@"Can't initialize kCIInputColorKey with object " stringByAppendingString:[kCIInputColorKey description]]);
if ([kCIInputContrastKey isKindOfClass:[NSString class]]) [d setObject:kCIInputContrastKey forKey:@"kCIInputContrastKey"]; else NSLog([@"Can't initialize kCIInputContrastKey with object " stringByAppendingString:[kCIInputContrastKey description]]);
if ([kCIInputDecoderVersionKey isKindOfClass:[NSString class]]) [d setObject:kCIInputDecoderVersionKey forKey:@"kCIInputDecoderVersionKey"]; else NSLog([@"Can't initialize kCIInputDecoderVersionKey with object " stringByAppendingString:[kCIInputDecoderVersionKey description]]);
if ([kCIInputEVKey isKindOfClass:[NSString class]]) [d setObject:kCIInputEVKey forKey:@"kCIInputEVKey"]; else NSLog([@"Can't initialize kCIInputEVKey with object " stringByAppendingString:[kCIInputEVKey description]]);
if ([kCIInputEnableChromaticNoiseTrackingKey isKindOfClass:[NSString class]]) [d setObject:kCIInputEnableChromaticNoiseTrackingKey forKey:@"kCIInputEnableChromaticNoiseTrackingKey"]; else NSLog([@"Can't initialize kCIInputEnableChromaticNoiseTrackingKey with object " stringByAppendingString:[kCIInputEnableChromaticNoiseTrackingKey description]]);
if ([kCIInputEnableSharpeningKey isKindOfClass:[NSString class]]) [d setObject:kCIInputEnableSharpeningKey forKey:@"kCIInputEnableSharpeningKey"]; else NSLog([@"Can't initialize kCIInputEnableSharpeningKey with object " stringByAppendingString:[kCIInputEnableSharpeningKey description]]);
if ([kCIInputExtentKey isKindOfClass:[NSString class]]) [d setObject:kCIInputExtentKey forKey:@"kCIInputExtentKey"]; else NSLog([@"Can't initialize kCIInputExtentKey with object " stringByAppendingString:[kCIInputExtentKey description]]);
if ([kCIInputGradientImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputGradientImageKey forKey:@"kCIInputGradientImageKey"]; else NSLog([@"Can't initialize kCIInputGradientImageKey with object " stringByAppendingString:[kCIInputGradientImageKey description]]);
if ([kCIInputIgnoreImageOrientationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputIgnoreImageOrientationKey forKey:@"kCIInputIgnoreImageOrientationKey"]; else NSLog([@"Can't initialize kCIInputIgnoreImageOrientationKey with object " stringByAppendingString:[kCIInputIgnoreImageOrientationKey description]]);
if ([kCIInputImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputImageKey forKey:@"kCIInputImageKey"]; else NSLog([@"Can't initialize kCIInputImageKey with object " stringByAppendingString:[kCIInputImageKey description]]);
if ([kCIInputImageOrientationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputImageOrientationKey forKey:@"kCIInputImageOrientationKey"]; else NSLog([@"Can't initialize kCIInputImageOrientationKey with object " stringByAppendingString:[kCIInputImageOrientationKey description]]);
if ([kCIInputIntensityKey isKindOfClass:[NSString class]]) [d setObject:kCIInputIntensityKey forKey:@"kCIInputIntensityKey"]; else NSLog([@"Can't initialize kCIInputIntensityKey with object " stringByAppendingString:[kCIInputIntensityKey description]]);
if ([kCIInputMaskImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputMaskImageKey forKey:@"kCIInputMaskImageKey"]; else NSLog([@"Can't initialize kCIInputMaskImageKey with object " stringByAppendingString:[kCIInputMaskImageKey description]]);
if ([kCIInputNeutralChromaticityXKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralChromaticityXKey forKey:@"kCIInputNeutralChromaticityXKey"]; else NSLog([@"Can't initialize kCIInputNeutralChromaticityXKey with object " stringByAppendingString:[kCIInputNeutralChromaticityXKey description]]);
if ([kCIInputNeutralChromaticityYKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralChromaticityYKey forKey:@"kCIInputNeutralChromaticityYKey"]; else NSLog([@"Can't initialize kCIInputNeutralChromaticityYKey with object " stringByAppendingString:[kCIInputNeutralChromaticityYKey description]]);
if ([kCIInputNeutralLocationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralLocationKey forKey:@"kCIInputNeutralLocationKey"]; else NSLog([@"Can't initialize kCIInputNeutralLocationKey with object " stringByAppendingString:[kCIInputNeutralLocationKey description]]);
if ([kCIInputNeutralTemperatureKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralTemperatureKey forKey:@"kCIInputNeutralTemperatureKey"]; else NSLog([@"Can't initialize kCIInputNeutralTemperatureKey with object " stringByAppendingString:[kCIInputNeutralTemperatureKey description]]);
if ([kCIInputNeutralTintKey isKindOfClass:[NSString class]]) [d setObject:kCIInputNeutralTintKey forKey:@"kCIInputNeutralTintKey"]; else NSLog([@"Can't initialize kCIInputNeutralTintKey with object " stringByAppendingString:[kCIInputNeutralTintKey description]]);
if ([kCIInputRadiusKey isKindOfClass:[NSString class]]) [d setObject:kCIInputRadiusKey forKey:@"kCIInputRadiusKey"]; else NSLog([@"Can't initialize kCIInputRadiusKey with object " stringByAppendingString:[kCIInputRadiusKey description]]);
if ([kCIInputRefractionKey isKindOfClass:[NSString class]]) [d setObject:kCIInputRefractionKey forKey:@"kCIInputRefractionKey"]; else NSLog([@"Can't initialize kCIInputRefractionKey with object " stringByAppendingString:[kCIInputRefractionKey description]]);
if ([kCIInputSaturationKey isKindOfClass:[NSString class]]) [d setObject:kCIInputSaturationKey forKey:@"kCIInputSaturationKey"]; else NSLog([@"Can't initialize kCIInputSaturationKey with object " stringByAppendingString:[kCIInputSaturationKey description]]);
if ([kCIInputScaleFactorKey isKindOfClass:[NSString class]]) [d setObject:kCIInputScaleFactorKey forKey:@"kCIInputScaleFactorKey"]; else NSLog([@"Can't initialize kCIInputScaleFactorKey with object " stringByAppendingString:[kCIInputScaleFactorKey description]]);
if ([kCIInputScaleKey isKindOfClass:[NSString class]]) [d setObject:kCIInputScaleKey forKey:@"kCIInputScaleKey"]; else NSLog([@"Can't initialize kCIInputScaleKey with object " stringByAppendingString:[kCIInputScaleKey description]]);
if ([kCIInputShadingImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputShadingImageKey forKey:@"kCIInputShadingImageKey"]; else NSLog([@"Can't initialize kCIInputShadingImageKey with object " stringByAppendingString:[kCIInputShadingImageKey description]]);
if ([kCIInputSharpnessKey isKindOfClass:[NSString class]]) [d setObject:kCIInputSharpnessKey forKey:@"kCIInputSharpnessKey"]; else NSLog([@"Can't initialize kCIInputSharpnessKey with object " stringByAppendingString:[kCIInputSharpnessKey description]]);
if ([kCIInputTargetImageKey isKindOfClass:[NSString class]]) [d setObject:kCIInputTargetImageKey forKey:@"kCIInputTargetImageKey"]; else NSLog([@"Can't initialize kCIInputTargetImageKey with object " stringByAppendingString:[kCIInputTargetImageKey description]]);
if ([kCIInputTimeKey isKindOfClass:[NSString class]]) [d setObject:kCIInputTimeKey forKey:@"kCIInputTimeKey"]; else NSLog([@"Can't initialize kCIInputTimeKey with object " stringByAppendingString:[kCIInputTimeKey description]]);
if ([kCIInputTransformKey isKindOfClass:[NSString class]]) [d setObject:kCIInputTransformKey forKey:@"kCIInputTransformKey"]; else NSLog([@"Can't initialize kCIInputTransformKey with object " stringByAppendingString:[kCIInputTransformKey description]]);
if ([kCIInputWidthKey isKindOfClass:[NSString class]]) [d setObject:kCIInputWidthKey forKey:@"kCIInputWidthKey"]; else NSLog([@"Can't initialize kCIInputWidthKey with object " stringByAppendingString:[kCIInputWidthKey description]]);
if ([kCIOutputImageKey isKindOfClass:[NSString class]]) [d setObject:kCIOutputImageKey forKey:@"kCIOutputImageKey"]; else NSLog([@"Can't initialize kCIOutputImageKey with object " stringByAppendingString:[kCIOutputImageKey description]]);
if ([kCISamplerAffineMatrix isKindOfClass:[NSString class]]) [d setObject:kCISamplerAffineMatrix forKey:@"kCISamplerAffineMatrix"]; else NSLog([@"Can't initialize kCISamplerAffineMatrix with object " stringByAppendingString:[kCISamplerAffineMatrix description]]);
if ([kCISamplerFilterLinear isKindOfClass:[NSString class]]) [d setObject:kCISamplerFilterLinear forKey:@"kCISamplerFilterLinear"]; else NSLog([@"Can't initialize kCISamplerFilterLinear with object " stringByAppendingString:[kCISamplerFilterLinear description]]);
if ([kCISamplerFilterMode isKindOfClass:[NSString class]]) [d setObject:kCISamplerFilterMode forKey:@"kCISamplerFilterMode"]; else NSLog([@"Can't initialize kCISamplerFilterMode with object " stringByAppendingString:[kCISamplerFilterMode description]]);
if ([kCISamplerFilterNearest isKindOfClass:[NSString class]]) [d setObject:kCISamplerFilterNearest forKey:@"kCISamplerFilterNearest"]; else NSLog([@"Can't initialize kCISamplerFilterNearest with object " stringByAppendingString:[kCISamplerFilterNearest description]]);
if ([kCISamplerWrapBlack isKindOfClass:[NSString class]]) [d setObject:kCISamplerWrapBlack forKey:@"kCISamplerWrapBlack"]; else NSLog([@"Can't initialize kCISamplerWrapBlack with object " stringByAppendingString:[kCISamplerWrapBlack description]]);
if ([kCISamplerWrapClamp isKindOfClass:[NSString class]]) [d setObject:kCISamplerWrapClamp forKey:@"kCISamplerWrapClamp"]; else NSLog([@"Can't initialize kCISamplerWrapClamp with object " stringByAppendingString:[kCISamplerWrapClamp description]]);
if ([kCISamplerWrapMode isKindOfClass:[NSString class]]) [d setObject:kCISamplerWrapMode forKey:@"kCISamplerWrapMode"]; else NSLog([@"Can't initialize kCISamplerWrapMode with object " stringByAppendingString:[kCISamplerWrapMode description]]);
if ([kCISupportedDecoderVersionsKey isKindOfClass:[NSString class]]) [d setObject:kCISupportedDecoderVersionsKey forKey:@"kCISupportedDecoderVersionsKey"]; else NSLog([@"Can't initialize kCISupportedDecoderVersionsKey with object " stringByAppendingString:[kCISupportedDecoderVersionsKey description]]);
if ([kCIUIParameterSet isKindOfClass:[NSString class]]) [d setObject:kCIUIParameterSet forKey:@"kCIUIParameterSet"]; else NSLog([@"Can't initialize kCIUIParameterSet with object " stringByAppendingString:[kCIUIParameterSet description]]);
if ([kCIUISetAdvanced isKindOfClass:[NSString class]]) [d setObject:kCIUISetAdvanced forKey:@"kCIUISetAdvanced"]; else NSLog([@"Can't initialize kCIUISetAdvanced with object " stringByAppendingString:[kCIUISetAdvanced description]]);
if ([kCIUISetBasic isKindOfClass:[NSString class]]) [d setObject:kCIUISetBasic forKey:@"kCIUISetBasic"]; else NSLog([@"Can't initialize kCIUISetBasic with object " stringByAppendingString:[kCIUISetBasic description]]);
if ([kCIUISetDevelopment isKindOfClass:[NSString class]]) [d setObject:kCIUISetDevelopment forKey:@"kCIUISetDevelopment"]; else NSLog([@"Can't initialize kCIUISetDevelopment with object " stringByAppendingString:[kCIUISetDevelopment description]]);
if ([kCIUISetIntermediate isKindOfClass:[NSString class]]) [d setObject:kCIUISetIntermediate forKey:@"kCIUISetIntermediate"]; else NSLog([@"Can't initialize kCIUISetIntermediate with object " stringByAppendingString:[kCIUISetIntermediate description]]);
[d setObject:[Number numberWithDouble:kCAConstraintHeight] forKey:@"kCAConstraintHeight"];
[d setObject:[Number numberWithDouble:kCAConstraintMaxX] forKey:@"kCAConstraintMaxX"];
[d setObject:[Number numberWithDouble:kCAConstraintMaxY] forKey:@"kCAConstraintMaxY"];
[d setObject:[Number numberWithDouble:kCAConstraintMidX] forKey:@"kCAConstraintMidX"];
[d setObject:[Number numberWithDouble:kCAConstraintMidY] forKey:@"kCAConstraintMidY"];
[d setObject:[Number numberWithDouble:kCAConstraintMinX] forKey:@"kCAConstraintMinX"];
[d setObject:[Number numberWithDouble:kCAConstraintMinY] forKey:@"kCAConstraintMinY"];
[d setObject:[Number numberWithDouble:kCAConstraintWidth] forKey:@"kCAConstraintWidth"];
[d setObject:[Number numberWithDouble:kCALayerBottomEdge] forKey:@"kCALayerBottomEdge"];
[d setObject:[Number numberWithDouble:kCALayerHeightSizable] forKey:@"kCALayerHeightSizable"];
[d setObject:[Number numberWithDouble:kCALayerLeftEdge] forKey:@"kCALayerLeftEdge"];
[d setObject:[Number numberWithDouble:kCALayerMaxXMargin] forKey:@"kCALayerMaxXMargin"];
[d setObject:[Number numberWithDouble:kCALayerMaxYMargin] forKey:@"kCALayerMaxYMargin"];
[d setObject:[Number numberWithDouble:kCALayerMinXMargin] forKey:@"kCALayerMinXMargin"];
[d setObject:[Number numberWithDouble:kCALayerMinYMargin] forKey:@"kCALayerMinYMargin"];
[d setObject:[Number numberWithDouble:kCALayerNotSizable] forKey:@"kCALayerNotSizable"];
[d setObject:[Number numberWithDouble:kCALayerRightEdge] forKey:@"kCALayerRightEdge"];
[d setObject:[Number numberWithDouble:kCALayerTopEdge] forKey:@"kCALayerTopEdge"];
[d setObject:[Number numberWithDouble:kCALayerWidthSizable] forKey:@"kCALayerWidthSizable"];
if ([SFAuthorizationPluginViewUserNameKey isKindOfClass:[NSString class]]) [d setObject:SFAuthorizationPluginViewUserNameKey forKey:@"SFAuthorizationPluginViewUserNameKey"]; else NSLog([@"Can't initialize SFAuthorizationPluginViewUserNameKey with object " stringByAppendingString:[SFAuthorizationPluginViewUserNameKey description]]);
if ([SFAuthorizationPluginViewUserShortNameKey isKindOfClass:[NSString class]]) [d setObject:SFAuthorizationPluginViewUserShortNameKey forKey:@"SFAuthorizationPluginViewUserShortNameKey"]; else NSLog([@"Can't initialize SFAuthorizationPluginViewUserShortNameKey with object " stringByAppendingString:[SFAuthorizationPluginViewUserShortNameKey description]]);
if ([SFDisplayViewException isKindOfClass:[NSString class]]) [d setObject:SFDisplayViewException forKey:@"SFDisplayViewException"]; else NSLog([@"Can't initialize SFDisplayViewException with object " stringByAppendingString:[SFDisplayViewException description]]);
[d setObject:[Number numberWithDouble:SFAuthorizationStartupState] forKey:@"SFAuthorizationStartupState"];
[d setObject:[Number numberWithDouble:SFAuthorizationViewInProgressState] forKey:@"SFAuthorizationViewInProgressState"];
[d setObject:[Number numberWithDouble:SFAuthorizationViewLockedState] forKey:@"SFAuthorizationViewLockedState"];
[d setObject:[Number numberWithDouble:SFAuthorizationViewUnlockedState] forKey:@"SFAuthorizationViewUnlockedState"];
[d setObject:[Number numberWithDouble:SFButtonTypeBack] forKey:@"SFButtonTypeBack"];
[d setObject:[Number numberWithDouble:SFButtonTypeCancel] forKey:@"SFButtonTypeCancel"];
[d setObject:[Number numberWithDouble:SFButtonTypeLogin] forKey:@"SFButtonTypeLogin"];
[d setObject:[Number numberWithDouble:SFButtonTypeOK] forKey:@"SFButtonTypeOK"];
[d setObject:[Number numberWithDouble:SFViewTypeCredentials] forKey:@"SFViewTypeCredentials"];
[d setObject:[Number numberWithDouble:SFViewTypeIdentityAndCredentials] forKey:@"SFViewTypeIdentityAndCredentials"];
if ([SFAuthorizationPluginViewUserNameKey isKindOfClass:[NSString class]]) [d setObject:SFAuthorizationPluginViewUserNameKey forKey:@"SFAuthorizationPluginViewUserNameKey"]; else NSLog([@"Can't initialize SFAuthorizationPluginViewUserNameKey with object " stringByAppendingString:[SFAuthorizationPluginViewUserNameKey description]]);
if ([SFAuthorizationPluginViewUserShortNameKey isKindOfClass:[NSString class]]) [d setObject:SFAuthorizationPluginViewUserShortNameKey forKey:@"SFAuthorizationPluginViewUserShortNameKey"]; else NSLog([@"Can't initialize SFAuthorizationPluginViewUserShortNameKey with object " stringByAppendingString:[SFAuthorizationPluginViewUserShortNameKey description]]);
if ([SFDisplayViewException isKindOfClass:[NSString class]]) [d setObject:SFDisplayViewException forKey:@"SFDisplayViewException"]; else NSLog([@"Can't initialize SFDisplayViewException with object " stringByAppendingString:[SFDisplayViewException description]]);
[d setObject:[Number numberWithDouble:SFAuthorizationStartupState] forKey:@"SFAuthorizationStartupState"];
[d setObject:[Number numberWithDouble:SFAuthorizationViewInProgressState] forKey:@"SFAuthorizationViewInProgressState"];
[d setObject:[Number numberWithDouble:SFAuthorizationViewLockedState] forKey:@"SFAuthorizationViewLockedState"];
[d setObject:[Number numberWithDouble:SFAuthorizationViewUnlockedState] forKey:@"SFAuthorizationViewUnlockedState"];
[d setObject:[Number numberWithDouble:SFButtonTypeBack] forKey:@"SFButtonTypeBack"];
[d setObject:[Number numberWithDouble:SFButtonTypeCancel] forKey:@"SFButtonTypeCancel"];
[d setObject:[Number numberWithDouble:SFButtonTypeLogin] forKey:@"SFButtonTypeLogin"];
[d setObject:[Number numberWithDouble:SFButtonTypeOK] forKey:@"SFButtonTypeOK"];
[d setObject:[Number numberWithDouble:SFViewTypeCredentials] forKey:@"SFViewTypeCredentials"];
[d setObject:[Number numberWithDouble:SFViewTypeIdentityAndCredentials] forKey:@"SFViewTypeIdentityAndCredentials"];
if ([ISyncAvailabilityChangedNotification isKindOfClass:[NSString class]]) [d setObject:ISyncAvailabilityChangedNotification forKey:@"ISyncAvailabilityChangedNotification"]; else NSLog([@"Can't initialize ISyncAvailabilityChangedNotification with object " stringByAppendingString:[ISyncAvailabilityChangedNotification description]]);
if ([ISyncChangePropertyActionKey isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyActionKey forKey:@"ISyncChangePropertyActionKey"]; else NSLog([@"Can't initialize ISyncChangePropertyActionKey with object " stringByAppendingString:[ISyncChangePropertyActionKey description]]);
if ([ISyncChangePropertyClear isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyClear forKey:@"ISyncChangePropertyClear"]; else NSLog([@"Can't initialize ISyncChangePropertyClear with object " stringByAppendingString:[ISyncChangePropertyClear description]]);
if ([ISyncChangePropertyNameKey isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyNameKey forKey:@"ISyncChangePropertyNameKey"]; else NSLog([@"Can't initialize ISyncChangePropertyNameKey with object " stringByAppendingString:[ISyncChangePropertyNameKey description]]);
if ([ISyncChangePropertySet isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertySet forKey:@"ISyncChangePropertySet"]; else NSLog([@"Can't initialize ISyncChangePropertySet with object " stringByAppendingString:[ISyncChangePropertySet description]]);
if ([ISyncChangePropertyValueKey isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyValueKey forKey:@"ISyncChangePropertyValueKey"]; else NSLog([@"Can't initialize ISyncChangePropertyValueKey with object " stringByAppendingString:[ISyncChangePropertyValueKey description]]);
if ([ISyncClientTypeApplication isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypeApplication forKey:@"ISyncClientTypeApplication"]; else NSLog([@"Can't initialize ISyncClientTypeApplication with object " stringByAppendingString:[ISyncClientTypeApplication description]]);
if ([ISyncClientTypeDevice isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypeDevice forKey:@"ISyncClientTypeDevice"]; else NSLog([@"Can't initialize ISyncClientTypeDevice with object " stringByAppendingString:[ISyncClientTypeDevice description]]);
if ([ISyncClientTypePeer isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypePeer forKey:@"ISyncClientTypePeer"]; else NSLog([@"Can't initialize ISyncClientTypePeer with object " stringByAppendingString:[ISyncClientTypePeer description]]);
if ([ISyncClientTypeServer isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypeServer forKey:@"ISyncClientTypeServer"]; else NSLog([@"Can't initialize ISyncClientTypeServer with object " stringByAppendingString:[ISyncClientTypeServer description]]);
if ([ISyncErrorDomain isKindOfClass:[NSString class]]) [d setObject:ISyncErrorDomain forKey:@"ISyncErrorDomain"]; else NSLog([@"Can't initialize ISyncErrorDomain with object " stringByAppendingString:[ISyncErrorDomain description]]);
if ([ISyncInvalidEntityException isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidEntityException forKey:@"ISyncInvalidEntityException"]; else NSLog([@"Can't initialize ISyncInvalidEntityException with object " stringByAppendingString:[ISyncInvalidEntityException description]]);
if ([ISyncInvalidRecordException isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordException forKey:@"ISyncInvalidRecordException"]; else NSLog([@"Can't initialize ISyncInvalidRecordException with object " stringByAppendingString:[ISyncInvalidRecordException description]]);
if ([ISyncInvalidRecordIdentifiersKey isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordIdentifiersKey forKey:@"ISyncInvalidRecordIdentifiersKey"]; else NSLog([@"Can't initialize ISyncInvalidRecordIdentifiersKey with object " stringByAppendingString:[ISyncInvalidRecordIdentifiersKey description]]);
if ([ISyncInvalidRecordReasonsKey isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordReasonsKey forKey:@"ISyncInvalidRecordReasonsKey"]; else NSLog([@"Can't initialize ISyncInvalidRecordReasonsKey with object " stringByAppendingString:[ISyncInvalidRecordReasonsKey description]]);
if ([ISyncInvalidRecordsKey isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordsKey forKey:@"ISyncInvalidRecordsKey"]; else NSLog([@"Can't initialize ISyncInvalidRecordsKey with object " stringByAppendingString:[ISyncInvalidRecordsKey description]]);
if ([ISyncRecordEntityNameKey isKindOfClass:[NSString class]]) [d setObject:ISyncRecordEntityNameKey forKey:@"ISyncRecordEntityNameKey"]; else NSLog([@"Can't initialize ISyncRecordEntityNameKey with object " stringByAppendingString:[ISyncRecordEntityNameKey description]]);
if ([ISyncServerUnavailableException isKindOfClass:[NSString class]]) [d setObject:ISyncServerUnavailableException forKey:@"ISyncServerUnavailableException"]; else NSLog([@"Can't initialize ISyncServerUnavailableException with object " stringByAppendingString:[ISyncServerUnavailableException description]]);
if ([ISyncSessionCancelledException isKindOfClass:[NSString class]]) [d setObject:ISyncSessionCancelledException forKey:@"ISyncSessionCancelledException"]; else NSLog([@"Can't initialize ISyncSessionCancelledException with object " stringByAppendingString:[ISyncSessionCancelledException description]]);
if ([ISyncSessionUnavailableException isKindOfClass:[NSString class]]) [d setObject:ISyncSessionUnavailableException forKey:@"ISyncSessionUnavailableException"]; else NSLog([@"Can't initialize ISyncSessionUnavailableException with object " stringByAppendingString:[ISyncSessionUnavailableException description]]);
if ([ISyncUnsupportedEntityException isKindOfClass:[NSString class]]) [d setObject:ISyncUnsupportedEntityException forKey:@"ISyncUnsupportedEntityException"]; else NSLog([@"Can't initialize ISyncUnsupportedEntityException with object " stringByAppendingString:[ISyncUnsupportedEntityException description]]);
[d setObject:[Number numberWithDouble:ISyncChangeTypeAdd] forKey:@"ISyncChangeTypeAdd"];
[d setObject:[Number numberWithDouble:ISyncChangeTypeDelete] forKey:@"ISyncChangeTypeDelete"];
[d setObject:[Number numberWithDouble:ISyncChangeTypeModify] forKey:@"ISyncChangeTypeModify"];
[d setObject:[Number numberWithDouble:ISyncSessionClientAlreadySyncingError] forKey:@"ISyncSessionClientAlreadySyncingError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeAccepted] forKey:@"ISyncSessionDriverChangeAccepted"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeError] forKey:@"ISyncSessionDriverChangeError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeIgnored] forKey:@"ISyncSessionDriverChangeIgnored"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeRefused] forKey:@"ISyncSessionDriverChangeRefused"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverFatalError] forKey:@"ISyncSessionDriverFatalError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverModeFast] forKey:@"ISyncSessionDriverModeFast"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverModeRefresh] forKey:@"ISyncSessionDriverModeRefresh"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverModeSlow] forKey:@"ISyncSessionDriverModeSlow"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverPullFailureError] forKey:@"ISyncSessionDriverPullFailureError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverRegistrationError] forKey:@"ISyncSessionDriverRegistrationError"];
[d setObject:[Number numberWithDouble:ISyncSessionUserCanceledSessionError] forKey:@"ISyncSessionUserCanceledSessionError"];
[d setObject:[Number numberWithDouble:ISyncStatusCancelled] forKey:@"ISyncStatusCancelled"];
[d setObject:[Number numberWithDouble:ISyncStatusErrors] forKey:@"ISyncStatusErrors"];
[d setObject:[Number numberWithDouble:ISyncStatusFailed] forKey:@"ISyncStatusFailed"];
[d setObject:[Number numberWithDouble:ISyncStatusNever] forKey:@"ISyncStatusNever"];
[d setObject:[Number numberWithDouble:ISyncStatusRunning] forKey:@"ISyncStatusRunning"];
[d setObject:[Number numberWithDouble:ISyncStatusSuccess] forKey:@"ISyncStatusSuccess"];
[d setObject:[Number numberWithDouble:ISyncStatusWarnings] forKey:@"ISyncStatusWarnings"];
if ([ISyncAvailabilityChangedNotification isKindOfClass:[NSString class]]) [d setObject:ISyncAvailabilityChangedNotification forKey:@"ISyncAvailabilityChangedNotification"]; else NSLog([@"Can't initialize ISyncAvailabilityChangedNotification with object " stringByAppendingString:[ISyncAvailabilityChangedNotification description]]);
if ([ISyncChangePropertyActionKey isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyActionKey forKey:@"ISyncChangePropertyActionKey"]; else NSLog([@"Can't initialize ISyncChangePropertyActionKey with object " stringByAppendingString:[ISyncChangePropertyActionKey description]]);
if ([ISyncChangePropertyClear isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyClear forKey:@"ISyncChangePropertyClear"]; else NSLog([@"Can't initialize ISyncChangePropertyClear with object " stringByAppendingString:[ISyncChangePropertyClear description]]);
if ([ISyncChangePropertyNameKey isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyNameKey forKey:@"ISyncChangePropertyNameKey"]; else NSLog([@"Can't initialize ISyncChangePropertyNameKey with object " stringByAppendingString:[ISyncChangePropertyNameKey description]]);
if ([ISyncChangePropertySet isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertySet forKey:@"ISyncChangePropertySet"]; else NSLog([@"Can't initialize ISyncChangePropertySet with object " stringByAppendingString:[ISyncChangePropertySet description]]);
if ([ISyncChangePropertyValueKey isKindOfClass:[NSString class]]) [d setObject:ISyncChangePropertyValueKey forKey:@"ISyncChangePropertyValueKey"]; else NSLog([@"Can't initialize ISyncChangePropertyValueKey with object " stringByAppendingString:[ISyncChangePropertyValueKey description]]);
if ([ISyncClientTypeApplication isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypeApplication forKey:@"ISyncClientTypeApplication"]; else NSLog([@"Can't initialize ISyncClientTypeApplication with object " stringByAppendingString:[ISyncClientTypeApplication description]]);
if ([ISyncClientTypeDevice isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypeDevice forKey:@"ISyncClientTypeDevice"]; else NSLog([@"Can't initialize ISyncClientTypeDevice with object " stringByAppendingString:[ISyncClientTypeDevice description]]);
if ([ISyncClientTypePeer isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypePeer forKey:@"ISyncClientTypePeer"]; else NSLog([@"Can't initialize ISyncClientTypePeer with object " stringByAppendingString:[ISyncClientTypePeer description]]);
if ([ISyncClientTypeServer isKindOfClass:[NSString class]]) [d setObject:ISyncClientTypeServer forKey:@"ISyncClientTypeServer"]; else NSLog([@"Can't initialize ISyncClientTypeServer with object " stringByAppendingString:[ISyncClientTypeServer description]]);
if ([ISyncErrorDomain isKindOfClass:[NSString class]]) [d setObject:ISyncErrorDomain forKey:@"ISyncErrorDomain"]; else NSLog([@"Can't initialize ISyncErrorDomain with object " stringByAppendingString:[ISyncErrorDomain description]]);
if ([ISyncInvalidEntityException isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidEntityException forKey:@"ISyncInvalidEntityException"]; else NSLog([@"Can't initialize ISyncInvalidEntityException with object " stringByAppendingString:[ISyncInvalidEntityException description]]);
if ([ISyncInvalidRecordException isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordException forKey:@"ISyncInvalidRecordException"]; else NSLog([@"Can't initialize ISyncInvalidRecordException with object " stringByAppendingString:[ISyncInvalidRecordException description]]);
if ([ISyncInvalidRecordIdentifiersKey isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordIdentifiersKey forKey:@"ISyncInvalidRecordIdentifiersKey"]; else NSLog([@"Can't initialize ISyncInvalidRecordIdentifiersKey with object " stringByAppendingString:[ISyncInvalidRecordIdentifiersKey description]]);
if ([ISyncInvalidRecordReasonsKey isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordReasonsKey forKey:@"ISyncInvalidRecordReasonsKey"]; else NSLog([@"Can't initialize ISyncInvalidRecordReasonsKey with object " stringByAppendingString:[ISyncInvalidRecordReasonsKey description]]);
if ([ISyncInvalidRecordsKey isKindOfClass:[NSString class]]) [d setObject:ISyncInvalidRecordsKey forKey:@"ISyncInvalidRecordsKey"]; else NSLog([@"Can't initialize ISyncInvalidRecordsKey with object " stringByAppendingString:[ISyncInvalidRecordsKey description]]);
if ([ISyncRecordEntityNameKey isKindOfClass:[NSString class]]) [d setObject:ISyncRecordEntityNameKey forKey:@"ISyncRecordEntityNameKey"]; else NSLog([@"Can't initialize ISyncRecordEntityNameKey with object " stringByAppendingString:[ISyncRecordEntityNameKey description]]);
if ([ISyncServerUnavailableException isKindOfClass:[NSString class]]) [d setObject:ISyncServerUnavailableException forKey:@"ISyncServerUnavailableException"]; else NSLog([@"Can't initialize ISyncServerUnavailableException with object " stringByAppendingString:[ISyncServerUnavailableException description]]);
if ([ISyncSessionCancelledException isKindOfClass:[NSString class]]) [d setObject:ISyncSessionCancelledException forKey:@"ISyncSessionCancelledException"]; else NSLog([@"Can't initialize ISyncSessionCancelledException with object " stringByAppendingString:[ISyncSessionCancelledException description]]);
if ([ISyncSessionUnavailableException isKindOfClass:[NSString class]]) [d setObject:ISyncSessionUnavailableException forKey:@"ISyncSessionUnavailableException"]; else NSLog([@"Can't initialize ISyncSessionUnavailableException with object " stringByAppendingString:[ISyncSessionUnavailableException description]]);
if ([ISyncUnsupportedEntityException isKindOfClass:[NSString class]]) [d setObject:ISyncUnsupportedEntityException forKey:@"ISyncUnsupportedEntityException"]; else NSLog([@"Can't initialize ISyncUnsupportedEntityException with object " stringByAppendingString:[ISyncUnsupportedEntityException description]]);
[d setObject:[Number numberWithDouble:ISyncChangeTypeAdd] forKey:@"ISyncChangeTypeAdd"];
[d setObject:[Number numberWithDouble:ISyncChangeTypeDelete] forKey:@"ISyncChangeTypeDelete"];
[d setObject:[Number numberWithDouble:ISyncChangeTypeModify] forKey:@"ISyncChangeTypeModify"];
[d setObject:[Number numberWithDouble:ISyncSessionClientAlreadySyncingError] forKey:@"ISyncSessionClientAlreadySyncingError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeAccepted] forKey:@"ISyncSessionDriverChangeAccepted"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeError] forKey:@"ISyncSessionDriverChangeError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeIgnored] forKey:@"ISyncSessionDriverChangeIgnored"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverChangeRefused] forKey:@"ISyncSessionDriverChangeRefused"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverFatalError] forKey:@"ISyncSessionDriverFatalError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverModeFast] forKey:@"ISyncSessionDriverModeFast"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverModeRefresh] forKey:@"ISyncSessionDriverModeRefresh"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverModeSlow] forKey:@"ISyncSessionDriverModeSlow"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverPullFailureError] forKey:@"ISyncSessionDriverPullFailureError"];
[d setObject:[Number numberWithDouble:ISyncSessionDriverRegistrationError] forKey:@"ISyncSessionDriverRegistrationError"];
[d setObject:[Number numberWithDouble:ISyncSessionUserCanceledSessionError] forKey:@"ISyncSessionUserCanceledSessionError"];
[d setObject:[Number numberWithDouble:ISyncStatusCancelled] forKey:@"ISyncStatusCancelled"];
[d setObject:[Number numberWithDouble:ISyncStatusErrors] forKey:@"ISyncStatusErrors"];
[d setObject:[Number numberWithDouble:ISyncStatusFailed] forKey:@"ISyncStatusFailed"];
[d setObject:[Number numberWithDouble:ISyncStatusNever] forKey:@"ISyncStatusNever"];
[d setObject:[Number numberWithDouble:ISyncStatusRunning] forKey:@"ISyncStatusRunning"];
[d setObject:[Number numberWithDouble:ISyncStatusSuccess] forKey:@"ISyncStatusSuccess"];
[d setObject:[Number numberWithDouble:ISyncStatusWarnings] forKey:@"ISyncStatusWarnings"];
if ([DOMEventException isKindOfClass:[NSString class]]) [d setObject:DOMEventException forKey:@"DOMEventException"]; else NSLog([@"Can't initialize DOMEventException with object " stringByAppendingString:[DOMEventException description]]);
if ([DOMException isKindOfClass:[NSString class]]) [d setObject:DOMException forKey:@"DOMException"]; else NSLog([@"Can't initialize DOMException with object " stringByAppendingString:[DOMException description]]);
if ([DOMRangeException isKindOfClass:[NSString class]]) [d setObject:DOMRangeException forKey:@"DOMRangeException"]; else NSLog([@"Can't initialize DOMRangeException with object " stringByAppendingString:[DOMRangeException description]]);
if ([DOMXPathException isKindOfClass:[NSString class]]) [d setObject:DOMXPathException forKey:@"DOMXPathException"]; else NSLog([@"Can't initialize DOMXPathException with object " stringByAppendingString:[DOMXPathException description]]);
if ([WebActionButtonKey isKindOfClass:[NSString class]]) [d setObject:WebActionButtonKey forKey:@"WebActionButtonKey"]; else NSLog([@"Can't initialize WebActionButtonKey with object " stringByAppendingString:[WebActionButtonKey description]]);
if ([WebActionElementKey isKindOfClass:[NSString class]]) [d setObject:WebActionElementKey forKey:@"WebActionElementKey"]; else NSLog([@"Can't initialize WebActionElementKey with object " stringByAppendingString:[WebActionElementKey description]]);
if ([WebActionModifierFlagsKey isKindOfClass:[NSString class]]) [d setObject:WebActionModifierFlagsKey forKey:@"WebActionModifierFlagsKey"]; else NSLog([@"Can't initialize WebActionModifierFlagsKey with object " stringByAppendingString:[WebActionModifierFlagsKey description]]);
if ([WebActionNavigationTypeKey isKindOfClass:[NSString class]]) [d setObject:WebActionNavigationTypeKey forKey:@"WebActionNavigationTypeKey"]; else NSLog([@"Can't initialize WebActionNavigationTypeKey with object " stringByAppendingString:[WebActionNavigationTypeKey description]]);
if ([WebActionOriginalURLKey isKindOfClass:[NSString class]]) [d setObject:WebActionOriginalURLKey forKey:@"WebActionOriginalURLKey"]; else NSLog([@"Can't initialize WebActionOriginalURLKey with object " stringByAppendingString:[WebActionOriginalURLKey description]]);
if ([WebArchivePboardType isKindOfClass:[NSString class]]) [d setObject:WebArchivePboardType forKey:@"WebArchivePboardType"]; else NSLog([@"Can't initialize WebArchivePboardType with object " stringByAppendingString:[WebArchivePboardType description]]);
if ([WebElementDOMNodeKey isKindOfClass:[NSString class]]) [d setObject:WebElementDOMNodeKey forKey:@"WebElementDOMNodeKey"]; else NSLog([@"Can't initialize WebElementDOMNodeKey with object " stringByAppendingString:[WebElementDOMNodeKey description]]);
if ([WebElementFrameKey isKindOfClass:[NSString class]]) [d setObject:WebElementFrameKey forKey:@"WebElementFrameKey"]; else NSLog([@"Can't initialize WebElementFrameKey with object " stringByAppendingString:[WebElementFrameKey description]]);
if ([WebElementImageAltStringKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageAltStringKey forKey:@"WebElementImageAltStringKey"]; else NSLog([@"Can't initialize WebElementImageAltStringKey with object " stringByAppendingString:[WebElementImageAltStringKey description]]);
if ([WebElementImageKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageKey forKey:@"WebElementImageKey"]; else NSLog([@"Can't initialize WebElementImageKey with object " stringByAppendingString:[WebElementImageKey description]]);
if ([WebElementImageRectKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageRectKey forKey:@"WebElementImageRectKey"]; else NSLog([@"Can't initialize WebElementImageRectKey with object " stringByAppendingString:[WebElementImageRectKey description]]);
if ([WebElementImageURLKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageURLKey forKey:@"WebElementImageURLKey"]; else NSLog([@"Can't initialize WebElementImageURLKey with object " stringByAppendingString:[WebElementImageURLKey description]]);
if ([WebElementIsSelectedKey isKindOfClass:[NSString class]]) [d setObject:WebElementIsSelectedKey forKey:@"WebElementIsSelectedKey"]; else NSLog([@"Can't initialize WebElementIsSelectedKey with object " stringByAppendingString:[WebElementIsSelectedKey description]]);
if ([WebElementLinkLabelKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkLabelKey forKey:@"WebElementLinkLabelKey"]; else NSLog([@"Can't initialize WebElementLinkLabelKey with object " stringByAppendingString:[WebElementLinkLabelKey description]]);
if ([WebElementLinkTargetFrameKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkTargetFrameKey forKey:@"WebElementLinkTargetFrameKey"]; else NSLog([@"Can't initialize WebElementLinkTargetFrameKey with object " stringByAppendingString:[WebElementLinkTargetFrameKey description]]);
if ([WebElementLinkTitleKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkTitleKey forKey:@"WebElementLinkTitleKey"]; else NSLog([@"Can't initialize WebElementLinkTitleKey with object " stringByAppendingString:[WebElementLinkTitleKey description]]);
if ([WebElementLinkURLKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkURLKey forKey:@"WebElementLinkURLKey"]; else NSLog([@"Can't initialize WebElementLinkURLKey with object " stringByAppendingString:[WebElementLinkURLKey description]]);
if ([WebHistoryAllItemsRemovedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryAllItemsRemovedNotification forKey:@"WebHistoryAllItemsRemovedNotification"]; else NSLog([@"Can't initialize WebHistoryAllItemsRemovedNotification with object " stringByAppendingString:[WebHistoryAllItemsRemovedNotification description]]);
if ([WebHistoryItemChangedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemChangedNotification forKey:@"WebHistoryItemChangedNotification"]; else NSLog([@"Can't initialize WebHistoryItemChangedNotification with object " stringByAppendingString:[WebHistoryItemChangedNotification description]]);
if ([WebHistoryItemsAddedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemsAddedNotification forKey:@"WebHistoryItemsAddedNotification"]; else NSLog([@"Can't initialize WebHistoryItemsAddedNotification with object " stringByAppendingString:[WebHistoryItemsAddedNotification description]]);
if ([WebHistoryItemsKey isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemsKey forKey:@"WebHistoryItemsKey"]; else NSLog([@"Can't initialize WebHistoryItemsKey with object " stringByAppendingString:[WebHistoryItemsKey description]]);
if ([WebHistoryItemsRemovedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemsRemovedNotification forKey:@"WebHistoryItemsRemovedNotification"]; else NSLog([@"Can't initialize WebHistoryItemsRemovedNotification with object " stringByAppendingString:[WebHistoryItemsRemovedNotification description]]);
if ([WebHistoryLoadedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryLoadedNotification forKey:@"WebHistoryLoadedNotification"]; else NSLog([@"Can't initialize WebHistoryLoadedNotification with object " stringByAppendingString:[WebHistoryLoadedNotification description]]);
if ([WebHistorySavedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistorySavedNotification forKey:@"WebHistorySavedNotification"]; else NSLog([@"Can't initialize WebHistorySavedNotification with object " stringByAppendingString:[WebHistorySavedNotification description]]);
if ([WebKitErrorDomain isKindOfClass:[NSString class]]) [d setObject:WebKitErrorDomain forKey:@"WebKitErrorDomain"]; else NSLog([@"Can't initialize WebKitErrorDomain with object " stringByAppendingString:[WebKitErrorDomain description]]);
if ([WebKitErrorMIMETypeKey isKindOfClass:[NSString class]]) [d setObject:WebKitErrorMIMETypeKey forKey:@"WebKitErrorMIMETypeKey"]; else NSLog([@"Can't initialize WebKitErrorMIMETypeKey with object " stringByAppendingString:[WebKitErrorMIMETypeKey description]]);
if ([WebKitErrorPlugInNameKey isKindOfClass:[NSString class]]) [d setObject:WebKitErrorPlugInNameKey forKey:@"WebKitErrorPlugInNameKey"]; else NSLog([@"Can't initialize WebKitErrorPlugInNameKey with object " stringByAppendingString:[WebKitErrorPlugInNameKey description]]);
if ([WebKitErrorPlugInPageURLStringKey isKindOfClass:[NSString class]]) [d setObject:WebKitErrorPlugInPageURLStringKey forKey:@"WebKitErrorPlugInPageURLStringKey"]; else NSLog([@"Can't initialize WebKitErrorPlugInPageURLStringKey with object " stringByAppendingString:[WebKitErrorPlugInPageURLStringKey description]]);
if ([WebPlugInAttributesKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInAttributesKey forKey:@"WebPlugInAttributesKey"]; else NSLog([@"Can't initialize WebPlugInAttributesKey with object " stringByAppendingString:[WebPlugInAttributesKey description]]);
if ([WebPlugInBaseURLKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInBaseURLKey forKey:@"WebPlugInBaseURLKey"]; else NSLog([@"Can't initialize WebPlugInBaseURLKey with object " stringByAppendingString:[WebPlugInBaseURLKey description]]);
if ([WebPlugInContainerKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInContainerKey forKey:@"WebPlugInContainerKey"]; else NSLog([@"Can't initialize WebPlugInContainerKey with object " stringByAppendingString:[WebPlugInContainerKey description]]);
if ([WebPlugInContainingElementKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInContainingElementKey forKey:@"WebPlugInContainingElementKey"]; else NSLog([@"Can't initialize WebPlugInContainingElementKey with object " stringByAppendingString:[WebPlugInContainingElementKey description]]);
if ([WebPreferencesChangedNotification isKindOfClass:[NSString class]]) [d setObject:WebPreferencesChangedNotification forKey:@"WebPreferencesChangedNotification"]; else NSLog([@"Can't initialize WebPreferencesChangedNotification with object " stringByAppendingString:[WebPreferencesChangedNotification description]]);
if ([WebViewDidBeginEditingNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidBeginEditingNotification forKey:@"WebViewDidBeginEditingNotification"]; else NSLog([@"Can't initialize WebViewDidBeginEditingNotification with object " stringByAppendingString:[WebViewDidBeginEditingNotification description]]);
if ([WebViewDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidChangeNotification forKey:@"WebViewDidChangeNotification"]; else NSLog([@"Can't initialize WebViewDidChangeNotification with object " stringByAppendingString:[WebViewDidChangeNotification description]]);
if ([WebViewDidChangeSelectionNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidChangeSelectionNotification forKey:@"WebViewDidChangeSelectionNotification"]; else NSLog([@"Can't initialize WebViewDidChangeSelectionNotification with object " stringByAppendingString:[WebViewDidChangeSelectionNotification description]]);
if ([WebViewDidChangeTypingStyleNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidChangeTypingStyleNotification forKey:@"WebViewDidChangeTypingStyleNotification"]; else NSLog([@"Can't initialize WebViewDidChangeTypingStyleNotification with object " stringByAppendingString:[WebViewDidChangeTypingStyleNotification description]]);
if ([WebViewDidEndEditingNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidEndEditingNotification forKey:@"WebViewDidEndEditingNotification"]; else NSLog([@"Can't initialize WebViewDidEndEditingNotification with object " stringByAppendingString:[WebViewDidEndEditingNotification description]]);
if ([WebViewProgressEstimateChangedNotification isKindOfClass:[NSString class]]) [d setObject:WebViewProgressEstimateChangedNotification forKey:@"WebViewProgressEstimateChangedNotification"]; else NSLog([@"Can't initialize WebViewProgressEstimateChangedNotification with object " stringByAppendingString:[WebViewProgressEstimateChangedNotification description]]);
if ([WebViewProgressFinishedNotification isKindOfClass:[NSString class]]) [d setObject:WebViewProgressFinishedNotification forKey:@"WebViewProgressFinishedNotification"]; else NSLog([@"Can't initialize WebViewProgressFinishedNotification with object " stringByAppendingString:[WebViewProgressFinishedNotification description]]);
if ([WebViewProgressStartedNotification isKindOfClass:[NSString class]]) [d setObject:WebViewProgressStartedNotification forKey:@"WebViewProgressStartedNotification"]; else NSLog([@"Can't initialize WebViewProgressStartedNotification with object " stringByAppendingString:[WebViewProgressStartedNotification description]]);
[d setObject:[Number numberWithDouble:DOM_ADDITION] forKey:@"DOM_ADDITION"];
[d setObject:[Number numberWithDouble:DOM_ANY_TYPE] forKey:@"DOM_ANY_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ANY_UNORDERED_NODE_TYPE] forKey:@"DOM_ANY_UNORDERED_NODE_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ATTRIBUTE_NODE] forKey:@"DOM_ATTRIBUTE_NODE"];
[d setObject:[Number numberWithDouble:DOM_AT_TARGET] forKey:@"DOM_AT_TARGET"];
[d setObject:[Number numberWithDouble:DOM_BAD_BOUNDARYPOINTS_ERR] forKey:@"DOM_BAD_BOUNDARYPOINTS_ERR"];
[d setObject:[Number numberWithDouble:DOM_BOOLEAN_TYPE] forKey:@"DOM_BOOLEAN_TYPE"];
[d setObject:[Number numberWithDouble:DOM_BOTH] forKey:@"DOM_BOTH"];
[d setObject:[Number numberWithDouble:DOM_BUBBLING_PHASE] forKey:@"DOM_BUBBLING_PHASE"];
[d setObject:[Number numberWithDouble:DOM_CAPTURING_PHASE] forKey:@"DOM_CAPTURING_PHASE"];
[d setObject:[Number numberWithDouble:DOM_CDATA_SECTION_NODE] forKey:@"DOM_CDATA_SECTION_NODE"];
[d setObject:[Number numberWithDouble:DOM_CHARSET_RULE] forKey:@"DOM_CHARSET_RULE"];
[d setObject:[Number numberWithDouble:DOM_COMMENT_NODE] forKey:@"DOM_COMMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_CSS_ATTR] forKey:@"DOM_CSS_ATTR"];
[d setObject:[Number numberWithDouble:DOM_CSS_CM] forKey:@"DOM_CSS_CM"];
[d setObject:[Number numberWithDouble:DOM_CSS_COUNTER] forKey:@"DOM_CSS_COUNTER"];
[d setObject:[Number numberWithDouble:DOM_CSS_CUSTOM] forKey:@"DOM_CSS_CUSTOM"];
[d setObject:[Number numberWithDouble:DOM_CSS_DEG] forKey:@"DOM_CSS_DEG"];
[d setObject:[Number numberWithDouble:DOM_CSS_DIMENSION] forKey:@"DOM_CSS_DIMENSION"];
[d setObject:[Number numberWithDouble:DOM_CSS_EMS] forKey:@"DOM_CSS_EMS"];
[d setObject:[Number numberWithDouble:DOM_CSS_EXS] forKey:@"DOM_CSS_EXS"];
[d setObject:[Number numberWithDouble:DOM_CSS_GRAD] forKey:@"DOM_CSS_GRAD"];
[d setObject:[Number numberWithDouble:DOM_CSS_HZ] forKey:@"DOM_CSS_HZ"];
[d setObject:[Number numberWithDouble:DOM_CSS_IDENT] forKey:@"DOM_CSS_IDENT"];
[d setObject:[Number numberWithDouble:DOM_CSS_IN] forKey:@"DOM_CSS_IN"];
[d setObject:[Number numberWithDouble:DOM_CSS_INHERIT] forKey:@"DOM_CSS_INHERIT"];
[d setObject:[Number numberWithDouble:DOM_CSS_KHZ] forKey:@"DOM_CSS_KHZ"];
[d setObject:[Number numberWithDouble:DOM_CSS_MM] forKey:@"DOM_CSS_MM"];
[d setObject:[Number numberWithDouble:DOM_CSS_MS] forKey:@"DOM_CSS_MS"];
[d setObject:[Number numberWithDouble:DOM_CSS_NUMBER] forKey:@"DOM_CSS_NUMBER"];
[d setObject:[Number numberWithDouble:DOM_CSS_PC] forKey:@"DOM_CSS_PC"];
[d setObject:[Number numberWithDouble:DOM_CSS_PERCENTAGE] forKey:@"DOM_CSS_PERCENTAGE"];
[d setObject:[Number numberWithDouble:DOM_CSS_PRIMITIVE_VALUE] forKey:@"DOM_CSS_PRIMITIVE_VALUE"];
[d setObject:[Number numberWithDouble:DOM_CSS_PT] forKey:@"DOM_CSS_PT"];
[d setObject:[Number numberWithDouble:DOM_CSS_PX] forKey:@"DOM_CSS_PX"];
[d setObject:[Number numberWithDouble:DOM_CSS_RAD] forKey:@"DOM_CSS_RAD"];
[d setObject:[Number numberWithDouble:DOM_CSS_RECT] forKey:@"DOM_CSS_RECT"];
[d setObject:[Number numberWithDouble:DOM_CSS_RGBCOLOR] forKey:@"DOM_CSS_RGBCOLOR"];
[d setObject:[Number numberWithDouble:DOM_CSS_S] forKey:@"DOM_CSS_S"];
[d setObject:[Number numberWithDouble:DOM_CSS_STRING] forKey:@"DOM_CSS_STRING"];
[d setObject:[Number numberWithDouble:DOM_CSS_UNKNOWN] forKey:@"DOM_CSS_UNKNOWN"];
[d setObject:[Number numberWithDouble:DOM_CSS_URI] forKey:@"DOM_CSS_URI"];
[d setObject:[Number numberWithDouble:DOM_CSS_VALUE_LIST] forKey:@"DOM_CSS_VALUE_LIST"];
[d setObject:[Number numberWithDouble:DOM_DOCUMENT_FRAGMENT_NODE] forKey:@"DOM_DOCUMENT_FRAGMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_DOCUMENT_NODE] forKey:@"DOM_DOCUMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_DOCUMENT_TYPE_NODE] forKey:@"DOM_DOCUMENT_TYPE_NODE"];
[d setObject:[Number numberWithDouble:DOM_DOMSTRING_SIZE_ERR] forKey:@"DOM_DOMSTRING_SIZE_ERR"];
[d setObject:[Number numberWithDouble:DOM_ELEMENT_NODE] forKey:@"DOM_ELEMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_END_TO_END] forKey:@"DOM_END_TO_END"];
[d setObject:[Number numberWithDouble:DOM_END_TO_START] forKey:@"DOM_END_TO_START"];
[d setObject:[Number numberWithDouble:DOM_ENTITY_NODE] forKey:@"DOM_ENTITY_NODE"];
[d setObject:[Number numberWithDouble:DOM_ENTITY_REFERENCE_NODE] forKey:@"DOM_ENTITY_REFERENCE_NODE"];
[d setObject:[Number numberWithDouble:DOM_FILTER_ACCEPT] forKey:@"DOM_FILTER_ACCEPT"];
[d setObject:[Number numberWithDouble:DOM_FILTER_REJECT] forKey:@"DOM_FILTER_REJECT"];
[d setObject:[Number numberWithDouble:DOM_FILTER_SKIP] forKey:@"DOM_FILTER_SKIP"];
[d setObject:[Number numberWithDouble:DOM_FIRST_ORDERED_NODE_TYPE] forKey:@"DOM_FIRST_ORDERED_NODE_TYPE"];
[d setObject:[Number numberWithDouble:DOM_FONT_FACE_RULE] forKey:@"DOM_FONT_FACE_RULE"];
[d setObject:[Number numberWithDouble:DOM_HIERARCHY_REQUEST_ERR] forKey:@"DOM_HIERARCHY_REQUEST_ERR"];
[d setObject:[Number numberWithDouble:DOM_HORIZONTAL] forKey:@"DOM_HORIZONTAL"];
[d setObject:[Number numberWithDouble:DOM_IMPORT_RULE] forKey:@"DOM_IMPORT_RULE"];
[d setObject:[Number numberWithDouble:DOM_INDEX_SIZE_ERR] forKey:@"DOM_INDEX_SIZE_ERR"];
[d setObject:[Number numberWithDouble:DOM_INUSE_ATTRIBUTE_ERR] forKey:@"DOM_INUSE_ATTRIBUTE_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_ACCESS_ERR] forKey:@"DOM_INVALID_ACCESS_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_CHARACTER_ERR] forKey:@"DOM_INVALID_CHARACTER_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_EXPRESSION_ERR] forKey:@"DOM_INVALID_EXPRESSION_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_MODIFICATION_ERR] forKey:@"DOM_INVALID_MODIFICATION_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_NODE_TYPE_ERR] forKey:@"DOM_INVALID_NODE_TYPE_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_STATE_ERR] forKey:@"DOM_INVALID_STATE_ERR"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_LEFT] forKey:@"DOM_KEY_LOCATION_LEFT"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_NUMPAD] forKey:@"DOM_KEY_LOCATION_NUMPAD"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_RIGHT] forKey:@"DOM_KEY_LOCATION_RIGHT"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_STANDARD] forKey:@"DOM_KEY_LOCATION_STANDARD"];
[d setObject:[Number numberWithDouble:DOM_MEDIA_RULE] forKey:@"DOM_MEDIA_RULE"];
[d setObject:[Number numberWithDouble:DOM_MODIFICATION] forKey:@"DOM_MODIFICATION"];
[d setObject:[Number numberWithDouble:DOM_NAMESPACE_ERR] forKey:@"DOM_NAMESPACE_ERR"];
[d setObject:[Number numberWithDouble:DOM_NODE_AFTER] forKey:@"DOM_NODE_AFTER"];
[d setObject:[Number numberWithDouble:DOM_NODE_BEFORE] forKey:@"DOM_NODE_BEFORE"];
[d setObject:[Number numberWithDouble:DOM_NODE_BEFORE_AND_AFTER] forKey:@"DOM_NODE_BEFORE_AND_AFTER"];
[d setObject:[Number numberWithDouble:DOM_NODE_INSIDE] forKey:@"DOM_NODE_INSIDE"];
[d setObject:[Number numberWithDouble:DOM_NOTATION_NODE] forKey:@"DOM_NOTATION_NODE"];
[d setObject:[Number numberWithDouble:DOM_NOT_FOUND_ERR] forKey:@"DOM_NOT_FOUND_ERR"];
[d setObject:[Number numberWithDouble:DOM_NOT_SUPPORTED_ERR] forKey:@"DOM_NOT_SUPPORTED_ERR"];
[d setObject:[Number numberWithDouble:DOM_NO_DATA_ALLOWED_ERR] forKey:@"DOM_NO_DATA_ALLOWED_ERR"];
[d setObject:[Number numberWithDouble:DOM_NO_MODIFICATION_ALLOWED_ERR] forKey:@"DOM_NO_MODIFICATION_ALLOWED_ERR"];
[d setObject:[Number numberWithDouble:DOM_NUMBER_TYPE] forKey:@"DOM_NUMBER_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ORDERED_NODE_ITERATOR_TYPE] forKey:@"DOM_ORDERED_NODE_ITERATOR_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ORDERED_NODE_SNAPSHOT_TYPE] forKey:@"DOM_ORDERED_NODE_SNAPSHOT_TYPE"];
[d setObject:[Number numberWithDouble:DOM_PAGE_RULE] forKey:@"DOM_PAGE_RULE"];
[d setObject:[Number numberWithDouble:DOM_PROCESSING_INSTRUCTION_NODE] forKey:@"DOM_PROCESSING_INSTRUCTION_NODE"];
[d setObject:[Number numberWithDouble:DOM_REMOVAL] forKey:@"DOM_REMOVAL"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ALL] forKey:@"DOM_SHOW_ALL"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ATTRIBUTE] forKey:@"DOM_SHOW_ATTRIBUTE"];
[d setObject:[Number numberWithDouble:DOM_SHOW_CDATA_SECTION] forKey:@"DOM_SHOW_CDATA_SECTION"];
[d setObject:[Number numberWithDouble:DOM_SHOW_COMMENT] forKey:@"DOM_SHOW_COMMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_DOCUMENT] forKey:@"DOM_SHOW_DOCUMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_DOCUMENT_FRAGMENT] forKey:@"DOM_SHOW_DOCUMENT_FRAGMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_DOCUMENT_TYPE] forKey:@"DOM_SHOW_DOCUMENT_TYPE"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ELEMENT] forKey:@"DOM_SHOW_ELEMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ENTITY] forKey:@"DOM_SHOW_ENTITY"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ENTITY_REFERENCE] forKey:@"DOM_SHOW_ENTITY_REFERENCE"];
[d setObject:[Number numberWithDouble:DOM_SHOW_NOTATION] forKey:@"DOM_SHOW_NOTATION"];
[d setObject:[Number numberWithDouble:DOM_SHOW_PROCESSING_INSTRUCTION] forKey:@"DOM_SHOW_PROCESSING_INSTRUCTION"];
[d setObject:[Number numberWithDouble:DOM_SHOW_TEXT] forKey:@"DOM_SHOW_TEXT"];
[d setObject:[Number numberWithDouble:DOM_START_TO_END] forKey:@"DOM_START_TO_END"];
[d setObject:[Number numberWithDouble:DOM_START_TO_START] forKey:@"DOM_START_TO_START"];
[d setObject:[Number numberWithDouble:DOM_STRING_TYPE] forKey:@"DOM_STRING_TYPE"];
[d setObject:[Number numberWithDouble:DOM_STYLE_RULE] forKey:@"DOM_STYLE_RULE"];
[d setObject:[Number numberWithDouble:DOM_SYNTAX_ERR] forKey:@"DOM_SYNTAX_ERR"];
[d setObject:[Number numberWithDouble:DOM_TEXT_NODE] forKey:@"DOM_TEXT_NODE"];
[d setObject:[Number numberWithDouble:DOM_TYPE_ERR] forKey:@"DOM_TYPE_ERR"];
[d setObject:[Number numberWithDouble:DOM_UNKNOWN_RULE] forKey:@"DOM_UNKNOWN_RULE"];
[d setObject:[Number numberWithDouble:DOM_UNORDERED_NODE_ITERATOR_TYPE] forKey:@"DOM_UNORDERED_NODE_ITERATOR_TYPE"];
[d setObject:[Number numberWithDouble:DOM_UNORDERED_NODE_SNAPSHOT_TYPE] forKey:@"DOM_UNORDERED_NODE_SNAPSHOT_TYPE"];
[d setObject:[Number numberWithDouble:DOM_UNSPECIFIED_EVENT_TYPE_ERR] forKey:@"DOM_UNSPECIFIED_EVENT_TYPE_ERR"];
[d setObject:[Number numberWithDouble:DOM_VERTICAL] forKey:@"DOM_VERTICAL"];
[d setObject:[Number numberWithDouble:DOM_WRONG_DOCUMENT_ERR] forKey:@"DOM_WRONG_DOCUMENT_ERR"];
[d setObject:[Number numberWithDouble:WebCacheModelDocumentBrowser] forKey:@"WebCacheModelDocumentBrowser"];
[d setObject:[Number numberWithDouble:WebCacheModelDocumentViewer] forKey:@"WebCacheModelDocumentViewer"];
[d setObject:[Number numberWithDouble:WebCacheModelPrimaryWebBrowser] forKey:@"WebCacheModelPrimaryWebBrowser"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionAny] forKey:@"WebDragDestinationActionAny"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionDHTML] forKey:@"WebDragDestinationActionDHTML"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionEdit] forKey:@"WebDragDestinationActionEdit"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionLoad] forKey:@"WebDragDestinationActionLoad"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionNone] forKey:@"WebDragDestinationActionNone"];
[d setObject:[Number numberWithDouble:WebDragSourceActionAny] forKey:@"WebDragSourceActionAny"];
[d setObject:[Number numberWithDouble:WebDragSourceActionDHTML] forKey:@"WebDragSourceActionDHTML"];
[d setObject:[Number numberWithDouble:WebDragSourceActionImage] forKey:@"WebDragSourceActionImage"];
[d setObject:[Number numberWithDouble:WebDragSourceActionLink] forKey:@"WebDragSourceActionLink"];
[d setObject:[Number numberWithDouble:WebDragSourceActionNone] forKey:@"WebDragSourceActionNone"];
[d setObject:[Number numberWithDouble:WebDragSourceActionSelection] forKey:@"WebDragSourceActionSelection"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeBoolean] forKey:@"WebJNIReturnTypeBoolean"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeByte] forKey:@"WebJNIReturnTypeByte"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeChar] forKey:@"WebJNIReturnTypeChar"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeDouble] forKey:@"WebJNIReturnTypeDouble"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeFloat] forKey:@"WebJNIReturnTypeFloat"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeInt] forKey:@"WebJNIReturnTypeInt"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeInvalid] forKey:@"WebJNIReturnTypeInvalid"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeLong] forKey:@"WebJNIReturnTypeLong"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeObject] forKey:@"WebJNIReturnTypeObject"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeShort] forKey:@"WebJNIReturnTypeShort"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeVoid] forKey:@"WebJNIReturnTypeVoid"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotFindPlugIn] forKey:@"WebKitErrorCannotFindPlugIn"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotLoadPlugIn] forKey:@"WebKitErrorCannotLoadPlugIn"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotShowMIMEType] forKey:@"WebKitErrorCannotShowMIMEType"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotShowURL] forKey:@"WebKitErrorCannotShowURL"];
[d setObject:[Number numberWithDouble:WebKitErrorFrameLoadInterruptedByPolicyChange] forKey:@"WebKitErrorFrameLoadInterruptedByPolicyChange"];
[d setObject:[Number numberWithDouble:WebKitErrorJavaUnavailable] forKey:@"WebKitErrorJavaUnavailable"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFActualSize] forKey:@"WebMenuItemPDFActualSize"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFAutoSize] forKey:@"WebMenuItemPDFAutoSize"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFContinuous] forKey:@"WebMenuItemPDFContinuous"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFFacingPages] forKey:@"WebMenuItemPDFFacingPages"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFNextPage] forKey:@"WebMenuItemPDFNextPage"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFPreviousPage] forKey:@"WebMenuItemPDFPreviousPage"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFSinglePage] forKey:@"WebMenuItemPDFSinglePage"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFZoomIn] forKey:@"WebMenuItemPDFZoomIn"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFZoomOut] forKey:@"WebMenuItemPDFZoomOut"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCopy] forKey:@"WebMenuItemTagCopy"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCopyImageToClipboard] forKey:@"WebMenuItemTagCopyImageToClipboard"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCopyLinkToClipboard] forKey:@"WebMenuItemTagCopyLinkToClipboard"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCut] forKey:@"WebMenuItemTagCut"];
[d setObject:[Number numberWithDouble:WebMenuItemTagDownloadImageToDisk] forKey:@"WebMenuItemTagDownloadImageToDisk"];
[d setObject:[Number numberWithDouble:WebMenuItemTagDownloadLinkToDisk] forKey:@"WebMenuItemTagDownloadLinkToDisk"];
[d setObject:[Number numberWithDouble:WebMenuItemTagGoBack] forKey:@"WebMenuItemTagGoBack"];
[d setObject:[Number numberWithDouble:WebMenuItemTagGoForward] forKey:@"WebMenuItemTagGoForward"];
[d setObject:[Number numberWithDouble:WebMenuItemTagIgnoreSpelling] forKey:@"WebMenuItemTagIgnoreSpelling"];
[d setObject:[Number numberWithDouble:WebMenuItemTagLearnSpelling] forKey:@"WebMenuItemTagLearnSpelling"];
[d setObject:[Number numberWithDouble:WebMenuItemTagLookUpInDictionary] forKey:@"WebMenuItemTagLookUpInDictionary"];
[d setObject:[Number numberWithDouble:WebMenuItemTagNoGuessesFound] forKey:@"WebMenuItemTagNoGuessesFound"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenFrameInNewWindow] forKey:@"WebMenuItemTagOpenFrameInNewWindow"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenImageInNewWindow] forKey:@"WebMenuItemTagOpenImageInNewWindow"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenLinkInNewWindow] forKey:@"WebMenuItemTagOpenLinkInNewWindow"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenWithDefaultApplication] forKey:@"WebMenuItemTagOpenWithDefaultApplication"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOther] forKey:@"WebMenuItemTagOther"];
[d setObject:[Number numberWithDouble:WebMenuItemTagPaste] forKey:@"WebMenuItemTagPaste"];
[d setObject:[Number numberWithDouble:WebMenuItemTagReload] forKey:@"WebMenuItemTagReload"];
[d setObject:[Number numberWithDouble:WebMenuItemTagSearchInSpotlight] forKey:@"WebMenuItemTagSearchInSpotlight"];
[d setObject:[Number numberWithDouble:WebMenuItemTagSearchWeb] forKey:@"WebMenuItemTagSearchWeb"];
[d setObject:[Number numberWithDouble:WebMenuItemTagSpellingGuess] forKey:@"WebMenuItemTagSpellingGuess"];
[d setObject:[Number numberWithDouble:WebMenuItemTagStop] forKey:@"WebMenuItemTagStop"];
[d setObject:[Number numberWithDouble:WebNavigationTypeBackForward] forKey:@"WebNavigationTypeBackForward"];
[d setObject:[Number numberWithDouble:WebNavigationTypeFormResubmitted] forKey:@"WebNavigationTypeFormResubmitted"];
[d setObject:[Number numberWithDouble:WebNavigationTypeFormSubmitted] forKey:@"WebNavigationTypeFormSubmitted"];
[d setObject:[Number numberWithDouble:WebNavigationTypeLinkClicked] forKey:@"WebNavigationTypeLinkClicked"];
[d setObject:[Number numberWithDouble:WebNavigationTypeOther] forKey:@"WebNavigationTypeOther"];
[d setObject:[Number numberWithDouble:WebNavigationTypeReload] forKey:@"WebNavigationTypeReload"];
[d setObject:[Number numberWithDouble:WebViewInsertActionDropped] forKey:@"WebViewInsertActionDropped"];
[d setObject:[Number numberWithDouble:WebViewInsertActionPasted] forKey:@"WebViewInsertActionPasted"];
[d setObject:[Number numberWithDouble:WebViewInsertActionTyped] forKey:@"WebViewInsertActionTyped"];
if ([DOMEventException isKindOfClass:[NSString class]]) [d setObject:DOMEventException forKey:@"DOMEventException"]; else NSLog([@"Can't initialize DOMEventException with object " stringByAppendingString:[DOMEventException description]]);
if ([DOMException isKindOfClass:[NSString class]]) [d setObject:DOMException forKey:@"DOMException"]; else NSLog([@"Can't initialize DOMException with object " stringByAppendingString:[DOMException description]]);
if ([DOMRangeException isKindOfClass:[NSString class]]) [d setObject:DOMRangeException forKey:@"DOMRangeException"]; else NSLog([@"Can't initialize DOMRangeException with object " stringByAppendingString:[DOMRangeException description]]);
if ([DOMXPathException isKindOfClass:[NSString class]]) [d setObject:DOMXPathException forKey:@"DOMXPathException"]; else NSLog([@"Can't initialize DOMXPathException with object " stringByAppendingString:[DOMXPathException description]]);
if ([WebActionButtonKey isKindOfClass:[NSString class]]) [d setObject:WebActionButtonKey forKey:@"WebActionButtonKey"]; else NSLog([@"Can't initialize WebActionButtonKey with object " stringByAppendingString:[WebActionButtonKey description]]);
if ([WebActionElementKey isKindOfClass:[NSString class]]) [d setObject:WebActionElementKey forKey:@"WebActionElementKey"]; else NSLog([@"Can't initialize WebActionElementKey with object " stringByAppendingString:[WebActionElementKey description]]);
if ([WebActionModifierFlagsKey isKindOfClass:[NSString class]]) [d setObject:WebActionModifierFlagsKey forKey:@"WebActionModifierFlagsKey"]; else NSLog([@"Can't initialize WebActionModifierFlagsKey with object " stringByAppendingString:[WebActionModifierFlagsKey description]]);
if ([WebActionNavigationTypeKey isKindOfClass:[NSString class]]) [d setObject:WebActionNavigationTypeKey forKey:@"WebActionNavigationTypeKey"]; else NSLog([@"Can't initialize WebActionNavigationTypeKey with object " stringByAppendingString:[WebActionNavigationTypeKey description]]);
if ([WebActionOriginalURLKey isKindOfClass:[NSString class]]) [d setObject:WebActionOriginalURLKey forKey:@"WebActionOriginalURLKey"]; else NSLog([@"Can't initialize WebActionOriginalURLKey with object " stringByAppendingString:[WebActionOriginalURLKey description]]);
if ([WebArchivePboardType isKindOfClass:[NSString class]]) [d setObject:WebArchivePboardType forKey:@"WebArchivePboardType"]; else NSLog([@"Can't initialize WebArchivePboardType with object " stringByAppendingString:[WebArchivePboardType description]]);
if ([WebElementDOMNodeKey isKindOfClass:[NSString class]]) [d setObject:WebElementDOMNodeKey forKey:@"WebElementDOMNodeKey"]; else NSLog([@"Can't initialize WebElementDOMNodeKey with object " stringByAppendingString:[WebElementDOMNodeKey description]]);
if ([WebElementFrameKey isKindOfClass:[NSString class]]) [d setObject:WebElementFrameKey forKey:@"WebElementFrameKey"]; else NSLog([@"Can't initialize WebElementFrameKey with object " stringByAppendingString:[WebElementFrameKey description]]);
if ([WebElementImageAltStringKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageAltStringKey forKey:@"WebElementImageAltStringKey"]; else NSLog([@"Can't initialize WebElementImageAltStringKey with object " stringByAppendingString:[WebElementImageAltStringKey description]]);
if ([WebElementImageKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageKey forKey:@"WebElementImageKey"]; else NSLog([@"Can't initialize WebElementImageKey with object " stringByAppendingString:[WebElementImageKey description]]);
if ([WebElementImageRectKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageRectKey forKey:@"WebElementImageRectKey"]; else NSLog([@"Can't initialize WebElementImageRectKey with object " stringByAppendingString:[WebElementImageRectKey description]]);
if ([WebElementImageURLKey isKindOfClass:[NSString class]]) [d setObject:WebElementImageURLKey forKey:@"WebElementImageURLKey"]; else NSLog([@"Can't initialize WebElementImageURLKey with object " stringByAppendingString:[WebElementImageURLKey description]]);
if ([WebElementIsSelectedKey isKindOfClass:[NSString class]]) [d setObject:WebElementIsSelectedKey forKey:@"WebElementIsSelectedKey"]; else NSLog([@"Can't initialize WebElementIsSelectedKey with object " stringByAppendingString:[WebElementIsSelectedKey description]]);
if ([WebElementLinkLabelKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkLabelKey forKey:@"WebElementLinkLabelKey"]; else NSLog([@"Can't initialize WebElementLinkLabelKey with object " stringByAppendingString:[WebElementLinkLabelKey description]]);
if ([WebElementLinkTargetFrameKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkTargetFrameKey forKey:@"WebElementLinkTargetFrameKey"]; else NSLog([@"Can't initialize WebElementLinkTargetFrameKey with object " stringByAppendingString:[WebElementLinkTargetFrameKey description]]);
if ([WebElementLinkTitleKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkTitleKey forKey:@"WebElementLinkTitleKey"]; else NSLog([@"Can't initialize WebElementLinkTitleKey with object " stringByAppendingString:[WebElementLinkTitleKey description]]);
if ([WebElementLinkURLKey isKindOfClass:[NSString class]]) [d setObject:WebElementLinkURLKey forKey:@"WebElementLinkURLKey"]; else NSLog([@"Can't initialize WebElementLinkURLKey with object " stringByAppendingString:[WebElementLinkURLKey description]]);
if ([WebHistoryAllItemsRemovedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryAllItemsRemovedNotification forKey:@"WebHistoryAllItemsRemovedNotification"]; else NSLog([@"Can't initialize WebHistoryAllItemsRemovedNotification with object " stringByAppendingString:[WebHistoryAllItemsRemovedNotification description]]);
if ([WebHistoryItemChangedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemChangedNotification forKey:@"WebHistoryItemChangedNotification"]; else NSLog([@"Can't initialize WebHistoryItemChangedNotification with object " stringByAppendingString:[WebHistoryItemChangedNotification description]]);
if ([WebHistoryItemsAddedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemsAddedNotification forKey:@"WebHistoryItemsAddedNotification"]; else NSLog([@"Can't initialize WebHistoryItemsAddedNotification with object " stringByAppendingString:[WebHistoryItemsAddedNotification description]]);
if ([WebHistoryItemsKey isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemsKey forKey:@"WebHistoryItemsKey"]; else NSLog([@"Can't initialize WebHistoryItemsKey with object " stringByAppendingString:[WebHistoryItemsKey description]]);
if ([WebHistoryItemsRemovedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryItemsRemovedNotification forKey:@"WebHistoryItemsRemovedNotification"]; else NSLog([@"Can't initialize WebHistoryItemsRemovedNotification with object " stringByAppendingString:[WebHistoryItemsRemovedNotification description]]);
if ([WebHistoryLoadedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistoryLoadedNotification forKey:@"WebHistoryLoadedNotification"]; else NSLog([@"Can't initialize WebHistoryLoadedNotification with object " stringByAppendingString:[WebHistoryLoadedNotification description]]);
if ([WebHistorySavedNotification isKindOfClass:[NSString class]]) [d setObject:WebHistorySavedNotification forKey:@"WebHistorySavedNotification"]; else NSLog([@"Can't initialize WebHistorySavedNotification with object " stringByAppendingString:[WebHistorySavedNotification description]]);
if ([WebKitErrorDomain isKindOfClass:[NSString class]]) [d setObject:WebKitErrorDomain forKey:@"WebKitErrorDomain"]; else NSLog([@"Can't initialize WebKitErrorDomain with object " stringByAppendingString:[WebKitErrorDomain description]]);
if ([WebKitErrorMIMETypeKey isKindOfClass:[NSString class]]) [d setObject:WebKitErrorMIMETypeKey forKey:@"WebKitErrorMIMETypeKey"]; else NSLog([@"Can't initialize WebKitErrorMIMETypeKey with object " stringByAppendingString:[WebKitErrorMIMETypeKey description]]);
if ([WebKitErrorPlugInNameKey isKindOfClass:[NSString class]]) [d setObject:WebKitErrorPlugInNameKey forKey:@"WebKitErrorPlugInNameKey"]; else NSLog([@"Can't initialize WebKitErrorPlugInNameKey with object " stringByAppendingString:[WebKitErrorPlugInNameKey description]]);
if ([WebKitErrorPlugInPageURLStringKey isKindOfClass:[NSString class]]) [d setObject:WebKitErrorPlugInPageURLStringKey forKey:@"WebKitErrorPlugInPageURLStringKey"]; else NSLog([@"Can't initialize WebKitErrorPlugInPageURLStringKey with object " stringByAppendingString:[WebKitErrorPlugInPageURLStringKey description]]);
if ([WebPlugInAttributesKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInAttributesKey forKey:@"WebPlugInAttributesKey"]; else NSLog([@"Can't initialize WebPlugInAttributesKey with object " stringByAppendingString:[WebPlugInAttributesKey description]]);
if ([WebPlugInBaseURLKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInBaseURLKey forKey:@"WebPlugInBaseURLKey"]; else NSLog([@"Can't initialize WebPlugInBaseURLKey with object " stringByAppendingString:[WebPlugInBaseURLKey description]]);
if ([WebPlugInContainerKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInContainerKey forKey:@"WebPlugInContainerKey"]; else NSLog([@"Can't initialize WebPlugInContainerKey with object " stringByAppendingString:[WebPlugInContainerKey description]]);
if ([WebPlugInContainingElementKey isKindOfClass:[NSString class]]) [d setObject:WebPlugInContainingElementKey forKey:@"WebPlugInContainingElementKey"]; else NSLog([@"Can't initialize WebPlugInContainingElementKey with object " stringByAppendingString:[WebPlugInContainingElementKey description]]);
if ([WebPreferencesChangedNotification isKindOfClass:[NSString class]]) [d setObject:WebPreferencesChangedNotification forKey:@"WebPreferencesChangedNotification"]; else NSLog([@"Can't initialize WebPreferencesChangedNotification with object " stringByAppendingString:[WebPreferencesChangedNotification description]]);
if ([WebViewDidBeginEditingNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidBeginEditingNotification forKey:@"WebViewDidBeginEditingNotification"]; else NSLog([@"Can't initialize WebViewDidBeginEditingNotification with object " stringByAppendingString:[WebViewDidBeginEditingNotification description]]);
if ([WebViewDidChangeNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidChangeNotification forKey:@"WebViewDidChangeNotification"]; else NSLog([@"Can't initialize WebViewDidChangeNotification with object " stringByAppendingString:[WebViewDidChangeNotification description]]);
if ([WebViewDidChangeSelectionNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidChangeSelectionNotification forKey:@"WebViewDidChangeSelectionNotification"]; else NSLog([@"Can't initialize WebViewDidChangeSelectionNotification with object " stringByAppendingString:[WebViewDidChangeSelectionNotification description]]);
if ([WebViewDidChangeTypingStyleNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidChangeTypingStyleNotification forKey:@"WebViewDidChangeTypingStyleNotification"]; else NSLog([@"Can't initialize WebViewDidChangeTypingStyleNotification with object " stringByAppendingString:[WebViewDidChangeTypingStyleNotification description]]);
if ([WebViewDidEndEditingNotification isKindOfClass:[NSString class]]) [d setObject:WebViewDidEndEditingNotification forKey:@"WebViewDidEndEditingNotification"]; else NSLog([@"Can't initialize WebViewDidEndEditingNotification with object " stringByAppendingString:[WebViewDidEndEditingNotification description]]);
if ([WebViewProgressEstimateChangedNotification isKindOfClass:[NSString class]]) [d setObject:WebViewProgressEstimateChangedNotification forKey:@"WebViewProgressEstimateChangedNotification"]; else NSLog([@"Can't initialize WebViewProgressEstimateChangedNotification with object " stringByAppendingString:[WebViewProgressEstimateChangedNotification description]]);
if ([WebViewProgressFinishedNotification isKindOfClass:[NSString class]]) [d setObject:WebViewProgressFinishedNotification forKey:@"WebViewProgressFinishedNotification"]; else NSLog([@"Can't initialize WebViewProgressFinishedNotification with object " stringByAppendingString:[WebViewProgressFinishedNotification description]]);
if ([WebViewProgressStartedNotification isKindOfClass:[NSString class]]) [d setObject:WebViewProgressStartedNotification forKey:@"WebViewProgressStartedNotification"]; else NSLog([@"Can't initialize WebViewProgressStartedNotification with object " stringByAppendingString:[WebViewProgressStartedNotification description]]);
[d setObject:[Number numberWithDouble:DOM_ADDITION] forKey:@"DOM_ADDITION"];
[d setObject:[Number numberWithDouble:DOM_ANY_TYPE] forKey:@"DOM_ANY_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ANY_UNORDERED_NODE_TYPE] forKey:@"DOM_ANY_UNORDERED_NODE_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ATTRIBUTE_NODE] forKey:@"DOM_ATTRIBUTE_NODE"];
[d setObject:[Number numberWithDouble:DOM_AT_TARGET] forKey:@"DOM_AT_TARGET"];
[d setObject:[Number numberWithDouble:DOM_BAD_BOUNDARYPOINTS_ERR] forKey:@"DOM_BAD_BOUNDARYPOINTS_ERR"];
[d setObject:[Number numberWithDouble:DOM_BOOLEAN_TYPE] forKey:@"DOM_BOOLEAN_TYPE"];
[d setObject:[Number numberWithDouble:DOM_BOTH] forKey:@"DOM_BOTH"];
[d setObject:[Number numberWithDouble:DOM_BUBBLING_PHASE] forKey:@"DOM_BUBBLING_PHASE"];
[d setObject:[Number numberWithDouble:DOM_CAPTURING_PHASE] forKey:@"DOM_CAPTURING_PHASE"];
[d setObject:[Number numberWithDouble:DOM_CDATA_SECTION_NODE] forKey:@"DOM_CDATA_SECTION_NODE"];
[d setObject:[Number numberWithDouble:DOM_CHARSET_RULE] forKey:@"DOM_CHARSET_RULE"];
[d setObject:[Number numberWithDouble:DOM_COMMENT_NODE] forKey:@"DOM_COMMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_CSS_ATTR] forKey:@"DOM_CSS_ATTR"];
[d setObject:[Number numberWithDouble:DOM_CSS_CM] forKey:@"DOM_CSS_CM"];
[d setObject:[Number numberWithDouble:DOM_CSS_COUNTER] forKey:@"DOM_CSS_COUNTER"];
[d setObject:[Number numberWithDouble:DOM_CSS_CUSTOM] forKey:@"DOM_CSS_CUSTOM"];
[d setObject:[Number numberWithDouble:DOM_CSS_DEG] forKey:@"DOM_CSS_DEG"];
[d setObject:[Number numberWithDouble:DOM_CSS_DIMENSION] forKey:@"DOM_CSS_DIMENSION"];
[d setObject:[Number numberWithDouble:DOM_CSS_EMS] forKey:@"DOM_CSS_EMS"];
[d setObject:[Number numberWithDouble:DOM_CSS_EXS] forKey:@"DOM_CSS_EXS"];
[d setObject:[Number numberWithDouble:DOM_CSS_GRAD] forKey:@"DOM_CSS_GRAD"];
[d setObject:[Number numberWithDouble:DOM_CSS_HZ] forKey:@"DOM_CSS_HZ"];
[d setObject:[Number numberWithDouble:DOM_CSS_IDENT] forKey:@"DOM_CSS_IDENT"];
[d setObject:[Number numberWithDouble:DOM_CSS_IN] forKey:@"DOM_CSS_IN"];
[d setObject:[Number numberWithDouble:DOM_CSS_INHERIT] forKey:@"DOM_CSS_INHERIT"];
[d setObject:[Number numberWithDouble:DOM_CSS_KHZ] forKey:@"DOM_CSS_KHZ"];
[d setObject:[Number numberWithDouble:DOM_CSS_MM] forKey:@"DOM_CSS_MM"];
[d setObject:[Number numberWithDouble:DOM_CSS_MS] forKey:@"DOM_CSS_MS"];
[d setObject:[Number numberWithDouble:DOM_CSS_NUMBER] forKey:@"DOM_CSS_NUMBER"];
[d setObject:[Number numberWithDouble:DOM_CSS_PC] forKey:@"DOM_CSS_PC"];
[d setObject:[Number numberWithDouble:DOM_CSS_PERCENTAGE] forKey:@"DOM_CSS_PERCENTAGE"];
[d setObject:[Number numberWithDouble:DOM_CSS_PRIMITIVE_VALUE] forKey:@"DOM_CSS_PRIMITIVE_VALUE"];
[d setObject:[Number numberWithDouble:DOM_CSS_PT] forKey:@"DOM_CSS_PT"];
[d setObject:[Number numberWithDouble:DOM_CSS_PX] forKey:@"DOM_CSS_PX"];
[d setObject:[Number numberWithDouble:DOM_CSS_RAD] forKey:@"DOM_CSS_RAD"];
[d setObject:[Number numberWithDouble:DOM_CSS_RECT] forKey:@"DOM_CSS_RECT"];
[d setObject:[Number numberWithDouble:DOM_CSS_RGBCOLOR] forKey:@"DOM_CSS_RGBCOLOR"];
[d setObject:[Number numberWithDouble:DOM_CSS_S] forKey:@"DOM_CSS_S"];
[d setObject:[Number numberWithDouble:DOM_CSS_STRING] forKey:@"DOM_CSS_STRING"];
[d setObject:[Number numberWithDouble:DOM_CSS_UNKNOWN] forKey:@"DOM_CSS_UNKNOWN"];
[d setObject:[Number numberWithDouble:DOM_CSS_URI] forKey:@"DOM_CSS_URI"];
[d setObject:[Number numberWithDouble:DOM_CSS_VALUE_LIST] forKey:@"DOM_CSS_VALUE_LIST"];
[d setObject:[Number numberWithDouble:DOM_DOCUMENT_FRAGMENT_NODE] forKey:@"DOM_DOCUMENT_FRAGMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_DOCUMENT_NODE] forKey:@"DOM_DOCUMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_DOCUMENT_TYPE_NODE] forKey:@"DOM_DOCUMENT_TYPE_NODE"];
[d setObject:[Number numberWithDouble:DOM_DOMSTRING_SIZE_ERR] forKey:@"DOM_DOMSTRING_SIZE_ERR"];
[d setObject:[Number numberWithDouble:DOM_ELEMENT_NODE] forKey:@"DOM_ELEMENT_NODE"];
[d setObject:[Number numberWithDouble:DOM_END_TO_END] forKey:@"DOM_END_TO_END"];
[d setObject:[Number numberWithDouble:DOM_END_TO_START] forKey:@"DOM_END_TO_START"];
[d setObject:[Number numberWithDouble:DOM_ENTITY_NODE] forKey:@"DOM_ENTITY_NODE"];
[d setObject:[Number numberWithDouble:DOM_ENTITY_REFERENCE_NODE] forKey:@"DOM_ENTITY_REFERENCE_NODE"];
[d setObject:[Number numberWithDouble:DOM_FILTER_ACCEPT] forKey:@"DOM_FILTER_ACCEPT"];
[d setObject:[Number numberWithDouble:DOM_FILTER_REJECT] forKey:@"DOM_FILTER_REJECT"];
[d setObject:[Number numberWithDouble:DOM_FILTER_SKIP] forKey:@"DOM_FILTER_SKIP"];
[d setObject:[Number numberWithDouble:DOM_FIRST_ORDERED_NODE_TYPE] forKey:@"DOM_FIRST_ORDERED_NODE_TYPE"];
[d setObject:[Number numberWithDouble:DOM_FONT_FACE_RULE] forKey:@"DOM_FONT_FACE_RULE"];
[d setObject:[Number numberWithDouble:DOM_HIERARCHY_REQUEST_ERR] forKey:@"DOM_HIERARCHY_REQUEST_ERR"];
[d setObject:[Number numberWithDouble:DOM_HORIZONTAL] forKey:@"DOM_HORIZONTAL"];
[d setObject:[Number numberWithDouble:DOM_IMPORT_RULE] forKey:@"DOM_IMPORT_RULE"];
[d setObject:[Number numberWithDouble:DOM_INDEX_SIZE_ERR] forKey:@"DOM_INDEX_SIZE_ERR"];
[d setObject:[Number numberWithDouble:DOM_INUSE_ATTRIBUTE_ERR] forKey:@"DOM_INUSE_ATTRIBUTE_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_ACCESS_ERR] forKey:@"DOM_INVALID_ACCESS_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_CHARACTER_ERR] forKey:@"DOM_INVALID_CHARACTER_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_EXPRESSION_ERR] forKey:@"DOM_INVALID_EXPRESSION_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_MODIFICATION_ERR] forKey:@"DOM_INVALID_MODIFICATION_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_NODE_TYPE_ERR] forKey:@"DOM_INVALID_NODE_TYPE_ERR"];
[d setObject:[Number numberWithDouble:DOM_INVALID_STATE_ERR] forKey:@"DOM_INVALID_STATE_ERR"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_LEFT] forKey:@"DOM_KEY_LOCATION_LEFT"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_NUMPAD] forKey:@"DOM_KEY_LOCATION_NUMPAD"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_RIGHT] forKey:@"DOM_KEY_LOCATION_RIGHT"];
[d setObject:[Number numberWithDouble:DOM_KEY_LOCATION_STANDARD] forKey:@"DOM_KEY_LOCATION_STANDARD"];
[d setObject:[Number numberWithDouble:DOM_MEDIA_RULE] forKey:@"DOM_MEDIA_RULE"];
[d setObject:[Number numberWithDouble:DOM_MODIFICATION] forKey:@"DOM_MODIFICATION"];
[d setObject:[Number numberWithDouble:DOM_NAMESPACE_ERR] forKey:@"DOM_NAMESPACE_ERR"];
[d setObject:[Number numberWithDouble:DOM_NODE_AFTER] forKey:@"DOM_NODE_AFTER"];
[d setObject:[Number numberWithDouble:DOM_NODE_BEFORE] forKey:@"DOM_NODE_BEFORE"];
[d setObject:[Number numberWithDouble:DOM_NODE_BEFORE_AND_AFTER] forKey:@"DOM_NODE_BEFORE_AND_AFTER"];
[d setObject:[Number numberWithDouble:DOM_NODE_INSIDE] forKey:@"DOM_NODE_INSIDE"];
[d setObject:[Number numberWithDouble:DOM_NOTATION_NODE] forKey:@"DOM_NOTATION_NODE"];
[d setObject:[Number numberWithDouble:DOM_NOT_FOUND_ERR] forKey:@"DOM_NOT_FOUND_ERR"];
[d setObject:[Number numberWithDouble:DOM_NOT_SUPPORTED_ERR] forKey:@"DOM_NOT_SUPPORTED_ERR"];
[d setObject:[Number numberWithDouble:DOM_NO_DATA_ALLOWED_ERR] forKey:@"DOM_NO_DATA_ALLOWED_ERR"];
[d setObject:[Number numberWithDouble:DOM_NO_MODIFICATION_ALLOWED_ERR] forKey:@"DOM_NO_MODIFICATION_ALLOWED_ERR"];
[d setObject:[Number numberWithDouble:DOM_NUMBER_TYPE] forKey:@"DOM_NUMBER_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ORDERED_NODE_ITERATOR_TYPE] forKey:@"DOM_ORDERED_NODE_ITERATOR_TYPE"];
[d setObject:[Number numberWithDouble:DOM_ORDERED_NODE_SNAPSHOT_TYPE] forKey:@"DOM_ORDERED_NODE_SNAPSHOT_TYPE"];
[d setObject:[Number numberWithDouble:DOM_PAGE_RULE] forKey:@"DOM_PAGE_RULE"];
[d setObject:[Number numberWithDouble:DOM_PROCESSING_INSTRUCTION_NODE] forKey:@"DOM_PROCESSING_INSTRUCTION_NODE"];
[d setObject:[Number numberWithDouble:DOM_REMOVAL] forKey:@"DOM_REMOVAL"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ALL] forKey:@"DOM_SHOW_ALL"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ATTRIBUTE] forKey:@"DOM_SHOW_ATTRIBUTE"];
[d setObject:[Number numberWithDouble:DOM_SHOW_CDATA_SECTION] forKey:@"DOM_SHOW_CDATA_SECTION"];
[d setObject:[Number numberWithDouble:DOM_SHOW_COMMENT] forKey:@"DOM_SHOW_COMMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_DOCUMENT] forKey:@"DOM_SHOW_DOCUMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_DOCUMENT_FRAGMENT] forKey:@"DOM_SHOW_DOCUMENT_FRAGMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_DOCUMENT_TYPE] forKey:@"DOM_SHOW_DOCUMENT_TYPE"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ELEMENT] forKey:@"DOM_SHOW_ELEMENT"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ENTITY] forKey:@"DOM_SHOW_ENTITY"];
[d setObject:[Number numberWithDouble:DOM_SHOW_ENTITY_REFERENCE] forKey:@"DOM_SHOW_ENTITY_REFERENCE"];
[d setObject:[Number numberWithDouble:DOM_SHOW_NOTATION] forKey:@"DOM_SHOW_NOTATION"];
[d setObject:[Number numberWithDouble:DOM_SHOW_PROCESSING_INSTRUCTION] forKey:@"DOM_SHOW_PROCESSING_INSTRUCTION"];
[d setObject:[Number numberWithDouble:DOM_SHOW_TEXT] forKey:@"DOM_SHOW_TEXT"];
[d setObject:[Number numberWithDouble:DOM_START_TO_END] forKey:@"DOM_START_TO_END"];
[d setObject:[Number numberWithDouble:DOM_START_TO_START] forKey:@"DOM_START_TO_START"];
[d setObject:[Number numberWithDouble:DOM_STRING_TYPE] forKey:@"DOM_STRING_TYPE"];
[d setObject:[Number numberWithDouble:DOM_STYLE_RULE] forKey:@"DOM_STYLE_RULE"];
[d setObject:[Number numberWithDouble:DOM_SYNTAX_ERR] forKey:@"DOM_SYNTAX_ERR"];
[d setObject:[Number numberWithDouble:DOM_TEXT_NODE] forKey:@"DOM_TEXT_NODE"];
[d setObject:[Number numberWithDouble:DOM_TYPE_ERR] forKey:@"DOM_TYPE_ERR"];
[d setObject:[Number numberWithDouble:DOM_UNKNOWN_RULE] forKey:@"DOM_UNKNOWN_RULE"];
[d setObject:[Number numberWithDouble:DOM_UNORDERED_NODE_ITERATOR_TYPE] forKey:@"DOM_UNORDERED_NODE_ITERATOR_TYPE"];
[d setObject:[Number numberWithDouble:DOM_UNORDERED_NODE_SNAPSHOT_TYPE] forKey:@"DOM_UNORDERED_NODE_SNAPSHOT_TYPE"];
[d setObject:[Number numberWithDouble:DOM_UNSPECIFIED_EVENT_TYPE_ERR] forKey:@"DOM_UNSPECIFIED_EVENT_TYPE_ERR"];
[d setObject:[Number numberWithDouble:DOM_VERTICAL] forKey:@"DOM_VERTICAL"];
[d setObject:[Number numberWithDouble:DOM_WRONG_DOCUMENT_ERR] forKey:@"DOM_WRONG_DOCUMENT_ERR"];
[d setObject:[Number numberWithDouble:WebCacheModelDocumentBrowser] forKey:@"WebCacheModelDocumentBrowser"];
[d setObject:[Number numberWithDouble:WebCacheModelDocumentViewer] forKey:@"WebCacheModelDocumentViewer"];
[d setObject:[Number numberWithDouble:WebCacheModelPrimaryWebBrowser] forKey:@"WebCacheModelPrimaryWebBrowser"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionAny] forKey:@"WebDragDestinationActionAny"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionDHTML] forKey:@"WebDragDestinationActionDHTML"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionEdit] forKey:@"WebDragDestinationActionEdit"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionLoad] forKey:@"WebDragDestinationActionLoad"];
[d setObject:[Number numberWithDouble:WebDragDestinationActionNone] forKey:@"WebDragDestinationActionNone"];
[d setObject:[Number numberWithDouble:WebDragSourceActionAny] forKey:@"WebDragSourceActionAny"];
[d setObject:[Number numberWithDouble:WebDragSourceActionDHTML] forKey:@"WebDragSourceActionDHTML"];
[d setObject:[Number numberWithDouble:WebDragSourceActionImage] forKey:@"WebDragSourceActionImage"];
[d setObject:[Number numberWithDouble:WebDragSourceActionLink] forKey:@"WebDragSourceActionLink"];
[d setObject:[Number numberWithDouble:WebDragSourceActionNone] forKey:@"WebDragSourceActionNone"];
[d setObject:[Number numberWithDouble:WebDragSourceActionSelection] forKey:@"WebDragSourceActionSelection"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeBoolean] forKey:@"WebJNIReturnTypeBoolean"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeByte] forKey:@"WebJNIReturnTypeByte"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeChar] forKey:@"WebJNIReturnTypeChar"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeDouble] forKey:@"WebJNIReturnTypeDouble"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeFloat] forKey:@"WebJNIReturnTypeFloat"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeInt] forKey:@"WebJNIReturnTypeInt"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeInvalid] forKey:@"WebJNIReturnTypeInvalid"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeLong] forKey:@"WebJNIReturnTypeLong"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeObject] forKey:@"WebJNIReturnTypeObject"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeShort] forKey:@"WebJNIReturnTypeShort"];
[d setObject:[Number numberWithDouble:WebJNIReturnTypeVoid] forKey:@"WebJNIReturnTypeVoid"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotFindPlugIn] forKey:@"WebKitErrorCannotFindPlugIn"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotLoadPlugIn] forKey:@"WebKitErrorCannotLoadPlugIn"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotShowMIMEType] forKey:@"WebKitErrorCannotShowMIMEType"];
[d setObject:[Number numberWithDouble:WebKitErrorCannotShowURL] forKey:@"WebKitErrorCannotShowURL"];
[d setObject:[Number numberWithDouble:WebKitErrorFrameLoadInterruptedByPolicyChange] forKey:@"WebKitErrorFrameLoadInterruptedByPolicyChange"];
[d setObject:[Number numberWithDouble:WebKitErrorJavaUnavailable] forKey:@"WebKitErrorJavaUnavailable"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFActualSize] forKey:@"WebMenuItemPDFActualSize"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFAutoSize] forKey:@"WebMenuItemPDFAutoSize"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFContinuous] forKey:@"WebMenuItemPDFContinuous"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFFacingPages] forKey:@"WebMenuItemPDFFacingPages"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFNextPage] forKey:@"WebMenuItemPDFNextPage"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFPreviousPage] forKey:@"WebMenuItemPDFPreviousPage"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFSinglePage] forKey:@"WebMenuItemPDFSinglePage"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFZoomIn] forKey:@"WebMenuItemPDFZoomIn"];
[d setObject:[Number numberWithDouble:WebMenuItemPDFZoomOut] forKey:@"WebMenuItemPDFZoomOut"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCopy] forKey:@"WebMenuItemTagCopy"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCopyImageToClipboard] forKey:@"WebMenuItemTagCopyImageToClipboard"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCopyLinkToClipboard] forKey:@"WebMenuItemTagCopyLinkToClipboard"];
[d setObject:[Number numberWithDouble:WebMenuItemTagCut] forKey:@"WebMenuItemTagCut"];
[d setObject:[Number numberWithDouble:WebMenuItemTagDownloadImageToDisk] forKey:@"WebMenuItemTagDownloadImageToDisk"];
[d setObject:[Number numberWithDouble:WebMenuItemTagDownloadLinkToDisk] forKey:@"WebMenuItemTagDownloadLinkToDisk"];
[d setObject:[Number numberWithDouble:WebMenuItemTagGoBack] forKey:@"WebMenuItemTagGoBack"];
[d setObject:[Number numberWithDouble:WebMenuItemTagGoForward] forKey:@"WebMenuItemTagGoForward"];
[d setObject:[Number numberWithDouble:WebMenuItemTagIgnoreSpelling] forKey:@"WebMenuItemTagIgnoreSpelling"];
[d setObject:[Number numberWithDouble:WebMenuItemTagLearnSpelling] forKey:@"WebMenuItemTagLearnSpelling"];
[d setObject:[Number numberWithDouble:WebMenuItemTagLookUpInDictionary] forKey:@"WebMenuItemTagLookUpInDictionary"];
[d setObject:[Number numberWithDouble:WebMenuItemTagNoGuessesFound] forKey:@"WebMenuItemTagNoGuessesFound"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenFrameInNewWindow] forKey:@"WebMenuItemTagOpenFrameInNewWindow"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenImageInNewWindow] forKey:@"WebMenuItemTagOpenImageInNewWindow"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenLinkInNewWindow] forKey:@"WebMenuItemTagOpenLinkInNewWindow"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOpenWithDefaultApplication] forKey:@"WebMenuItemTagOpenWithDefaultApplication"];
[d setObject:[Number numberWithDouble:WebMenuItemTagOther] forKey:@"WebMenuItemTagOther"];
[d setObject:[Number numberWithDouble:WebMenuItemTagPaste] forKey:@"WebMenuItemTagPaste"];
[d setObject:[Number numberWithDouble:WebMenuItemTagReload] forKey:@"WebMenuItemTagReload"];
[d setObject:[Number numberWithDouble:WebMenuItemTagSearchInSpotlight] forKey:@"WebMenuItemTagSearchInSpotlight"];
[d setObject:[Number numberWithDouble:WebMenuItemTagSearchWeb] forKey:@"WebMenuItemTagSearchWeb"];
[d setObject:[Number numberWithDouble:WebMenuItemTagSpellingGuess] forKey:@"WebMenuItemTagSpellingGuess"];
[d setObject:[Number numberWithDouble:WebMenuItemTagStop] forKey:@"WebMenuItemTagStop"];
[d setObject:[Number numberWithDouble:WebNavigationTypeBackForward] forKey:@"WebNavigationTypeBackForward"];
[d setObject:[Number numberWithDouble:WebNavigationTypeFormResubmitted] forKey:@"WebNavigationTypeFormResubmitted"];
[d setObject:[Number numberWithDouble:WebNavigationTypeFormSubmitted] forKey:@"WebNavigationTypeFormSubmitted"];
[d setObject:[Number numberWithDouble:WebNavigationTypeLinkClicked] forKey:@"WebNavigationTypeLinkClicked"];
[d setObject:[Number numberWithDouble:WebNavigationTypeOther] forKey:@"WebNavigationTypeOther"];
[d setObject:[Number numberWithDouble:WebNavigationTypeReload] forKey:@"WebNavigationTypeReload"];
[d setObject:[Number numberWithDouble:WebViewInsertActionDropped] forKey:@"WebViewInsertActionDropped"];
[d setObject:[Number numberWithDouble:WebViewInsertActionPasted] forKey:@"WebViewInsertActionPasted"];
[d setObject:[Number numberWithDouble:WebViewInsertActionTyped] forKey:@"WebViewInsertActionTyped"];
if ([XGActionMonitorResultsOutputFilesKey isKindOfClass:[NSString class]]) [d setObject:XGActionMonitorResultsOutputFilesKey forKey:@"XGActionMonitorResultsOutputFilesKey"]; else NSLog([@"Can't initialize XGActionMonitorResultsOutputFilesKey with object " stringByAppendingString:[XGActionMonitorResultsOutputFilesKey description]]);
if ([XGActionMonitorResultsOutputStreamsKey isKindOfClass:[NSString class]]) [d setObject:XGActionMonitorResultsOutputStreamsKey forKey:@"XGActionMonitorResultsOutputStreamsKey"]; else NSLog([@"Can't initialize XGActionMonitorResultsOutputStreamsKey with object " stringByAppendingString:[XGActionMonitorResultsOutputStreamsKey description]]);
if ([XGConnectionKeyIsClosed isKindOfClass:[NSString class]]) [d setObject:XGConnectionKeyIsClosed forKey:@"XGConnectionKeyIsClosed"]; else NSLog([@"Can't initialize XGConnectionKeyIsClosed with object " stringByAppendingString:[XGConnectionKeyIsClosed description]]);
if ([XGConnectionKeyIsOpened isKindOfClass:[NSString class]]) [d setObject:XGConnectionKeyIsOpened forKey:@"XGConnectionKeyIsOpened"]; else NSLog([@"Can't initialize XGConnectionKeyIsOpened with object " stringByAppendingString:[XGConnectionKeyIsOpened description]]);
if ([XGConnectionKeyState isKindOfClass:[NSString class]]) [d setObject:XGConnectionKeyState forKey:@"XGConnectionKeyState"]; else NSLog([@"Can't initialize XGConnectionKeyState with object " stringByAppendingString:[XGConnectionKeyState description]]);
if ([XGControllerWillDeallocNotification isKindOfClass:[NSString class]]) [d setObject:XGControllerWillDeallocNotification forKey:@"XGControllerWillDeallocNotification"]; else NSLog([@"Can't initialize XGControllerWillDeallocNotification with object " stringByAppendingString:[XGControllerWillDeallocNotification description]]);
if ([XGFileStandardErrorPath isKindOfClass:[NSString class]]) [d setObject:XGFileStandardErrorPath forKey:@"XGFileStandardErrorPath"]; else NSLog([@"Can't initialize XGFileStandardErrorPath with object " stringByAppendingString:[XGFileStandardErrorPath description]]);
if ([XGFileStandardOutputPath isKindOfClass:[NSString class]]) [d setObject:XGFileStandardOutputPath forKey:@"XGFileStandardOutputPath"]; else NSLog([@"Can't initialize XGFileStandardOutputPath with object " stringByAppendingString:[XGFileStandardOutputPath description]]);
if ([XGJobSpecificationARTConditionsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTConditionsKey forKey:@"XGJobSpecificationARTConditionsKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTConditionsKey with object " stringByAppendingString:[XGJobSpecificationARTConditionsKey description]]);
if ([XGJobSpecificationARTDataKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTDataKey forKey:@"XGJobSpecificationARTDataKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTDataKey with object " stringByAppendingString:[XGJobSpecificationARTDataKey description]]);
if ([XGJobSpecificationARTEqualKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTEqualKey forKey:@"XGJobSpecificationARTEqualKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTEqualKey with object " stringByAppendingString:[XGJobSpecificationARTEqualKey description]]);
if ([XGJobSpecificationARTMaximumKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTMaximumKey forKey:@"XGJobSpecificationARTMaximumKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTMaximumKey with object " stringByAppendingString:[XGJobSpecificationARTMaximumKey description]]);
if ([XGJobSpecificationARTMinimumKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTMinimumKey forKey:@"XGJobSpecificationARTMinimumKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTMinimumKey with object " stringByAppendingString:[XGJobSpecificationARTMinimumKey description]]);
if ([XGJobSpecificationARTSpecificationsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTSpecificationsKey forKey:@"XGJobSpecificationARTSpecificationsKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTSpecificationsKey with object " stringByAppendingString:[XGJobSpecificationARTSpecificationsKey description]]);
if ([XGJobSpecificationApplicationIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationApplicationIdentifierKey forKey:@"XGJobSpecificationApplicationIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationApplicationIdentifierKey with object " stringByAppendingString:[XGJobSpecificationApplicationIdentifierKey description]]);
if ([XGJobSpecificationArgumentTypeKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationArgumentTypeKey forKey:@"XGJobSpecificationArgumentTypeKey"]; else NSLog([@"Can't initialize XGJobSpecificationArgumentTypeKey with object " stringByAppendingString:[XGJobSpecificationArgumentTypeKey description]]);
if ([XGJobSpecificationArgumentsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationArgumentsKey forKey:@"XGJobSpecificationArgumentsKey"]; else NSLog([@"Can't initialize XGJobSpecificationArgumentsKey with object " stringByAppendingString:[XGJobSpecificationArgumentsKey description]]);
if ([XGJobSpecificationCommandKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationCommandKey forKey:@"XGJobSpecificationCommandKey"]; else NSLog([@"Can't initialize XGJobSpecificationCommandKey with object " stringByAppendingString:[XGJobSpecificationCommandKey description]]);
if ([XGJobSpecificationDependsOnJobsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationDependsOnJobsKey forKey:@"XGJobSpecificationDependsOnJobsKey"]; else NSLog([@"Can't initialize XGJobSpecificationDependsOnJobsKey with object " stringByAppendingString:[XGJobSpecificationDependsOnJobsKey description]]);
if ([XGJobSpecificationDependsOnTasksKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationDependsOnTasksKey forKey:@"XGJobSpecificationDependsOnTasksKey"]; else NSLog([@"Can't initialize XGJobSpecificationDependsOnTasksKey with object " stringByAppendingString:[XGJobSpecificationDependsOnTasksKey description]]);
if ([XGJobSpecificationEnvironmentKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationEnvironmentKey forKey:@"XGJobSpecificationEnvironmentKey"]; else NSLog([@"Can't initialize XGJobSpecificationEnvironmentKey with object " stringByAppendingString:[XGJobSpecificationEnvironmentKey description]]);
if ([XGJobSpecificationFileDataKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationFileDataKey forKey:@"XGJobSpecificationFileDataKey"]; else NSLog([@"Can't initialize XGJobSpecificationFileDataKey with object " stringByAppendingString:[XGJobSpecificationFileDataKey description]]);
if ([XGJobSpecificationGridIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationGridIdentifierKey forKey:@"XGJobSpecificationGridIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationGridIdentifierKey with object " stringByAppendingString:[XGJobSpecificationGridIdentifierKey description]]);
if ([XGJobSpecificationInputFileMapKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationInputFileMapKey forKey:@"XGJobSpecificationInputFileMapKey"]; else NSLog([@"Can't initialize XGJobSpecificationInputFileMapKey with object " stringByAppendingString:[XGJobSpecificationInputFileMapKey description]]);
if ([XGJobSpecificationInputFilesKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationInputFilesKey forKey:@"XGJobSpecificationInputFilesKey"]; else NSLog([@"Can't initialize XGJobSpecificationInputFilesKey with object " stringByAppendingString:[XGJobSpecificationInputFilesKey description]]);
if ([XGJobSpecificationInputStreamKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationInputStreamKey forKey:@"XGJobSpecificationInputStreamKey"]; else NSLog([@"Can't initialize XGJobSpecificationInputStreamKey with object " stringByAppendingString:[XGJobSpecificationInputStreamKey description]]);
if ([XGJobSpecificationIsExecutableKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationIsExecutableKey forKey:@"XGJobSpecificationIsExecutableKey"]; else NSLog([@"Can't initialize XGJobSpecificationIsExecutableKey with object " stringByAppendingString:[XGJobSpecificationIsExecutableKey description]]);
if ([XGJobSpecificationNameKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationNameKey forKey:@"XGJobSpecificationNameKey"]; else NSLog([@"Can't initialize XGJobSpecificationNameKey with object " stringByAppendingString:[XGJobSpecificationNameKey description]]);
if ([XGJobSpecificationNotificationEmailKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationNotificationEmailKey forKey:@"XGJobSpecificationNotificationEmailKey"]; else NSLog([@"Can't initialize XGJobSpecificationNotificationEmailKey with object " stringByAppendingString:[XGJobSpecificationNotificationEmailKey description]]);
if ([XGJobSpecificationPathIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationPathIdentifierKey forKey:@"XGJobSpecificationPathIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationPathIdentifierKey with object " stringByAppendingString:[XGJobSpecificationPathIdentifierKey description]]);
if ([XGJobSpecificationSchedulerHintsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationSchedulerHintsKey forKey:@"XGJobSpecificationSchedulerHintsKey"]; else NSLog([@"Can't initialize XGJobSpecificationSchedulerHintsKey with object " stringByAppendingString:[XGJobSpecificationSchedulerHintsKey description]]);
if ([XGJobSpecificationSchedulerParametersKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationSchedulerParametersKey forKey:@"XGJobSpecificationSchedulerParametersKey"]; else NSLog([@"Can't initialize XGJobSpecificationSchedulerParametersKey with object " stringByAppendingString:[XGJobSpecificationSchedulerParametersKey description]]);
if ([XGJobSpecificationSubmissionIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationSubmissionIdentifierKey forKey:@"XGJobSpecificationSubmissionIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationSubmissionIdentifierKey with object " stringByAppendingString:[XGJobSpecificationSubmissionIdentifierKey description]]);
if ([XGJobSpecificationTaskPrototypeIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTaskPrototypeIdentifierKey forKey:@"XGJobSpecificationTaskPrototypeIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationTaskPrototypeIdentifierKey with object " stringByAppendingString:[XGJobSpecificationTaskPrototypeIdentifierKey description]]);
if ([XGJobSpecificationTaskPrototypesKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTaskPrototypesKey forKey:@"XGJobSpecificationTaskPrototypesKey"]; else NSLog([@"Can't initialize XGJobSpecificationTaskPrototypesKey with object " stringByAppendingString:[XGJobSpecificationTaskPrototypesKey description]]);
if ([XGJobSpecificationTaskSpecificationsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTaskSpecificationsKey forKey:@"XGJobSpecificationTaskSpecificationsKey"]; else NSLog([@"Can't initialize XGJobSpecificationTaskSpecificationsKey with object " stringByAppendingString:[XGJobSpecificationTaskSpecificationsKey description]]);
if ([XGJobSpecificationTypeKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTypeKey forKey:@"XGJobSpecificationTypeKey"]; else NSLog([@"Can't initialize XGJobSpecificationTypeKey with object " stringByAppendingString:[XGJobSpecificationTypeKey description]]);
if ([XGJobSpecificationTypeTaskListValue isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTypeTaskListValue forKey:@"XGJobSpecificationTypeTaskListValue"]; else NSLog([@"Can't initialize XGJobSpecificationTypeTaskListValue with object " stringByAppendingString:[XGJobSpecificationTypeTaskListValue description]]);
[d setObject:[Number numberWithDouble:XGActionMonitorOutcomeFailure] forKey:@"XGActionMonitorOutcomeFailure"];
[d setObject:[Number numberWithDouble:XGActionMonitorOutcomeNone] forKey:@"XGActionMonitorOutcomeNone"];
[d setObject:[Number numberWithDouble:XGActionMonitorOutcomeSuccess] forKey:@"XGActionMonitorOutcomeSuccess"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateAuthenticated] forKey:@"XGAuthenticatorStateAuthenticated"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateAuthenticating] forKey:@"XGAuthenticatorStateAuthenticating"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateFailed] forKey:@"XGAuthenticatorStateFailed"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateUnauthenticated] forKey:@"XGAuthenticatorStateUnauthenticated"];
[d setObject:[Number numberWithDouble:XGConnectionStateClosed] forKey:@"XGConnectionStateClosed"];
[d setObject:[Number numberWithDouble:XGConnectionStateClosing] forKey:@"XGConnectionStateClosing"];
[d setObject:[Number numberWithDouble:XGConnectionStateOpen] forKey:@"XGConnectionStateOpen"];
[d setObject:[Number numberWithDouble:XGConnectionStateOpening] forKey:@"XGConnectionStateOpening"];
[d setObject:[Number numberWithDouble:XGFileTypeNone] forKey:@"XGFileTypeNone"];
[d setObject:[Number numberWithDouble:XGFileTypeRegular] forKey:@"XGFileTypeRegular"];
[d setObject:[Number numberWithDouble:XGFileTypeStream] forKey:@"XGFileTypeStream"];
[d setObject:[Number numberWithDouble:XGResourceActionDelete] forKey:@"XGResourceActionDelete"];
[d setObject:[Number numberWithDouble:XGResourceActionGetOutputFiles] forKey:@"XGResourceActionGetOutputFiles"];
[d setObject:[Number numberWithDouble:XGResourceActionGetOutputStreams] forKey:@"XGResourceActionGetOutputStreams"];
[d setObject:[Number numberWithDouble:XGResourceActionGetSpecification] forKey:@"XGResourceActionGetSpecification"];
[d setObject:[Number numberWithDouble:XGResourceActionMakeDefault] forKey:@"XGResourceActionMakeDefault"];
[d setObject:[Number numberWithDouble:XGResourceActionNone] forKey:@"XGResourceActionNone"];
[d setObject:[Number numberWithDouble:XGResourceActionRename] forKey:@"XGResourceActionRename"];
[d setObject:[Number numberWithDouble:XGResourceActionRestart] forKey:@"XGResourceActionRestart"];
[d setObject:[Number numberWithDouble:XGResourceActionResume] forKey:@"XGResourceActionResume"];
[d setObject:[Number numberWithDouble:XGResourceActionStop] forKey:@"XGResourceActionStop"];
[d setObject:[Number numberWithDouble:XGResourceActionSubmitJob] forKey:@"XGResourceActionSubmitJob"];
[d setObject:[Number numberWithDouble:XGResourceActionSuspend] forKey:@"XGResourceActionSuspend"];
[d setObject:[Number numberWithDouble:XGResourceStateAvailable] forKey:@"XGResourceStateAvailable"];
[d setObject:[Number numberWithDouble:XGResourceStateCanceled] forKey:@"XGResourceStateCanceled"];
[d setObject:[Number numberWithDouble:XGResourceStateConnecting] forKey:@"XGResourceStateConnecting"];
[d setObject:[Number numberWithDouble:XGResourceStateFailed] forKey:@"XGResourceStateFailed"];
[d setObject:[Number numberWithDouble:XGResourceStateFinished] forKey:@"XGResourceStateFinished"];
[d setObject:[Number numberWithDouble:XGResourceStateOffline] forKey:@"XGResourceStateOffline"];
[d setObject:[Number numberWithDouble:XGResourceStatePending] forKey:@"XGResourceStatePending"];
[d setObject:[Number numberWithDouble:XGResourceStateRunning] forKey:@"XGResourceStateRunning"];
[d setObject:[Number numberWithDouble:XGResourceStateStagingIn] forKey:@"XGResourceStateStagingIn"];
[d setObject:[Number numberWithDouble:XGResourceStateStagingOut] forKey:@"XGResourceStateStagingOut"];
[d setObject:[Number numberWithDouble:XGResourceStateStarting] forKey:@"XGResourceStateStarting"];
[d setObject:[Number numberWithDouble:XGResourceStateSuspended] forKey:@"XGResourceStateSuspended"];
[d setObject:[Number numberWithDouble:XGResourceStateUnavailable] forKey:@"XGResourceStateUnavailable"];
[d setObject:[Number numberWithDouble:XGResourceStateUninitialized] forKey:@"XGResourceStateUninitialized"];
[d setObject:[Number numberWithDouble:XGResourceStateWorking] forKey:@"XGResourceStateWorking"];
if ([XGActionMonitorResultsOutputFilesKey isKindOfClass:[NSString class]]) [d setObject:XGActionMonitorResultsOutputFilesKey forKey:@"XGActionMonitorResultsOutputFilesKey"]; else NSLog([@"Can't initialize XGActionMonitorResultsOutputFilesKey with object " stringByAppendingString:[XGActionMonitorResultsOutputFilesKey description]]);
if ([XGActionMonitorResultsOutputStreamsKey isKindOfClass:[NSString class]]) [d setObject:XGActionMonitorResultsOutputStreamsKey forKey:@"XGActionMonitorResultsOutputStreamsKey"]; else NSLog([@"Can't initialize XGActionMonitorResultsOutputStreamsKey with object " stringByAppendingString:[XGActionMonitorResultsOutputStreamsKey description]]);
if ([XGConnectionKeyIsClosed isKindOfClass:[NSString class]]) [d setObject:XGConnectionKeyIsClosed forKey:@"XGConnectionKeyIsClosed"]; else NSLog([@"Can't initialize XGConnectionKeyIsClosed with object " stringByAppendingString:[XGConnectionKeyIsClosed description]]);
if ([XGConnectionKeyIsOpened isKindOfClass:[NSString class]]) [d setObject:XGConnectionKeyIsOpened forKey:@"XGConnectionKeyIsOpened"]; else NSLog([@"Can't initialize XGConnectionKeyIsOpened with object " stringByAppendingString:[XGConnectionKeyIsOpened description]]);
if ([XGConnectionKeyState isKindOfClass:[NSString class]]) [d setObject:XGConnectionKeyState forKey:@"XGConnectionKeyState"]; else NSLog([@"Can't initialize XGConnectionKeyState with object " stringByAppendingString:[XGConnectionKeyState description]]);
if ([XGControllerWillDeallocNotification isKindOfClass:[NSString class]]) [d setObject:XGControllerWillDeallocNotification forKey:@"XGControllerWillDeallocNotification"]; else NSLog([@"Can't initialize XGControllerWillDeallocNotification with object " stringByAppendingString:[XGControllerWillDeallocNotification description]]);
if ([XGFileStandardErrorPath isKindOfClass:[NSString class]]) [d setObject:XGFileStandardErrorPath forKey:@"XGFileStandardErrorPath"]; else NSLog([@"Can't initialize XGFileStandardErrorPath with object " stringByAppendingString:[XGFileStandardErrorPath description]]);
if ([XGFileStandardOutputPath isKindOfClass:[NSString class]]) [d setObject:XGFileStandardOutputPath forKey:@"XGFileStandardOutputPath"]; else NSLog([@"Can't initialize XGFileStandardOutputPath with object " stringByAppendingString:[XGFileStandardOutputPath description]]);
if ([XGJobSpecificationARTConditionsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTConditionsKey forKey:@"XGJobSpecificationARTConditionsKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTConditionsKey with object " stringByAppendingString:[XGJobSpecificationARTConditionsKey description]]);
if ([XGJobSpecificationARTDataKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTDataKey forKey:@"XGJobSpecificationARTDataKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTDataKey with object " stringByAppendingString:[XGJobSpecificationARTDataKey description]]);
if ([XGJobSpecificationARTEqualKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTEqualKey forKey:@"XGJobSpecificationARTEqualKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTEqualKey with object " stringByAppendingString:[XGJobSpecificationARTEqualKey description]]);
if ([XGJobSpecificationARTMaximumKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTMaximumKey forKey:@"XGJobSpecificationARTMaximumKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTMaximumKey with object " stringByAppendingString:[XGJobSpecificationARTMaximumKey description]]);
if ([XGJobSpecificationARTMinimumKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTMinimumKey forKey:@"XGJobSpecificationARTMinimumKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTMinimumKey with object " stringByAppendingString:[XGJobSpecificationARTMinimumKey description]]);
if ([XGJobSpecificationARTSpecificationsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationARTSpecificationsKey forKey:@"XGJobSpecificationARTSpecificationsKey"]; else NSLog([@"Can't initialize XGJobSpecificationARTSpecificationsKey with object " stringByAppendingString:[XGJobSpecificationARTSpecificationsKey description]]);
if ([XGJobSpecificationApplicationIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationApplicationIdentifierKey forKey:@"XGJobSpecificationApplicationIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationApplicationIdentifierKey with object " stringByAppendingString:[XGJobSpecificationApplicationIdentifierKey description]]);
if ([XGJobSpecificationArgumentTypeKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationArgumentTypeKey forKey:@"XGJobSpecificationArgumentTypeKey"]; else NSLog([@"Can't initialize XGJobSpecificationArgumentTypeKey with object " stringByAppendingString:[XGJobSpecificationArgumentTypeKey description]]);
if ([XGJobSpecificationArgumentsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationArgumentsKey forKey:@"XGJobSpecificationArgumentsKey"]; else NSLog([@"Can't initialize XGJobSpecificationArgumentsKey with object " stringByAppendingString:[XGJobSpecificationArgumentsKey description]]);
if ([XGJobSpecificationCommandKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationCommandKey forKey:@"XGJobSpecificationCommandKey"]; else NSLog([@"Can't initialize XGJobSpecificationCommandKey with object " stringByAppendingString:[XGJobSpecificationCommandKey description]]);
if ([XGJobSpecificationDependsOnJobsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationDependsOnJobsKey forKey:@"XGJobSpecificationDependsOnJobsKey"]; else NSLog([@"Can't initialize XGJobSpecificationDependsOnJobsKey with object " stringByAppendingString:[XGJobSpecificationDependsOnJobsKey description]]);
if ([XGJobSpecificationDependsOnTasksKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationDependsOnTasksKey forKey:@"XGJobSpecificationDependsOnTasksKey"]; else NSLog([@"Can't initialize XGJobSpecificationDependsOnTasksKey with object " stringByAppendingString:[XGJobSpecificationDependsOnTasksKey description]]);
if ([XGJobSpecificationEnvironmentKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationEnvironmentKey forKey:@"XGJobSpecificationEnvironmentKey"]; else NSLog([@"Can't initialize XGJobSpecificationEnvironmentKey with object " stringByAppendingString:[XGJobSpecificationEnvironmentKey description]]);
if ([XGJobSpecificationFileDataKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationFileDataKey forKey:@"XGJobSpecificationFileDataKey"]; else NSLog([@"Can't initialize XGJobSpecificationFileDataKey with object " stringByAppendingString:[XGJobSpecificationFileDataKey description]]);
if ([XGJobSpecificationGridIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationGridIdentifierKey forKey:@"XGJobSpecificationGridIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationGridIdentifierKey with object " stringByAppendingString:[XGJobSpecificationGridIdentifierKey description]]);
if ([XGJobSpecificationInputFileMapKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationInputFileMapKey forKey:@"XGJobSpecificationInputFileMapKey"]; else NSLog([@"Can't initialize XGJobSpecificationInputFileMapKey with object " stringByAppendingString:[XGJobSpecificationInputFileMapKey description]]);
if ([XGJobSpecificationInputFilesKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationInputFilesKey forKey:@"XGJobSpecificationInputFilesKey"]; else NSLog([@"Can't initialize XGJobSpecificationInputFilesKey with object " stringByAppendingString:[XGJobSpecificationInputFilesKey description]]);
if ([XGJobSpecificationInputStreamKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationInputStreamKey forKey:@"XGJobSpecificationInputStreamKey"]; else NSLog([@"Can't initialize XGJobSpecificationInputStreamKey with object " stringByAppendingString:[XGJobSpecificationInputStreamKey description]]);
if ([XGJobSpecificationIsExecutableKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationIsExecutableKey forKey:@"XGJobSpecificationIsExecutableKey"]; else NSLog([@"Can't initialize XGJobSpecificationIsExecutableKey with object " stringByAppendingString:[XGJobSpecificationIsExecutableKey description]]);
if ([XGJobSpecificationNameKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationNameKey forKey:@"XGJobSpecificationNameKey"]; else NSLog([@"Can't initialize XGJobSpecificationNameKey with object " stringByAppendingString:[XGJobSpecificationNameKey description]]);
if ([XGJobSpecificationNotificationEmailKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationNotificationEmailKey forKey:@"XGJobSpecificationNotificationEmailKey"]; else NSLog([@"Can't initialize XGJobSpecificationNotificationEmailKey with object " stringByAppendingString:[XGJobSpecificationNotificationEmailKey description]]);
if ([XGJobSpecificationPathIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationPathIdentifierKey forKey:@"XGJobSpecificationPathIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationPathIdentifierKey with object " stringByAppendingString:[XGJobSpecificationPathIdentifierKey description]]);
if ([XGJobSpecificationSchedulerHintsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationSchedulerHintsKey forKey:@"XGJobSpecificationSchedulerHintsKey"]; else NSLog([@"Can't initialize XGJobSpecificationSchedulerHintsKey with object " stringByAppendingString:[XGJobSpecificationSchedulerHintsKey description]]);
if ([XGJobSpecificationSchedulerParametersKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationSchedulerParametersKey forKey:@"XGJobSpecificationSchedulerParametersKey"]; else NSLog([@"Can't initialize XGJobSpecificationSchedulerParametersKey with object " stringByAppendingString:[XGJobSpecificationSchedulerParametersKey description]]);
if ([XGJobSpecificationSubmissionIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationSubmissionIdentifierKey forKey:@"XGJobSpecificationSubmissionIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationSubmissionIdentifierKey with object " stringByAppendingString:[XGJobSpecificationSubmissionIdentifierKey description]]);
if ([XGJobSpecificationTaskPrototypeIdentifierKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTaskPrototypeIdentifierKey forKey:@"XGJobSpecificationTaskPrototypeIdentifierKey"]; else NSLog([@"Can't initialize XGJobSpecificationTaskPrototypeIdentifierKey with object " stringByAppendingString:[XGJobSpecificationTaskPrototypeIdentifierKey description]]);
if ([XGJobSpecificationTaskPrototypesKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTaskPrototypesKey forKey:@"XGJobSpecificationTaskPrototypesKey"]; else NSLog([@"Can't initialize XGJobSpecificationTaskPrototypesKey with object " stringByAppendingString:[XGJobSpecificationTaskPrototypesKey description]]);
if ([XGJobSpecificationTaskSpecificationsKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTaskSpecificationsKey forKey:@"XGJobSpecificationTaskSpecificationsKey"]; else NSLog([@"Can't initialize XGJobSpecificationTaskSpecificationsKey with object " stringByAppendingString:[XGJobSpecificationTaskSpecificationsKey description]]);
if ([XGJobSpecificationTypeKey isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTypeKey forKey:@"XGJobSpecificationTypeKey"]; else NSLog([@"Can't initialize XGJobSpecificationTypeKey with object " stringByAppendingString:[XGJobSpecificationTypeKey description]]);
if ([XGJobSpecificationTypeTaskListValue isKindOfClass:[NSString class]]) [d setObject:XGJobSpecificationTypeTaskListValue forKey:@"XGJobSpecificationTypeTaskListValue"]; else NSLog([@"Can't initialize XGJobSpecificationTypeTaskListValue with object " stringByAppendingString:[XGJobSpecificationTypeTaskListValue description]]);
[d setObject:[Number numberWithDouble:XGActionMonitorOutcomeFailure] forKey:@"XGActionMonitorOutcomeFailure"];
[d setObject:[Number numberWithDouble:XGActionMonitorOutcomeNone] forKey:@"XGActionMonitorOutcomeNone"];
[d setObject:[Number numberWithDouble:XGActionMonitorOutcomeSuccess] forKey:@"XGActionMonitorOutcomeSuccess"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateAuthenticated] forKey:@"XGAuthenticatorStateAuthenticated"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateAuthenticating] forKey:@"XGAuthenticatorStateAuthenticating"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateFailed] forKey:@"XGAuthenticatorStateFailed"];
[d setObject:[Number numberWithDouble:XGAuthenticatorStateUnauthenticated] forKey:@"XGAuthenticatorStateUnauthenticated"];
[d setObject:[Number numberWithDouble:XGConnectionStateClosed] forKey:@"XGConnectionStateClosed"];
[d setObject:[Number numberWithDouble:XGConnectionStateClosing] forKey:@"XGConnectionStateClosing"];
[d setObject:[Number numberWithDouble:XGConnectionStateOpen] forKey:@"XGConnectionStateOpen"];
[d setObject:[Number numberWithDouble:XGConnectionStateOpening] forKey:@"XGConnectionStateOpening"];
[d setObject:[Number numberWithDouble:XGFileTypeNone] forKey:@"XGFileTypeNone"];
[d setObject:[Number numberWithDouble:XGFileTypeRegular] forKey:@"XGFileTypeRegular"];
[d setObject:[Number numberWithDouble:XGFileTypeStream] forKey:@"XGFileTypeStream"];
[d setObject:[Number numberWithDouble:XGResourceActionDelete] forKey:@"XGResourceActionDelete"];
[d setObject:[Number numberWithDouble:XGResourceActionGetOutputFiles] forKey:@"XGResourceActionGetOutputFiles"];
[d setObject:[Number numberWithDouble:XGResourceActionGetOutputStreams] forKey:@"XGResourceActionGetOutputStreams"];
[d setObject:[Number numberWithDouble:XGResourceActionGetSpecification] forKey:@"XGResourceActionGetSpecification"];
[d setObject:[Number numberWithDouble:XGResourceActionMakeDefault] forKey:@"XGResourceActionMakeDefault"];
[d setObject:[Number numberWithDouble:XGResourceActionNone] forKey:@"XGResourceActionNone"];
[d setObject:[Number numberWithDouble:XGResourceActionRename] forKey:@"XGResourceActionRename"];
[d setObject:[Number numberWithDouble:XGResourceActionRestart] forKey:@"XGResourceActionRestart"];
[d setObject:[Number numberWithDouble:XGResourceActionResume] forKey:@"XGResourceActionResume"];
[d setObject:[Number numberWithDouble:XGResourceActionStop] forKey:@"XGResourceActionStop"];
[d setObject:[Number numberWithDouble:XGResourceActionSubmitJob] forKey:@"XGResourceActionSubmitJob"];
[d setObject:[Number numberWithDouble:XGResourceActionSuspend] forKey:@"XGResourceActionSuspend"];
[d setObject:[Number numberWithDouble:XGResourceStateAvailable] forKey:@"XGResourceStateAvailable"];
[d setObject:[Number numberWithDouble:XGResourceStateCanceled] forKey:@"XGResourceStateCanceled"];
[d setObject:[Number numberWithDouble:XGResourceStateConnecting] forKey:@"XGResourceStateConnecting"];
[d setObject:[Number numberWithDouble:XGResourceStateFailed] forKey:@"XGResourceStateFailed"];
[d setObject:[Number numberWithDouble:XGResourceStateFinished] forKey:@"XGResourceStateFinished"];
[d setObject:[Number numberWithDouble:XGResourceStateOffline] forKey:@"XGResourceStateOffline"];
[d setObject:[Number numberWithDouble:XGResourceStatePending] forKey:@"XGResourceStatePending"];
[d setObject:[Number numberWithDouble:XGResourceStateRunning] forKey:@"XGResourceStateRunning"];
[d setObject:[Number numberWithDouble:XGResourceStateStagingIn] forKey:@"XGResourceStateStagingIn"];
[d setObject:[Number numberWithDouble:XGResourceStateStagingOut] forKey:@"XGResourceStateStagingOut"];
[d setObject:[Number numberWithDouble:XGResourceStateStarting] forKey:@"XGResourceStateStarting"];
[d setObject:[Number numberWithDouble:XGResourceStateSuspended] forKey:@"XGResourceStateSuspended"];
[d setObject:[Number numberWithDouble:XGResourceStateUnavailable] forKey:@"XGResourceStateUnavailable"];
[d setObject:[Number numberWithDouble:XGResourceStateUninitialized] forKey:@"XGResourceStateUninitialized"];
[d setObject:[Number numberWithDouble:XGResourceStateWorking] forKey:@"XGResourceStateWorking"];

*/
  return [NSKeyedArchiver archiveRootObject:d toFile:@"/Users/pmougin/constantsDictionary"]; 
}
 

@end
